/**
 * mmeddle.js 
 * https://github.com/jfogarty/mmeddle
 *
 * mmeddle.js is a symbolic math workspace for JavaScript and Node.js.
 *
 * @version 0.1.5
 * @date    2015-08-02
 *
 * @license
 * Copyright (C) 2015 John Fogarty <johnhenryfogarty@gmail.com> (https://github.com/jfogarty)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define(factory);
	else if(typeof exports === 'object')
		exports["mmeddle"] = factory();
	else
		root["mmeddle"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./src/mmeddle.js */ 1);


/***/ },
/* 1 */
/*!************************!*\
  !*** ./src/mmeddle.js ***!
  \************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __dirname, global) {/**
	 * @fileOverview the mMeddle global declaration and linkage constructor.
	 * @module mMeddle
	 */

	'use strict'; 
	/**
	 * @summary **The mmeddle.js factory function**
	 * @description
	 * This populates and returns `mmeddle` (usually referred to as `mm`) with
	 * the core 'globals' that tie together mMeddle applications. Almost
	 * every mMeddle module is a function that takes `mm`. The index.js files
	 * for each directory usually populate sub-sections of `mm` with the
	 * classes and functions defined by the modules of that directory.
	 */ 
	module.exports = (function mMeddleCreate() {
	  var mm = {};

	  // Test for ES5 support
	  /* istanbul ignore if */
	  if (typeof Object.create !== 'function') {
	   throw new Error('ES5 not supported by this JavaScript engine. ' +
	        'Please load the es5-shim and es5-sham library for compatibility.');
	  }

	  // Globally register the execution environment for testing by the sub-modules.
	  var inNode = !!(typeof window === 'undefined' &&
	               typeof process !== 'undefined' &&
	               process.nextTick);
	  var inBrowser = !inNode;
	  var inPhantom = false;
	  
	  mm.check = function(v) {
	    /* istanbul ignore if */ // Tested independently and repeatedly.
	    if (typeof v === 'undefined' || !v) {
	      console.log( '*** Uninitialized mMeddle linkage. Abandon all hope.');
	      throw new Error('Uninitialized mMeddle linkage. Abandon all hope.');
	    }
	    return v;
	  }
	  
	  // WebPack fooling.
	  mm.nodeRequire = function(s) {
	    return __webpack_require__(/*! . */ 3)(s);
	  }

	  mm._ = __webpack_require__(/*! lodash */ 543); // The underscore utility library.
	  mm.Q = __webpack_require__(/*! q */ 534); // Promises compatible with node and browsers.
	  mm.Q.longStackSupport = true;

	  mm.socketServer = {};
	  mm.socketClient = {};  
	  mm.socketClient.io = __webpack_require__(/*! socket.io-client */ 536);

	  mm.config = {};  
	  mm.config.appName   = '';
	  mm.config.inBrowser = inBrowser;
	  mm.config.inNode    = inNode;
	  mm.config.socketIoLogLevel = 2; // 0 - error, 1 - warn, 2 - info, 3 - debug

	  /* istanbul ignore next */
	  mm.envText = inNode ? 'Node.js' : 'Browser';

	  mm.path = __webpack_require__(/*! path */ 537);  
	  mm.url  = __webpack_require__(/*! url */ 538);

	  mm.config.baseDir = __dirname;
	  mm.config.openShiftHost = 'mmeddle-jfogarty.rhcloud.com';
	  mm.config.localPort = '8080';
	  mm.config.localHost = '127.0.0.1';
	  mm.config.remoteUrl = 'ws://mmeddle-jfogarty.rhcloud.com:8000/';
	  
	  /* istanbul ignore else */ // Tested in browser.
	  if (inNode) {
	    mm.config.baseDir = mm.path.join(__dirname, '..');
	    mm.fs     = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    mm.del    = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"del\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    mm.mkdirp = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"mkdirp\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    mm.socketServer.io = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"socket.io\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    // mm.canvas = require('canvas');
	  }
	  else {
	    // There is not even a mock window when running in node.
	    mm.window   = window;   // jshint ignore:line
	    mm.document = document; // jshint ignore:line
	  }

	  mm.config.distDir = mm.path.join(mm.config.baseDir, 'dist');
	  mm.config.logDir  = mm.path.join(mm.config.baseDir, 'logs');

	  /* istanbul ignore if */
	  if (inBrowser) {
	    var userAgent = navigator.userAgent;
	    inPhantom = userAgent.indexOf('PhantomJS') >= 0;
	    mm.config.inPhantom = inPhantom;
	    if (inPhantom) {
	      mm.envText += '-PhantomJS';
	    }
	    mm.envText += '(' + userAgent + ')';
	  }
	  else {
	    mm.config.mainFilename = process.mainModule.filename;
	    mm.config.appName = mm.path.basename(mm.config.mainFilename, '.js');
	    mm.envText += '(' + global.process.version + ')';
	  }
	  
	  /* istanbul ignore next */
	  mm.format = mm.check(__webpack_require__(/*! ../external/sf */ 544));

	  // Self registering modules.
	  __webpack_require__(/*! ./util/ */ 523)(mm);
	  mm.config.openShift  = mm.util.ifEnvOption('OPENSHIFT_NODEJS_IP');
	  
	  // Config.json files can override startLocal. For now, if this is
	  // built on an OpenShift server, then the CLI and webCLI will load
	  // sockets from that server instead of localHost.
	  mm.config.startLocal = !mm.config.openshift;
	  
	  // Turn config pojo into an actual Config object.
	  mm.config = new mm.obj.Config().init(mm.config);
	  
	  __webpack_require__(/*! ./sal/ */ 514)(mm);
	  __webpack_require__(/*! ./mMath/ */ 502)(mm);
	  __webpack_require__(/*! ./core/ */ 13)(mm);
	  
	  /* istanbul ignore else */
	  if (inNode) {
	    __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./server/\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))(mm);
	    mm.log.setupAppDebugLog(mm.config.appName);
	    mm.config = mm.config.appLoad(mm.config.appName);
	  }

	  // Do this after the config.appLoad.
	  mm.config.localUrl  = 'http://' + mm.config.localHost +
	                        ':' + mm.config.localPort;
	                      
	  // When the server starts, it initializes the ./dist/config.js file for
	  // use by web applications.
	  var generatedVersionFile = __webpack_require__(/*! ./version */ 533);
	  mm.version = generatedVersionFile.version;
	  mm.config.mMeddleTS = generatedVersionFile.ts;
	  mm.config.version = mm.version;
	  if (mm.config.inNode) {
	    if (mm.config.appName === 'server') {
	      mm.browserConfig = new mm.obj.Config().init(mm.config);
	      mm.browserConfig.appLoad('browser');
	      mm.browserConfig.serverStartTime = mm.util.timestamp();
	      var jsfunc = '';
	      jsfunc += '// This file was generated by mMeddle ' + mm.version +
	                ' ' + mm.config.appName + ' ' + mm.envText + '\n';
	      jsfunc += '// ' + new Date().toString() + '\n';
	      jsfunc += '// \n';
	      jsfunc += '(function(mm) {\n';
	      jsfunc += '  var config = ' + mm.util.inspect(mm.browserConfig);
	      jsfunc += ';\n\n';
	      jsfunc += '  mm._.assign(mm.config, config);\n';
	      jsfunc += '}(mmeddle))\n';
	      var configFile = mm.path.join(mm.config.distDir, 'config.js');  
	      mm.fs.writeFileSync(configFile, jsfunc);
	    }
	    else {
	      var cfgSave = mm.config;
	      var cfgPath = mm.path.join(mm.config.distDir, 'config.js');
	      mm.clientConfig = {};
	      try {
	        var cfg = String(mm.fs.readFileSync(cfgPath));
	        var mmeddle = mm;
	        // Config.js is a function for execution in a browser script load.
	        mm.config = new mm.obj.Config().init(mm.config);
	        eval(cfg); // jshint ignore:line
	        mm.clientConfig = mm.config;
	      }
	      catch (e) {
	         mm.log.debug('Client config load failed:', e);
	      }
	      mm.config = cfgSave;
	      mm.config.serverStartTime = mm.clientConfig.serverStartTime;
	    }
	  }

	  __webpack_require__(/*! ./test/ */ 517)(mm);
	  mm.log('- mMeddle ' +
	           mm.version + ' ' +
	           mm.config.appName + ' ' +
	           mm.envText + ' initialized.');
	  return mm;
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 2), "/", (function() { return this; }())))

/***/ },
/* 2 */
/*!**********************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/process/browser.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 3 */
/*!**********************!*\
  !*** ./src ^\.\/.*$ ***!
  \**********************/
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./core/CliCommands": 4,
		"./core/CliCommands.js": 4,
		"./core/CliConsole": 5,
		"./core/CliConsole.js": 5,
		"./core/ClientSession": 6,
		"./core/ClientSession.js": 6,
		"./core/ClientSessionUser": 7,
		"./core/ClientSessionUser.js": 7,
		"./core/ClientSessionWorkspace": 8,
		"./core/ClientSessionWorkspace.js": 8,
		"./core/Cmd": 9,
		"./core/Cmd.js": 9,
		"./core/CmdSet": 10,
		"./core/CmdSet.js": 10,
		"./core/MMeddleClient": 11,
		"./core/MMeddleClient.js": 11,
		"./core/Workspace": 12,
		"./core/Workspace.js": 12,
		"./core/index": 13,
		"./core/index.js": 13,
		"./header": 14,
		"./header.js": 14,
		"./mMath/MMath": 15,
		"./mMath/MMath.js": 15,
		"./mMath/Parser": 501,
		"./mMath/Parser.js": 501,
		"./mMath/index": 502,
		"./mMath/index.js": 502,
		"./mMath/nde": 503,
		"./mMath/nde.js": 503,
		"./mmeddle": 1,
		"./mmeddle.js": 1,
		"./sal/ClientProvider": 505,
		"./sal/ClientProvider.js": 505,
		"./sal/ClientUser": 506,
		"./sal/ClientUser.js": 506,
		"./sal/LocalStorage": 508,
		"./sal/LocalStorage.js": 508,
		"./sal/StorageClient": 510,
		"./sal/StorageClient.js": 510,
		"./sal/StorageEngine": 511,
		"./sal/StorageEngine.js": 511,
		"./sal/StorageInfo": 512,
		"./sal/StorageInfo.js": 512,
		"./sal/StoragePath": 513,
		"./sal/StoragePath.js": 513,
		"./sal/index": 514,
		"./sal/index.js": 514,
		"./test/MockSock": 515,
		"./test/MockSock.js": 515,
		"./test/index": 517,
		"./test/index.js": 517,
		"./test/testClientSupport": 518,
		"./test/testClientSupport.js": 518,
		"./util/Config": 519,
		"./util/Config.js": 519,
		"./util/EggTimer": 520,
		"./util/EggTimer.js": 520,
		"./util/Enum": 521,
		"./util/Enum.js": 521,
		"./util/Logger": 522,
		"./util/Logger.js": 522,
		"./util/index": 523,
		"./util/index.js": 523,
		"./util/log": 532,
		"./util/log.js": 532,
		"./util/utilDateTime": 530,
		"./util/utilDateTime.js": 530,
		"./util/utilEnv": 529,
		"./util/utilEnv.js": 529,
		"./util/utilIntArray": 528,
		"./util/utilIntArray.js": 528,
		"./util/utilJSON": 531,
		"./util/utilJSON.js": 531,
		"./util/utilString": 527,
		"./util/utilString.js": 527,
		"./version": 533,
		"./version.js": 533
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 3;


/***/ },
/* 4 */
/*!*********************************!*\
  !*** ./src/core/CliCommands.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	/**
	 * @fileOverview CLI command handlers
	 * @module core/CliCommands
	 */ 
	module.exports = function registerCliCommands(mm) {
	  var check      = mm.check;
	  var _          = check(mm._);
	  var qq         = check(mm.Q);
	  var CmdSet     = check(mm.core.CmdSet);
	  
	  /**
	   * @summary **CLI command handlers**
	   * @description
	   * Provides a common interface for node client and browser based CLI
	   * implementations.
	   * @constructor
	   * @param {CliConsole} mConsole the current console.
	   * @param {ClientSession} cs the current client session.
	   * @returns {CliCommands} the cli command handlers.
	   */  
	  var CliCommands = function cliCommandsCtor(mConsole, cs) {
	    var self = this;
	    
	    //------------------------------------------------------------------------
	    //                            Public Methods
	    //------------------------------------------------------------------------
	    
	    /**
	     * @summary **doUserCreate**
	     */    
	    self.doUserCreate = function doUserCreate(newUser, ispdk) {
	      var start = _.now();
	      return cs.userCreate(newUser, ispdk)
	      .then(function (user) {
	        mm.log('- Created new User id [{0}] at {1} in {2} mx',
	            user.name, user.creationDate, _.now() - start);
	        mm.log('- Welcome to mMeddle, {0} {1}.',
	            user.firstName, user.lastName);
	        return user;
	      },
	      /* istanbul ignore next */ // Tested in cli
	      function (e) {
	        mm.log('User creation failed: ', e)
	        return e;
	      });
	    }              

	    /**
	     * @summary **fillNewUser**
	     */    
	    self.fillNewUser = function fillNewUser(userName, ptpwd) {
	      var u = { name: userName };
	      var funcs = [
	      function(u) {
	        return  mConsole.ask('Reenter the password: ', u, 'ptpwd', true)
	      },
	      function(u) {
	        /* istanbul ignore else */ // Tested in cli
	        if (u.ptpwd === ptpwd) return u;
	        ptpwd = '';
	        throw new Error('Passwords do not match. Sorry, start over.');
	      },
	      function(u) {
	        return mConsole.ask('Enter your first name: ', u, 'firstName')
	      },
	      function(u) {
	        return mConsole.ask('Enter your last name: ', u, 'lastName')
	      },
	      function(u) {
	        return mConsole.ask('Enter your contact email address: ', u, 'email')
	      }]
	      
	      var rq = funcs.reduce(qq.when, qq(u));
	      return rq
	    }
	    
	    /**
	     * @summary **loginUser**
	     */    
	    self.loginUser = function loginUser(userName, ptpwd, isPdk) {
	      var start = _.now();
	      return cs.userLogin(userName, ptpwd, isPdk)
	      .then(function (user) {
	        mm.log('- Welcome back to mMeddle, {0} {1}.', 
	            user.firstName, user.lastName);
	        //mm.log('- Logged in ({0} ms). {1:inspect}', user._elapsed, user);
	        mm.log('- Logged in ({0} ms)', _.now() - start);
	        return user;
	      },
	      function (e) {
	        var errString = e.toString();
	        if (mm.util.ENOENT(errString)) {
	          if (isPdk) {
	            mm.log('- User [{0}] not found. Rebuilding deleted user.', userName);
	            // TODO - Add password recheck.
	            return self.doUserCreate(cs.user, isPdk);
	          }
	          else {
	            mm.log('- User [{0}] not found. Creating a new user.', userName);
	            return self.fillNewUser(userName, ptpwd)
	            .then(function (newUser) {
	              mm.log('- Creating new user on server [{0}]...', userName);
	              return self.doUserCreate(newUser);
	            },
	            function (e) {
	              mm.log(e);
	              return e;
	            });
	          }
	        }
	        else {
	          ptpwd = '';
	          //mm.log.error('*** Login failed. [{0}]', errString);
	          return e;
	        }
	      });
	    }
	  
	    /**
	     * @summary **exitCmdHandler**
	     */    
	    /* istanbul ignore next */ // Tested independently.     
	    self.exitCmdHandler = function exitCmdHandler(context, args) {
	      var wsName = cs.ws.name;
	      var displayName = wsName ? ' [' + wsName + ']' : '';
	      if (context.keyword !== 'abort') {
	        cs.saveLocalUser(mConsole);
	        mm.log('- Saved User [{0}] (local)', cs.user.name);
	        cs.saveLocalWorkspace();
	        mm.log('- Saved Workspace{0} (local): {1} variables',
	            displayName, cs.ws.varsCount);
	        if (cs.mmc.connected && cs.loggedIn) {
	          mm.log('- Saving Workspace{0} for {1} to {2}', 
	              displayName, cs.user.name, cs.mmc.host);
	          cs.saveWorkspace()
	          .then(function (rs) {
	            mm.log('- Saved{0} in {1} ms.', displayName, rs._elapsed);
	          });
	        }
	      }
	      if (context.keyword !== 'save') {
	        // exit application
	        if (mm.config.inNode) {
	          mConsole.close();
	          process.exit();
	        }
	        // exit application page (back to home page)
	        else {
	          mm.window.location = '../';
	        }
	      }
	      return true;
	    }
	    
	    /**
	     * @summary **saveCmdHandler**
	     */    
	    self.saveCmdHandler = function saveCmdHandler(context, args) {
	      /* istanbul ignore if */ // Tested independently.
	      if (!cs.loggedIn && !cs.user.isAnonymous()) {
	        mm.log.warn('You are not logged in so this will save only locally.');
	      }
	      var oldName = cs.ws.name;
	      var wsName = args.name ? args.name : oldName;
	      /* istanbul ignore next */ // Tested independently.
	      var displayName = wsName ? ' [' + wsName + ']' : '';
	      cs.saveLocalUser(mConsole);
	      mm.log('- Saved User [{0}] (local)', cs.user.name);
	      /* istanbul ignore if */ // Tested independently.
	      if (oldName && oldName !== wsName) {
	        mm.log('- Renamed workspace from [{0}] to{1}', oldName, displayName);
	      }
	      cs.ws.name = wsName;
	      cs.saveLocalWorkspace();
	      mm.log('- Saved Workspace{0} (local): {1} variables',
	          displayName, cs.ws.varsCount);
	      /* istanbul ignore else */ // Tested independently.
	      if (cs.mmc.connected && cs.loggedIn) {
	        if (cs.ws.saved) {
	          mm.log('- Save Workspace{0} skipped. Already saved.', displayName);
	          return true;
	        }
	        mm.log('- Saving Workspace{0} for {1} to {2}', 
	            displayName, cs.user.name, cs.mmc.host);
	        return cs.saveWorkspace()
	        .then(function (rs) {
	          mm.log('- Saved{0} in {1} ms.', displayName, rs._elapsed);
	          cs.ws.saved = true;
	        });
	      }
	      return true;
	    }

	    /**
	     * @summary **loadCmdHandler**
	     */    
	    self.loadCmdHandler = function loadCmdHandler(context, args) {
	      /* istanbul ignore if */ // Tested independently.
	      if (!cs.loggedIn) {
	        mm.log.warn('Please log in first.');
	        return true;
	      }
	      
	      var oldName = cs.ws.name;
	      var wsName = args.name ? args.name : oldName;
	      if (wsName !== oldName && !cs.ws.saved) {
	        mm.log.warn('Please save or clear the current workspace first.');
	        return true;
	      }

	      var displayName = wsName ? ' [' + wsName + ']' : '';
	      mm.log('- Loading workspace [' + wsName + ']');
	      return cs.loadWorkspace(wsName)
	      .then(function (ws) {
	        mm.log('- Loaded{0} in {1} ms.', displayName, ws._elapsed);
	        cs.ws.saved = true;
	      });
	    }
	    
	    //------------------------------------------------------------------------    
	    //------------------------------------------------------------------------
	    self.loginCmdHandler = function loginCmdHandler(context, args) {
	      var user = cs.user;
	      var userName = user.name;
	      if (args.userName) {
	        var ptpwd;
	        userName = args.userName;
	        /* istanbul ignore else */ // Tested in cli
	        if (args.password) {
	          ptpwd = args.password;
	          return self.loginUser(userName, ptpwd);
	        }
	        else {
	          if (userName === user.name && user.pdk) {
	            return self.loginUser(userName, user.pdk, true)
	            .fail(function (e) {
	              mm.log.warn('Invalid locally saved password has been deleted');
	              delete user.pdk;
	              return e;
	            });
	          }
	          else {
	            return mConsole.ask('Please enter your password: ', null, null, true)
	            .then(function (ptpwd) {
	              return self.loginUser(userName, ptpwd);
	            });
	          }
	        }
	      }
	      // If a locally saved user is available, login with that.
	      else {
	        if (!user.isAnonymous() && user.pdk) {
	          return self.loginUser(user.name, user.pdk, true)
	          .fail(function (e) {
	            mm.log.warn('Invalid locally saved password has been deleted');
	            delete user.pdk;
	            return e;
	          });
	        }
	        var e = new Error('Please login with a user name');
	        return e
	      }
	    }

	    //------------------------------------------------------------------------
	    self.clearCmdHandler = function clearCmdHandler(context, args) {
	      return cs.ws.clear(args.variables);
	    }

	    //------------------------------------------------------------------------
	    self.listCmdHandler = function listCmdHandler(context, args) {
	      return cs.ws.list(args.variables, context.keyword === '??');
	    }

	    /**
	     * auto complete console input text for command line starts
	     * @param {string} text the input line
	     * @return {array} completions [[matches], keyword]
	     */
	    /* istanbul ignore next */ // TODO: Complete this function.
	    self.completer = function completer (text) {
	      var keyword;
	      var matches = [];
	      var m = /[a-zA-Z_0-9]+$/.exec(text);
	      if (m) {
	        keyword = m[0];

	        // commandline keywords
	        rcs.keywords.forEach(function (cmd) {
	          if (cmd.indexOf(keyword) === 0) {
	            matches.push(cmd);
	          }
	        });

	        // remove duplicates
	        matches = matches.filter(function(elem, pos, arr) {
	          return arr.indexOf(elem) === pos;
	        });
	      }

	      return [matches, keyword];
	    }
	  
	    //------------------------------------------------------------------------      
	    var rcs = new CmdSet()
	        .setTitle('Main CLI Commands')
	        .adminHelpFooter(
	        '` [js] (backtick) will directly execute a javascript expression\n')
	        .helpFooter( 
	        '\n' +
	        'You can enter expressions such as B=sin(PI/4) on the command line,\n' +
	        'or just enter the variable name to show its evaluation.\n'
	        );
	    rcs.cmd('exit',
	            'Save the user and workspace then exit the program')
	       .alias('quit')
	       .variant('abort',
	            'Exit the program without saving the user or workspace')
	       .setHandler(self.exitCmdHandler);
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	    rcs.cmd('save [name]', 
	            'Save the user and workspace then continue',
	            'Supply a [name] to save this workspace under a specific name',
	            'for later recall. You can have many workspaces under different',
	            'names, although you have only one current workspace session.')
	       .setHandler(self.saveCmdHandler);
	    rcs.cmd('load [name]', 
	            'Load a workspace from the server',
	            'Supply a [name] to load a workspace of a specific name that',
	            'was previosly saved.')
	       .setHandler(self.loadCmdHandler);
	       
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	    rcs.cmd('login [userName] [password]',
	            'Log in to the server with a user name and password',
	            'The user name and password can be omitted if you have already',
	            'logged in from this client in a previous session.')
	       .setHandler(self.loginCmdHandler);
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	    rcs.cmd('clear variables()',
	            'Clear one or more variables from the workspace',
	            'Use "clear all" to clear the full set of variables.')
	       .setHandler(self.clearCmdHandler);
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   
	    rcs.cmd('list [variables()]',
	            'List some or all of the variables in the workspace',
	            'The default is to list all variables. You can list only',
	            'selected entries with variable names or prefixes.',
	            'Use ?? to list the detailed functions.')
	       .alias('?')
	       .alias('??')
	       .setHandler(self.listCmdHandler);
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	    rcs.cmd('cls',
	            'Clear the display')
	       .setHandler(function () { mConsole.clearScreen(); return true; });
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	    
	    rcs.addSubset('.', cs.ws.dotCmdSet());
	    //mm.log('----- cs.ws.dotCmdSet():', cs.ws.dotCmdSet());    
	    rcs.done();
	    //mm.log('----- RCS:', rcs);
	    mConsole.setCompleter(self.completer);
	    self.rootCommandSet = rcs;
	  }

	  return CliCommands;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 2)))

/***/ },
/* 5 */
/*!********************************!*\
  !*** ./src/core/CliConsole.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	/**
	 * @fileOverview Console line input and output for mMeddle CLI
	 * @module core/CliConsole
	 */ 
	module.exports = function registerCliConsole(mm) {
	  var check      = mm.check;
	  var _          = check(mm._);
	  var qq         = check(mm.Q);
	  var EggTimer   = check(mm.obj.EggTimer);

	  var codeESC = 27;
	  var BS    = String.fromCharCode(0x08);                   // jshint ignore:line 
	  var CR    = String.fromCharCode(0x0D);                   // jshint ignore:line 
	  var LF    = String.fromCharCode(0x0A);                   // jshint ignore:line 
	  var NL    = String.fromCharCode(0x0A);                   // jshint ignore:line 
	  var CRLF  = String.fromCharCode(0x0D, 0x0A);             // jshint ignore:line 
	  var HOME  = String.fromCharCode(0x1b, 0x5b, 0x31, 0x7e); // jshint ignore:line 
	  var UP    = String.fromCharCode(0x1b, 0x5b, 0x41);       // jshint ignore:line 
	  var DOWN  = String.fromCharCode(0x1b, 0x5b, 0x42);       // jshint ignore:line 

	  var CtrlCodes = [
	    'null',  // [0x00],
	    'ctrlA', // [0x01], // A
	    'ctrlB', // [0x02], // B
	    'ctrlC', // [0x03], // C
	    'ctrlD', // [0x03], // D
	    'ctrlE', // [0x03], // E
	    'ctrlF', // [0x03], // F
	    'bell',  // [0x07], // G
	    'bs',    // [0x08], // H
	    'tab',   // [0x09], // I
	    'lf',    // [0x0A], // J
	    'ff',    // [0x0B], // K
	    'ctrlL', // [0x0C], // L
	    'cr',    // [0x0D], // M
	    'ctrlN', // [0x0E], // N
	    'ctrlO', // [0x0F], // O
	    'ctrlP', // [0x10], // P
	    'ctrlQ', // [0x11], // Q
	    'ctrlR', // [0x12], // R
	    'ctrlS', // [0x13], // S
	    'ctrlT', // [0x14], // T
	    'ctrlU', // [0x15], // U 
	    'ctrlV', // [0x16], // V
	    'ctrlW', // [0x17], // W
	    'ctrlX', // [0x18], // X
	    'ctrlY', // [0x19], // Y
	    'ctrlZ', // [0x1A], // Z
	    'esc'    // [0x1B]
	  ];
	  
	  var KeyCodes = {
	    null  : [0x00],
	    ctrlA : [0x01], // A
	    ctrlB : [0x02], // B
	    ctrlC : [0x03], // C
	    ctrlD : [0x03], // D
	    ctrlE : [0x03], // E
	    ctrlF : [0x03], // F
	    bell  : [0x07], // G
	    bs    : [0x08], // H
	    tab   : [0x09], // I
	    lf    : [0x0A], // J
	    ff    : [0x0B], // K
	    ctrlL : [0x0C], // L
	    cr    : [0x0D], // M
	    ctrlN : [0x0E], // N
	    ctrlO : [0x0F], // O
	    ctrlP : [0x10], // P
	    ctrlQ : [0x11], // Q
	    ctrlR : [0x12], // R
	    ctrlS : [0x13], // S
	    ctrlT : [0x14], // T
	    ctrlU : [0x15], // U 
	    ctrlV : [0x16], // V
	    ctrlW : [0x17], // W
	    ctrlX : [0x18], // X
	    ctrlY : [0x19], // Y
	    ctrlZ : [0x1A], // Z
	    esc   : [0x1B],
	    up    : [0x1b, 0x5b, 0x41],
	    down  : [0x1b, 0x5b, 0x42],
	    right : [0x1b, 0x5b, 0x43],
	    left  : [0x1b, 0x5b, 0x44],
	    ins   : [0x1b, 0x5b, 0x32, 0x7e],
	    del   : [0x1b, 0x5b, 0x33, 0x7e],
	    home  : [0x1b, 0x5b, 0x31, 0x7e],
	    end   : [0x1b, 0x5b, 0x34, 0x7e],
	    pgup  : [0x1b, 0x5b, 0x35, 0x7e],
	    pgdn  : [0x1b, 0x5b, 0x36, 0x7e],
	    F1    : [0x1b, 0x5b, 0x5b, 0x41],
	    F2    : [0x1b, 0x5b, 0x5b, 0x42],
	    F3    : [0x1b, 0x5b, 0x5b, 0x43],
	    F4    : [0x1b, 0x5b, 0x5b, 0x44],
	    F5    : [0x1b, 0x5b, 0x5b, 0x45],
	    F6    : [0x1b, 0x5b, 0x31, 0x37, 0x7e],
	    F7    : [0x1b, 0x5b, 0x31, 0x38, 0x7e],
	    F8    : [0x1b, 0x5b, 0x31, 0x39, 0x7e],
	    F9    : [0x1b, 0x5b, 0x32, 0x30, 0x7e],
	    F10   : [0x1b, 0x5b, 0x32, 0x31, 0x7e],
	    F11   : [0x1b, 0x5b, 0x32, 0x33, 0x7e],
	    F12   : [0x1b, 0x5b, 0x32, 0x34, 0x7e],
	  };
	  
	  var EscapeCodes = {
	    up    : [0x5b, 0x41],
	    down  : [0x5b, 0x42],
	    right : [0x5b, 0x43],
	    left  : [0x5b, 0x44],
	    ins   : [0x5b, 0x32, 0x7e],
	    del   : [0x5b, 0x33, 0x7e],
	    home  : [0x5b, 0x31, 0x7e],
	    end   : [0x5b, 0x34, 0x7e],
	    pgup  : [0x5b, 0x35, 0x7e],
	    pgdn  : [0x5b, 0x36, 0x7e],
	    F1    : [0x5b, 0x5b, 0x41],
	    F2    : [0x5b, 0x5b, 0x42],
	    F3    : [0x5b, 0x5b, 0x43],
	    F4    : [0x5b, 0x5b, 0x44],
	    F5    : [0x5b, 0x5b, 0x45],
	    F6    : [0x5b, 0x31, 0x37, 0x7e],
	    F7    : [0x5b, 0x31, 0x38, 0x7e],
	    F8    : [0x5b, 0x31, 0x39, 0x7e],
	    F9    : [0x5b, 0x32, 0x30, 0x7e],
	    F10   : [0x5b, 0x32, 0x31, 0x7e],
	    F11   : [0x5b, 0x32, 0x33, 0x7e],
	    F12   : [0x5b, 0x32, 0x34, 0x7e],
	  };
	  
	  /**
	   * @summary **console input and output for mMeddle CLI**
	   * @description
	   * Handles  console input and output so interruptions from asynchronous
	   * events don't muck up the command as its being entered. Also provides
	   * the usual command stack, line edit and tab completion operations.
	   *
	   * On Node.js the CliConsole uses process.stdin and out. On a browser,
	   * the constructor takes the ids for the text input and the div that
	   * will be expanded as output.
	   *
	   * On Node as soon as the CliConsole is created process.stdin is 
	   * switched to raw character mode.  All output to the console must use
	   * CliConsole or it will be confused about what is on the display.
	   *
	   * @constructor
	   * @param {string} cliInText the id of the text input 
	   * @param {string} cliPrompt the id of the text input label
	   * @param {string} outDiv the id of the text ouput div
	   * @returns {CliConsole} the cli client.
	   */  
	  var CliConsole = 
	  function cliConsoleCtor(cliInText, cliPrompt, outDiv) {
	    var self = this;
	    var inNode = mm.config.inNode;
	    var inBrowser = inNode ? false : true;
	    var reading = false;
	    var isConsole = true;

	    // Defined on Node clients.
	    var outStream;
	    var inStream;
	    var cursor;

	    // Defined on Browser clients.
	    var consoleOutput;
	    var consolePrompt;
	    var consoleInput;

	    self.idleTimer = null; // User supplied idle timer.
	    self.eventHandlers = [];
	    /* istanbul ignore else */ 
	    if (inNode) {
	      // On node clients initialize stdin and out.
	      outStream = process.stdout;
	      cursor = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"ansi\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))(outStream);
	      inStream = process.stdin;
	      
	      // Make sure the console is in raw character mode.
	      inStream.setEncoding('utf8');
	      // Raw mode reads from the console without echoing characters and
	      // doesn't buffer up the keys.  
	      try {
	        inStream.setRawMode(true);
	      }
	      catch (e) {
	        mm.log.warn('***** Stdin is not a CONSOLE :', e);
	        isConsole = false;
	      }

	      self.displayRows = outStream.rows;
	      self.displayCols = outStream.columns;

	      var h = [];
	      h.push({ obj: outStream, name:'resize',   func: resizeHandler  });
	      h.push({ obj: inStream,  name:'end',      func: inCloseHandler });
	      h.push({ obj: inStream,  name:'close',    func: inCloseHandler });
	      h.push({ obj: inStream,  name:'readable', func: inReadableHandler });
	      h.push({ obj: inStream,  name:'error',    func: inErrorHandler });
	      self.eventHandlers = h;
	    }
	    else {
	      // On browser clients obtain the relevent DOM elements.
	      consoleOutput = mm.document.getElementById(outDiv);
	      consolePrompt = mm.document.getElementById(cliPrompt);
	      consoleInput  = mm.document.getElementById(cliInText);
	      
	      // TODO - Define browser event handlers.
	    }

	    self.mute = mm.config.mochaConsoleMute; // Hacky way to mute console.
	    self.lastLine = '';
	    self.error = null;
	    self.saveOnlyUnique = false;
	    self.closeHandler = null;
	    self.maxPasswordLength = 15;
	    self.savedInputLines = [];

	    function makeLine (text) {
	      return {
	        textLine: text,
	        multiLine: false
	      };
	    }

	    self.readLineD = null; // The line reading deferred.
	    self.prompt = inNode ? '-->' : 'Cmd:';
	    self.pwdMode = false;  // show * during input.

	    /* istanbul ignore if */ 
	    if (inBrowser) {
	      consolePrompt.innerHTML = self.prompt;
	    }
	    
	    var pendingInputs = [];
	    var keyQueue = [];   // unhandled keystrokes/keycodes.
	    
	    var currentInput = makeLine('');
	    var inputOffset = 0; //offset from beginning of currentInput.
	    var insertMode = true;
	    var promptVisible = false;
	    var partialOutputLine = true; // Require a NL before prompt.

	    var currentSavedInputIndex = 0;
	    var savedInitialLine = '';
	    var scrollingPrevious = true;

	    //console.log('- screen size is: ', 
	    //    self.displayRows + 'x' + self.displayCols);
	    
	    // This eggTimer is used to trigger handling of all user input.
	    // When there other outputs from other routines going on, the
	    // input is bufferred in the keyQueue until and the timer is 
	    // reset until there is a chance to deal with the inputs.
	    var timer = new EggTimer(100).start();

	    // Start running.
	    var running = true;
	    installEventHandlers();
	/*    
	self.annoyTimer = new EggTimer(10000).start();
	var nn = 0;
	self.annoyTimer.onDing(function () {
	  mm.log.status('Are you annoyed yet?', nn++);
	  self.annoyTimer.reset();
	});
	*/

	/*
	    // Examines a keysequence to see of it is a control char,
	    // alt code, or control code.
	    function getKeyCode(unicodes) {
	      var c = [];
	      var keyEvent = null;
	      //var ch1 = unicodes[0];
	      var n = unicodes.length;
	      var ch2 = n > 1 ? unicodes[1] : '';
	      var c1 = unicodes.charCodeAt(0);
	      for (var i = 0; i < n; i++) {
	        c.push(unicodes.charCodeAt(i));
	      }
	      
	      function keyMatch() {
	        for (var key in KeyCodes) {
	          if (_.isEqual(KeyCodes[key], c)) {
	            keyEvent = key;
	            return true;
	          }
	        }
	        return false;
	      }
	      
	      if (keyMatch()) return keyEvent;
	      if (c1 === 0x1b && c.length > 1) {
	        c.shift();
	        if (keyMatch()) {
	          return 'alt' + keyEvent;
	        }
	        else {
	          return 'alt' + ch2;
	        }
	      }
	      return null;
	    }
	*/
	    
	    // Removes a keysequence from an array of charCodes and returns a
	    // single keyEvent object.  Call repeatedly to drain the array.
	    // alt code, or control code.
	    function pullKeyEvent(charCodes) {
	      if (!charCodes || charCodes.length === 0) {
	        return null;
	      }
	      var c1 = charCodes.shift();
	      var cch = String.fromCharCode(c1);
	      // Handle simple key codes.
	      if (c1 <= codeESC) {
	        var k = CtrlCodes[c1];
	        if (charCodes.length === 0 || c1 !== codeESC) {
	          return { keyCode: k };
	        }
	      }

	      // Now the most common letters.
	      if (c1 >= 32 && c1 < 128) {
	         return { visibleChar: cch }
	      }

	      // These are not really control codes since most unicode
	      // chars are visible, but fix this later. TODO: fixme
	      if (c1 !== codeESC) {
	        return { ctrlCode: cch }
	      }

	      // This a multicharacter escape sequence.
	      for (var key in EscapeCodes) {
	        var escSeq = EscapeCodes[key];
	        var i = 0;
	        while (i < escSeq.length && i < charCodes.length) {
	          if (escSeq[i] === charCodes[i]) {
	            i++;
	            if (i === escSeq.length) {
	              // Shift off the matching key codes.
	              while (i > 0) {
	                charCodes.shift(); // Toss it.
	                i--;
	              }
	              return { keyCode: key };
	            }
	          }
	          else {
	            break;
	          }
	        }
	      }

	      // Return a two character ESC code.
	      var c2 = charCodes.shift();
	      cch += String.fromCharCode(c2);
	      return { ctrlCode: cch }
	    }
	    
	/*    
	    function isPrintableAscii(cc) {
	      if (cc.length === 1) {
	        var c = cc.charCodeAt(0);
	        return c >= 32 && c < 128;
	      }
	      return false;
	    }
	*/

	    function hexString(unicode) {
	      var h = '';
	      var sep = '';
	      for (var i = 0; i < unicode.length; i++) {
	        var cc = unicode.charCodeAt(i);
	        h += sep + hexOfUnicode(cc);
	        sep = '|';
	      }
	      return h;
	    }
	    
	    function hexOfUnicode(cc) {
	      var d = cc.toString(16);
	      while (d.length < 4) d = '0' + d;
	      return d;
	    }

	    function hexOfAscii(cc) { // jshint ignore:line 
	      var d = cc.toString(16);
	      return (d.length < 2) ? '0' + d : d;
	    }

	    // Replaces or inserts a character at a specific position in the string.
	    function setChar(str, offset, ch, insert) {
	      var n = str.length;
	      // Pad the string with spaces.
	      while (n < offset) { str += ' '; n++; }
	      // Append the character.
	      if (offset === n) {
	        return str += ch;
	      }
	      var left = str.substring(0, offset);
	      var right = str.substring(offset + (insert ? 0 : 1));
	      return left + ch + right;
	    }

	    // Remove a character at a specific position in the string.
	    function delChar(str, offset) {
	      var n = str.length;
	      // Pad the string with spaces.
	      while (n < offset) { str += ' '; n++; }
	      if (offset === n) {
	        return str.substring(0, offset - 1);
	      }
	      var left = str.substring(0, offset);
	      var right = str.substring(offset + 1);
	      return left + right;
	    }

	    // Handle saving of the text line stack.
	    function saveInput(currentInput) {
	      // Passwords are never saved.
	      if (self.pwdMode) {
	        return false;
	      }
	      currentSavedInputIndex = 0;
	      var textLine = currentInput.textLine;
	      // Only single lines are saved in the stack.
	      if (currentInput.multiLine) {
	        return false;
	      }
	      // Lines must be at least 2 characters long to be worth saving.
	      if (textLine.length === 0) {
	       return false;
	      }
	      // Only unique lines are saved in the stack.
	      if (self.saveOnlyUnique) {
	        if (_.includes(self.savedInputLines, textLine)) {
	         return false;
	        }
	      }
	      // Do not save two duplicate lines in a row.
	      if (self.savedInputLines.length > 0 &&
	        self.savedInputLines[0] === textLine) 
	      {
	        return false;
	      }
	      self.savedInputLines.unshift(textLine); // stick it in the stack.
	      return true;
	    }
	    
	    function out(chars) {
	      if (self.idleTimer) self.idleTimer.reset();
	      
	      /* istanbul ignore next */ 
	      if (self.mute) return self;
	      /* istanbul ignore if */ 
	      if (inBrowser) {
	        consoleOutput.appendChild(mm.document.createTextNode(chars));
	      }
	      else {
	        cursor.write(chars);
	      }
	      return self;
	    }

	    // Zero based horizontal line cursor positioning.
	    function setLineOffset(n) {
	      /* istanbul ignore next */ 
	      if (self.mute) return;
	      /* istanbul ignore else */ 
	      if (inNode) {
	        cursor.horizontalAbsolute(n + 1);
	      }
	    }

	    // Displays the prompt, current input, and positions  the cursor.
	    function showPrompt(reprompt) {
	      /* istanbul ignore else */ 
	      if (inNode) {
	//      if (!promptVisible || reprompt) {
	          promptVisible = true;
	          if (partialOutputLine) {
	            out(NL); // Always goes to the next line.
	            partialOutputLine = false;
	          }
	//mm.log('showPrompt( xxxxxxxxxxxxxxxxxxxxxxxxx', self.prompt, self.mute);          
	          setLineOffset(0);
	          if (!self.mute) {
	            cursor.eraseLine();
	            //cursor.red();
	            out(self.prompt);
	            cursor.show();
	          }
	//      }
	      }
	      else {
	        consolePrompt.innerHTML = self.prompt;
	        consoleInput.type = self.pwdMode ? 'password' : 'text';
	      }

	      return self;
	    }
	    
	    // Displays the prompt, current input, and positions  the cursor.
	    function showCurrentLine(reprompt) {
	      showPrompt(reprompt);
	      /* istanbul ignore else */ 
	      if (inNode) {
	        setLineOffset(self.prompt.length);
	        //cursor.green();
	        var text = currentInput.textLine;
	        if (self.pwdMode) {
	          text = _.repeat('*', text.length);
	        }
	        out(text);
	        if (!self.mute) cursor.eraseLine();
	        var lineOffset = self.prompt.length + inputOffset;
	        setLineOffset(lineOffset);
	        
	        // TODO - allow the entry to be longer than the visible line.
	        // use:  self.displayCols and when the text is wider than available
	        // switch to :
	        //     'prompt>...line of text is too long.'
	        //  or 'prompt>This line of text is too ...'
	      }
	      else {
	        consoleInput.value = currentInput.textLine;
	      }
	      return self;
	    }
	  
	    // Displays the prompt, current input, and positions  the cursor.
	    function updateCurrentLine() {      
	      if (!promptVisible) showCurrentLine();
	    }

	    function rightArrow() {
	      if (inputOffset < currentInput.textLine.length) {
	        inputOffset++;
	      }
	      return showCurrentLine();
	    }
	    
	    function leftArrow() {
	      if (inputOffset > 0) {
	        inputOffset--;
	      }
	      return showCurrentLine();
	    }
	    
	    function backSpace() {
	      if (inputOffset > 0) {
	        inputOffset--;
	        currentInput.textLine = delChar(currentInput.textLine, inputOffset);
	      }
	      return showCurrentLine();
	    }

	    function deleteChar() {
	      if (inputOffset < currentInput.textLine.length) {
	        inputOffset++;
	        return backSpace();
	      }
	      return showCurrentLine();
	    }
	    
	    function endOfLine() {
	      inputOffset = currentInput.textLine.length;
	      return showCurrentLine();
	    }

	    function startOfLine() {
	      inputOffset = 0;
	      return showCurrentLine();
	    }

	    function toggleInsertMode() {
	      insertMode = !insertMode;
	      return self;
	    }

	    function clearLine() {
	      inputOffset = 0;
	      currentInput = makeLine('');
	      return showCurrentLine();
	    }

	    function previousSavedLine() {
	      if (currentInput.multiLine) {
	        // Not Implemented.
	      }
	      else {
	        promptVisible = false;
	        if (currentSavedInputIndex === 0) {
	          savedInitialLine = currentInput.textLine;
	        }
	        if (self.savedInputLines.length > currentSavedInputIndex) {
	          if (!scrollingPrevious &&
	            self.savedInputLines.length > currentSavedInputIndex + 1) {
	            currentSavedInputIndex++;
	          }
	          currentInput = makeLine(self.savedInputLines[currentSavedInputIndex]);
	          currentSavedInputIndex++;
	          scrollingPrevious = true;
	        }
	        else {
	          currentInput = makeLine(savedInitialLine);
	        }
	        return endOfLine();
	      }  
	    }

	    function nextSavedLine() {
	      if (currentInput.multiLine) {
	        // Not Implemented.
	      }
	      else {
	        promptVisible = false;
	        if (currentSavedInputIndex > 0) {
	          currentSavedInputIndex--;
	          if (scrollingPrevious && currentSavedInputIndex > 0) {
	            currentSavedInputIndex--;
	          }
	          scrollingPrevious = false;
	          currentInput = makeLine(self.savedInputLines[currentSavedInputIndex]);
	        }
	        else {
	          currentInput = makeLine(savedInitialLine);
	        }
	        return endOfLine();
	      }
	    }
	    
	    // Handles auto completion.
	    function autoComplete() {
	      if (self.completer) {
	        currentInput.textLine += '-TAB FIXME-';
	        return endOfLine();
	      }
	    }
	    
	    // Handles Enter for single line entries.
	    function enter() {
	      if (inBrowser) {
	        // Enters the current line even if it has not changed.
	        currentInput = makeLine(consoleInput.value);
	        consoleInput.value = '';
	      }
	      else {
	        // TODO: Clear full multiline inputs /
	        setLineOffset(0); // Clear the entire line.
	        if (!self.mute) cursor.eraseLine();
	      }
	      pendingInputs.push(currentInput);
	      currentInput = makeLine('');
	      inputOffset = 0;
	      promptVisible = false;
	      self.readingD.resolve('Well thats another fine kettle of fish');
	    }

	    function handleKeyEvent(kc) {
	      switch (kc) {
	        case 'cr': return enter();
	        case 'tab': return autoComplete();
	        case 'bs': return backSpace();
	        case 'del': return deleteChar();
	        case 'esc': return clearLine();
	        case 'ins': return toggleInsertMode();
	        case 'right': return rightArrow();
	        case 'left': return leftArrow();
	        case 'home': return startOfLine();
	        case 'end': return endOfLine();
	        case 'up': return previousSavedLine();
	        case 'down': return nextSavedLine();
	      }
	      return self;
	    }

	    function handleVisibleInputChar(ch) {
	      currentInput.textLine = 
	          setChar(currentInput.textLine, inputOffset, ch, insertMode);
	      inputOffset++;
	      return showCurrentLine();
	    }

	    //------------------------------------------------------------------------
	    //                            Public Methods
	    //------------------------------------------------------------------------

	    /**
	     * @summary **Define a close handler**
	     */    
	    CliConsole.prototype.onClose = function onClose(func) {
	      self.closeHandler = func;
	    }
	    
	    /**
	     * @summary **Close the input stream**
	     */    
	    CliConsole.prototype.close = function close() {
	      if (running) {
	        running = false;
	        removeEventHandlers();
	        timer.stop();
	        if (self.closeHandler) self.closeHandler();
	      }
	    }
	    
	    /**
	     * @summary **Clear the screen**
	     */    
	    CliConsole.prototype.clearScreen = inNode ? 
	      function clearScreen() {
	        if (self.mute) return;
	        var windowSize = process.stdout.getWindowSize();
	        var linesPerScreen = windowSize[1];
	        var lineFeeds = _.repeat('\n', linesPerScreen);
	        cursor.write(lineFeeds);
	        cursor.eraseData(2);
	        cursor.goto(1, 1);
	      }
	    : /* istanbul ignore next */
	      function clearScreen() {
	        if (self.mute) return;
	        consoleOutput.innerHTML = '';
	      };

	    /**
	     * @summary **Output some text info to the consolee**
	     * @description
	     * Outputs normal text to the console. On node clients the pending
	     * input line is erased and restored later when input continues.
	     * On a browser this just adds text to the output.
	     * @param {string} the line to output to the console.
	     */    
	    CliConsole.prototype.write = inNode ? 
	      function write(text) {
	        if (promptVisible) {
	          setLineOffset(0);
	          /* istanbul ignore else */ 
	          if (!self.mute) {
	            cursor.eraseLine();
	            cursor.hide();
	          }
	        }
	        out(text);
	        partialOutputLine = false;
	        if (text.length > 0) {
	          var ch = text[text.length - 1];
	          partialOutputLine = (ch !== '\r' && ch !== '\n');
	        }
	        promptVisible = false;
	        return self;
	      }
	    : /* istanbul ignore next */
	      function write(text) {
	        out(text);
	      };
	    
	    /**
	     * @summary **Output a text line to the consolee**
	     * @description
	     * Outputs a normal text line to the console.
	     * @param {string} the line to output to the console.
	     */    
	    CliConsole.prototype.writeLine = inNode ? 
	      function writeLine(textLine) {
	        self.write(textLine);
	        out(NL);
	        partialOutputLine = false;
	        return self
	      }
	    : /* istanbul ignore next */
	      function writeLine(textLine) {
	        self.write(textLine + '\n');
	        return self
	      };
	      
	    /**
	     * @summary **Read a line from the console**
	     * @description
	     * New prompts are issued only when a readLine is in progress,
	     * and characters are accepted for editing only during the readLine.
	     * At all other times, input is bufferred until a read is issued.
	     * If a timeout is supplied then the promise will fail with
	     * a timeout error (0 will wait forever).
	     * @param {string} prompt a new prompt to use (optional).
	     * @param {bool} pwdMode true for password entry mode (optional)
	     * @param {number} an optional timeout in seconds
	     * @returns a promise to a string
	     */    
	    CliConsole.prototype.readLine =
	    function readLine(prompt, pwdMode, timeout) {
	      // If an input has been pushed into the pending inputs stack, then
	      // output it (with the prompt it should have had if typed in by a
	      // human) and return it to the caller.
	      if (pendingInputs.length > 0) {
	        self.lastInput = pendingInputs.shift();
	        self.lastLine = self.lastInput.textLine;
	        saveInput(self.lastInput);
	        self.writeLine(prompt + ( pwdMode ?
	            _.repeat('*', self.maxPasswordLength) : self.lastLine ));
	        return qq(self.lastLine);
	      }
	      
	      // Some client has managed to issue two reads at once.  When the
	      // current one finishes, we'll try this one again.
	      if (reading) {
	        return self.readingP.then(function readAgain() {
	          return readLine(prompt, pwdMode, timeout);
	        });
	      }

	      // The only time we should rescroll to an input is when a read was
	      // just issued, otherwise let the user position the viewport.
	      if (inBrowser) {
	        var alignToTop = false;
	        consoleInput.scrollIntoView(alignToTop);
	      }
	      
	      self.prompt = prompt;
	      self.pwdMode = pwdMode;
	      self.readingD = qq.defer();
	      var p = self.readingD.promise;
	      if (timeout) {
	        p = p.timeout(timeout * 1000, 'Timeout on console readline');
	      }
	      self.readingP = p;
	      reading = true;
	      promptVisible = false;
	//mm.log('readLine xxxxxxxxxxxxxxxxxxxxxxxxx', prompt);      
	      showCurrentLine(true);
	      return self.readingP.then(function () {
	        reading = false;
	        self.lastInput = pendingInputs.shift();
	        self.lastLine = self.lastInput.textLine;
	        saveInput(self.lastInput);
	        self.writeLine(prompt + ( pwdMode ?
	            _.repeat('*', self.maxPasswordLength) : self.lastLine ));
	        return qq(self.lastLine);
	      });
	    }
	    
	    /**
	     * @summary **Establish a line completer**
	     * @description
	     * When present the line completer provide info for tab completion.
	     * @param {function} completer the tab completion function
	     */    
	    CliConsole.prototype.setCompleter = function setCompleter(completer) {
	      self.completer = completer;
	    }
	    
	    /**
	     * @summary Ask a question from the console
	     * @description
	     * Asks for a response from the user. If an object is supplied this
	     * returns a promise to the object being modified, otherwise it returns
	     * a promise to the answer string.
	     * Blank lines return an error.
	     * If the passed in object contains an initialized field of
	     * then no question is asked and the promise is satisfied immediately.
	     * @param {string} query the text question to ask.
	     * @param {Object} obj the optional object to be modified
	     * @param {string} field the field name in the obj to be set
	     * @param {bool} isPwd true if password blanking is to be used.
	     * @returns {Q} returns Promise(Object|string), the `obj` or the answer string
	     */
	    CliConsole.prototype.ask = function ask (query, obj, field, isPwd) {
	      if (obj && obj.field) {
	        return qq(obj);
	      }
	      return self.readLine(query, isPwd)
	      .then(function(answer) {
	        if (answer) {
	          if (obj) {
	            obj[field] = answer;
	            return obj;
	          }
	          else {
	            return(answer);
	          }
	        }
	        else {
	          throw new Error('Blank line not allowed. Entry abandoned');
	        }
	      });
	    }

	    /**
	     * @summary **Spoof a line into input**
	     * @description
	     * The line of text is pushed to the console just as if it was entered
	     * by a human being. This is usually used by test routines but can
	     * be used by apps for sneaky purposes.
	     * @param {string} text the line to spoof.
	     */    
	    CliConsole.prototype.spoofInput = function spoofInput(text) {
	      var line = makeLine(text);
	      pendingInputs.push(line);
	      if (self.readingD) {
	        self.readingD.resolve('Spoofed!');
	      }
	//mm.log('sssssssssssssssssssssssssssssss', line, reading);      
	    }

	    /**
	     * @summary **Spoof text chars into input**
	     * @description
	     * If a string is supplied, it is treated as a line and is spoofed as
	     * the chars in the string followed by ENTER. A number is treated as
	     * a single Unicode character value, and an array must be an array
	     * of keycode values that represents a single action (such as a VT100
	     * escape sequence).
	     * @param {string|array|number} text the text to spoof.
	     */    
	    CliConsole.prototype.spoofInputChars = function spoofInputChars(text) {
	      var chars = [];
	      if (_.isString(text)) {
	        var inputLine = text + CR;
	        // Push chars one at a time.
	        for (var i = 0; i < inputLine.length; i++) {
	          var cc = inputLine.charCodeAt(i);
	          pushRawKey(String.fromCharCode(cc));
	        }
	        return;
	      }
	      else if (_.isArray(text)) {
	        chars = text;
	      }
	      else {
	        chars.push(text);
	      }
	      pushRawKey(chars);
	    }

	    /**
	     * @summary **Set up an output idle timer**
	     * @description
	     * Test routines can supply an EggTimer that will be reset on every
	     * keystroke or output, but will ding when nothing happens for a
	     * while.
	     * @param {EggTimer} idleTimer the timer
	     */    
	    CliConsole.prototype.setIdleTimer = function setIdleTimer(idleTimer) {
	      self.idleTimer = idleTimer;
	    }

	    //------------------------------------------------------------------------
	    //                            Event Handlers
	    //------------------------------------------------------------------------

	    // This eggTimer is the core handler for interaction with the user.
	    // Whenever output stops for a while, this timer handles any keys
	    // that the user has managed to type in the meantime.
	    timer.onDing(function processPendingInputs() {
	      try {
	        if (reading) {
	          if (keyQueue.length === 0) {
	            if (inNode) updateCurrentLine();
	          }
	          var n = keyQueue.length;
	          var keys = keyQueue;
	          keyQueue = [];
	          if (n > 0) {
	            keys.forEach(function handleKey(key) {
	              if (key.keyCode) {
	                handleKeyEvent(key.keyCode);
	              }
	              else if (key.visibleChar) {
	                if (inNode) {
	                  handleVisibleInputChar(key.visibleChar);
	                }
	              }
	              /* istanbul ignore next */
	              else if (key.ctrlCode) {
	                mm.log.warn('Unhandled key code', key);
	                var e = 'Unhandled key code:' + hexString(key.ctrlCode);
	                self.error = new Error(e);
	                keyQueue = [];
	              }
	              /* istanbul ignore next */
	              else {
	                mm.log.warn('Unrecognized key event', key);            
	                var ee = 'Unrecognized key event' + JSON.stringify(key);
	                self.error = new Error(ee);
	                keyQueue = [];
	              }
	            });
	          }
	        }
	        // If we're not reading then there is no reason to update
	        // the prompt - and it would often be wrong anyway.
	        timer.reset();
	      }
	      catch (e) {
	        /* istanbul ignore next */
	        mm.log.fail(e);
	      }
	    });

	    // Character input just saves the characters for later.
	    // Control C is the only exception - by default, it will kill the
	    // process graveyard dead.
	    // Note that pushRawKey can also receive an array of keycodes instead of
	    // a string.
	    function pushRawKey(charArray) {
	      var cch = [];
	      if (charArray !== null) {
	        // Convert characters into an array of charCodes.
	        if (_.isString(charArray) ) {
	          var n = charArray.length;
	          for (var i = 0; i < n; i++) {
	            cch.push(charArray.charCodeAt(i));
	          }
	        }
	        else if (_.isArray(charArray)) {
	          if (charArray.length === 0) {
	            var e = 'Zero length array to pushRawKey';
	            mm.log.error(e);
	            throw new Error(e);
	          }
	          cch = charArray.slice();
	        }
	        else {
	          mm.log.error('Invalid argument to pushRawKey', charArray);
	          throw new Error('Invalid argument to pushRawKey');
	        }
	        do {
	          var k = pullKeyEvent(cch);
	          if (k) {
	            if (k.keyCode === 'ctrlC') {
	              if (self.closeHandler) {
	                self.closeHandler();
	              }
	              self.writeLine('[' + k + '] - Exit');
	              process.exit();
	            }

	            keyQueue.push(k);
	          }
	        } while (cch.length > 0);
	      }

	      if (reading) timer.forceDing();
	    }

	    function inReadableHandler() {
	      var cch = inStream.read();
	      pushRawKey(cch);
	    }
	    
	    function inCloseHandler() {
	      self.close();
	      console.log('---- END ----');
	      self.error = new Error('The console is now endeed');
	    }  

	    function inErrorHandler(e) {
	      self.close();
	      console.log('---- ERROR:', e.stack);
	      self.error = e;
	    }

	    //------------------------------------------------------------------------
	    // Note that on Windows, resizing the window by dragging the size
	    // handle around never changes the column count (since it can scroll)
	    // but strangely does change the row count to match the number of
	    // visible rows.
	    /* istanbul ignore next */
	    function resizeHandler () {
	      //console.log('- screen size has changed to ',
	      //   outStream.columns + ' columns by ' + outStream.rows + ' rows.');
	      self.displayRows = outStream.rows;
	      self.displayCols = outStream.columns;
	    }

	    //------------------------------------------------------------------------
	    // Install or remove the list of event handlers.
	    function installEventHandlers(remove) {
	      self.eventHandlers.forEach(function (handler) {
	        if (remove) {
	          handler.obj.removeListener(handler.name, handler.func);
	        }
	        else {
	          handler.obj.on(handler.name, handler.func);
	        }
	      });
	    }
	    
	    function removeEventHandlers() {
	      installEventHandlers(true);
	      self.eventHandlers = [];
	    }
	    
	    //------------------- Browser client event handlers -------------------
	    // TODO: Add a removeEventListener to get rid of these on close.
	    
	    /* istanbul ignore if */
	    if (inBrowser) {
	      // TODO: Switch to using addEventListener.
	      consoleInput.onchange = function () {
	        pushRawKey(KeyCodes.cr);
	      };

	      // TODO: Switch this to use event.key instead of 'which'.
	      // TODO: Switch to using addEventListener.
	      consoleInput.onkeydown = function (event) {
	        var handled = false;
	        var keynum = event.which;
	        if (keynum === 13) { // Enter
	          pushRawKey(KeyCodes.cr);
	          handled = true;
	        }
	        else if (keynum === 27) { // Escape
	          pushRawKey(KeyCodes.esc);
	          handled = true;
	        }
	        else if (keynum === 38) { // Arrow Up
	          pushRawKey(KeyCodes.up);
	          handled = true;
	        }
	        else if (keynum === 40) { // Arrow Down
	          pushRawKey(KeyCodes.down);
	          handled = true;
	        }

	        if (handled) {
	          event.preventDefault();
	          event.stopPropagation();
	        }
	      };

	    } // end Browser specific event handlers.      
	  }

	  CliConsole.KeyCodes = KeyCodes;
	  return CliConsole;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 2)))

/***/ },
/* 6 */
/*!***********************************!*\
  !*** ./src/core/ClientSession.js ***!
  \***********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview ClientSession
	 * @module core/ClientSession
	 */ 
	 module.exports = function(mm) {
	  var _           = mm.check(mm._);
	  var qq          = mm.check(mm.Q);
	  var Config      = mm.check(mm.obj.Config);
	  var ClientUser  = mm.check(mm.users.ClientUser);

	  //--------------------------------------------------------------------------
	  /**
	   * @summary **client Workspace session**
	   * @description
	   * This provides client services for managing workspaces. These are
	   * storage, user and server request services.  The client session is the
	   * first major object created by a client. It is used to load the user
	   * and workspace from browser/client localStorage if (if this browser)
	   * has been used before. Normally the session is supplied to a MMeddleClient
	   * which in turn connects to a MMeddleServer/WsSession over a socket.io
	   * connection. Once a server connection is completed, the session can
	   * handle requests such as login, saveWorkspace, etc.
	   * 
	   * @constructor
	   * @param {string} clientApp optional name to use for the client application
	   * @returns {ClientSession} the new client session
	   */  
	  var ClientSession = (function clientSessionCtorCreator() {
	    var ctor = function clientSession(clientApp) {
	      var self = this;
	      self.ws = mm.check(new mm.core.Workspace(self));
	      self.user = new ClientUser();
	      self.userConfig = new Config();
	      self.loggedIn = null; // Not currently logged in.
	      self.mmc = false; // No MMeddleClient has been added,
	      self.clientApp = clientApp ? clientApp : 'client';
	      self.storageClient = null;
	      self.storageEngine = new mm.storage.StorageEngine();
	      mm.storage.providers.ClientProvider.register(self.storageEngine, self);

	      /* istanbul ignore next */ // tested independently
	      self.newSessionId = function newSessionId() {
	        return 'MMSID_' + _.now().toString() + '_' + _.random(10000).toString();
	      }
	    };
	  
	    return ctor;
	  }());

	  /**
	   * @summary **Determine if this session is in Admin mode**
	   * @return {bool} true if logged on as an administrator.
	   */  
	  ClientSession.prototype.isAdmin = function isAdmin() {
	    return this.userConfig.administrator;
	  }

	  /**
	   * @summary **Bind the MMeddleClient to this session**
	   * @description
	   * The client provides only its `rq` method, and the `socketid` to the
	   * session, so its easy to mock if you want to.
	   * @param {MMeddleClient} op the operation being requested.
	   */  
	  ClientSession.prototype.bindClient = 
	  function bindClient(mmc) {
	    var self = this;  
	    self.mmc = mmc;
	  }
	  

	  /**
	   * @summary **Issue a server request with optional response**
	   * @description
	   * If the a client session is available and connected then this will
	   * pass the request on the the MMeddleClient, otherwise it returns
	   * false or a rejected error promise.
	   * 
	   * If rsRequired is a callback function then repeated responses will
	   * be tunneled to the callback from the server before the completion
	   * response.
	   * @param {string} op the operation being requested.
	   * @param {bool|function} rsRequired true or callback function.
	   * @param {object} content the content for the operation.
	   * @param {number} timeout n optional timeout in seconds.
	   * @returns {bool|Promise} success if true or promise to response.
	   */  
	  ClientSession.prototype.rq =
	  function rq(op, content, rsRequired, timeout) {
	    var self = this;
	    if (self.mmc && self.mmc.connected) {
	      return self.mmc.rq(op, content, rsRequired, timeout);
	    }
	    /* istanbul ignore next */ // tested independently
	    if (self.mmc) {
	      if (rsRequired) return qq.reject(new Error('Not connected to server')); 
	    }
	    else {
	      if (rsRequired) return qq.reject(new Error('No mMeddle Client exists'));
	    }
	    return false;
	  }

	  ClientSession.prototype.rqWithReply =
	  function rqWithReply(op, content, timeout) {
	    var self = this;
	    return self.rq(op, content, true, timeout);
	  }

	  /**
	   * @summary **Send a message to be logged on the server console**
	   * @description
	   * This is mostly for testing and remote activity logging.
	   * @param {string} text the text to log.
	   * @returns {bool} true (if connected)
	   */
	  ClientSession.prototype.emitLogMessage =
	  function emitLogMessage(text) {
	    var self = this;
	    return self.rq('log', text);
	  }
	  
	  /**
	   * @summary **Send a command to be executed remotely**
	   * @description
	   * Administrators can use this to monitor activity on the server.
	   * @param {string} cmd the text of the command.
	   * @returns {Promise} promise to the result of the command
	   */
	  ClientSession.prototype.doCommand =
	  function doCommand(text) {
	    var self = this;
	    return self.rqWithReply('cmd', text);
	  }

	  return ClientSession;
	}

/***/ },
/* 7 */
/*!***************************************!*\
  !*** ./src/core/ClientSessionUser.js ***!
  \***************************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview Add user requests to the ClientSession
	 * @module core/ClientSession
	 * 
	 */ 
	 module.exports = function(mm) {
	  var qq            = mm.check(mm.Q);
	  var Config        = mm.check(mm.obj.Config);
	  var ClientSession = mm.check(mm.core.ClientSession);
	  var ClientUser    = mm.check(mm.users.ClientUser);
	  
	  var localStorage  = new mm.storage.LocalStorage();
	  
	  // Approximate number of saved input lines to restore from the
	  // locally saved user.
	  var MAX_SAVED_INPUT_LINES = 50;
	  
	  // Finishes up the user and establishes the storage client.
	  function loggedInUser(self, rs, user) {
	    user._elapsed = rs._elapsed;
	    user.ok = true;
	    self.loggedIn = user;
	    self.storageClient = new mm.storage.StorageClient({
	      user: user.name,
	      engine: self.storageEngine 
	    });

	    return user;
	  }

	  /**
	   * @summary **clear the current user/workspace owner**
	   * @description 
	   * The current user/workspace owner is reset to anonymous.
	   * @returns {ClientSession} for chaining   
	   */  
	  ClientSession.prototype.clearLocalUser =
	  function clearLocalUser() {
	    var self = this;
	    self.user = new ClientUser();
	    self.userConfig = new Config();
	    return self;    
	  }

	  /**
	   * @summary **load the current user/workspace owner from localStorage**
	   * @description 
	   * The ClientUser is accessed from the cs.user field. If no user is saved
	   * then the anonymous user in the session is available. If the mConsole
	   * is supplied and the user's command stack was saved, then those
	   * commands are restored.
	   * @param {CliConsole} mConsole an optional console for command saving
	   * @returns {ClientSession} for chaining   
	   */  
	  ClientSession.prototype.loadLocalUser =
	  function loadLocalUser(mConsole) {
	    var self = this;
	    var userObj = localStorage.load('user');
	    /* istanbul ignore else */ // Tested independently.
	    if (userObj) {
	      // If a stack saving console is present then add its saved
	      // input lines to the current console.
	      if (mConsole && 
	        mConsole.savedInputLines && 
	        userObj.savedInputLines &&
	        userObj.savedInputLines.length > 0) 
	      {
	        var inLine = null;
	        var i = 0;
	        do {
	          i++;
	          inLine = userObj.savedInputLines.pop();
	          if (inLine) mConsole.savedInputLines.unshift(inLine);
	          if (i > MAX_SAVED_INPUT_LINES) inLine = null;
	        } while (inLine);
	        delete userObj.savedInputLines;
	      }
	      self.user.init(userObj);
	    }
	    return self;    
	  }

	  /**
	   * @summary **save the user to localStorage**
	   * @description 
	   * The ClientUser is saved to localStorage.  If the user was logged onto
	   * a server, then the PDK (Password Derived Key hash) is saved as well
	   * so the user can login next time without entry of a plain text password.
	   * @param {CliConsole} mConsole an optional console for command saving
	   * @returns {ClientSession} for chaining   
	   */  
	  ClientSession.prototype.saveLocalUser =
	  function saveLocalWorkspace(mConsole) {
	    var self = this;
	    /* istanbul ignore else */ // Tested independently.
	    if (mConsole &&
	        mConsole.savedInputLines &&
	        mConsole.savedInputLines.length > 0) 
	    {
	      self.user.savedInputLines = mConsole.savedInputLines;
	    }
	    localStorage.store('user', self.user);
	    return self;        
	  }

	  /**
	   * @summary **check for logged in to server**
	   * @returns {bool} true when logged in
	   */  
	  ClientSession.prototype.isLoggedIn = function isLoggedIn() {
	    var self = this;    
	    return self.loggedIn && self.loggedIn.name === self.user.name;
	  }
	  
	  /**
	   * @summary **Get public user information**
	   * @description
	   * A userName or userName pattern is sent to the server. If one or
	   * more matching users exist then an array of sanitized public users
	   * is returned, otherwise a null object is returned. The pattern
	   * can end in '*' to indicate the prefix to match, otherwise only a
	   * single user will be returned.
	   * @param {string} userName the userName to get.
	   * @returns {Promise} to the public user array (or a rejection).
	   */  
	  ClientSession.prototype.getUser =
	  function getUser(userName) {
	    var self = this;
	    var user = new ClientUser(userName);
	    return self.rqWithReply('loadUsers', user)
	    .then(function (rs) {
	      return rs.content;
	    })
	  }

	  /**
	   * @summary **Creates a new user if needed and then Login to server**
	   * @description
	   * The supplied user attempts to login to the server. If it fails then
	   * a new user is created with the specified parameters and login is
	   * completed.
	   * @param {object} newUser new ClientUser.init compatible object
	   * @returns {Promise} to the private user.
	   */  
	  ClientSession.prototype.userCreateOrLogin =
	  function userCreateOrLogin(newUser) {
	    var self = this;  
	    var user = new ClientUser(newUser.name).init(newUser);
	    return self.userLogin(user.name, user.ptpwd, false, user);
	  }

	  /**
	   * @summary **Login to server**
	   * @description
	   * The user and password are sent to the server. 
	   * If the password matches, the private user settings are
	   * returned as the content object in the response.
	   * The password is immediately encoded to a safety hash to make
	   * it slightly less of a security risk. This hash remains as part
	   * of the workspace for auto-login during later connections. The logged
	   * in user is now the current user for the session and its workspace.
	   *
	   * The newUser object supports the userCreateOrLogin method which is
	   * the preferred way to do this.
	   * @param {string} userName the userName to login with.
	   * @param {string} ptpwd the optional plain text password.
	   * @param {bool} ispdk optional PDK supplied instead of plain text.
	   * @param {object} newUser optional new ClientUser init compatible object
	   * @returns {Promise} to the private user.
	   */  
	  ClientSession.prototype.userLogin =
	  function userLogin(userName, ptpwd, ispdk, newUser) {
	    var self = this;
	    var user = new ClientUser(userName);
	    return self.rqWithReply('loadUser', user)
	    .then(function (rs) {
	      try{    
	        user.init(rs.content).hashP(ptpwd, ispdk);
	        //mm.log('+++++++++++++++++++== Login with', user);
	        // Instead of sending the PDK, we send a sha256 hash
	        // of the PDK based on a socket id seed which is known
	        // by both the client and server.
	        user.hashPdk(self.mmc.socketid);
	        var rquser = new ClientUser(userName).init(user);
	        /* istanbul ignore else */ // Tested independently.
	        if (rquser.pdk) delete rquser.pdk;
	        return self.rqWithReply('loginUser', rquser)
	        .then(function (rs) {
	          user.init(rs.content);
	          self.user = user;
	          self.ws.owner = user.name;
	          /* istanbul ignore if */ // Tested independently.
	          if (rs.userConfig) {
	            self.userConfig.init(rs.userConfig);
	            mm.log('- User [' + user.name + '] has a personal configuration');
	          }
	          return loggedInUser(self, rs, user);
	        });
	      } catch (e) { 
	        /* istanbul ignore next */ // Tested independently.
	        mm.log.error('userLogin failure internal', e.stack);
	      }      
	    },
	    function (e) {
	      if (newUser && mm.util.ENOENT(e)) {
	        return self.userCreate(newUser);
	      }
	      throw e;
	    })
	  }
	  
	  /**
	   * @summary **Create new user and login to server**
	   * @description
	   * A locally created new user and has its plain text password hashed
	   * and the content is sent to the server where it is written to storage.
	   * It returns a promise to the logged-in private ClientUser.  The new
	   * user becomes the current user for the session and its workspace.
	   * @param {Object} newUser the new user object (not yet a ClientUser).
	   * @param {bool} ispdk true if the passed in object is a prior user.
	   * @returns {Promise} to the private user.
	   */  
	  ClientSession.prototype.userCreate =
	  function userCreate(newUser, ispdk) {
	    var self = this;
	    var user;
	    /* istanbul ignore if */ // Tested independently.
	    if (ispdk) {
	      user = newUser;
	    }
	    else {
	      var ptpwd = newUser.ptpwd;
	      delete newUser.ptpwd;
	      // Since this creates the hash seed, we must get the user from the host.
	      user = new ClientUser()
	          .init(newUser)
	          .hashP(ptpwd);
	    }
	    var pdk = user.pdk;
	    return self.rqWithReply('createUser', user)
	    .then(function (rs) {
	      user.init(rs.content);
	      self.user = user;
	      self.ws.owner = user.name;
	      /* istanbul ignore if */ // Tested independently.
	      if (rs.userConfig) {
	        self.userConfig.init(rs.userConfig); // Add to the session.
	        mm.log('- User [' + user.name + '] has a personal configuration');
	      }
	      user.pdk = pdk;
	      return loggedInUser(self, rs, user);
	    })
	  }

	  /**
	   * @summary **Request a Delete of the current user**
	   * @description
	   * The currently logged in user is deleted. If the user is not currently
	   * logged into the server then the delete is rejected.
	   * @returns {Promise} to a message string.
	   */  
	  ClientSession.prototype.userDelete =
	  function userDelete() {
	    var self = this;
	    /* istanbul ignore if */ // Tested independently.
	    if (!self.isLoggedIn()) {
	      var em  = '- User [' + self.user.name + '] is not logged in';
	      return qq.reject(new Error(em));
	    }
	    return self.rqWithReply('deleteUser', self.user)
	    .then(function (rs) {
	      self.loggedIn = null;
	      self.storageClient = null;
	      return rs.content;
	    })
	  }  

	  /**
	   * @summary **Request a Listing of current user sessions**
	   * @description
	   * The set of currently connected users is returned.
	   * @returns {Promise} to an array of session entries.
	   */  
	  /* istanbul ignore next */ // Tested independently.
	  ClientSession.prototype.listUserSessions =
	  function listUserSessions() {
	    var self = this;
	    return self.rqWithReply('listUserSessions', self.user)
	    .then(function (rs) {
	      return rs.content;
	    })
	  }  
	}

/***/ },
/* 8 */
/*!********************************************!*\
  !*** ./src/core/ClientSessionWorkspace.js ***!
  \********************************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview Adds Workspace services to the ClientSession.
	 * @module core/ClientSession
	 */ 
	 module.exports = function(mm) {
	  var ClientSession = mm.check(mm.core.ClientSession);
	  var localStorage = new mm.storage.LocalStorage();

	  /**
	   * @summary **Clear the local workspace to empty**
	   * @description
	   * Empties the current workspace but retains the same session id.
	   * If this workspace is saved to the server then the contents of the
	   * prior workspace are lost.
	   * @returns {ClientSession} self for chaining.
	   */  
	  ClientSession.prototype.clearLocalWorkspace =
	  function clearLocalWorkspace() {
	    var self = this;
	    var savedSessionId = self.ws.sessionId;
	    self.ws = mm.check(new mm.core.Workspace(self));
	    self.ws.sessionId = savedSessionId;
	    /* istanbul ignore if */ // tested independently.
	    if (!self.ws.sessionId) {
	      self.ws.sessionId = self.newSessionId();
	    }
	    return self;
	  }

	  /**
	   * @summary **load the workspace from localStorage**
	   * @description
	   * Loads a previously saved workspace from the browser/client localStorage.
	   * If no prior workspace exists, then a new one is created an a new
	   * MMSID is assigned to it. The MMSID is the long-term identifier used
	   * to identify this session across multiple connections, reconnections,
	   * and even multiple browsers and client applications.
	   * @returns {ClientSession} for chaining
	   */  
	  ClientSession.prototype.loadLocalWorkspace =
	  function loadLocalWorkspace() {
	    var self = this;  
	    var wsObj = localStorage.load('ws');
	    /* istanbul  ignore else */ // tested independently.
	    if (wsObj) {
	      self.ws.init(wsObj);
	    }
	    /* istanbul ignore if */ // tested independently.
	    if (!self.ws.sessionId) {
	      self.ws.sessionId = self.newSessionId();
	    }
	    return self;
	  }

	  /**
	   * @summary **save the workspace to localStorage**
	   * @returns {ClientSession} for chaining   
	   */  
	  ClientSession.prototype.saveLocalWorkspace =
	  function saveLocalWorkspace() {
	    var self = this;    
	    localStorage.store('ws', self.ws);
	    self.ws.savedLocal = true;
	    return self;
	  }
	  
	  /**
	   * @summary **Save contents of current workspace to server**
	   * @description
	   * Any changes to the current workspace, including all settings and
	   * documents are copied to the server for persistent storage.
	   * The workspace is saved for the current authenticated user, or
	   * under the 'anonymous' user if none has been established.
	   * @param {string} name optional name (if used, sets the ws name).
	   * @returns {Promise} to the response (ok=true on success)
	   */  
	  ClientSession.prototype.saveWorkspace =
	  function saveWorkspace(wsName) {
	    var self = this;
	    self.ws.name = wsName ? wsName : self.ws.name
	    return self.rqWithReply('saveWorkspace', mm.util.JSONify(self.ws, 2));
	  }

	  /**
	   * @summary **Load a workspace from the server**
	   * @description
	   * An existing workspace is loaded from the server.
	   * @param {string} name required name.
	   * @returns {Promise} to the WS or a failure.
	   */  
	  ClientSession.prototype.loadWorkspace =
	  function loadWorkspace(wsName) {
	    var self = this;
	    if (!self.isLoggedIn()) {
	      throw new Error('Please log in before loading a workspace');
	    }
	    if (!self.storageClient) {
	      throw new Error('Odd. There is no storage available. Give up.');
	    }
	    if (wsName) {
	      return self.storageClient.load('ws', wsName)
	      .then(function(wsObj) {
	        var sessionId = self.ws.sessionId;
	        mm.log.debug('- Loaded ws', wsObj);
	        self.ws.init(wsObj);
	        var same = self.ws.sessionId === sessionId &&
	                   self.ws.owner === self.user.name;
	        self.ws.sessionId = sessionId; // Use the current session id.
	        self.ws.saved = same; // This is currently saved to the server.
	        return self.ws;
	      },
	      function(e) {
	        if (mm.util.ENOENT(e)) {
	          var em = 'No such workspace exists: [' + wsName + ']';
	          mm.log.debug('loadWorkspace: ' + em);
	          throw new Error(em);
	        }
	        else {
	          mm.log.debug('loadWorkspace: Access error: [' + wsName + ']', e.stack);
	          throw e;
	        }
	      })
	    }
	    else {
	      var sessionId = self.ws.sessionId;
	      return self.storageClient.load('wsSession', sessionId)
	      .then(function(wsSessionObj) {
	        var wsObj = wsSessionObj.ws;
	        mm.log.debug('- Loaded ws by session Id', sessionId);
	        self.ws.init(wsObj);
	        self.ws.saved = true; // This is currently saved to the server.
	        return self.ws;
	      },
	      function(e) {
	        if (mm.util.ENOENT(e)) {
	          var em = 'No such workspace session exists: [' + sessionId + ']';
	          mm.log.debug('loadWorkspace: ' + em);
	          throw new Error(em);
	        }
	        else {
	          mm.log.debug('loadWorkspace: Access error: [' + sessionId + ']', e.stack);
	          throw e;
	        }
	      })
	    }
	  }
	}

/***/ },
/* 9 */
/*!*************************!*\
  !*** ./src/core/Cmd.js ***!
  \*************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview A single commands along its handler and documentation
	 * @module core/Cmd
	 */ 
	module.exports = function registerCliCommands(mm) {
	  var check = mm.check;
	  var _     = check(mm._);

	  /**
	   * @summary **A single CLI commands**
	   * @description
	   * Declares a command, its parameters help information and a
	   * function for handling the command.
	   * @constructor
	   * @param {string} keywordFormat a command keyword followed by optional format
	   * @param {string} desc the short (one line) command description
	   * @param {string} help the multiline help message if available
	   * @returns {Cmd} the command
	   */  
	  var Cmd = function cmdCtor(keywordFormat, desc, help) {
	    var cmd = this;
	    var format = keywordFormat.split(' ');
	    var keyword = format.shift();
	    cmd.keyword = keyword;
	    cmd.format = format;
	    cmd.handler = null;
	    cmd.desc = desc;
	    cmd.help = Array.prototype.slice.call(arguments, 2).join(' ');
	    cmd.aliases = [];
	    cmd.variants = [];
	    cmd.argEnums = {};
	    
	    // all functions are members in the closure.

	    /**
	     * @summary **Restrict input arguments to an enum**
	     * @description
	     * An alias is an alternate keyword for execution of the command.
	     * @param {string} argName keyword a command keyword
	     * @param {string} values the set of values separated by |
	     * @returns {Cmd} the parent command for chaining
	     */  
	    cmd.argEnum = function argEnum(argName, values) {
	      cmd.argEnums[argName] = values;
	      return cmd;
	    }

	    /**
	     * @summary **Declare an alias to a command**
	     * @description
	     * An alias is an alternate keyword for execution of the command.
	     * @param {string} keyword a command keyword
	     * @returns {Cmd} the parent command for chaining
	     */  
	    cmd.alias = function alias(keyword) {
	      cmd.aliases.push(keyword);
	      return cmd;
	    }

	    /**
	     * @summary **Make a command available only to administrators**
	     * @description
	     * An admin command is not visible, nor is it executable by a user who
	     * is does not have 'admnistrator: true` in the cs.userConfig. This is more
	     * about preventing stupid mistakes than security.
	     * @returns {Cmd} the parent command for chaining
	     */  
	    cmd.setAdmin = function setAdmin() {
	      cmd.adminRequired = true;
	      return cmd;
	    }

	    /**
	     * @summary **Set a timeout in seconds for the command**
	     * @description
	     * Commands will normally timeout after a time fixed by the CmdSet.
	     * Provide a timeout only if this command should be allowed to run
	     * longer than the usual time.
	     * @param {number} timeoutSeconds a time in seconds
	     * @returns {Cmd} the parent command for chaining
	     */  
	    cmd.setTimeout = function setTimeout(timeoutSeconds) {
	      cmd.timeoutSec = timeoutSeconds;
	      return cmd;
	    }

	    /**
	     * @summary **Declare a variant to a single CLI commands**
	     * @description
	     * A variant has different behavior than the parent command, but uses
	     * the same handler function. The handler function determines what to
	     * do for the variant by checking its `context.keyword`
	     * @param {string} keywordFormat a command keyword followed by optional format
	     * @param {string} desc the short (one line) command description
	     * @param {string} help the multiline help message if available
	     * @returns {Cmd} the parent command for chaining
	     */  
	    cmd.variant = function variant(keywordFormat, desc, help) {
	      var fullhelp = Array.prototype.slice.call(arguments, 2).join(' ');
	      var newcmd = new Cmd(keywordFormat, desc, fullhelp);
	      cmd.variants.push(newcmd);
	      return cmd;
	    }

	    /**
	     * @summary **Define the handler for a command**
	     * @description
	     * The handler is called when a matching text command has been supplied 
	     * to the owning `CmdSet` via console entry or other source.
	     * The handler is supplied a `context` object. 
	     * Handlers can be immediate or promise based async.  If immediate, the
	     * handler should return a truthy value reqardess of whether it 
	     * succeeds or not. Return a new Error on false.
	     * When async, return a promise to the result. Handlers are always
	     * evaluated in execution order, so when a promise is returned, all other
	     * command evaluations will be queued until the command has completed.
	     *
	     * Note for developers new to Promises.  Promises are viral. If your
	     * handler is going to call any routine that returns promises, you must
	     * return and chain promises all the way. If you omit the return .. then()
	     * form, your handler will be done, but the operation you've
	     * started will continue to run until it has finished. The command line
	     * will be waiting for another command. This may be what you want, but
	     * in many cases it will not - this has bit me many times.
	     * @param {function(context)} handler the handler function
	     * @returns {Cmd} the command for chaining.
	     */  
	    cmd.setHandler = function setHandler(handler) {
	      cmd.handler = handler;
	      return cmd;
	    }

	    /**
	     * @summary **Single line description of this command**
	     * @param {string} prefix the prefix to put on the command.
	     * @returns {string} the command description.
	     */  
	    cmd._helpSummary = function _helpSummary(prefix) {
	      var cmdName = prefix + cmd.keyword;
	      var helpLine = _.padRight(cmdName, 9) + ': ' + cmd.desc;
	      return helpLine;
	    }

	    /**
	     * @summary **Mulitline detailed logging of the help for this command**
	     * @param {string} prefix the prefix to put on the command name.
	     */  
	    cmd._helpDetail = function _helpDetail(prefix) {
	      var cmdName = prefix + cmd.keyword;
	      var format = cmd.format.join(' ');
	      mm.log('Command:', cmdName, format, ':', cmd.desc);
	      // Show the acceptable enumerated argument values.
	      if (_.size(cmd.argEnums) > 0) {
	        _.forEach(cmd.argEnums, function (values, key) {
	          mm.log('   Argument "' + key + '" in [' + values + ']');
	        });
	      }
	      if (cmd.aliases.length > 0) {
	        var aliasText = '   Alias' + (cmd.aliases.length > 1 ? 'es' : '');
	        aliasText = aliasText + ': ' + cmd.aliases.join(', ');
	        mm.log(aliasText);
	      }
	      if (cmd.help) {
	        mm.log('  ', cmd.help);
	      }
	    }

	    /**
	     * @summary **Evaluate actual command line arguments**
	     * @description
	     * This parses the command line arguments based on the format
	     * and any enumerated arguments.
	     * @param {string[]} args the arguments supplied on the command line.
	     * @returns {*} the arguments object or an Error.
	     */  
	    cmd._evalArgs = function _evalArgs(args, cs) {
	      try {    
	        if (cmd.adminRequired) {
	          /* istanbul ignore if */ // Tested independently.
	          if (!cs.userConfig.administrator) {
	            var ea = 'You must be an administrator to do this.';
	            return new Error(ea);
	          }
	        }
	        // When a format is supplied, check the arguments against it and
	        // build a populated args object.
	        var oargs = {};
	        var remainderIsArray = false;
	        if (cmd.format.length > 0) {
	          var i = 0;
	          var fargs = cmd.format;
	          for (var fargi in fargs) {
	            i++;
	            var farg = fargs[fargi];
	            /* istanbul ignore if */ // Tested independently.
	            if (remainderIsArray) {
	              // mm.log('-------- OArguments:', oargs);      
	              return oargs;
	            }
	              
	            var arg = args[i];
	            var optional = _.startsWith(farg, '['); 
	            if (optional) farg = farg.substring(1, farg.length - 1);
	            var array = _.endsWith(farg, '()');
	            if (array) {
	              remainderIsArray = true;
	              farg = farg.substring(0, farg.length - 2);
	              var arrayArg = _.slice(args, i);
	              oargs[farg] = arrayArg;
	              if (!optional && arrayArg.length === 0) {
	                var e1 = cmd.keyword + ' requires at least one "' +
	                        farg + '" argument';
	                return new Error(e1);
	              }
	            }
	            else {
	              oargs[farg] = ''; // Create blanks for each argument.
	              /* istanbul ignore if */ // Tested independently.
	              if (!optional && !arg) {
	                var e2 = cmd.keyword + ' requires a "' + farg + '" argument';
	                return new Error(e2);
	              }
	              if (arg) {
	                var argEnum = cmd.argEnums[farg];
	                if (argEnum) {
	                  var allowedVals = argEnum.split('|');
	                  var textAllowed = false;
	                  var textVerified  = false;
	                  var verifier;
	                  var lv = allowedVals[allowedVals.length - 1];
	                  if (_.startsWith(lv, '*')) {
	                    allowedVals.pop();
	                    textAllowed = true;
	                    textVerified = _.startsWith(lv, '*(');
	                    if (textVerified) {
	                      verifier = lv.substring(2, lv.length - 1);
	                    }
	                  }
	                  /* istanbul ignore if */ // Tested independently.
	                  if (!_.contains(allowedVals, arg)) {
	                    if (textAllowed) {
	                      if (textVerified) {
	                        if (!cmd[verifier](arg)) {
	                          var e4 = 'Argument "' + arg +
	                                   '" is not a valid ' + verifier;
	                          return new Error(e4);
	                        }
	                      }
	                    }
	                    else {
	                      var e3 = 'Argument "' + arg + '" must be in ' + allowedVals;
	                      return new Error(e3);
	                    }
	                  }
	                }
	                oargs[farg] = arg; // Add to the object.
	              }
	            }
	          }

	          //mm.log('-------- Arguments:', oargs);      
	          return oargs;
	        }
	      }
	      catch (e) {
	        mm.log.error('Cmd eval:', e.stack);
	        return e;
	      }
	    }      
	  }

	  return Cmd;
	}


/***/ },
/* 10 */
/*!****************************!*\
  !*** ./src/core/CmdSet.js ***!
  \****************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview A set of commands along with handlers and documentation
	 * @module core/CmdSet
	 */ 
	module.exports = function registerCliCommands(mm) {
	  var check = mm.check;
	  var _     = check(mm._);
	  var qq    = check(mm.Q);
	  var Cmd   = check(mm.core.Cmd);

	  /**
	   * @summary **A set of CLI commands**
	   * @description
	   * Declares command keywords, parameters, help information and a
	   * function for handling the command.
	   * @constructor
	   * @returns {CmdSet} the set of commands.
	   */  
	  var CmdSet = function cmdSetCtor() {
	    var self = this;
	    self.initialized = false;
	    self.basecmds = [];
	    self.subsets = {};
	    self.keywords = [];
	    self.cmds = {};
	    self.timeoutSec = 30;
	    self.helpPrefix = '';
	    return self;
	  }

	  /**
	   * @summary **set the title for the set**
	   * @description
	   * A title is used in help messages.
	   * @param {string} title text to add to start of the help summary
	   * @returns {CmdSet} the CmdSet for chaining.
	   */    
	  CmdSet.prototype.setTitle = function setTitle(title) {
	    var self = this;
	    self.title = title;
	    return self;
	  }

	  /**
	   * @summary **add a footer to the help summary**
	   * @param {string} footer the text to add to the end of the help summary
	   * @returns {CmdSet} the CmdSet for chaining.
	   */    
	  CmdSet.prototype.helpFooter = function helpFooter(footer) {
	    var self = this;
	    self.footer = footer;
	    return self;
	  }

	  /**
	   * @summary **add a special footer to the help summary**
	   * @description
	   * Declares a footer for the help summary that is only shown when logged
	   * in as an administrator.
	   * @param {string} footer the text to add to the end of the help summary
	   * @returns {CmdSet} the CmdSet for chaining.
	   */    
	  CmdSet.prototype.adminHelpFooter = function adminHelpFooter(footer) {
	    var self = this;
	    self.adminFooter = footer;
	    return self;
	  }

	  /**
	   * @summary **initialize the command set**
	   * @returns {CmdSet} the CmdSet.
	   */    
	  CmdSet.prototype.done = function initialize() {
	    var self = this;
	    function setCmd(keyword, base) {
	      var word = keyword.toLowerCase();
	      self.keywords.push(word);
	      self.cmds[word] = base;
	    }
	    
	    function registerCmd(cmd, base) {
	      setCmd(cmd.keyword, base);
	      cmd.aliases.forEach(function(alias) { setCmd(alias, base); });
	      cmd.variants.forEach(function(variant) {
	        registerCmd(variant, base);
	      });
	    }
	    if (!self.initialized) {
	      self.basecmds.forEach(function(basecmd) {
	        registerCmd(basecmd, basecmd);
	      });
	    }
	    self.initialized = true;
	    if (!self.cmds.help) {
	      self.registerHelpCmd();
	    }
	    return self;
	  }
	  
	  /**
	   * @summary **add a `help` command to the set**
	   * @description
	   * If there is no `help` command declared before the set initialization
	   * is done, then this creates a default version of one.
	   * @returns {CmdSet} the CmdSet for chaining.
	   */    
	  CmdSet.prototype.registerHelpCmd = function registerHelpCmd() {
	    var self = this;
	    function helpCmdHandler(context, args) {
	      try { 
	        if (args.commandName) return qq(self.helpCmdDetail(context, args));
	        return qq(self.helpCmdSummary(context, args));
	      } catch (e) { mm.log.error('helpCmdHandler', e.stack); }
	    }

	    var helpCmd = new Cmd('help [commandName]',
	        'Display available commands')
	       .setHandler(helpCmdHandler);
	    self.cmds.help = helpCmd;
	    return self;
	  }

	  // List all of the available commands in this set.  
	  CmdSet.prototype.helpCmdSummary = function helpCmdSummary(context, args) {
	    var self = context.set;
	    var isAdmin = context.cs.userConfig.administrator;
	    var prefix = self.helpPrefix;
	    if (_.isString(self.title)) {
	      mm.log('-----', self.title, '-----');
	      mm.log();
	    }
	    var sortedCmds = [];
	    self.basecmds.forEach(function(basecmd) {
	      // Show admin commands only to an administrator.
	      if ((!basecmd.adminRequired) || isAdmin) {
	        sortedCmds.push(basecmd);
	        basecmd.variants.forEach(function(variant) {
	          sortedCmds.push(variant);
	        });
	      }
	    });
	    sortedCmds = _.sortBy(sortedCmds, 'keyword');
	    sortedCmds.forEach(function (cmd) {
	      mm.log(cmd._helpSummary(prefix));
	    });
	    if (_.size(self.subsets) > 0) {
	      mm.log();
	      _.forEach(self.subsets, function (subset, key) {
	        var sp = key.length > 1 ? ' ' : '';
	        mm.log(key + sp + '[command] : ' + subset.title);
	      });
	    }
	    
	    if (self.adminFooter && isAdmin) {
	      mm.log(self.adminFooter);
	    }
	    if (self.footer) {
	      mm.log(self.footer);
	    }
	    return true;
	  }

	  CmdSet.prototype.helpCmdDetail = function helpCmdDetail(context, args) {
	    var self = context.set;
	    var prefix = self.helpPrefix;
	    var cmdName = args.commandName.toLowerCase();
	    var cmd = self.cmds[cmdName];
	    if (!cmd && prefix && _.startsWith(cmdName, prefix)) {
	      cmdName = cmdName.substr(prefix.length);
	      cmd = self.cmds[cmdName];
	    }
	    if (cmd) {
	      cmd._helpDetail(prefix);
	      return true;    
	    }
	    else {
	      var e = new Error('No such command: "' + args.commandName + '"'); 
	      mm.log.error(e);
	      return true; // The help command has succeeded.
	    }
	  }
	  
	  /**
	   * @summary **add a command subset to the set**
	   * @description
	   * A command subset is a set of commands that require a prefix on
	   * the command line. If the prefix is a single character then no
	   * space is required between it and the sub-command keyword.
	   * Subsets are displayed with their own help (i.e. [prefix] help [cmd]).
	   * @param {string} prefix prefix to select the subset.
	   * @param {CmdSet} cmdSet command subset to add to this set.
	   * @returns {CmdSet} the current CmdSet being added to.
	   */    
	  CmdSet.prototype.addSubset = function addSubset(prefix, cmdSet) {
	    var self = this;
	    self.subsets[prefix] = cmdSet;
	    /* istanbul ignore next */ // Tested independently.
	    cmdSet.helpPrefix = prefix + (prefix.length > 1 ? ' ' : '');
	    return self;
	  }

	  /**
	   * @summary **set the default handler**
	   * @description
	   * The default handler is called when the command does not otherwise
	   * match any commands in the set or its subsets. The context is passed
	   * (which contains the exact `text` for the text that did not match.
	   * @param {function} handler the command handler.
	   * @returns {CmdSet} the current CmdSet being added to.
	   */    
	  CmdSet.prototype.setDefaultHandler = function setDefaultHandler(handler) {
	    var self = this;
	    self.defaultHandler = handler;
	    return self;
	  }

	  /**
	   * @summary **add an existing command to the set**
	   * @param {Cmd} cmd existing cmd to add to this set.
	   * @returns {Cmd} the Cmd being added.
	   */    
	  CmdSet.prototype.add = function addCommand(cmd) {
	    var self = this;
	    self.basecmds.push(cmd);
	    return cmd;
	  }

	  /**
	   * @summary **create a new command and add it to the set**
	   * @description
	   * A helper method for `cmd=new Cmd(), cmdSet.add(cmd)`.
	   * @param {string} keywordFormat a command keyword followed by optional format
	   * @param {string} desc the short (one line) command description
	   * @param {string} help the multiline help message if available
	   * @returns {Cmd} the command
	   */    
	  CmdSet.prototype.cmd = function newCommand(keywordFormat, desc, help) {
	    var self = this;
	    var helpArg = Array.prototype.slice.call(arguments, 2).join(' ');
	    var cmd = new Cmd(keywordFormat, desc, helpArg);
	    self.add(cmd);
	    return cmd;
	  }

	  /**
	   * @summary **do a command in this set**
	   * @description
	   * A command line is parsed and used to populate the context for a 
	   * matching keyword.  If the handler succeeds (returns a Promise that
	   * succeeds, or returns a truthy value) then a true promise is returned.
	   * If the handler fails (throws, returns false, or rejects a promise)
	   * then a rejected promise is returned.
	   * @param {string} the single or multiline command
	   * @param {ClientSession} the current client session
	   * @returns {Q(result)} Promise to the result of the handler or Q(false).
	   */    
	  CmdSet.prototype.doCmd = function doCmd(cmdText, cs) {
	    try {  
	      var self = this;
	      /* istanbul ignore if */ // Tested independently.
	      if (!self.initialized) self.done();
	      var args = mm.util.removeWhitespace(cmdText).split(' ');
	      var keyword = args[0].toLowerCase();
	      var cmd = self.cmds[keyword];
	      var arg1 = args.length > 1 ? args[1] : '';
	      var arg2 = args.length > 2 ? args[2] : '';
	      var arg3 = args.length > 3 ? args[3] : '';
	      
	      // Check for a matching command subset prefix.
	      if (!cmd && _.size(self.subsets) > 0) {
	        for (var prefix in self.subsets) {
	          if (_.startsWith(keyword, prefix)) {
	            var subset = self.subsets[prefix];
	            var subCmdText = cmdText.substr(prefix.length);
	            // Handle special subcmd help command format: "[prefix]? [command]"
	            if (_.startsWith(subCmdText, '?')) {
	              subCmdText = 'help ' + subCmdText.substring(1);
	            }
	            return subset.doCmd(subCmdText, cs);
	          }
	        }
	      }

	      // Handle special help command format: "[command] -h / -?"
	      if (arg1 === '-h' || arg1 === '-?' ) {
	        cmdText = 'help ' + keyword;
	        args = cmdText.split(' ');
	        arg1 = keyword;
	        keyword = 'help';
	        cmd = self.cmds[keyword];
	      }
	      
	      // Put QQ pending handling here xxxxxxxxxxxx
	      // Sequence the commands.

	      var handler = self.defaultHandler;
	      var timeout = self.timeoutSec * 1000;
	      if (!cmd && !handler) {
	        var nch = 'Sorry, No command: "' + cmdText + '"';
	  //mm.log.error('xxxxxxxxxxxxxxxx' + nch); 
	        return qq.reject(new Error(nch));
	      }

	      var context = {
	        keyword: keyword,
	        args: args,
	        arg1: arg1,
	        arg2: arg2,
	        arg3: arg3,
	        text: cmdText,
	        set: self,
	        cs: cs
	      }

	      if (cmd) {
	        timeout = (cmd.timeoutSec ? cmd.timeoutSec * 1000 : timeout);
	        var oargs = cmd._evalArgs(args, cs);
	        if (oargs instanceof Error) {
	          return qq.reject(oargs);
	        }
	        handler = cmd.handler.bind(cmd, context, oargs);
	      }
	      else {
	  //mm.log.error('DEFAULT TRYING:' + cmdText + ' with ', self.defaultHandler);     
	        if (!self.defaultHandler) {
	          var ndh = 'Sorry, No hander for command: "' + cmdText + '"';
	  //mm.log.error('xxxxxxxxxxxxxxxx' + ndh); 
	          return qq.reject(new Error(ndh));
	        }

	        handler = self.defaultHandler.bind(self, context);
	      }

	      var result;
	      try {
	        result = handler();
	      } catch (handlerError) {
	        // Make the exception the result.
	        result = handlerError;
	      }

	      if (!qq.isPromise(result)) {
	        if (result instanceof Error) {
	          result = qq.reject(result);
	        }
	        else {
	          if (result) {
	            // Truthy return.
	            result = qq(result);
	          }
	          else {
	            var ef = 'Command: "' + cmdText + '" failed';
	            result = qq.reject(new Error(ef));
	          }
	        }
	      }
	      return result.timeout(timeout, 'The command timed out').
	      then (function (emaybe) {
	        // Successful promises that are actually errors are a pain
	        // to handle. Make them into first class rejections.
	        if (emaybe instanceof Error) {
	          // -- We can turn Beans into Peas!!!
	          // Benson, dear Benson, you are so mercifully free of the
	          // ravages of intelligence.
	          return qq.reject(emaybe)
	        }
	        else {
	          return emaybe;
	        }
	      });
	    }
	    catch (e) { mm.log.fail(e); }    
	  }

	  CmdSet.Cmd = Cmd;
	  return CmdSet;
	}


/***/ },
/* 11 */
/*!***********************************!*\
  !*** ./src/core/MMeddleClient.js ***!
  \***********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview MMeddleClient
	 * @module core/MMeddleClient
	 */ 
	 module.exports = function(mm) {
	  var _           = mm.check(mm._);
	  var qq          = mm.check(mm.Q);

	  var clientConnectTimeout = mm.config.get('clientConnectTimeout', 10);
	  
	  //--------------------------------------------------------------------------
	  /**
	   * @summary **mMeddle client services**
	   * @description
	   * This provides socket.io connections to a server, as well as sending
	   * requests and receiving events.
	   * @constructor
	   * @param {string} host url of the MMeddleServer host
	   * @param {ClientSession} clientSession the client services session.
	   * @returns {MMeddleClient} the new client.
	   */  
	  var MMeddleClient = (function mmClientCtorCreator() {
	    var ctor = function MMeddleClient(host, clientSession) {
	      var self = this;
	      self.host = host;
	      self.connectedOnce = false;  //has connected at least once
	      self.connected = false;      //has a valid mmc (is connected to a server)
	      self.socket = null;          //the current socket.io socket
	      self.rqId = 0;               //Request number tracking.
	      self.rsPending = {};         //the set of pending responses
	      self.defaultRqTimeout = 10;  //Timeout in seconds.
	      self.socketid = '???';
	      self.clientSession = clientSession;
	    };
	  
	    return ctor;
	  }());

	  MMeddleClient.prototype.connectWorkspace =
	  function connectWorkspace(host) {
	    var self = this;
	    if (host) {
	      if (host === self.host) {
	        if (self.connectedP.isFulfilled()) {
	          mm.log('- Already connected to: [' + self.host + ']');
	        }
	        else if (self.connectedP.isRejected()) {
	          mm.log('- Retry connection to: [' + self.host + ']');
	          self.connectedD = null; // Do a connection to a new host.
	          self.connectedP = null;
	        }
	        else {
	          // Not yet resolved, allow it to resolve.
	        }
	      }
	      else {
	        self.host = host;
	        self.connectedD = null; // Do a connection to a new host.
	        self.connectedP = null;
	        mm.log('- Connecting to: [' + self.host + ']');
	      }
	    }
	    
	    /* istanbul ignore if */ 
	    if (self.connectedP) {
	      return self.connectedP;
	    }
	    try { 
	      // Assign this here or you may not get the mock version when
	      // you want it since mm.socketClient.io may be assigned well
	      // after this module is loaded.
	      var io = mm.check(mm.socketClient.io);
	      self.connectedD = qq.defer();
	      
	      //mm.log('- Connecting to: [' + self.host + ']');
	      self.socket = io.connect(self.host, {
	        'forceNew':true,
	        'max reconnection attempts': Infinity // defaults to 10
	      });
	      
	      // Handle connection request from the MMeddleServer/SocketService.
	      self.socket.on('mmConnectRq', function (data) {
	        mm.log.debug('--- received mmConnectRq:', data, mm.Logger.Priority.LOW);
	        self.socketid = data.id;

	        /* istanbul ignore if */ // Tested extensively.
	        if (self.connected) {
	          mm.log('- Reconnected SocketId:[{0}] Session:[{1}]',
	              self.socketid, self.clientSession.ws.sessionId);
	        }
	        else {
	          mm.log.debug('- new Connection:', self.clientSession.ws.sessionId);
	        }

	        self.emit('mmConnectRs', {
	            id: data.id,
	            sessionId: self.clientSession.ws.sessionId,
	            userName: self.clientSession.user.name,
	            from: mm.envText,
	            config: mm.config, // report what is known about the config.
	            at: _.now()
	        });

	        self.connectedOnce = true;
	        self.connected = true;
	        self.connectedD.resolve(true);
	      });
	      
	      // This handles any pending responses.  If the response has
	      // ok: true then the pending promise is resolved and the
	      // response is returned. If not the promise is rejected
	      // with the error code in the error field.
	      self.socket.on('mmWsRs', function (rs) {
	        mm.log.debug('--- received mmWsRs:', rs, mm.Logger.Priority.LOW);
	        var rqId = rs.rqId;
	        var pending = self.rsPending[rqId];
	        /* istanbul ignore if */   // Tested independently.
	        if (!pending) {
	          // Timeout has already rejected the response.
	          mm.log.warn('Received late response to ', rqId);
	          mm.log.debug('mmWs Late Response: ', rs);
	        }
	        else {
	          if (rs.ok !== true) {
	            var emsg = mm.util.trimPrefix(rs.error, 'Error: ');
	            pending.rsD.reject(new Error(emsg));
	          }
	          else {
	            rs._elapsed = _.now() - pending.at;
	            //mm.log(' Received response to ', rqId);
	            //mm.log.debug('mmWs Response: ', rs);
	            pending.rsD.resolve(rs);
	          }
	        }
	      })
	      
	      // Handle intermediate callbacks on a multipart response.
	      self.socket.on('mmWsCb', function (rs) {
	        var stopNow = false;
	        mm.log.debug('--- received mmWsCb:', rs, mm.Logger.Priority.LOW);
	        var rqId = rs.rqId;
	        var pending = self.rsPending[rqId];
	        /* istanbul ignore if */   // Tested independently.
	        if (!pending) {
	          // Timeout has already rejected the response.
	          mm.log.warn('Received late callback to ', rqId);
	          mm.log.debug('mmWs Late Callback: ', rs);
	        }
	        else {
	          if (rs.ok !== true) {
	            var emsg = mm.util.trimPrefix(rs.error, 'Error: ');
	            pending.rsD.reject(new Error(emsg));
	          }
	          else {
	            // Call the callback with the intermediate results.
	            if (pending.callback) {
	              if (!pending.erred && !pending.ignore) {
	                try {
	                  var content = rs.content ? rs.content : null;
	                  stopNow = pending.callback(content);
	                  // TODO: Instead of just ignoring all the remaining
	                  // traffic from the request, implement an 'mmWsAbort'
	                  // operation to shut off the source.
	                  if (stopNow && content) {
	                    pending.ignore = true;
	                    if (content !== null) {
	                      // After an abort is issued, this client may still
	                      // receive one or more callbacks before the closing
	                      // response.
	                      self.rqAbort(pending.rq);
	                    }
	                  }
	                }
	                catch (e) {
	                  pending.rsD.reject(e);
	                  pending.erred = true;
	                }
	                pending.cbc++;
	              }
	            }
	            else {
	              mm.log.error('Callback message on non-callback request', pending);
	            }
	          }
	        }
	      })

	    }
	    catch (e) {
	      /* istanbul ignore next */
	      self.connectedD.reject(e); /* istanbul ignore next */
	      mm.log.error('Socket IO failure:', e.stack);
	    }

	    var nocmsg = 'Connection to: [' + self.host + '] timed out';
	    self.connectedP = self.connectedD.promise.timeout(
	        clientConnectTimeout * 1000, nocmsg);
	    self.connectedP.fail(function (e) {
	      // No need for the message if another connection finally succeeded.
	      if (!self.connected) {
	        mm.log.error(e);
	      }
	    });
	    
	    return self.connectedP;
	  }
	  
	  /**
	   * @summary **Request to server with optional response**
	   * @description
	   * This provides server connection and control for mMeddle client
	   * applications.
	   *
	   * @param {string} op the operation being requested.
	   * @param {bool} rsRequired true if a return promise response is needed.
	   * @param {object} content the content for the operation.
	   * @param {bool|function} rsRequired true or callback function.   
	   * @param {number} timeout n optional timeout in seconds.
	   * @param {bool} abort true to abort the rq. op is the pending rq.
	   * @returns {bool|Promise} success true or promise to response.
	   */  
	  MMeddleClient.prototype.rq =
	  function rq(op, content, rsRequired, timeout) {
	    var self = this;
	    var rqId = op + '_' + self.rqId++;
	    var rsD;
	    var rsP;
	    // Queue a promise to resolve when the correspondimg mmWsRq shows up.
	    var callback = _.isFunction(rsRequired) ? rsRequired : null;
	    var hasCallback = callback ? true : false;
	    var rqObj = {
	        op: op,
	        sessionId: self.clientSession.ws.sessionId,
	        userName: self.clientSession.user.name,
	        rqId: rqId,
	        at: _.now(),
	        content: content,
	        rsRequired: rsRequired ? true : false,
	        callback: hasCallback
	    };
	    var tmttext = 'Rq timeout. Removing pending operation: ' + rqId;
	    if (rsRequired) {
	      rsD = qq.defer();
	      /* istanbul ignore else */ // tested independently.
	      if (!timeout) timeout = self.defaultRqTimeout;
	      rsP = rsD.promise.timeout(timeout * 1000, tmttext);
	      var pending = {
	        id: rqId,
	        at: rqObj.at,
	        rq: rqObj,
	        rsD: rsD,
	        callback: callback,
	        cbc: 0
	      }
	      
	      // Queue the pending wait for the response.
	      self.rsPending[rqId] = pending;
	      
	      // Handle timeouts, failures, and other completions.
	      rsP.fin(function (r) {
	        delete self.rsPending[rqId];
	      });
	    }
	    self.emit('mmWsRq', rqObj)
	    if (rsRequired) {
	      return rsP;
	    }
	    else {
	      return true;
	    }
	  }

	  /**
	   * @summary **Send a request abort to the server**
	   * @description
	   * A cancellation packet is sent to the server.
	   *
	   * @param {object} rq the request that is in progress.
	   */  
	  MMeddleClient.prototype.rqAbort =
	  function rqAbort(rq) {
	    var self = this;
	    self.emit('mmWsRqAbort', rq)
	  }

	  /**
	   * @summary **Request a socket reconnect from the server**
	   * @description
	   * This server should fairly quickly return a new connection with
	   * a new socket id. This will be mapped to the workspace session id
	   * and all will be well.
	   */
	  MMeddleClient.prototype.socket_reconnect =
	  /* istanbul ignore next */ // tested independently.  
	  function socket_reconnect() {
	    var self = this;
	    if (!self.socket) {
	      mm.log.error('No socket established. Socket.io failed.');
	    }
	    else {
	      if (self.connectedOnce) {
	        mm.log('- Socket reconnect: [' + self.host + ']');
	        self.socket.socket.reconnect();
	      }
	      else {
	        var host = self.host;
	        self.host = null; // Force a restart.
	        mm.log('- Socket connect: [' + host + ']');
	        self.connectWorkspace(host);
	      }
	    }
	  }

	  /**
	   * @summary **Request a socket disconnect from the server**
	   * @description
	   * The disconnect may be used if the client will have a long period
	   * of either limited connectivity or no server activity. After the
	   * disconnect, a reconnect will be required to resume communications.
	   */
	  /* istanbul ignore next */ // tested independently.
	  MMeddleClient.prototype.socket_disconnect =
	  function socket_disconnect() {
	    var self = this;
	    if (self.socket) {
	      mm.log('- Socket disconnect: [' + self.host + ']');
	      if (self.socket) self.socket.disconnect();
	    }
	    self.connected = false;
	  }

	  /**
	   * @summary **Emit a message to the server**
	   * @description
	   * This is the only routine that outputs to the socket so its a good
	   * place to put logging and tracing.
	   * @param {string} rqEvent the request event name
	   * @param {object} rqObj the request object sent to the server
	   */
	  MMeddleClient.prototype.emit =
	  function emit(rqEvent, rqObj) {
	    mm.log.debug(rqEvent, rqObj, mm.Logger.Priority.LOW); 
	    var self = this;
	    self.socket.emit(rqEvent, rqObj)
	  }
	  
	  return MMeddleClient;
	}

/***/ },
/* 12 */
/*!*******************************!*\
  !*** ./src/core/Workspace.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * @fileOverview Workspace manages the objects available to a session.
	 * @module core/Workspace
	 */ 
	'use strict';
	module.exports = function registerWorkspace(mm) {
	  var check  = mm.check;
	  var _      = check(mm._);
	  var Enum   = check(mm.obj.Enum);
	  var log    = check(mm.log);
	  var Logger = check(mm.Logger);
	  var CmdSet = check(mm.core.CmdSet);
	  var Parser = check(mm.mMath.Parser);
	  var MMath  = check(mm.mMath.MMath);
	  
	  // fixme - get the settings from mm.
	  var settings = {}
	  settings._props = {
	    numberMode: {
	      values: new Enum('num|big|imp')
	    }
	  };
	  
	  var NUMBERMODE = settings._props.numberMode.values;
	  settings.numberMode = NUMBERMODE.num;
	  settings.debugMode = false;
	  settings.glorm = 'fuzzle';

	  /**
	   * @summary **Create a persistent workspace**
	   * @description
	   * A workspace manages the persistent information about what a user is
	   * working on. It is saved to both browser/client localStorage and to
	   * server storage when online.
	   * @constructor
	   * @param {ClientSession} cs the current client session 
	   * @returns {Workspacee} the SocketService
	   */   
	  var Workspace = (function workspaceCtorCtor() {
	    // Any static data for all workspaces goes here.
	  
	    var Workspace = function workspaceCtor(cs) {
	      var ws = this;
	      ws.name = '';
	      ws.vars = {};
	      ws.settings = settings;
	      ws.saved = true;
	      
	      // Put these in the closure and not on the object since the
	      // values of ws are replaced from init.
	      var mmath = check(new MMath());
	      var parser = check(new Parser(ws, mmath, cs));

	      /**
	       * @summary Initialize a ws from a saved JSON object.
	       * @description
	       * All fields of the existing ws are replaced by those in the source
	       * object. Any fields NOT in the source object remain in the ws.
	       */      
	      Workspace.prototype.init = function init(wsObj) {
	        _.assign(ws, wsObj);
	        parser.update();
	      }

	      Object.defineProperty(ws, 'varsCount', {
	        get: function () { return _.keys(this.vars).length; },
	        enumerable: true,
	        configurable: true
	      });

	      Workspace.prototype.evaluate = function evaluate(expr) {
	        return parser.evaluate(expr);
	      }

	      Workspace.prototype.list = function list(prefixes, detailed) {
	        var ws = this;  
	        var n = 0;    
	        Object.keys(ws.vars).forEach(function (key) {
	          var matched = true;
	          if (prefixes && prefixes.length > 0) {
	            matched = false;
	            prefixes.forEach( function (prefix) {
	              prefix = _.trimRight(prefix, '*');
	              matched = matched || _.startsWith(key, prefix);
	            });
	          }
	          if (matched) {
	            if (detailed) {
	              /* istanbul ignore else */  // Tested independently
	              if (_.isFunction(ws.vars[key].f)) {
	                log('   ' + key + ' = ' + ws.vars[key].f);
	              }
	              else {
	                // Put quotes around currently unevaluated functions.
	                log('   ' + key + ' = \'' + ws.vars[key].f +'\'');
	              }
	            }
	            else {
	              log('   ' + key + ' = ' + ws.vars[key].human);
	            }
	            n++;
	          }
	        });

	        log('Listed', n, 'variables from workspace.');
	        return true;
	      }

	      Workspace.prototype.clear = function clear(variables) {
	        var ws = this;
	        /* istanbul ignore if */  // Tested independently
	        if (!variables || variables.length === 0) {
	          log('Use "all" to clear all variables, otherwise name the variable.');
	          return true;
	        }
	        if (variables[0] === 'all') {
	          ws.vars = {};
	          log('All variables cleared.');
	          ws.saved = true; // Doesn't matter if its saved.
	          return true;
	        }
	        variables.forEach(function (v) {
	          if (ws.vars[v]) {
	            delete ws.vars[v];
	            log('Removed variable: "'+ v + '"');
	            ws.saved = false;
	          }
	          else {
	            log('Variable "{0}" not found.', v);
	          }
	        });
	        return true;
	      }
	        
	      Workspace.prototype.dotCmdSet = function dotCmdSet() {
	        var ws = this;      
	        var cset = new CmdSet().setTitle('Workspace Control Commands');
	        cset.cmd('big',
	            'Use \'big\' numbers in computations')
	            .setHandler(function setBigNumberMode() {
	               ws.settings.numberMode = NUMBERMODE.big;
	               log('. Big Numbers mode.');
	               return true;
	            });
	        cset.cmd('num',
	            'Use \'normal\' numbers in computations')
	            .setHandler(function setNormalNumberMode() {
	               ws.settings.numberMode = NUMBERMODE.num;
	               log('. Normal numbers mode.');
	               return true;
	            });
	        cset.cmd('imp',
	            'Use \'imp\' for mMeddle implemented numbers in computations')
	            .setHandler(function setImpNumberMode() {
	               ws.settings.numberMode = NUMBERMODE.imp;
	               log('. mMeddle implemented numbers mode.');
	               return true;
	            });
	        cset.cmd('debug [state] [level]',
	            'Set debugging output modes',
	            '\'Debug on low\' selects low level debugging (verbose output)')
	            .argEnum('state', 'on|off|true|false')
	            .argEnum('level', 'high|low|normal')
	            .setHandler(function setDebugMode(context, args) {
	            /* istanbul ignore else */  // Tested independently
	            if (args.state || args.level) { 
	              /* istanbul ignore else */  // Tested independently
	              if (args.state && _.includes(['on', 'true'], args.state)) {
	                mm.loggers.debugLogger.enable();
	                ws.settings.debugMode = true;
	                mm.log('. Debug logging on.');
	              }
	              if (args.state && _.includes(['off', 'false'], args.state)) {
	                mm.loggers.debugLogger.disable();
	                ws.settings.debugMode = false;
	                mm.log('. Debug logging off.');
	              }
	              if (args.level) {
	                var mode = args.level.toUpperCase();
	                var priority = Logger.Priority[mode];
	                mm.loggers.debugLogger.allowPriority(priority);
	                mm.loggers.rootLogger.allowPriority(priority);
	                mm.log('. Debug logging mode is {0}.', mode);
	              }
	            }
	            else {
	              mm.loggers.debugLogger.disable();
	              ws.settings.debugMode = false;
	              mm.log('. Debug logging off.');
	            }
	            return true;
	          });
	        /* istanbul ignore next */  // Tested independently
	        cset.cmd('list [obj] [spec]',
	            'List a server object type',
	            '\'List user\' shows information about the current user\n',
	            '\'List users\' lists the currently connected users\n',
	            '\'List ws\' lists the workspaces for this user\n',
	            'Use [spec] to select a prefix to subset the objects to list.')
	            .argEnum('obj', 'user|users|ws')
	            .setHandler(function listObj(context, args) {
	              if (args.obj === 'users') {
	                return cs.listUserSessions()
	                .then(function (sessionEntries) {
	                  mm.log(sessionEntries);
	                  return true;
	                });
	              }
	              else if (args.obj === 'user') {
	                if (args.spec) {
	                  var userName = args.spec;
	                  return cs.getUser(userName)
	                  .then(function (users) {
	                    if (users.length === 0) {
	                      mm.log('- User matching "{0}" not found', userName);
	                    }
	                    else {
	                      users.forEach(function (user) {
	                        //mm.log('- User: ', user);
	                        mm.log('- "{0}" is {1} {2}  email:{3}', 
	                            user.name,
	                            user.firstName, user.lastName, user.email);
	                        
	                      });
	                    }
	                    return true;
	                  });
	                }
	                else {
	                    mm.log('- This User: ', cs.user);
	                    if (cs.loggedIn) {
	                      if (cs.loggedIn.name === cs.user.name) {
	                        mm.log('- Logged in.');
	                      }
	                      else {
	                        mm.log.warn('- But logged in as :', 
	                          cs.loggedIn.name);
	                      }
	                    }
	                    else {
	                      mm.log('- Not logged in.');
	                    }
	                }
	              }
	              else {
	                mm.log('- List {0} * NOT IMPLEMENTED *', args.obj);
	              }
	              return true;
	            });
	        /* istanbul ignore next */  // Tested independently            
	        cset.cmd('user [op]',
	            'Perform a user operation')
	            .argEnum('op', 'delete|list|create|logout')
	            .setHandler(function userOp(context, args) {
	              if (args.op === 'delete') {
	                return cs.userDelete()
	                .then(function (msg) {
	                  mm.log(msg);
	                  return true;
	                },
	                function (err) {
	                  mm.log(err);
	                  return true;
	                });
	              }
	              else if (args.op === 'list') {
	                mm.log('. user', args.op,'* NOT IMPLEMENTED *');
	                return true;
	              }
	              else if (args.op === 'create') {
	                mm.log('. user', args.op,'* NOT IMPLEMENTED *');
	                return true;
	              }
	              else if (args.op === 'logout') {
	                mm.log('. user', args.op,'* NOT IMPLEMENTED *');
	                return true;
	              }
	              else  {
	                mm.log('. user', args.op,'* NOT IMPLEMENTED *');
	                return true;
	              }
	            });
	        /* istanbul ignore next */  // Tested independently
	        cset.cmd('sync op [collection]',
	            'Perform a db/filesystem synchronize operation')
	            .argEnum('op', 'dbToFs|fsToDb')
	            .setAdmin()
	            .setHandler(function syncDbFs() {
	               mm.log('. sync * NOT IMPLEMENTED *');
	               return true;
	            });
	        /* istanbul ignore next */  // Tested independently
	        cset.cmd('host url',
	            'Switch host connection to the specified URL (or remote/local)')
	            .argEnum('url', 'remote|local|*(url)')
	            .setHandler(function hostConnect(context, args) {
	              var host = args.url;
	              if (host === 'remote') {
	                host = mm.config.remoteUrl;
	              }
	              else if (host === 'local') {
	                host = mm.config.localUrl
	              }
	              return cs.mmc.connectWorkspace(host)
	              .then(function () {
	                mm.log('- Connected to server: [{0}]', cs.mmc.host);
	              });
	            })
	            .url = function validateUrl(u) {
	              var h = mm.url.parse(u, false, true);
	              return h.host ? true : false;
	            };
	            
	        /* istanbul ignore next */  // Tested independently
	        cset.cmd('reconnect',
	            'Reconnect to the server')
	            .setHandler(function reconnect() {
	              cs.mmc.socket_reconnect();
	              return true;
	            });
	        cset.done();
	        return cset;
	      }
	    } // End of constructor for access to constructor closure.

	    return Workspace;
	  }()); // Run constructor initializer for static creations.

	  return Workspace;
	}

/***/ },
/* 13 */
/*!***************************!*\
  !*** ./src/core/index.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(mm) {
	  mm.core = {};
	  mm.core.CliConsole    = __webpack_require__(/*! ./CliConsole */ 5)(mm);
	  mm.core.Cmd           = __webpack_require__(/*! ./Cmd */ 9)(mm);
	  mm.core.CmdSet        = __webpack_require__(/*! ./CmdSet */ 10)(mm);    
	  mm.core.Workspace     = __webpack_require__(/*! ./Workspace */ 12)(mm);
	  mm.core.ClientSession = __webpack_require__(/*! ./ClientSession */ 6)(mm);
	                          __webpack_require__(/*! ./ClientSessionUser */ 7)(mm);
	                          __webpack_require__(/*! ./ClientSessionWorkspace */ 8)(mm);
	  mm.core.MMeddleClient = __webpack_require__(/*! ./MMeddleClient */ 11)(mm);
	  mm.core.CliCommands   = __webpack_require__(/*! ./CliCommands */ 4)(mm);
	};


/***/ },
/* 14 */
/*!***********************!*\
  !*** ./src/header.js ***!
  \***********************/
/***/ function(module, exports) {

	/**
	 * mmeddle.js 
	 * https://github.com/jfogarty/mmeddle
	 *
	 * mmeddle.js is a symbolic math workspace for JavaScript and Node.js.
	 *
	 * @version @@version
	 * @date    @@date
	 *
	 * @license
	 * Copyright (C) 2015 John Fogarty <johnhenryfogarty@gmail.com> (https://github.com/jfogarty)
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
	 * use this file except in compliance with the License. You may obtain a copy
	 * of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
	 * License for the specific language governing permissions and limitations under
	 * the License.
	 */


/***/ },
/* 15 */
/*!****************************!*\
  !*** ./src/mMath/MMath.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview mmath math function evaluator.
	 * @module mMath/MMath
	 * @description
	 * mmath wrappers the mathjs package to provide mmeddle specific
	 *  typing, to return symbolic expressions whenever an function is not yet
	 *  resolved to a constant value and to perform unit conversions.
	 * @credits
	 * mmath makes extensive use of the truly excellent mathjs package by 
	 *   Jos de Jong <wjosdejong@gmail.com> (https://github.com/josdejong) for 
	 *   numerical evaluation, and significant code and ideas from mathjs have
	 *    been hacked into mmeddle.
	 */ 
	'use strict';
	module.exports = function registerMmath(mm) {
	  var math = __webpack_require__(/*! mathjs */ 16);
	  var BigNumber = math.bignumber;
	  var LOW = mm.check(mm.Logger.Priority.LOW);  

	  math.config({
	    number: 'bignumber', // Default type of number: 'number' (default) or 'bignumber'
	    precision: 64        // Number of significant digits for BigNumbers
	  });  

	  var MMath = (function mMathCtorCtor() {
	    // Any static data for all mMath goes here.
	  
	    var MMath = function mMathCtor() {
	      var mmath = this;
	      mmath.E       = { constant: Math.E, 
	              desc: 'The mathematical constant e. This is Euler\'s number,' +
	                    'the base of natural logarithms.' };
	      mmath.LN2     = { constant: Math.LN2, 
	              desc: 'The natural logarithm of 2' };
	      mmath.LN10    = { constant: Math.LN10, 
	              desc: 'The natural logarithm of 10' };
	      mmath.LOG2E   = { constant: Math.LOG2E, 
	              desc: 'The base-2 logarithm of e' };
	      mmath.LOG10E  = { constant: Math.LOG10E, 
	              desc: 'The base-10 logarithm of e' };
	      mmath.PI      = { constant: Math.PI, 
	              desc: 'Pi. This is the ratio of the circumference of a circle ' + 
	                    'to its diameter' };
	      mmath.SQRT1_2 = { constant: Math.SQRT1_2, 
	              desc: 'The square root of 0.5, or, equivalently, one divided by ' +
	                    'the square root of 2' };
	      mmath.SQRT2   = { constant: Math.SQRT2, 
	              desc: 'The square root of 2' };
	      mmath.abs     = { func: Math.abs, 
	              desc: 'Returns the absolute value of a number.' };
	      mmath.acos    = { func: Math.acos, 
	              desc: 'Returns the arccosine of a number.' };
	      mmath.asin    = { func: Math.asin, 
	              desc: 'Returns the arcsine of a number.' };
	      mmath.atan    = { func: Math.atan, 
	              desc: 'Returns the arctangent of a number.' };
	      mmath.atan2   = { func: Math.atan2, 
	              desc: 'Returns the angle (in radians) from the X axis to a point ' +
	                    'represented by the supplied y and x coordinates.' }; 
	      mmath.ceil    = { func: Math.ceil, 
	              desc: 'Returns the smallest integer that ' +
	                    'is greater than or equal to the supplied numeric expression.' };
	      mmath.cos     = { func: Math.cos, 
	              desc: 'Returns the cosine of a number.' };
	      mmath.exp     = { func: Math.exp, 
	              desc: 'Returns e (the base of natural logarithms) raised to a power.' };
	      mmath.floor   = { func: Math.floor, 
	              desc: 'Returns the greatest integer that is less than or equal to ' +
	                    'the supplied numeric expression.' };
	      mmath.log     = { func: Math.log, 
	              desc: 'Returns the natural logarithm of a number.' };
	      mmath.max     = { func: Math.max, 
	              desc: 'Returns the greater of two supplied numeric expressions.' };
	      mmath.min     = { func: Math.min, 
	              desc: 'Returns the lesser of two supplied numbers.' };
	      mmath.pow     = { func: Math.pow, 
	              desc: 'Returns the value of a base expression raised to a ' + 
	                    'specified power.' };
	      mmath.random  = { func: Math.random, 
	              desc: 'Returns a pseudorandom number between 0 and 1.' };
	      mmath.round   = { func: Math.round, 
	              desc: 'Returns a specified numeric expression rounded to ' + 
	                    'the nearest integer.' };
	      mmath.sin     = { func: Math.sin,
	              desc: 'Returns the sine of a number.' };
	      mmath.sqrt    = { func: Math.sqrt, 
	              desc: 'Returns the square root of a number.' };
	      mmath.tan     = { func: Math.tan, 
	              desc: 'Returns the tangent of a number.' };

	      // Memoized big number factorial.
	      var factorial = (function factorialCtor() {
	        var f = [1, 1];
	        var i = 2;
	        return function _factorial (n) {
	          if (f[n] > 0) return f[n];
	          var result = f[i-1]; // get the highest memoized result.
	          for (; i <= n; i++) f[i] = result = result * i;
	          return result;
	        }
	      }())

	      // Memoized simple number factorial.
	      var bnFactorial = (function bnFactorialCtor() {
	        var f = [new BigNumber('1'), new BigNumber('1')];
	        var i = 2;
	        return function bn_factorial(n)
	        {
	          if (typeof f[n] !== 'undefined') return f[n];
	          var result = f[i-1];
	          for (; i <= n; i++) f[i] = result = math.multiply(result, i);
	          return result;
	        }
	      }())
	      
	      // Takes about 8 iterations to converge on the same result as Math.sin
	      // with a typical delta under 3E-16.  Note this is a direct implementation
	      // of the taylor series without optimization.  An intelligent version
	      // would take advantage of the work done in the prior iteration. Even
	      // the factorial can be avoided that way.
	      // sin(x) = x - x^3/3! + x^5/5! - x^7/7! + x^9/9! - ...
	      mmath.sin.real = function sin(x) {
	        mm.log.debug('- Taylor series version of sine function for (', x, ')', LOW);
	        function nodd(n) { return (n % 2 === 0) ? 1 : -1 }
	        function t(x, n) { return Math.pow(x, n) / factorial(n) }
	        function s(n) { return nodd((n - 1) / 2) }
	        var result = x;
	        var lastResult = x;
	        var n = 1;
	        var i = 0;
	        var unchanged = false;
	        do {
	          lastResult = result;
	          n += 2;
	          i++;
	          var tn = t(x, n);
	          result += s(n) * tn;
	          mm.log.debug('--- sin(', x, ') i=', i, 'tn=', tn,
	              'lastr=', lastResult, 'r=', result, LOW);
	          unchanged = result === lastResult;
	        } while (!unchanged);
	        var msin = Math.sin(x);
	        mm.log.debug('- real.sin(', result, ') Math.sin=', msin,
	            'delta=', Math.abs(result - msin), LOW);
	        return result;    
	      }
	      
	      // Takes about 23 iterations to converge on the same result as Math.sin.
	      // Since decimal inputs are limited to 15 significant digits, the delta
	      // is less than 10e-14.
	      // Note this is a direct implementation of the taylor series without
	      //  optimization.  An intelligent version would take advantage of the 
	      // work done in the prior iteration. Even the factorial can be avoided.  
	      // sin(x) = x - x^3/3! + x^5/5! - x^7/7! + x^9/9! - ...
	      mmath.sin.big = function bn_sin(xin) {
	        var x = new BigNumber(xin.toString().substring(0, 15));
	        mm.log.debug(
	            '- Taylor series version of BigNumber sine function for ({0})',
	            x, LOW);
	        function nodd(n) { return (n % 2 === 0) ? 1 : -1 }
	        function s(n) { return nodd((n - 1) / 2) }
	        function t(x, n) { 
	          return math.divide(math.pow(x, n), bnFactorial(n));
	        }
	        
	        var result = x;
	        var lastResult;
	        var n = 1;
	        var i = 0;
	        var unchanged = false;
	        do {
	          n += 2;
	          i++;
	          lastResult = result;    
	          var tn = t(x, n);
	          mm.log.debug('--- sin({0}) i={1} tn={2} lastr={3} r={4}',
	              x, i, tn, lastResult, result, LOW);
	          if (s(n) < 0) result = math.subtract(result, tn)
	                   else result = math.add(result, tn);
	          unchanged = result.equals(lastResult);        
	        } while (!unchanged);
	        var msin = Math.sin(xin);
	        mm.log.debug('- big.sin({0}) Math.sin={1} delta={2}', 
	           result, msin, math.abs(math.subtract(result, msin)),
	           LOW);
	        return result;    
	      }
	      
	      mmath.sin.f = mmath.sin.real; // default implementation for real values.

	    } // End of constructor for access to constructor closure.

	    return MMath;
	  }()); // Run constructor initializer for static creations.

	  return MMath;
	}  


/***/ },
/* 16 */
/*!***************************!*\
  !*** ./~/mathjs/index.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var core = __webpack_require__(/*! ./core */ 17);

	/**
	 * math.js factory function. Creates a new instance of math.js
	 *
	 * @param {Object} [config] Available configuration options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'matrix' (default) or 'array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'bignumber', or
	 *                              'fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-2)`
	 *                              returns `NaN` when predictable is false, and
	 *                              returns `complex('2i')` when true.
	 */
	function create (config) {
	  // create a new math.js instance
	  var math = core.create(config);
	  math.create = create;

	  // import data types, functions, constants, expression parser, etc.
	  math.import(__webpack_require__(/*! ./lib */ 29));

	  return math;
	}

	// return a new instance of math.js
	module.exports = create();


/***/ },
/* 17 */
/*!**************************!*\
  !*** ./~/mathjs/core.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./lib/core/core */ 18);

/***/ },
/* 18 */
/*!***********************************!*\
  !*** ./~/mathjs/lib/core/core.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var isFactory = __webpack_require__(/*! ./../utils/object */ 21).isFactory;
	var deepExtend = __webpack_require__(/*! ./../utils/object */ 21).deepExtend;
	var typedFactory = __webpack_require__(/*! ./typed */ 22);
	var emitter = __webpack_require__(/*! ./../utils/emitter */ 19);

	var importFactory = __webpack_require__(/*! ./import */ 26);
	var configFactory = __webpack_require__(/*! ./config */ 28);

	/**
	 * Math.js core. Creates a new, empty math.js instance
	 * @param {Object} [options] Available options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'matrix' (default) or 'array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'bignumber', or 'fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-2)`
	 *                              returns `NaN` when predictable is false, and
	 *                              returns `complex('2i')` when true.
	 * @returns {Object} Returns a bare-bone math.js instance containing
	 *                   functions:
	 *                   - `import` to add new functions
	 *                   - `config` to change configuration
	 *                   - `on`, `off`, `once`, `emit` for events
	 */
	exports.create = function create (options) {
	  // simple test for ES5 support
	  if (typeof Object.create !== 'function') {
	    throw new Error('ES5 not supported by this JavaScript engine. ' +
	    'Please load the es5-shim and es5-sham library for compatibility.');
	  }

	  // cached factories and instances
	  var factories = [];
	  var instances = [];

	  // create a namespace for the mathjs instance, and attach emitter functions
	  var math = emitter.mixin({});
	  math.type = {};
	  math.expression = {
	    transform: Object.create(math)
	  };

	  // create a new typed instance
	  math.typed = typedFactory.create(math.type);

	  // create configuration options. These are private
	  var _config = {
	    // minimum relative difference between two compared values,
	    // used by all comparison functions
	    epsilon: 1e-14,

	    // type of default matrix output. Choose 'matrix' (default) or 'array'
	    matrix: 'matrix',

	    // type of default number output. Choose 'number' (default) or 'bignumber'
	    number: 'number',

	    // number of significant digits in BigNumbers
	    precision: 64,

	    // predictable output type of functions. When true, output type depends only
	    // on the input types. When false (default), output type can vary depending
	    // on input values. For example `math.sqrt(-2)` returns `NaN` when
	    // predictable is false, and returns `complex('2i')` when true.
	    predictable: false
	  };

	  if (options) {
	    // merge options
	    deepExtend(_config, options);
	  }

	  /**
	   * Load a function or data type from a factory.
	   * If the function or data type already exists, the existing instance is
	   * returned.
	   * @param {{type: string, name: string, factory: Function}} factory
	   * @returns {*}
	   */
	  function load (factory) {
	    if (!isFactory(factory)) {
	      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
	    }

	    var index = factories.indexOf(factory);
	    var instance;
	    if (index === -1) {
	      // doesn't yet exist
	      if (factory.math === true) {
	        // pass with math namespace
	        instance = factory.factory(math.type, _config, load, math.typed, math);
	      }
	      else {
	        instance = factory.factory(math.type, _config, load, math.typed);
	      }

	      // append to the cache
	      factories.push(factory);
	      instances.push(instance);
	    }
	    else {
	      // already existing function, return the cached instance
	      instance = instances[index];
	    }

	    return instance;
	  }

	  // load the import and config functions
	  math['import'] = load(importFactory);
	  math['config'] = load(configFactory);

	  return math;
	};


/***/ },
/* 19 */
/*!***************************************!*\
  !*** ./~/mathjs/lib/utils/emitter.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	var Emitter = __webpack_require__(/*! tiny-emitter */ 20);

	/**
	 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
	 * @param {Object} obj
	 * @return {Object} obj
	 */
	exports.mixin = function (obj) {
	  // create event emitter
	  var emitter = new Emitter();

	  // bind methods to obj (we don't want to expose the emitter.e Array...)
	  obj.on   = emitter.on.bind(emitter);
	  obj.off  = emitter.off.bind(emitter);
	  obj.once = emitter.once.bind(emitter);
	  obj.emit = emitter.emit.bind(emitter);

	  return obj;
	};


/***/ },
/* 20 */
/*!******************************************!*\
  !*** ./~/mathjs/~/tiny-emitter/index.js ***!
  \******************************************/
/***/ function(module, exports) {

	function E () {
		// Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}

	E.prototype = {
		on: function (name, callback, ctx) {
	    var e = this.e || (this.e = {});
	    
	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx
	    });
	    
	    return this;
	  },

	  once: function (name, callback, ctx) {
	    var self = this;
	    var fn = function () {
	      self.off(name, fn);
	      callback.apply(ctx, arguments);
	    };
	    
	    return this.on(name, fn, ctx);
	  },

	  emit: function (name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;
	    
	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }
	    
	    return this;
	  },

	  off: function (name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];
	    
	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback) liveEvents.push(evts[i]);
	      }
	    }
	    
	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

	    (liveEvents.length) 
	      ? e[name] = liveEvents
	      : delete e[name];
	    
	    return this;
	  }
	};

	module.exports = E;


/***/ },
/* 21 */
/*!**************************************!*\
  !*** ./~/mathjs/lib/utils/object.js ***!
  \**************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Clone an object
	 *
	 *     clone(x)
	 *
	 * Can clone any primitive type, array, and object.
	 * If x has a function clone, this function will be invoked to clone the object.
	 *
	 * @param {*} x
	 * @return {*} clone
	 */
	exports.clone = function clone(x) {
	  var type = typeof x;

	  // immutable primitive types
	  if (type === 'number' || type === 'string' || type === 'boolean' ||
	      x === null || x === undefined) {
	    return x;
	  }

	  // use clone function of the object when available
	  if (typeof x.clone === 'function') {
	    return x.clone();
	  }

	  // array
	  if (Array.isArray(x)) {
	    return x.map(function (value) {
	      return clone(value);
	    });
	  }

	  if (x instanceof Number)    return new Number(x.valueOf());
	  if (x instanceof String)    return new String(x.valueOf());
	  if (x instanceof Boolean)   return new Boolean(x.valueOf());
	  if (x instanceof Date)      return new Date(x.valueOf());
	  if (x && x.isBigNumber === true) return x; // bignumbers are immutable
	  if (x instanceof RegExp)  throw new TypeError('Cannot clone ' + x);  // TODO: clone a RegExp

	  // object
	  var m = {};
	  for (var key in x) {
	    if (x.hasOwnProperty(key)) {
	      m[key] = clone(x[key]);
	    }
	  }
	  return m;
	};

	/**
	 * Extend object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 */
	exports.extend = function(a, b) {
	  for (var prop in b) {
	    if (b.hasOwnProperty(prop)) {
	      a[prop] = b[prop];
	    }
	  }
	  return a;
	};

	/**
	 * Deep extend an object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @returns {Object}
	 */
	exports.deepExtend = function deepExtend (a, b) {
	  // TODO: add support for Arrays to deepExtend
	  if (Array.isArray(b)) {
	    throw new TypeError('Arrays are not supported by deepExtend');
	  }

	  for (var prop in b) {
	    if (b.hasOwnProperty(prop)) {
	      if (b[prop] && b[prop].constructor === Object) {
	        if (a[prop] === undefined) {
	          a[prop] = {};
	        }
	        if (a[prop].constructor === Object) {
	          deepExtend(a[prop], b[prop]);
	        }
	        else {
	          a[prop] = b[prop];
	        }
	      } else if (Array.isArray(b[prop])) {
	        throw new TypeError('Arrays are not supported by deepExtend');
	      } else {
	        a[prop] = b[prop];
	      }
	    }
	  }
	  return a;
	};

	/**
	 * Deep test equality of all fields in two pairs of arrays or objects.
	 * @param {Array | Object} a
	 * @param {Array | Object} b
	 * @returns {boolean}
	 */
	exports.deepEqual = function deepEqual (a, b) {
	  var prop, i, len;
	  if (Array.isArray(a)) {
	    if (!Array.isArray(b)) {
	      return false;
	    }

	    if (a.length != b.length) {
	      return false;
	    }

	    for (i = 0, len = a.length; i < len; i++) {
	      if (!exports.deepEqual(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  }
	  else if (a instanceof Object) {
	    if (Array.isArray(b) || !(b instanceof Object)) {
	      return false;
	    }

	    for (prop in a) {
	      //noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }
	    for (prop in b) {
	      //noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }
	    return true;
	  }
	  else {
	    return (typeof a === typeof b) && (a == b);
	  }
	};

	/**
	 * Test whether the current JavaScript engine supports Object.defineProperty
	 * @returns {boolean} returns true if supported
	 */
	exports.canDefineProperty = function () {
	  // test needed for broken IE8 implementation
	  try {
	    if (Object.defineProperty) {
	      Object.defineProperty({}, 'x', {});
	      return true;
	    }
	  } catch (e) {}

	  return false;
	};

	/**
	 * Attach a lazy loading property to a constant.
	 * The given function `fn` is called once when the property is first requested.
	 * On older browsers (<IE8), the function will fall back to direct evaluation
	 * of the properties value.
	 * @param {Object} object   Object where to add the property
	 * @param {string} prop     Property name
	 * @param {Function} fn     Function returning the property value. Called
	 *                          without arguments.
	 */
	exports.lazy = function (object, prop, fn) {
	  if (exports.canDefineProperty()) {
	    var _uninitialized = true;
	    var _value;
	    Object.defineProperty(object, prop, {
	      get: function () {
	        if (_uninitialized) {
	          _value = fn();
	          _uninitialized = false;
	        }
	        return _value;
	      },

	      set: function (value) {
	        _value = value;
	        _uninitialized = false;
	      },

	      configurable: true,
	      enumerable: true
	    });
	  }
	  else {
	    // fall back to immediate evaluation
	    object[prop] = fn();
	  }
	};

	/**
	 * Traverse a path into an object.
	 * When a namespace is missing, it will be created
	 * @param {Object} object
	 * @param {string} path   A dot separated string like 'name.space'
	 * @return {Object} Returns the object at the end of the path
	 */
	exports.traverse = function(object, path) {
	  var obj = object;

	  if (path) {
	    var names = path.split('.');
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      if (!(name in obj)) {
	        obj[name] = {};
	      }
	      obj = obj[name];
	    }
	  }

	  return obj;
	};

	/**
	 * Test whether an object is a factory. a factory has fields:
	 *
	 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
	 * - name: string (optional)
	 * - path: string    A dot separated path (optional)
	 * - math: boolean   If true (false by default), the math namespace is passed
	 *                   as fifth argument of the factory function
	 *
	 * @param {*} object
	 * @returns {boolean}
	 */
	exports.isFactory = function (object) {
	  return object && typeof object.factory === 'function';
	};


/***/ },
/* 22 */
/*!************************************!*\
  !*** ./~/mathjs/lib/core/typed.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var typedFunction = __webpack_require__(/*! typed-function */ 23);
	var digits = __webpack_require__(/*! ./../utils/number */ 24).digits;

	// returns a new instance of typed-function
	var createTyped = function () {
	  // initially, return the original instance of typed-function
	  // consecutively, return a new instance from typed.create.
	  createTyped = typedFunction.create;
	  return typedFunction;
	};

	/**
	 * Factory function for creating a new typed instance
	 * @param {Object} type   Object with data types like Complex and BigNumber
	 * @returns {Function}
	 */
	exports.create = function create(type) {
	  // TODO: typed-function must be able to silently ignore signatures with unknown data types

	  // get a new instance of typed-function
	  var typed = createTyped();

	  // define all types. The order of the types determines in which order function
	  // arguments are type-checked (so for performance it's important to put the
	  // most used types first).
	  typed.types = [
	    { name: 'number',               test: function (x) { return typeof x === 'number'; } },
	    { name: 'Complex',              test: function (x) { return x && x.isComplex; } },
	    { name: 'BigNumber',            test: function (x) { return x && x.isBigNumber; } },
	    { name: 'Fraction',             test: function (x) { return x && x.isFraction; } },
	    { name: 'Unit',                 test: function (x) { return x && x.isUnit; } },
	    { name: 'string',               test: function (x) { return typeof x === 'string'; } },
	    { name: 'Array',                test: Array.isArray },
	    { name: 'Matrix',               test: function (x) { return x && x.isMatrix; } },
	    { name: 'DenseMatrix',          test: function (x) { return x && x.isDenseMatrix; } },
	    { name: 'SparseMatrix',         test: function (x) { return x && x.isSparseMatrix; } },
	    { name: 'ImmutableDenseMatrix', test: function (x) { return x && x.isImmutableDenseMatrix; } },
	    { name: 'Range',                test: function (x) { return x && x.isRange; } },
	    { name: 'Index',                test: function (x) { return x && x.isIndex; } },
	    { name: 'boolean',              test: function (x) { return typeof x === 'boolean'; } },
	    { name: 'ResultSet',            test: function (x) { return x && x.isResultSet; } },
	    { name: 'Help',                 test: function (x) { return x && x.isHelp; } },
	    { name: 'function',             test: function (x) { return typeof x === 'function';} },
	    { name: 'Date',                 test: function (x) { return x instanceof Date; } },
	    { name: 'RegExp',               test: function (x) { return x instanceof RegExp; } },
	    { name: 'Object',               test: function (x) { return typeof x === 'object'; } },
	    { name: 'null',                 test: function (x) { return x === null; } },
	    { name: 'undefined',            test: function (x) { return x === undefined; } }
	  ];

	  // TODO: add conversion from BigNumber to number?
	  typed.conversions = [
	    {
	      from: 'number',
	      to: 'BigNumber',
	      convert: function (x) {
	        // note: conversion from number to BigNumber can fail if x has >15 digits
	        if (digits(x) > 15) {
	          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' +
	          '(value: ' + x + '). ' +
	          'Use function bignumber(x) to convert to BigNumber.');
	        }
	        return new type.BigNumber(x);
	      }
	    }, {
	      from: 'number',
	      to: 'Complex',
	      convert: function (x) {
	        return new type.Complex(x, 0);
	      }
	    }, {
	      from: 'number',
	      to: 'string',
	      convert: function (x) {
	        return x + '';
	      }
	    }, {
	      from: 'BigNumber',
	      to: 'Complex',
	      convert: function (x) {
	        return new type.Complex(x.toNumber(), 0);
	      }
	    }, {
	      from: 'number',
	      to: 'Fraction',
	      convert: function (x) {
	        if (digits(x) > 15) {
	          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to Fraction ' +
	              '(value: ' + x + '). ' +
	              'Use function fraction(x) to convert to Fraction.');
	        }
	        return new type.Fraction(x);
	      }
	    }, {
	      from: 'string',
	      to: 'number',
	      convert: function (x) {
	        var n = Number(x);
	        if (isNaN(n)) {
	          throw new Error('Cannot convert "' + x + '" to a number');
	        }
	        return n;
	      }
	    }, {
	      from: 'boolean',
	      to: 'number',
	      convert: function (x) {
	        return +x;
	      }
	    }, {
	      from: 'boolean',
	      to: 'BigNumber',
	      convert: function (x) {
	        return new type.BigNumber(+x);
	      }
	    }, {
	      from: 'boolean',
	      to: 'string',
	      convert: function (x) {
	        return +x;
	      }
	    }, {
	      from: 'null',
	      to: 'number',
	      convert: function () {
	        return 0;
	      }
	    }, {
	      from: 'null',
	      to: 'string',
	      convert: function () {
	        return 'null';
	      }
	    }, {
	      from: 'null',
	      to: 'BigNumber',
	      convert: function () {
	        return new type.BigNumber(0);
	      }
	    }, {
	      from: 'Array',
	      to: 'Matrix',
	      convert: function (array) {
	        // TODO: how to decide on the right type of matrix to create?
	        return new type.DenseMatrix(array);
	      }
	    }, {
	      from: 'Matrix',
	      to: 'Array',
	      convert: function (matrix) {
	        return matrix.valueOf();
	      }
	    }
	  ];

	  return typed;
	};


/***/ },
/* 23 */
/*!*****************************************************!*\
  !*** ./~/mathjs/~/typed-function/typed-function.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * typed-function
	 *
	 * Type checking for JavaScript functions
	 *
	 * https://github.com/josdejong/typed-function
	 */
	'use strict';

	(function (factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // OldNode. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like OldNode.
	    module.exports = factory();
	  } else {
	    // Browser globals (root is window)
	    window.typed = factory();
	  }
	}(function () {
	  // factory function to create a new instance of typed-function
	  // TODO: allow passing configuration, types, tests via the factory function
	  function create() {
	    /**
	     * Get a type test function for a specific data type
	     * @param {string} name                   Name of a data type like 'number' or 'string'
	     * @returns {Function(obj: *) : boolean}  Returns a type testing function.
	     *                                        Throws an error for an unknown type.
	     */
	    function getTypeTest(name) {
	      var test;
	      for (var i = 0; i < typed.types.length; i++) {
	        var entry = typed.types[i];
	        if (entry.name === name) {
	          test = entry.test;
	          break;
	        }
	      }

	      if (!test) {
	        var hint;
	        for (i = 0; i < typed.types.length; i++) {
	          entry = typed.types[i];
	          if (entry.name.toLowerCase() == name.toLowerCase()) {
	            hint = entry.name;
	            break;
	          }
	        }

	        throw new Error('Unknown type "' + name + '"' +
	            (hint ? ('. Did you mean "' + hint + '"?') : ''));
	      }
	      return test;
	    }

	    /**
	     * Retrieve the function name from a set of functions, and check
	     * whether the name of all functions match (if given)
	     * @param {Array.<function>} fns
	     */
	    function getName (fns) {
	      var name = '';

	      for (var i = 0; i < fns.length; i++) {
	        var fn = fns[i];

	        // merge function name
	        if (fn.name != '') {
	          if (name == '') {
	            name = fn.name;
	          }
	          else if (name != fn.name) {
	            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
	            err.data = {
	              actual: fn.name,
	              expected: name
	            };
	            throw err;
	          }
	        }
	      }

	      return name;
	    }

	    /**
	     * Create an ArgumentsError. Creates messages like:
	     *
	     *   Unexpected type of argument (expected: ..., actual: ..., index: ...)
	     *   Too few arguments (expected: ..., index: ...)
	     *   Too many arguments (expected: ..., actual: ...)
	     *
	     * @param {String} fn         Function name
	     * @param {number} argCount   Number of arguments
	     * @param {Number} index      Current argument index
	     * @param {*} actual          Current argument
	     * @param {string} [expected] An optional, comma separated string with
	     *                            expected types on given index
	     * @extends Error
	     */
	    function createError(fn, argCount, index, actual, expected) {
	      var actualType = getTypeOf(actual);
	      var _expected = expected ? expected.split(',') : null;
	      var _fn = (fn || 'unnamed');
	      var anyType = _expected && contains(_expected, 'any');
	      var message;
	      var data = {
	        fn: fn,
	        index: index,
	        actual: actual,
	        expected: _expected
	      };

	      if (_expected) {
	        if (argCount > index && !anyType) {
	          // unexpected type
	          message = 'Unexpected type of argument in function ' + _fn +
	              ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';
	        }
	        else {
	          // too few arguments
	          message = 'Too few arguments in function ' + _fn +
	              ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';
	        }
	      }
	      else {
	        // too many arguments
	        message = 'Too many arguments in function ' + _fn +
	            ' (expected: ' + index + ', actual: ' + argCount + ')'
	      }

	      var err = new TypeError(message);
	      err.data = data;
	      return err;
	    }

	    /**
	     * Collection with function references (local shortcuts to functions)
	     * @constructor
	     * @param {string} [name='refs']  Optional name for the refs, used to generate
	     *                                JavaScript code
	     */
	    function Refs(name) {
	      this.name = name || 'refs';
	      this.categories = {};
	    }

	    /**
	     * Add a function reference.
	     * @param {Function} fn
	     * @param {string} [category='fn']    A function category, like 'fn' or 'signature'
	     * @returns {string} Returns the function name, for example 'fn0' or 'signature2'
	     */
	    Refs.prototype.add = function (fn, category) {
	      var cat = category || 'fn';
	      if (!this.categories[cat]) this.categories[cat] = [];

	      var index = this.categories[cat].indexOf(fn);
	      if (index == -1) {
	        index = this.categories[cat].length;
	        this.categories[cat].push(fn);
	      }

	      return cat + index;
	    };

	    /**
	     * Create code lines for all function references
	     * @returns {string} Returns the code containing all function references
	     */
	    Refs.prototype.toCode = function () {
	      var code = [];
	      var path = this.name + '.categories';
	      var categories = this.categories;

	      for (var cat in categories) {
	        if (categories.hasOwnProperty(cat)) {
	          var category = categories[cat];

	          for (var i = 0; i < category.length; i++) {
	            code.push('var ' + cat + i + ' = ' + path + '[\'' + cat + '\'][' + i + '];');
	          }
	        }
	      }

	      return code.join('\n');
	    };

	    /**
	     * A function parameter
	     * @param {string | string[] | Param} types    A parameter type like 'string',
	     *                                             'number | boolean'
	     * @param {boolean} [varArgs=false]            Variable arguments if true
	     * @constructor
	     */
	    function Param(types, varArgs) {
	      // parse the types, can be a string with types separated by pipe characters |
	      if (typeof types === 'string') {
	        // parse variable arguments operator (ellipses '...number')
	        var _types = types.trim();
	        var _varArgs = _types.substr(0, 3) === '...';
	        if (_varArgs) {
	          _types = _types.substr(3);
	        }
	        if (_types === '') {
	          this.types = ['any'];
	        }
	        else {
	          this.types = _types.split('|');
	          for (var i = 0; i < this.types.length; i++) {
	            this.types[i] = this.types[i].trim();
	          }
	        }
	      }
	      else if (Array.isArray(types)) {
	        this.types = types;
	      }
	      else if (types instanceof Param) {
	        return types.clone();
	      }
	      else {
	        throw new Error('String or Array expected');
	      }

	      // can hold a type to which to convert when handling this parameter
	      this.conversions = [];
	      // TODO: implement better API for conversions, be able to add conversions via constructor (support a new type Object?)

	      // variable arguments
	      this.varArgs = _varArgs || varArgs || false;

	      // check for any type arguments
	      this.anyType = this.types.indexOf('any') !== -1;
	    }

	    /**
	     * Order Params
	     * any type ('any') will be ordered last, and object as second last (as other
	     * types may be an object as well, like Array).
	     *
	     * @param {Param} a
	     * @param {Param} b
	     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
	     */
	    Param.compare = function (a, b) {
	      // TODO: simplify parameter comparison, it's a mess
	      if (a.anyType) return 1;
	      if (b.anyType) return -1;

	      if (contains(a.types, 'Object')) return 1;
	      if (contains(b.types, 'Object')) return -1;

	      if (a.hasConversions()) {
	        if (b.hasConversions()) {
	          var i, ac, bc;

	          for (i = 0; i < a.conversions.length; i++) {
	            if (a.conversions[i] !== undefined) {
	              ac = a.conversions[i];
	              break;
	            }
	          }

	          for (i = 0; i < b.conversions.length; i++) {
	            if (b.conversions[i] !== undefined) {
	              bc = b.conversions[i];
	              break;
	            }
	          }

	          return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);
	        }
	        else {
	          return 1;
	        }
	      }
	      else {
	        if (b.hasConversions()) {
	          return -1;
	        }
	        else {
	          // both params have no conversions
	          var ai, bi;

	          for (i = 0; i < typed.types.length; i++) {
	            if (typed.types[i].name === a.types[0]) {
	              ai = i;
	              break;
	            }
	          }

	          for (i = 0; i < typed.types.length; i++) {
	            if (typed.types[i].name === b.types[0]) {
	              bi = i;
	              break;
	            }
	          }

	          return ai - bi;
	        }
	      }
	    };

	    /**
	     * Test whether this parameters types overlap an other parameters types.
	     * @param {Param} other
	     * @return {boolean} Returns true when there are conflicting types
	     */
	    Param.prototype.overlapping = function (other) {
	      for (var i = 0; i < this.types.length; i++) {
	        if (contains(other.types, this.types[i])) {
	          return true;
	        }
	      }
	      return false;
	    };

	    /**
	     * Create a clone of this param
	     * @returns {Param} Returns a cloned version of this param
	     */
	    Param.prototype.clone = function () {
	      var param = new Param(this.types.slice(), this.varArgs);
	      param.conversions = this.conversions.slice();
	      return param;
	    };

	    /**
	     * Test whether this parameter contains conversions
	     * @returns {boolean} Returns true if the parameter contains one or
	     *                    multiple conversions.
	     */
	    Param.prototype.hasConversions = function () {
	      return this.conversions.length > 0;
	    };

	    /**
	     * Tests whether this parameters contains any of the provided types
	     * @param {Object} types  A Map with types, like {'number': true}
	     * @returns {boolean}     Returns true when the parameter contains any
	     *                        of the provided types
	     */
	    Param.prototype.contains = function (types) {
	      for (var i = 0; i < this.types.length; i++) {
	        if (types[this.types[i]]) {
	          return true;
	        }
	      }
	      return false;
	    };

	    /**
	     * Return a string representation of this params types, like 'string' or
	     * 'number | boolean' or '...number'
	     * @param {boolean} [toConversion]   If true, the returned types string
	     *                                   contains the types where the parameter
	     *                                   will convert to. If false (default)
	     *                                   the "from" types are returned
	     * @returns {string}
	     */
	    Param.prototype.toString = function (toConversion) {
	      var types = [];
	      var keys = {};

	      for (var i = 0; i < this.types.length; i++) {
	        var conversion = this.conversions[i];
	        var type = toConversion && conversion ? conversion.to : this.types[i];
	        if (!(type in keys)) {
	          keys[type] = true;
	          types.push(type);
	        }
	      }

	      return (this.varArgs ? '...' : '') + types.join('|');
	    };

	    /**
	     * A function signature
	     * @param {string | string[] | Param[]} params
	     *                         Array with the type(s) of each parameter,
	     *                         or a comma separated string with types
	     * @param {Function} fn    The actual function
	     * @constructor
	     */
	    function Signature(params, fn) {
	      var _params;
	      if (typeof params === 'string') {
	        _params = (params !== '') ? params.split(',') : [];
	      }
	      else if (Array.isArray(params)) {
	        _params = params;
	      }
	      else {
	        throw new Error('string or Array expected');
	      }

	      this.params = new Array(_params.length);
	      for (var i = 0; i < _params.length; i++) {
	        var param = new Param(_params[i]);
	        this.params[i] = param;
	        if (i === _params.length - 1) {
	          // the last argument
	          this.varArgs = param.varArgs;
	        }
	        else {
	          // non-last argument
	          if (param.varArgs) {
	            throw new SyntaxError('Unexpected variable arguments operator "..."');
	          }
	        }
	      }

	      this.fn = fn;
	    }

	    /**
	     * Create a clone of this signature
	     * @returns {Signature} Returns a cloned version of this signature
	     */
	    Signature.prototype.clone = function () {
	      return new Signature(this.params.slice(), this.fn);
	    };

	    /**
	     * Expand a signature: split params with union types in separate signatures
	     * For example split a Signature "string | number" into two signatures.
	     * @return {Signature[]} Returns an array with signatures (at least one)
	     */
	    Signature.prototype.expand = function () {
	      var signatures = [];

	      function recurse(signature, path) {
	        if (path.length < signature.params.length) {
	          var i, newParam, conversion;

	          var param = signature.params[path.length];
	          if (param.varArgs) {
	            // a variable argument. do not split the types in the parameter
	            newParam = param.clone();

	            // add conversions to the parameter
	            // recurse for all conversions
	            for (i = 0; i < typed.conversions.length; i++) {
	              conversion = typed.conversions[i];
	              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
	                var j = newParam.types.length;
	                newParam.types[j] = conversion.from;
	                newParam.conversions[j] = conversion;
	              }
	            }

	            recurse(signature, path.concat(newParam));
	          }
	          else {
	            // split each type in the parameter
	            for (i = 0; i < param.types.length; i++) {
	              recurse(signature, path.concat(new Param(param.types[i])));
	            }

	            // recurse for all conversions
	            for (i = 0; i < typed.conversions.length; i++) {
	              conversion = typed.conversions[i];
	              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
	                newParam = new Param(conversion.from);
	                newParam.conversions[0] = conversion;
	                recurse(signature, path.concat(newParam));
	              }
	            }
	          }
	        }
	        else {
	          signatures.push(new Signature(path, signature.fn));
	        }
	      }

	      recurse(this, []);

	      return signatures;
	    };

	    /**
	     * Compare two signatures.
	     *
	     * When two params are equal and contain conversions, they will be sorted
	     * by lowest index of the first conversions.
	     *
	     * @param {Signature} a
	     * @param {Signature} b
	     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
	     */
	    Signature.compare = function (a, b) {
	      if (a.params.length > b.params.length) return 1;
	      if (a.params.length < b.params.length) return -1;

	      // count the number of conversions
	      var i;
	      var len = a.params.length; // a and b have equal amount of params
	      var ac = 0;
	      var bc = 0;
	      for (i = 0; i < len; i++) {
	        if (a.params[i].hasConversions()) ac++;
	        if (b.params[i].hasConversions()) bc++;
	      }

	      if (ac > bc) return 1;
	      if (ac < bc) return -1;

	      // compare the order per parameter
	      for (i = 0; i < a.params.length; i++) {
	        var cmp = Param.compare(a.params[i], b.params[i]);
	        if (cmp !== 0) {
	          return cmp;
	        }
	      }

	      return 0;
	    };

	    /**
	     * Test whether any of the signatures parameters has conversions
	     * @return {boolean} Returns true when any of the parameters contains
	     *                   conversions.
	     */
	    Signature.prototype.hasConversions = function () {
	      for (var i = 0; i < this.params.length; i++) {
	        if (this.params[i].hasConversions()) {
	          return true;
	        }
	      }
	      return false;
	    };

	    /**
	     * Test whether this signature should be ignored.
	     * Checks whether any of the parameters contains a type listed in
	     * typed.ignore
	     * @return {boolean} Returns true when the signature should be ignored
	     */
	    Signature.prototype.ignore = function () {
	      // create a map with ignored types
	      var types = {};
	      for (var i = 0; i < typed.ignore.length; i++) {
	        types[typed.ignore[i]] = true;
	      }

	      // test whether any of the parameters contains this type
	      for (i = 0; i < this.params.length; i++) {
	        if (this.params[i].contains(types)) {
	          return true;
	        }
	      }

	      return false;
	    };

	    /**
	     * Generate the code to invoke this signature
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @returns {string} Returns code
	     */
	    Signature.prototype.toCode = function (refs, prefix) {
	      var code = [];

	      var args = new Array(this.params.length);
	      for (var i = 0; i < this.params.length; i++) {
	        var param = this.params[i];
	        var conversion = param.conversions[0];
	        if (param.varArgs) {
	          args[i] = 'varArgs';
	        }
	        else if (conversion) {
	          args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';
	        }
	        else {
	          args[i] = 'arg' + i;
	        }
	      }

	      var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;
	      if (ref) {
	        return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');
	      }

	      return code.join('\n');
	    };

	    /**
	     * Return a string representation of the signature
	     * @returns {string}
	     */
	    Signature.prototype.toString = function () {
	      return this.params.join(', ');
	    };

	    /**
	     * A group of signatures with the same parameter on given index
	     * @param {Param[]} path
	     * @param {Signature} [signature]
	     * @param {Node[]} childs
	     * @constructor
	     */
	    function Node(path, signature, childs) {
	      this.path = path || [];
	      this.param = path[path.length - 1] || null;
	      this.signature = signature || null;
	      this.childs = childs || [];
	    }

	    /**
	     * Generate code for this group of signatures
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @param {Node | undefined} [anyType]  Sibling of this node with any type parameter
	     * @returns {string} Returns the code as string
	     */
	    Node.prototype.toCode = function (refs, prefix, anyType) {
	      // TODO: split this function in multiple functions, it's too large
	      var code = [];

	      if (this.param) {
	        var index = this.path.length - 1;
	        var conversion = this.param.conversions[0];
	        var comment = '// type: ' + (conversion ?
	                (conversion.from + ' (convert to ' + conversion.to + ')') :
	                this.param);

	        // non-root node (path is non-empty)
	        if (this.param.varArgs) {
	          if (this.param.anyType) {
	            // variable arguments with any type
	            code.push(prefix + 'if (arguments.length > ' + index + ') {');
	            code.push(prefix + '  var varArgs = [];');
	            code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');
	            code.push(prefix + '    varArgs.push(arguments[i]);');
	            code.push(prefix + '  }');
	            code.push(this.signature.toCode(refs, prefix + '  '));
	            code.push(prefix + '}');
	          }
	          else {
	            // variable arguments with a fixed type
	            var getTests = function (types, arg) {
	              var tests = [];
	              for (var i = 0; i < types.length; i++) {
	                tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';
	              }
	              return tests.join(' || ');
	            }.bind(this);

	            var allTypes = this.param.types;
	            var exactTypes = [];
	            for (var i = 0; i < allTypes.length; i++) {
	              if (this.param.conversions[i] === undefined) {
	                exactTypes.push(allTypes[i]);
	              }
	            }

	            code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);
	            code.push(prefix + '  var varArgs = [arg' + index + '];');
	            code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');
	            code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');
	            code.push(prefix + '      varArgs.push(arguments[i]);');

	            for (var i = 0; i < allTypes.length; i++) {
	              var conversion_i = this.param.conversions[i];
	              if (conversion_i) {
	                var test = refs.add(getTypeTest(allTypes[i]), 'test');
	                var convert = refs.add(conversion_i.convert, 'convert');
	                code.push(prefix + '    }');
	                code.push(prefix + '    else if (' + test + '(arguments[i])) {');
	                code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');
	              }
	            }
	            code.push(prefix + '    } else {');
	            code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \'' + exactTypes.join(',') + '\');');
	            code.push(prefix + '    }');
	            code.push(prefix + '  }');
	            code.push(this.signature.toCode(refs, prefix + '  '));
	            code.push(prefix + '}');
	          }
	        }
	        else {
	          if (this.param.anyType) {
	            // any type
	            code.push(prefix + '// type: any');
	            code.push(this._innerCode(refs, prefix, anyType));
	          }
	          else {
	            // regular type
	            var type = this.param.types[0];
	            var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;

	            code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);
	            code.push(this._innerCode(refs, prefix + '  ', anyType));
	            code.push(prefix + '}');
	          }
	        }
	      }
	      else {
	        // root node (path is empty)
	        code.push(this._innerCode(refs, prefix, anyType));
	      }

	      return code.join('\n');
	    };

	    /**
	     * Generate inner code for this group of signatures.
	     * This is a helper function of Node.prototype.toCode
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @param {Node | undefined} [anyType]  Sibling of this node with any type parameter
	     * @returns {string} Returns the inner code as string
	     * @private
	     */
	    Node.prototype._innerCode = function (refs, prefix, anyType) {
	      var code = [];
	      var i;

	      if (this.signature) {
	        code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');
	        code.push(this.signature.toCode(refs, prefix + '  '));
	        code.push(prefix + '}');
	      }

	      var nextAnyType;
	      for (i = 0; i < this.childs.length; i++) {
	        if (this.childs[i].param.anyType) {
	          nextAnyType = this.childs[i];
	          break;
	        }
	      }

	      for (i = 0; i < this.childs.length; i++) {
	        code.push(this.childs[i].toCode(refs, prefix, nextAnyType));
	      }

	      if (anyType && !this.param.anyType) {
	        code.push(anyType.toCode(refs, prefix, nextAnyType));
	      }

	      var exceptions = this._exceptions(refs, prefix);
	      if (exceptions) {
	        code.push(exceptions);
	      }

	      return code.join('\n');
	    };

	    /**
	     * Generate code to throw exceptions
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @returns {string} Returns the inner code as string
	     * @private
	     */
	    Node.prototype._exceptions = function (refs, prefix) {
	      var index = this.path.length;

	      if (this.childs.length === 0) {
	        // TODO: can this condition be simplified? (we have a fall-through here)
	        return [
	          prefix + 'if (arguments.length > ' + index + ') {',
	          prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);',
	          prefix + '}'
	        ].join('\n');
	      }
	      else {
	        var keys = {};
	        var types = [];

	        for (var i = 0; i < this.childs.length; i++) {
	          var node = this.childs[i];
	          if (node.param) {
	            for (var j = 0; j < node.param.types.length; j++) {
	              var type = node.param.types[j];
	              if (!(type in keys) && !node.param.conversions[j]) {
	                keys[type] = true;
	                types.push(type);
	              }
	            }
	          }
	        }

	        return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \'' + types.join(',') + '\');';
	      }
	    };

	    /**
	     * Split all raw signatures into an array with expanded Signatures
	     * @param {Object.<string, Function>} rawSignatures
	     * @return {Signature[]} Returns an array with expanded signatures
	     */
	    function parseSignatures(rawSignatures) {
	      // FIXME: need to have deterministic ordering of signatures, do not create via object
	      var signature;
	      var keys = {};
	      var signatures = [];
	      var i;

	      for (var types in rawSignatures) {
	        if (rawSignatures.hasOwnProperty(types)) {
	          var fn = rawSignatures[types];
	          signature = new Signature(types, fn);

	          if (signature.ignore()) {
	            continue;
	          }

	          var expanded = signature.expand();

	          for (i = 0; i < expanded.length; i++) {
	            var signature_i = expanded[i];
	            var key = signature_i.toString();
	            var existing = keys[key];
	            if (!existing) {
	              keys[key] = signature_i;
	            }
	            else {
	              var cmp = Signature.compare(signature_i, existing);
	              if (cmp < 0) {
	                // override if sorted first
	                keys[key] = signature_i;
	              }
	              else if (cmp === 0) {
	                throw new Error('Signature "' + key + '" is defined twice');
	              }
	              // else: just ignore
	            }
	          }
	        }
	      }

	      // convert from map to array
	      for (key in keys) {
	        if (keys.hasOwnProperty(key)) {
	          signatures.push(keys[key]);
	        }
	      }

	      // order the signatures
	      signatures.sort(function (a, b) {
	        return Signature.compare(a, b);
	      });

	      // filter redundant conversions from signatures with varArgs
	      // TODO: simplify this loop or move it to a separate function
	      for (i = 0; i < signatures.length; i++) {
	        signature = signatures[i];

	        if (signature.varArgs) {
	          var index = signature.params.length - 1;
	          var param = signature.params[index];

	          var t = 0;
	          while (t < param.types.length) {
	            if (param.conversions[t]) {
	              var type = param.types[t];

	              for (var j = 0; j < signatures.length; j++) {
	                var other = signatures[j];
	                var p = other.params[index];

	                if (other !== signature &&
	                    p &&
	                    contains(p.types, type) && !p.conversions[index]) {
	                  // this (conversion) type already exists, remove it
	                  param.types.splice(t, 1);
	                  param.conversions.splice(t, 1);
	                  t--;
	                  break;
	                }
	              }
	            }
	            t++;
	          }
	        }
	      }

	      return signatures;
	    }

	    /**
	     * create a map with normalized signatures as key and the function as value
	     * @param {Signature[]} signatures   An array with split signatures
	     * @return {Object.<string, Function>} Returns a map with normalized
	     *                                     signatures as key, and the function
	     *                                     as value.
	     */
	    function mapSignatures(signatures) {
	      var normalized = {};

	      for (var i = 0; i < signatures.length; i++) {
	        var signature = signatures[i];
	        if (signature.fn && !signature.hasConversions()) {
	          var params = signature.params.join(',');
	          normalized[params] = signature.fn;
	        }
	      }

	      return normalized;
	    }

	    /**
	     * Parse signatures recursively in a node tree.
	     * @param {Signature[]} signatures  Array with expanded signatures
	     * @param {Param[]} path            Traversed path of parameter types
	     * @return {Node}                   Returns a node tree
	     */
	    function parseTree(signatures, path) {
	      var i, signature;
	      var index = path.length;
	      var nodeSignature;

	      var filtered = [];
	      for (i = 0; i < signatures.length; i++) {
	        signature = signatures[i];

	        // filter the first signature with the correct number of params
	        if (signature.params.length === index && !nodeSignature) {
	          nodeSignature = signature;
	        }

	        if (signature.params[index] != undefined) {
	          filtered.push(signature);
	        }
	      }

	      // sort the filtered signatures by param
	      filtered.sort(function (a, b) {
	        return Param.compare(a.params[index], b.params[index]);
	      });

	      // recurse over the signatures
	      var entries = [];
	      for (i = 0; i < filtered.length; i++) {
	        signature = filtered[i];
	        // group signatures with the same param at current index
	        var param = signature.params[index];

	        // TODO: replace the next filter loop
	        var existing = entries.filter(function (entry) {
	          return entry.param.overlapping(param);
	        })[0];

	        //var existing;
	        //for (var j = 0; j < entries.length; j++) {
	        //  if (entries[j].param.overlapping(param)) {
	        //    existing = entries[j];
	        //    break;
	        //  }
	        //}

	        if (existing) {
	          if (existing.param.varArgs) {
	            throw new Error('Conflicting types "' + existing.param + '" and "' + param + '"');
	          }
	          existing.signatures.push(signature);
	        }
	        else {
	          entries.push({
	            param: param,
	            signatures: [signature]
	          });
	        }
	      }

	      // parse the childs
	      var childs = new Array(entries.length);
	      for (i = 0; i < entries.length; i++) {
	        var entry = entries[i];
	        childs[i] = parseTree(entry.signatures, path.concat(entry.param))
	      }

	      return new Node(path, nodeSignature, childs);
	    }

	    /**
	     * Generate an array like ['arg0', 'arg1', 'arg2']
	     * @param {number} count Number of arguments to generate
	     * @returns {Array} Returns an array with argument names
	     */
	    function getArgs(count) {
	      // create an array with all argument names
	      var args = [];
	      for (var i = 0; i < count; i++) {
	        args[i] = 'arg' + i;
	      }

	      return args;
	    }

	    /**
	     * Compose a function from sub-functions each handling a single type signature.
	     * Signatures:
	     *   typed(signature: string, fn: function)
	     *   typed(name: string, signature: string, fn: function)
	     *   typed(signatures: Object.<string, function>)
	     *   typed(name: string, signatures: Object.<string, function>)
	     *
	     * @param {string | null} name
	     * @param {Object.<string, Function>} signatures
	     * @return {Function} Returns the typed function
	     * @private
	     */
	    function _typed(name, signatures) {
	      var refs = new Refs();

	      // parse signatures, expand them
	      var _signatures = parseSignatures(signatures);
	      if (_signatures.length == 0) {
	        throw new Error('No signatures provided');
	      }

	      // parse signatures into a node tree
	      var node = parseTree(_signatures, []);

	      //var util = require('util');
	      //console.log('ROOT');
	      //console.log(util.inspect(node, { depth: null }));

	      // generate code for the typed function
	      var code = [];
	      var _name = name || '';
	      var _args = getArgs(maxParams(_signatures));
	      code.push('function ' + _name + '(' + _args.join(', ') + ') {');
	      code.push('  "use strict";');
	      code.push('  var name = \'' + _name + '\';');
	      code.push(node.toCode(refs, '  '));
	      code.push('}');

	      // generate body for the factory function
	      var body = [
	        refs.toCode(),
	        'return ' + code.join('\n')
	      ].join('\n');

	      // evaluate the JavaScript code and attach function references
	      var factory = (new Function(refs.name, 'createError', body));
	      var fn = factory(refs, createError);

	      //console.log('FN\n' + fn.toString()); // TODO: cleanup

	      // attach the signatures with sub-functions to the constructed function
	      fn.signatures = mapSignatures(_signatures);

	      return fn;
	    }

	    /**
	     * Calculate the maximum number of parameters in givens signatures
	     * @param {Signature[]} signatures
	     * @returns {number} The maximum number of parameters
	     */
	    function maxParams(signatures) {
	      var max = 0;

	      for (var i = 0; i < signatures.length; i++) {
	        var len = signatures[i].params.length;
	        if (len > max) {
	          max = len;
	        }
	      }

	      return max;
	    }

	    /**
	     * Get the type of a value
	     * @param {*} x
	     * @returns {string} Returns a string with the type of value
	     */
	    function getTypeOf(x) {
	      var obj;

	      for (var i = 0; i < typed.types.length; i++) {
	        var entry = typed.types[i];

	        if (entry.name === 'Object') {
	          // Array and Date are also Object, so test for Object afterwards
	          obj = entry;
	        }
	        else {
	          if (entry.test(x)) return entry.name;
	        }
	      }

	      // at last, test whether an object
	      if (obj && obj.test(x)) return obj.name;

	      return 'unknown';
	    }

	    /**
	     * Test whether an array contains some entry
	     * @param {Array} array
	     * @param {*} entry
	     * @return {boolean} Returns true if array contains entry, false if not.
	     */
	    function contains(array, entry) {
	      return array.indexOf(entry) !== -1;
	    }

	    // data type tests
	    var types = [
	      { name: 'number',    test: function (x) { return typeof x === 'number' } },
	      { name: 'string',    test: function (x) { return typeof x === 'string' } },
	      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },
	      { name: 'Function',  test: function (x) { return typeof x === 'function'} },
	      { name: 'Array',     test: Array.isArray },
	      { name: 'Date',      test: function (x) { return x instanceof Date } },
	      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },
	      { name: 'Object',    test: function (x) { return typeof x === 'object' } },
	      { name: 'null',      test: function (x) { return x === null } },
	      { name: 'undefined', test: function (x) { return x === undefined } }
	    ];

	    // configuration
	    var config = {};

	    // type conversions. Order is important
	    var conversions = [];

	    // types to be ignored
	    var ignore = [];

	    // temporary object for holding types and conversions, for constructing
	    // the `typed` function itself
	    // TODO: find a more elegant solution for this
	    var typed = {
	      config: config,
	      types: types,
	      conversions: conversions,
	      ignore: ignore
	    };

	    /**
	     * Construct the typed function itself with various signatures
	     *
	     * Signatures:
	     *
	     *   typed(signatures: Object.<string, function>)
	     *   typed(name: string, signatures: Object.<string, function>)
	     */
	    typed = _typed('typed', {
	      'Object': function (signatures) {
	        var fns = [];
	        for (var signature in signatures) {
	          if (signatures.hasOwnProperty(signature)) {
	            fns.push(signatures[signature]);
	          }
	        }
	        var name = getName(fns);

	        return _typed(name, signatures);
	      },
	      'string, Object': _typed,
	      // TODO: add a signature 'Array.<function>'
	      '...Function': function (fns) {
	        var err;
	        var name = getName(fns);
	        var signatures = {};

	        for (var i = 0; i < fns.length; i++) {
	          var fn = fns[i];

	          // test whether this is a typed-function
	          if (!(typeof fn.signatures === 'object')) {
	            err = new TypeError('Function is no typed-function (index: ' + i + ')');
	            err.data = {index: i};
	            throw err;
	          }

	          // merge the signatures
	          for (var signature in fn.signatures) {
	            if (fn.signatures.hasOwnProperty(signature)) {
	              if (signatures.hasOwnProperty(signature)) {
	                if (fn.signatures[signature] !== signatures[signature]) {
	                  err = new Error('Signature "' + signature + '" is defined twice');
	                  err.data = {signature: signature};
	                  throw err;
	                }
	                // else: both signatures point to the same function, that's fine
	              }
	              else {
	                signatures[signature] = fn.signatures[signature];
	              }
	            }
	          }
	        }

	        return _typed(name, signatures);
	      }
	    });

	    /**
	     * Find a specific signature from a (composed) typed function, for
	     * example:
	     *
	     *   typed.find(fn, ['number', 'string'])
	     *   typed.find(fn, 'number, string')
	     *
	     * Function find only only works for exact matches.
	     *
	     * @param {Function} fn                   A typed-function
	     * @param {string | string[]} signature   Signature to be found, can be
	     *                                        an array or a comma separated string.
	     * @return {Function}                     Returns the matching signature, or
	     *                                        throws an errror when no signature
	     *                                        is found.
	     */
	    function find (fn, signature) {
	      if (!fn.signatures) {
	        throw new TypeError('Function is no typed-function');
	      }

	      // normalize input
	      var arr;
	      if (typeof signature === 'string') {
	        arr = signature.split(',');
	        for (var i = 0; i < arr.length; i++) {
	          arr[i] = arr[i].trim();
	        }
	      }
	      else if (Array.isArray(signature)) {
	        arr = signature;
	      }
	      else {
	        throw new TypeError('String array or a comma separated string expected');
	      }

	      var str = arr.join(',');

	      // find an exact match
	      var match = fn.signatures[str];
	      if (match) {
	        return match;
	      }

	      // TODO: extend find to match non-exact signatures

	      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
	    }

	    /**
	     * Convert a given value to another data type.
	     * @param {*} value
	     * @param {string} type
	     */
	    function convert (value, type) {
	      var from = getTypeOf(value);
	      
	      // check conversion is needed
	      if (type === from) {
	        return value;
	      }

	      for (var i = 0; i < typed.conversions.length; i++) {
	        var conversion = typed.conversions[i];
	        if (conversion.from === from && conversion.to === type) {
	          return conversion.convert(value);
	        }
	      }

	      throw new Error('Cannot convert from ' + from + ' to ' + type);
	    }

	    // attach types and conversions to the final `typed` function
	    typed.config = config;
	    typed.types = types;
	    typed.conversions = conversions;
	    typed.ignore = ignore;
	    typed.create = create;
	    typed.find = find;
	    typed.convert = convert;

	    // add a type
	    typed.addType = function (type) {
	      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
	        throw new TypeError('Object with properties {name: string, test: function} expected');
	      }

	      typed.types.push(type);
	    };

	    // add a conversion
	    typed.addConversion = function (conversion) {
	      if (!conversion
	          || typeof conversion.from !== 'string'
	          || typeof conversion.to !== 'string'
	          || typeof conversion.convert !== 'function') {
	        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
	      }

	      typed.conversions.push(conversion);
	    };

	    return typed;
	  }

	  return create();
	}));


/***/ },
/* 24 */
/*!**************************************!*\
  !*** ./~/mathjs/lib/utils/number.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var NumberFormatter = __webpack_require__(/*! ./NumberFormatter */ 25);

	/**
	 * Test whether value is a number
	 * @param {*} value
	 * @return {boolean} isNumber
	 */
	exports.isNumber = function(value) {
	  return typeof value === 'number';
	};

	/**
	 * Check if a number is integer
	 * @param {number | boolean} value
	 * @return {boolean} isInteger
	 */
	exports.isInteger = function(value) {
	  return isFinite(value)
	      ? (value == Math.round(value))
	      : false;
	  // Note: we use ==, not ===, as we can have Booleans as well
	};

	/**
	 * Calculate the sign of a number
	 * @param {number} x
	 * @returns {*}
	 */
	exports.sign = function(x) {
	  if (x > 0) {
	    return 1;
	  }
	  else if (x < 0) {
	    return -1;
	  }
	  else {
	    return 0;
	  }
	};

	/**
	 * Convert a number to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential' and
	 *                                          'auto', `precision` defines the total
	 *                                          number of significant digits returned
	 *                                          and is undefined by default.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point, and is 0 by default.
	 *                     {Object} exponential An object containing two parameters,
	 *                                          {number} lower and {number} upper,
	 *                                          used by notation 'auto' to determine
	 *                                          when to return exponential notation.
	 *                                          Default values are `lower=1e-3` and
	 *                                          `upper=1e5`.
	 *                                          Only applicable for notation `auto`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4);                                        // '6.4'
	 *    format(1240000);                                    // '1.24e6'
	 *    format(1/3);                                        // '0.3333333333333333'
	 *    format(1/3, 3);                                     // '0.333'
	 *    format(21385, 2);                                   // '21000'
	 *    format(12.071, {notation: 'fixed'});                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
	 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
	 *
	 * @param {number} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	exports.format = function(value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }

	  // handle special cases
	  if (value === Infinity) {
	    return 'Infinity';
	  }
	  else if (value === -Infinity) {
	    return '-Infinity';
	  }
	  else if (isNaN(value)) {
	    return 'NaN';
	  }

	  // default values for options
	  var notation = 'auto';
	  var precision = undefined;

	  if (options) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }

	    // determine precision from options
	    if (exports.isNumber(options)) {
	      precision = options;
	    }
	    else if (options.precision) {
	      precision = options.precision;
	    }
	  }

	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);

	    case 'exponential':
	      return exports.toExponential(value, precision);

	    case 'auto':
	      return exports
	          .toPrecision(value, precision, options && options.exponential)

	          // remove trailing zeros after the decimal point
	          .replace(/((\.\d*?)(0+))($|e)/, function () {
	            var digits = arguments[2];
	            var e = arguments[4];
	            return (digits !== '.') ? digits + e : e;
	          });

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' +
	          'Choose "auto", "exponential", or "fixed".');
	  }
	};

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {number} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */
	exports.toExponential = function(value, precision) {
	  return new NumberFormatter(value).toExponential(precision);
	};

	/**
	 * Format a number with fixed notation.
	 * @param {number} value
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	exports.toFixed = function(value, precision) {
	  return new NumberFormatter(value).toFixed(precision);
	};

	/**
	 * Format a number with a certain precision
	 * @param {number} value
	 * @param {number} [precision=undefined] Optional number of digits.
	 * @param {{lower: number, upper: number}} [options]  By default:
	 *                                                    lower = 1e-3 (excl)
	 *                                                    upper = 1e+5 (incl)
	 * @return {string}
	 */
	exports.toPrecision = function(value, precision, options) {
	  return new NumberFormatter(value).toPrecision(precision, options);
	};

	/**
	 * Count the number of significant digits of a number.
	 *
	 * For example:
	 *   2.34 returns 3
	 *   0.0034 returns 2
	 *   120.5e+30 returns 4
	 *
	 * @param {number} value
	 * @return {number} digits   Number of significant digits
	 */
	exports.digits = function(value) {
	  return value
	      .toExponential()
	      .replace(/e.*$/, '')          // remove exponential notation
	      .replace( /^0\.?0*|\./, '')   // remove decimal point and leading zeros
	      .length
	};

	/**
	 * Minimum number added to one that makes the result different than one
	 */
	exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;

	/**
	 * Compares two floating point numbers.
	 * @param {number} x          First value to compare
	 * @param {number} y          Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are equal
	*/
	exports.nearlyEqual = function(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon == null) return x == y;

	  // use "==" operator, handles infinities
	  if (x == y) return true;

	  // NaN
	  if (isNaN(x) || isNaN(y)) return false;

	  // at this point x and y should be finite
	  if(isFinite(x) && isFinite(y)) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = Math.abs(x - y);
	    if (diff < exports.DBL_EPSILON) {
	      return true;
	    }
	    else {
	      // use relative error
	      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
	    }
	  }

	  // Infinite and Number or negative Infinite and positive Infinite cases
	  return false;
	};


/***/ },
/* 25 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/utils/NumberFormatter.js ***!
  \***********************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Format a number using methods toPrecision, toFixed, toExponential.
	 * @param {number | string} value
	 * @constructor
	 */
	function NumberFormatter (value) {
	  // parse the input value
	  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
	  if (!match) {
	    throw new SyntaxError('Invalid number');
	  }

	  var sign         = match[1];
	  var coefficients = match[2];
	  var exponent     = parseFloat(match[4] || '0');

	  var dot = coefficients.indexOf('.');
	  exponent += (dot !== -1) ? (dot - 1) : (coefficients.length - 1);

	  this.sign = sign;
	  this.coefficients = coefficients
	      .replace('.', '')  // remove the dot (must be removed before removing leading zeros)
	      .replace(/^0*/, function (zeros) {
	        // remove leading zeros, add their count to the exponent
	        exponent -= zeros.length;
	        return '';
	      })
	      .replace(/0*$/, '') // remove trailing zeros
	      .split('')
	      .map(function (d) {
	        return parseInt(d);
	      });

	  if (this.coefficients.length === 0) {
	    this.coefficients.push(0);
	    exponent++;
	  }

	  this.exponent = exponent;
	}

	/**
	 * Format a number with fixed notation.
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	NumberFormatter.prototype.toFixed = function (precision) {
	  var rounded = this.roundDigits(this.exponent + 1 + (precision || 0));
	  var c = rounded.coefficients;
	  var p = rounded.exponent + 1; // exponent may have changed

	  // append zeros if needed
	  var pp = p + (precision || 0);
	  if (c.length < pp) {
	    c = c.concat(zeros(pp - c.length));
	  }

	  // prepend zeros if needed
	  if (p < 0) {
	    c = zeros(-p + 1).concat(c);
	    p = 1;
	  }

	  // insert a dot if needed
	  if (precision) {
	    c.splice(p, 0, (p === 0) ? '0.' : '.');
	  }

	  return this.sign + c.join('');
	};

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 */
	NumberFormatter.prototype.toExponential = function (precision) {
	  // round if needed, else create a clone
	  var rounded = precision ? this.roundDigits(precision) : this.clone();
	  var c = rounded.coefficients;
	  var e = rounded.exponent;

	  // append zeros if needed
	  if (c.length < precision) {
	    c = c.concat(zeros(precision - c.length));
	  }

	  // format as `C.CCCe+EEE` or `C.CCCe-EEE`
	  var first = c.shift();
	  return this.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') +
	      'e' + (e >= 0 ? '+' : '') + e;
	};

	/**
	 * Format a number with a certain precision
	 * @param {number} [precision=undefined] Optional number of digits.
	 * @param {{lower: number | undefined, upper: number | undefined}} [options]
	 *                                       By default:
	 *                                         lower = 1e-3 (excl)
	 *                                         upper = 1e+5 (incl)
	 * @return {string}
	 */
	NumberFormatter.prototype.toPrecision = function(precision, options) {
	  // determine lower and upper bound for exponential notation.
	  var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;
	  var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;

	  var abs = Math.abs(Math.pow(10, this.exponent));
	  if (abs < lower || abs >= upper) {
	    // exponential notation
	    return this.toExponential(precision);
	  }
	  else {
	    var rounded = precision ? this.roundDigits(precision) : this.clone();
	    var c = rounded.coefficients;
	    var e = rounded.exponent;

	    // append trailing zeros
	    if (c.length < precision) {
	      c = c.concat(zeros(precision - c.length));
	    }

	    // append trailing zeros
	    // TODO: simplify the next statement
	    c = c.concat(zeros(e - c.length + 1 +
	        (c.length < precision ? precision - c.length : 0)));

	    // prepend zeros
	    c = zeros(-e).concat(c);

	    var dot = e > 0 ? e : 0;
	    if (dot < c.length - 1) {
	      c.splice(dot + 1, 0, '.');
	    }

	    return this.sign + c.join('');
	  }
	};

	/**
	 * Crete a clone of the NumberFormatter
	 * @return {NumberFormatter} Returns a clone of the NumberFormatter
	 */
	NumberFormatter.prototype.clone = function () {
	  var clone = new NumberFormatter('0');
	  clone.sign = this.sign;
	  clone.coefficients = this.coefficients.slice(0);
	  clone.exponent = this.exponent;
	  return clone;
	};

	/**
	 * Round the number of digits of a number *
	 * @param {number} precision  A positive integer
	 * @return {NumberFormatter}  Returns a new NumberFormatter with the rounded
	 *                            digits
	 */
	NumberFormatter.prototype.roundDigits = function (precision) {
	  var rounded = this.clone();
	  var c = rounded.coefficients;

	  // prepend zeros if needed
	  while (precision <= 0) {
	    c.unshift(0);
	    rounded.exponent++;
	    precision++;
	  }

	  if (c.length > precision) {
	    var removed = c.splice(precision);

	    if (removed[0] >= 5) {
	      var i = precision - 1;
	      c[i]++;
	      while (c[i] === 10) {
	        c.pop();
	        if (i === 0) {
	          c.unshift(0);
	          rounded.exponent++;
	          i++;
	        }
	        i--;
	        c[i]++;
	      }
	    }
	  }

	  return rounded;
	};

	/**
	 * Create an array filled with zeros.
	 * @param {number} length
	 * @return {Array}
	 */
	function zeros(length) {
	  var arr = [];
	  for (var i = 0; i < length; i++) {
	    arr.push(0);
	  }
	  return arr;
	}

	module.exports = NumberFormatter;


/***/ },
/* 26 */
/*!*************************************!*\
  !*** ./~/mathjs/lib/core/import.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var lazy = __webpack_require__(/*! ../utils/object */ 21).lazy;
	var isFactory = __webpack_require__(/*! ../utils/object */ 21).isFactory;
	var traverse = __webpack_require__(/*! ../utils/object */ 21).traverse;
	var extend = __webpack_require__(/*! ../utils/object */ 21).extend;
	var ArgumentsError = __webpack_require__(/*! ../error/ArgumentsError */ 27);

	function factory (type, config, load, typed, math) {
	  /**
	   * Import functions from an object or a module
	   *
	   * Syntax:
	   *
	   *    math.import(object)
	   *    math.import(object, options)
	   *
	   * Where:
	   *
	   * - `object: Object`
	   *   An object with functions to be imported.
	   * - `options: Object` An object with import options. Available options:
	   *   - `override: boolean`
	   *     If true, existing functions will be overwritten. False by default.
	   *   - `silent: boolean`
	   *     If true, the function will not throw errors on duplicates or invalid
	   *     types. False by default.
	   *   - `wrap: boolean`
	   *     If true, the functions will be wrapped in a wrapper function
	   *     which converts data types like Matrix to primitive data types like Array.
	   *     The wrapper is needed when extending math.js with libraries which do not
	   *     support these data type. False by default.
	   *
	   * Examples:
	   *
	   *    // define new functions and variables
	   *    math.import({
	   *      myvalue: 42,
	   *      hello: function (name) {
	   *        return 'hello, ' + name + '!';
	   *      }
	   *    });
	   *
	   *    // use the imported function and variable
	   *    math.myvalue * 2;               // 84
	   *    math.hello('user');             // 'hello, user!'
	   *
	   *    // import the npm module 'numbers'
	   *    // (must be installed first with `npm install numbers`)
	   *    math.import(require('numbers'), {wrap: true});
	   *
	   *    math.fibonacci(7); // returns 13
	   *
	   * @param {Object | Array} object   Object with functions to be imported.
	   * @param {Object} [options]        Import options.
	   */
	  function math_import(object, options) {
	    var num = arguments.length;
	    if (num != 1 && num != 2) {
	      throw new ArgumentsError('import', num, 1, 2);
	    }

	    if (!options) {
	      options = {};
	    }

	    if (isFactory(object)) {
	      _importFactory(object, options);
	    }
	    else if (Array.isArray(object)) {
	      object.forEach(function (entry) {
	        math_import(entry, options);
	      });
	    }
	    else if (typeof object === 'object') {
	      // a map with functions
	      for (var name in object) {
	        if (object.hasOwnProperty(name)) {
	          var value = object[name];
	          if (isSupportedType(value)) {
	            _import(name, value, options);
	          }
	          else if (isFactory(object)) {
	            _importFactory(object, options);
	          }
	          else {
	            math_import(value, options);
	          }
	        }
	      }
	    }
	    else {
	      if (!options.silent) {
	        throw new TypeError('Factory, Object, or Array expected');
	      }
	    }
	  }

	  /**
	   * Add a property to the math namespace and create a chain proxy for it.
	   * @param {string} name
	   * @param {*} value
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */
	  function _import(name, value, options) {
	    if (options.wrap && typeof value === 'function') {
	      // create a wrapper around the function
	      value = _wrap(value);
	    }

	    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
	      // merge two typed functions
	      if (options.override) {
	        value = typed(extend({}, math[name].signatures, value.signatures));
	      }
	      else {
	        value = typed(math[name], value);
	      }

	      math[name] = value;
	      _importTransform(name, value);
	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }

	    if (math[name] === undefined || options.override) {
	      math[name] = value;
	      _importTransform(name, value);
	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }

	    if (!options.silent) {
	      throw new Error('Cannot import "' + name + '": already exists');
	    }
	  }

	  function _importTransform (name, value) {
	    if (value && typeof value.transform === 'function') {
	      math.expression.transform[name] = value.transform;
	    }
	  }

	  /**
	   * Create a wrapper a round an function which converts the arguments
	   * to their primitive values (like convert a Matrix to Array)
	   * @param {Function} fn
	   * @return {Function} Returns the wrapped function
	   * @private
	   */
	  function _wrap (fn) {
	    var wrapper = function wrapper () {
	      var args = [];
	      for (var i = 0, len = arguments.length; i < len; i++) {
	        var arg = arguments[i];
	        args[i] = arg && arg.valueOf();
	      }
	      return fn.apply(math, args);
	    };

	    if (fn.transform) {
	      wrapper.transform = fn.transform;
	    }

	    return wrapper;
	  }

	  /**
	   * Import an instance of a factory into math.js
	   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */
	  function _importFactory(factory, options) {
	    if (typeof factory.name === 'string') {
	      var name = factory.name;
	      var namespace = factory.path ? traverse(math, factory.path) : math;
	      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;

	      var resolver = function () {
	        var instance = load(factory);

	        if (isTypedFunction(existing) && isTypedFunction(instance)) {
	          // merge two typed functions
	          if (options.override) {
	            instance = typed(extend({}, existing.signatures, instance.signatures));
	          }
	          else {
	            instance = typed(existing, instance);
	          }

	          return instance;
	        }

	        if (existing === undefined || options.override) {
	          return instance;
	        }

	        if (!options.silent) {
	          throw new Error('Cannot import "' + name + '": already exists');
	        }
	      };

	      if (factory.lazy !== false) {
	        lazy(namespace, name, resolver);
	      }
	      else {
	        namespace[name] = resolver();
	      }

	      math.emit('import', name, resolver, factory.path);
	    }
	    else {
	      // unnamed factory.
	      // no lazy loading
	      load(factory);
	    }
	  }

	  /**
	   * Check whether given object is a type which can be imported
	   * @param {Function | number | string | boolean | null | Unit | Complex} object
	   * @return {boolean}
	   * @private
	   */
	  function isSupportedType(object) {
	    return typeof object == 'function'
	        || typeof object === 'number'
	        || typeof object === 'string'
	        || typeof object === 'boolean'
	        || object === null
	        || (object && object.isUnit === true)
	        || (object && object.isComplex === true)
	  }

	  /**
	   * Test whether a given thing is a typed-function
	   * @param {*} fn
	   * @return {boolean} Returns true when `fn` is a typed-function
	   */
	  function isTypedFunction (fn) {
	    return typeof fn === 'function' && typeof fn.signatures === 'object';
	  }

	  return math_import;
	}

	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.name = 'import';
	exports.factory = factory;
	exports.lazy = true;


/***/ },
/* 27 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/error/ArgumentsError.js ***!
  \**********************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Create a syntax error with the message:
	 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
	 * @param {string} fn     Function name
	 * @param {number} count  Actual argument count
	 * @param {number} min    Minimum required argument count
	 * @param {number} [max]  Maximum required argument count
	 * @extends Error
	 */
	function ArgumentsError(fn, count, min, max) {
	  if (!(this instanceof ArgumentsError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.fn = fn;
	  this.count = count;
	  this.min = min;
	  this.max = max;

	  this.message = 'Wrong number of arguments in function ' + fn +
	      ' (' + count + ' provided, ' +
	      min + ((max != undefined) ? ('-' + max) : '') + ' expected)';

	  this.stack = (new Error()).stack;
	}

	ArgumentsError.prototype = new Error();
	ArgumentsError.prototype.constructor = Error;
	ArgumentsError.prototype.name = 'ArgumentsError';
	ArgumentsError.prototype.isArgumentsError = true;

	module.exports = ArgumentsError;


/***/ },
/* 28 */
/*!*************************************!*\
  !*** ./~/mathjs/lib/core/config.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object = __webpack_require__(/*! ../utils/object */ 21);

	function factory (type, config, load, typed, math) {
	  /**
	   * Set configuration options for math.js, and get current options.
	   * Will emit a 'config' event, with arguments (curr, prev).
	   * @param {Object} [options] Available options:
	   *                            {number} epsilon
	   *                              Minimum relative difference between two
	   *                              compared values, used by all comparison functions.
	   *                            {string} matrix
	   *                              A string 'matrix' (default) or 'array'.
	   *                            {string} number
	   *                              A string 'number' (default) or 'bignumber'
	   *                            {number} precision
	   *                              The number of significant digits for BigNumbers.
	   *                              Not applicable for Numbers.
	   *                            {string} parenthesis
	   *                              How to display parentheses in LaTeX and string
	   *                              output.
	   * @return {Object} Returns the current configuration
	   */
	  return function _config(options) {
	    if (options) {
	      var prev = object.clone(config);

	      // merge options
	      object.deepExtend(config, options);

	      var curr = object.clone(config);

	      // emit 'config' event
	      math.emit('config', curr, prev);

	      return curr;
	    }
	    else {
	      return object.clone(config);
	    }
	  };
	}

	exports.name = 'config';
	exports.math = true; // request the math namespace as fifth argument
	exports.factory = factory;


/***/ },
/* 29 */
/*!*******************************!*\
  !*** ./~/mathjs/lib/index.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./type */ 257),        // data types (Matrix, Complex, Unit, ...)
	  __webpack_require__(/*! ./constants */ 293),   // constants
	  __webpack_require__(/*! ./expression */ 295),  // expression parsing
	  __webpack_require__(/*! ./function */ 30),    // functions
	  __webpack_require__(/*! ./json */ 498),        // serialization utility (math.json.reviver)
	  __webpack_require__(/*! ./error */ 500)        // errors
	];


/***/ },
/* 30 */
/*!****************************************!*\
  !*** ./~/mathjs/lib/function/index.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./algebra */ 77),
	  __webpack_require__(/*! ./arithmetic */ 107),
	  __webpack_require__(/*! ./bitwise */ 136),
	  __webpack_require__(/*! ./combinatorics */ 152),
	  __webpack_require__(/*! ./complex */ 164),
	  __webpack_require__(/*! ./geometry */ 169),
	  __webpack_require__(/*! ./logical */ 171),
	  __webpack_require__(/*! ./matrix */ 31),
	  __webpack_require__(/*! ./probability */ 176),
	  __webpack_require__(/*! ./relational */ 185),
	  __webpack_require__(/*! ./statistics */ 191),
	  __webpack_require__(/*! ./trigonometry */ 203),
	  __webpack_require__(/*! ./units */ 244),
	  __webpack_require__(/*! ./utils */ 246)
	];


/***/ },
/* 31 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/index.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./concat */ 32),
	  __webpack_require__(/*! ./cross */ 40),
	  __webpack_require__(/*! ./det */ 59),
	  __webpack_require__(/*! ./diag */ 62),
	  __webpack_require__(/*! ./dot */ 63),
	  __webpack_require__(/*! ./eye */ 64),
	  __webpack_require__(/*! ./flatten */ 65),
	  __webpack_require__(/*! ./inv */ 66),
	  __webpack_require__(/*! ./ones */ 68),
	  __webpack_require__(/*! ./range */ 69),
	  __webpack_require__(/*! ./resize */ 70),
	  __webpack_require__(/*! ./size */ 71),
	  __webpack_require__(/*! ./squeeze */ 72),
	  __webpack_require__(/*! ./subset */ 73),
	  __webpack_require__(/*! ./trace */ 74),
	  __webpack_require__(/*! ./transpose */ 75),
	  __webpack_require__(/*! ./zeros */ 76)
	];


/***/ },
/* 32 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/function/matrix/concat.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(/*! ../../utils/object */ 21).clone;
	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var array = __webpack_require__(/*! ../../utils/array */ 34);
	var IndexError = __webpack_require__(/*! ../../error/IndexError */ 33);
	var DimensionError = __webpack_require__(/*! ../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Concatenate two or more matrices.
	   *
	   * Syntax:
	   *
	   *     math.concat(A, B, C, ...)
	   *     math.concat(A, B, C, ..., dim)
	   *
	   * Where:
	   *
	   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
	   *   By default the last dimension of the matrices.
	   *
	   * Examples:
	   *
	   *    var A = [[1, 2], [5, 6]];
	   *    var B = [[3, 4], [7, 8]];
	   *
	   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
	   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
	   *    math.concat('hello', ' ', 'world'); // returns 'hello world'
	   *
	   * See also:
	   *
	   *    size, squeeze, subset, transpose
	   *
	   * @param {... Array | Matrix} args     Two or more matrices
	   * @return {Array | Matrix} Concatenated matrix
	   */
	  var concat = typed('concat', {
	    // TODO: change signature to '...Array | Matrix, dim?' when supported
	    '...Array | Matrix | number | BigNumber': function (args) {
	      var i;
	      var len = args.length;
	      var dim = -1;  // zero-based dimension
	      var prevDim;
	      var asMatrix = false;
	      var matrices = [];  // contains multi dimensional arrays

	      for (i = 0; i < len; i++) {
	        var arg = args[i];

	        // test whether we need to return a Matrix (if not we return an Array)
	        if (arg && arg.isMatrix === true) {
	          asMatrix = true;
	        }

	        if (typeof arg === 'number' || (arg && arg.isBigNumber === true)) {
	          if (i !== len - 1) {
	            throw new Error('Dimension must be specified as last argument');
	          }

	          // last argument contains the dimension on which to concatenate
	          prevDim = dim;
	          dim = arg.valueOf(); // change BigNumber to number

	          if (!isInteger(dim)) {
	            throw new TypeError('Integer number expected for dimension');
	          }

	          if (dim < 0) {
	            // TODO: would be more clear when throwing a DimensionError here
	            throw new IndexError(dim);
	          }
	          if (i > 0 && dim > prevDim) {
	            // TODO: would be more clear when throwing a DimensionError here
	            throw new IndexError(dim, prevDim + 1);
	          }
	        }
	        else {
	          // this is a matrix or array
	          var m = clone(arg).valueOf();
	          var size = array.size(m);
	          matrices[i] = m;
	          prevDim = dim;
	          dim = size.length - 1;

	          // verify whether each of the matrices has the same number of dimensions
	          if (i > 0 && dim != prevDim) {
	            throw new DimensionError(prevDim + 1, dim + 1);
	          }
	        }
	      }

	      if (matrices.length == 0) {
	        throw new SyntaxError('At least one matrix expected');
	      }

	      var res = matrices.shift();
	      while (matrices.length) {
	        res = _concat(res, matrices.shift(), dim, 0);
	      }

	      return asMatrix ? matrix(res) : res;
	    },

	    '...string': function (args) {
	      return args.join('');
	    }
	  });

	  concat.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return concat;
	}

	/**
	 * Recursively concatenate two matrices.
	 * The contents of the matrices is not cloned.
	 * @param {Array} a             Multi dimensional array
	 * @param {Array} b             Multi dimensional array
	 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
	 * @param {number} dim          The current dim (zero-based)
	 * @return {Array} c            The concatenated matrix
	 * @private
	 */
	function _concat(a, b, concatDim, dim) {
	  if (dim < concatDim) {
	    // recurse into next dimension
	    if (a.length != b.length) {
	      throw new DimensionError(a.length, b.length);
	    }

	    var c = [];
	    for (var i = 0; i < a.length; i++) {
	      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
	    }
	    return c;
	  }
	  else {
	    // concatenate this dimension
	    return a.concat(b);
	  }
	}

	exports.name = 'concat';
	exports.factory = factory;


/***/ },
/* 33 */
/*!******************************************!*\
  !*** ./~/mathjs/lib/error/IndexError.js ***!
  \******************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Create a range error with the message:
	 *     'Index out of range (index < min)'
	 *     'Index out of range (index < max)'
	 *
	 * @param {number} index     The actual index
	 * @param {number} [min=0]   Minimum index (included)
	 * @param {number} [max]     Maximum index (excluded)
	 * @extends RangeError
	 */
	function IndexError(index, min, max) {
	  if (!(this instanceof IndexError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.index = index;
	  if (arguments.length < 3) {
	    this.min = 0;
	    this.max = min;
	  }
	  else {
	    this.min = min;
	    this.max = max;
	  }

	  if (this.min !== undefined && this.index < this.min) {
	    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
	  }
	  else if (this.max !== undefined && this.index >= this.max) {
	    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
	  }
	  else {
	    this.message = 'Index out of range (' + this.index + ')';
	  }

	  this.stack = (new Error()).stack;
	}

	IndexError.prototype = new RangeError();
	IndexError.prototype.constructor = RangeError;
	IndexError.prototype.name = 'IndexError';
	IndexError.prototype.isIndexError = true;

	module.exports = IndexError;


/***/ },
/* 34 */
/*!*************************************!*\
  !*** ./~/mathjs/lib/utils/array.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var number = __webpack_require__(/*! ./number */ 24);
	var string = __webpack_require__(/*! ./string */ 36);
	var object = __webpack_require__(/*! ./object */ 21);
	var types = __webpack_require__(/*! ./types */ 35);

	var DimensionError = __webpack_require__(/*! ../error/DimensionError */ 38);
	var IndexError = __webpack_require__(/*! ../error/IndexError */ 33);

	/**
	 * Calculate the size of a multi dimensional array.
	 * This function checks the size of the first entry, it does not validate
	 * whether all dimensions match. (use function `validate` for that)
	 * @param {Array} x
	 * @Return {Number[]} size
	 */
	exports.size = function (x) {
	  var s = [];

	  while (Array.isArray(x)) {
	    s.push(x.length);
	    x = x[0];
	  }

	  return s;
	};

	/**
	 * Recursively validate whether each element in a multi dimensional array
	 * has a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @param {number} dim   Current dimension
	 * @throws DimensionError
	 * @private
	 */
	function _validate(array, size, dim) {
	  var i;
	  var len = array.length;

	  if (len != size[dim]) {
	    throw new DimensionError(len, size[dim]);
	  }

	  if (dim < size.length - 1) {
	    // recursively validate each child array
	    var dimNext = dim + 1;
	    for (i = 0; i < len; i++) {
	      var child = array[i];
	      if (!Array.isArray(child)) {
	        throw new DimensionError(size.length - 1, size.length, '<');
	      }
	      _validate(array[i], size, dimNext);
	    }
	  }
	  else {
	    // last dimension. none of the childs may be an array
	    for (i = 0; i < len; i++) {
	      if (Array.isArray(array[i])) {
	        throw new DimensionError(size.length + 1, size.length, '>');
	      }
	    }
	  }
	}

	/**
	 * Validate whether each element in a multi dimensional array has
	 * a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @throws DimensionError
	 */
	exports.validate = function(array, size) {
	  var isScalar = (size.length == 0);
	  if (isScalar) {
	    // scalar
	    if (Array.isArray(array)) {
	      throw new DimensionError(array.length, 0);
	    }
	  }
	  else {
	    // array
	    _validate(array, size, 0);
	  }
	};

	/**
	 * Test whether index is an integer number with index >= 0 and index < length
	 * @param {number} index    Zero-based index
	 * @param {number} [length] Length of the array
	 */
	exports.validateIndex = function(index, length) {
	  if (!number.isNumber(index) || !number.isInteger(index)) {
	    throw new TypeError('Index must be an integer (value: ' + index + ')');
	  }
	  if (index < 0) {
	    throw new IndexError(index);
	  }
	  if (length !== undefined && index >= length) {
	    throw new IndexError(index, length);
	  }
	};

	// a constant used to specify an undefined defaultValue
	exports.UNINITIALIZED = {};

	/**
	 * Resize a multi dimensional array. The resized array is returned.
	 * @param {Array} array         Array to be resized
	 * @param {Array.<number>} size Array with the size of each dimension
	 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
	 *                              zero by default. To leave new entries undefined,
	 *                              specify array.UNINITIALIZED as defaultValue
	 * @return {Array} array         The resized array
	 */
	exports.resize = function(array, size, defaultValue) {
	  // TODO: add support for scalars, having size=[] ?

	  // check the type of the arguments
	  if (!Array.isArray(array) || !Array.isArray(size)) {
	    throw new TypeError('Array expected');
	  }
	  if (size.length === 0) {
	    throw new Error('Resizing to scalar is not supported');
	  }

	  // check whether size contains positive integers
	  size.forEach(function (value) {
	    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
	      throw new TypeError('Invalid size, must contain positive integers ' +
	          '(size: ' + string.format(size) + ')');
	    }
	  });

	  // recursively resize the array
	  var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;
	  _resize(array, size, 0, _defaultValue);

	  return array;
	};

	/**
	 * Recursively resize a multi dimensional array
	 * @param {Array} array         Array to be resized
	 * @param {number[]} size       Array with the size of each dimension
	 * @param {number} dim          Current dimension
	 * @param {*} [defaultValue]    Value to be filled in in new entries,
	 *                              undefined by default.
	 * @private
	 */
	function _resize (array, size, dim, defaultValue) {
	  var i;
	  var elem;
	  var oldLen = array.length;
	  var newLen = size[dim];
	  var minLen = Math.min(oldLen, newLen);

	  // apply new length
	  array.length = newLen;

	  if (dim < size.length - 1) {
	    // non-last dimension
	    var dimNext = dim + 1;

	    // resize existing child arrays
	    for (i = 0; i < minLen; i++) {
	      // resize child array
	      elem = array[i];
	      if (!Array.isArray(elem)) {
	        elem = [elem]; // add a dimension
	        array[i] = elem;
	      }
	      _resize(elem, size, dimNext, defaultValue);
	    }

	    // create new child arrays
	    for (i = minLen; i < newLen; i++) {
	      // get child array
	      elem = [];
	      array[i] = elem;

	      // resize new child array
	      _resize(elem, size, dimNext, defaultValue);
	    }
	  }
	  else {
	    // last dimension

	    // remove dimensions of existing values
	    for (i = 0; i < minLen; i++) {
	      while (Array.isArray(array[i])) {
	        array[i] = array[i][0];
	      }
	    }

	    if(defaultValue !== exports.UNINITIALIZED) {
	      // fill new elements with the default value
	      for (i = minLen; i < newLen; i++) {
	        array[i] = object.clone(defaultValue);
	      }
	    }
	  }
	}

	/**
	 * Squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {Array} [size]
	 * @returns {Array} returns the array itself
	 */
	exports.squeeze = function(array, size) {
	  var s = size || exports.size(array);

	  // squeeze outer dimensions
	  while (Array.isArray(array) && array.length === 1) {
	    array = array[0];
	    s.shift();
	  }

	  // find the first dimension to be squeezed
	  var dims = s.length;
	  while (s[dims - 1] === 1) {
	    dims--;
	  }

	  // squeeze inner dimensions
	  if (dims < s.length) {
	    array = _squeeze(array, dims, 0);
	    s.length = dims;
	  }

	  return array;
	};

	/**
	 * Recursively squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */
	function _squeeze (array, dims, dim) {
	  var i, ii;

	  if (dim < dims) {
	    var next = dim + 1;
	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _squeeze(array[i], dims, next);
	    }
	  }
	  else {
	    while (Array.isArray(array)) {
	      array = array[0];
	    }
	  }

	  return array;
	}

	/**
	 * Unsqueeze a multi dimensional array: add dimensions when missing
	 * @param {Array} array
	 * @param {number} dims     Desired number of dimensions of the array
	 * @param {number} [outer]  Number of outer dimensions to be added
	 * @param {Array} [size]    Current size of array
	 * @returns {Array} returns the array itself
	 * @private
	 */
	exports.unsqueeze = function(array, dims, outer, size) {
	  var s = size || exports.size(array);

	  // unsqueeze outer dimensions
	  if (outer) {
	    for (var i = 0; i < outer; i++) {
	      array = [array];
	      s.unshift(1);
	    }
	  }

	  // unsqueeze inner dimensions
	  array = _unsqueeze(array, dims, 0);
	  while (s.length < dims) {
	    s.push(1);
	  }

	  return array;
	};

	/**
	 * Recursively unsqueeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */
	function _unsqueeze (array, dims, dim) {
	  var i, ii;

	  if (Array.isArray(array)) {
	    var next = dim + 1;
	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _unsqueeze(array[i], dims, next);
	    }
	  }
	  else {
	    for (var d = dim; d < dims; d++) {
	      array = [array];
	    }
	  }

	  return array;
	}
	/**
	 * Flatten a multi dimensional array, put all elements in a one dimensional
	 * array
	 * @param {Array} array   A multi dimensional array
	 * @return {Array}        The flattened array (1 dimensional)
	 */
	exports.flatten = function(array) {
	  if (!Array.isArray(array)) {
	    //if not an array, return as is
	    return array;
	  }
	  var flat = [];

	  array.forEach(function callback(value) {
	    if (Array.isArray(value)) {
	      value.forEach(callback);  //traverse through sub-arrays recursively
	    }
	    else {
	      flat.push(value);
	    }
	  });

	  return flat;
	};

	/**
	 * Test whether an object is an array
	 * @param {*} value
	 * @return {boolean} isArray
	 */
	exports.isArray = Array.isArray;


/***/ },
/* 35 */
/*!*************************************!*\
  !*** ./~/mathjs/lib/utils/types.js ***!
  \*************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Determine the type of a variable
	 *
	 *     type(x)
	 *
	 * The following types are recognized:
	 *
	 *     'undefined'
	 *     'null'
	 *     'boolean'
	 *     'number'
	 *     'string'
	 *     'Array'
	 *     'Function'
	 *     'Date'
	 *     'RegExp'
	 *     'Object'
	 *
	 * @param {*} x
	 * @return {string} Returns the name of the type. Primitive types are lower case,
	 *                  non-primitive types are upper-camel-case.
	 *                  For example 'number', 'string', 'Array', 'Date'.
	 */
	exports.type = function(x) {
	  var type = typeof x;

	  if (type === 'object') {
	    if (x === null)           return 'null';
	    if (x instanceof Boolean) return 'boolean';
	    if (x instanceof Number)  return 'number';
	    if (x instanceof String)  return 'string';
	    if (Array.isArray(x))     return 'Array';
	    if (x instanceof Date)    return 'Date';
	    if (x instanceof RegExp)  return 'RegExp';

	    return 'Object';
	  }

	  if (type === 'function')    return 'Function';

	  return type;
	};


/***/ },
/* 36 */
/*!**************************************!*\
  !*** ./~/mathjs/lib/utils/string.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var formatNumber = __webpack_require__(/*! ./number */ 24).format;
	var formatBigNumber = __webpack_require__(/*! ./bignumber/formatter */ 37).format;

	/**
	 * Test whether value is a string
	 * @param {*} value
	 * @return {boolean} isString
	 */
	exports.isString = function(value) {
	  return typeof value === 'string';
	};

	/**
	 * Check if a text ends with a certain string.
	 * @param {string} text
	 * @param {string} search
	 */
	exports.endsWith = function(text, search) {
	  var start = text.length - search.length;
	  var end = text.length;
	  return (text.substring(start, end) === search);
	};

	/**
	 * Format a value of any type into a string.
	 *
	 * Usage:
	 *     math.format(value)
	 *     math.format(value, precision)
	 *
	 * If value is a function, the returned string is 'function' unless the function
	 * has a property `description`, in that case this properties value is returned.
	 *
	 * Example usage:
	 *     math.format(2/7);                // '0.2857142857142857'
	 *     math.format(math.pi, 3);         // '3.14'
	 *     math.format(new Complex(2, 3));  // '2 + 3i'
	 *     math.format('hello');            // '"hello"'
	 *
	 * @param {*} value             Value to be stringified
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @return {string} str
	 */
	exports.format = function(value, options) {
	  if (typeof value === 'number') {
	    return formatNumber(value, options);
	  }

	  if (value && value.isBigNumber === true) {
	    return formatBigNumber(value, options);
	  }

	  if (value && value.isFraction === true) {
	    if (!options || options.fraction !== 'decimal') {
	      // output as ratio, like '1/3'
	      return (value.s * value.n) + '/' + value.d;
	    }
	    else {
	      // output as decimal, like '0.(3)'
	      return value.toString();
	    }
	  }

	  if (Array.isArray(value)) {
	    return formatArray(value, options);
	  }

	  if (exports.isString(value)) {
	    return '"' + value + '"';
	  }

	  if (typeof value === 'function') {
	    return value.syntax ? value.syntax + '' : 'function';
	  }

	  if (typeof value === 'object') {
	    if (typeof value.format === 'function') {
	      return value.format(options);
	    }
	    else {
	      return value.toString();
	    }
	  }

	  return String(value);
	};

	/**
	 * Recursively format an n-dimensional matrix
	 * Example output: "[[1, 2], [3, 4]]"
	 * @param {Array} array
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @returns {string} str
	 */
	function formatArray (array, options) {
	  if (Array.isArray(array)) {
	    var str = '[';
	    var len = array.length;
	    for (var i = 0; i < len; i++) {
	      if (i != 0) {
	        str += ', ';
	      }
	      str += formatArray(array[i], options);
	    }
	    str += ']';
	    return str;
	  }
	  else {
	    return exports.format(array, options);
	  }
	}


/***/ },
/* 37 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/formatter.js ***!
  \***************************************************/
/***/ function(module, exports) {

	/**
	 * Convert a BigNumber to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential' and
	 *                                          'auto', `precision` defines the total
	 *                                          number of significant digits returned
	 *                                          and is undefined by default.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point, and is 0 by default.
	 *                     {Object} exponential An object containing two parameters,
	 *                                          {number} lower and {number} upper,
	 *                                          used by notation 'auto' to determine
	 *                                          when to return exponential notation.
	 *                                          Default values are `lower=1e-3` and
	 *                                          `upper=1e5`.
	 *                                          Only applicable for notation `auto`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4);                                        // '6.4'
	 *    format(1240000);                                    // '1.24e6'
	 *    format(1/3);                                        // '0.3333333333333333'
	 *    format(1/3, 3);                                     // '0.333'
	 *    format(21385, 2);                                   // '21000'
	 *    format(12.071, {notation: 'fixed'});                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
	 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
	 *
	 * @param {BigNumber} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	exports.format = function (value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }

	  // handle special cases
	  if (!value.isFinite()) {
	    return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');
	  }

	  // default values for options
	  var notation = 'auto';
	  var precision = undefined;

	  if (options !== undefined) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }

	    // determine precision from options
	    if (typeof options === 'number') {
	      precision = options;
	    }
	    else if (options.precision) {
	      precision = options.precision;
	    }
	  }

	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);

	    case 'exponential':
	      return exports.toExponential(value, precision);

	    case 'auto':
	      // determine lower and upper bound for exponential notation.
	      // TODO: implement support for upper and lower to be BigNumbers themselves
	      var lower = 1e-3;
	      var upper = 1e5;
	      if (options && options.exponential) {
	        if (options.exponential.lower !== undefined) {
	          lower = options.exponential.lower;
	        }
	        if (options.exponential.upper !== undefined) {
	          upper = options.exponential.upper;
	        }
	      }

	      // adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)
	      var oldConfig = {
	        toExpNeg: value.constructor.toExpNeg,
	        toExpPos: value.constructor.toExpPos
	      };

	      value.constructor.config({
	        toExpNeg: Math.round(Math.log(lower) / Math.LN10),
	        toExpPos: Math.round(Math.log(upper) / Math.LN10)
	      });

	      // handle special case zero
	      if (value.isZero()) return '0';

	      // determine whether or not to output exponential notation
	      var str;
	      var abs = value.abs();
	      if (abs.gte(lower) && abs.lt(upper)) {
	        // normal number notation
	        str = value.toSignificantDigits(precision).toFixed();
	      }
	      else {
	        // exponential notation
	        str = exports.toExponential(value, precision);
	      }

	      // remove trailing zeros after the decimal point
	      return str.replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return (digits !== '.') ? digits + e : e;
	      });

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' +
	          'Choose "auto", "exponential", or "fixed".');
	  }
	};

	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {BigNumber} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */
	exports.toExponential = function (value, precision) {
	  if (precision !== undefined) {
	    return value.toExponential(precision - 1); // Note the offset of one
	  }
	  else {
	    return value.toExponential();
	  }
	};

	/**
	 * Format a number with fixed notation.
	 * @param {BigNumber} value
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	exports.toFixed = function (value, precision) {
	  return value.toFixed(precision || 0);
	  // Note: the (precision || 0) is needed as the toFixed of BigNumber has an
	  // undefined default precision instead of 0.
	}


/***/ },
/* 38 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/error/DimensionError.js ***!
  \**********************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Create a range error with the message:
	 *     'Dimension mismatch (<actual size> != <expected size>)'
	 * @param {number | number[]} actual        The actual size
	 * @param {number | number[]} expected      The expected size
	 * @param {string} [relation='!=']          Optional relation between actual
	 *                                          and expected size: '!=', '<', etc.
	 * @extends RangeError
	 */
	function DimensionError(actual, expected, relation) {
	  if (!(this instanceof DimensionError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.actual   = actual;
	  this.expected = expected;
	  this.relation = relation;

	  this.message = 'Dimension mismatch (' +
	      (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) +
	      ' ' + (this.relation || '!=') + ' ' +
	      (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +
	      ')';

	  this.stack = (new Error()).stack;
	}

	DimensionError.prototype = new RangeError();
	DimensionError.prototype.constructor = RangeError;
	DimensionError.prototype.name = 'DimensionError';
	DimensionError.prototype.isDimensionError = true;

	module.exports = DimensionError;


/***/ },
/* 39 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/function/matrix.js ***!
  \*****************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {
	  /**
	   * Create a Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   * Supported storage formats are 'dense' and 'sparse'.
	   *
	   * Syntax:
	   *
	   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
	   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
	   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
	   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
	   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
	   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
	   *
	   * Examples:
	   *
	   *    var m = math.matrix([[1, 2], [3, 4]]);
	   *    m.size();                        // Array [2, 2]
	   *    m.resize([3, 2], 5);
	   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, sparse
	   *
	   * @param {Array | Matrix} [data]    A multi dimensional array
	   * @param {string} [format]          The Matrix storage format
	   *
	   * @return {Matrix} The created matrix
	   */
	  var matrix = typed('matrix', {
	    '': function () {
	      return _create([]);
	    },

	    'string': function (format) {
	      return _create([], format);
	    },
	    
	    'string, string': function (format, datatype) {
	      return _create([], format, datatype);
	    },

	    'Array': function (data) {
	      return _create(data);
	    },
	      
	    'Matrix': function (data) {
	      return _create(data, data.storage());
	    },
	    
	    'Array | Matrix, string': _create,
	    
	    'Array | Matrix, string, string': _create
	  });

	  matrix.toTex = {
	    0: '\\begin{bmatrix}\\end{bmatrix}',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(${args[0]}\\right)'
	  };

	  return matrix;

	  /**
	   * Create a new Matrix with given storage format
	   * @param {Array} data
	   * @param {string} [format]
	   * @param {string} [datatype]
	   * @returns {Matrix} Returns a new Matrix
	   * @private
	   */
	  function _create(data, format, datatype) {
	    // get storage format constructor
	    var M = type.Matrix.storage(format || 'default');

	    // create instance
	    return new M(data, datatype);
	  }
	}

	exports.name = 'matrix';
	exports.factory = factory;


/***/ },
/* 40 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/cross.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(/*! ../../utils/array */ 34).size;

	function factory (type, config, load, typed) {
	  var matrix   = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var subtract = load(__webpack_require__(/*! ../arithmetic/subtract */ 41));
	  var multiply = load(__webpack_require__(/*! ../arithmetic/multiply */ 56));

	  /**
	   * Calculate the cross product for two vectors in three dimensional space.
	   * The cross product of `A = [a1, a2, a3]` and `B =[b1, b2, b3]` is defined
	   * as:
	   *
	   *    cross(A, B) = [
	   *      a2 * b3 - a3 * b2,
	   *      a3 * b1 - a1 * b3,
	   *      a1 * b2 - a2 * b1
	   *    ]
	   *
	   * Syntax:
	   *
	   *    math.cross(x, y)
	   *
	   * Examples:
	   *
	   *    math.cross([1, 1, 0],  [0, 1, 1]);  // Returns [1, -1, 1]
	   *    math.cross([3, -3, 1], [4, 9, 2]);  // Returns [-15, -2, 39]
	   *    math.cross([2, 3, 4],  [5, 6, 7]);  // Returns [-3, 6, -3]
	   *
	   * See also:
	   *
	   *    dot, multiply
	   *
	   * @param  {Array | Matrix} x   First vector
	   * @param  {Array | Matrix} y   Second vector
	   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
	   */
	  var cross = typed('cross', {
	    'Matrix, Matrix': function (x, y) {
	      return matrix(_cross(x.toArray(), y.toArray()));
	    },

	    'Matrix, Array': function (x, y) {
	      return matrix(_cross(x.toArray(), y));
	    },

	    'Array, Matrix': function (x, y) {
	      return matrix(_cross(x, y.toArray()));
	    },

	    'Array, Array': _cross
	  });

	  cross.toTex = '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)';

	  return cross;

	  /**
	   * Calculate the cross product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {Array} Returns the cross product of x and y
	   * @private
	   */
	  function _cross(x, y) {
	    var xSize= size(x);
	    var ySize = size(y);

	    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {
	      throw new RangeError('Vectors with length 3 expected ' +
	      '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
	    }

	    return [
	      subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),
	      subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),
	      subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))
	    ];
	  }
	}

	exports.name = 'cross';
	exports.factory = factory;


/***/ },
/* 41 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/subtract.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var addScalar = load(__webpack_require__(/*! ./addScalar */ 43));
	  var unaryMinus = load(__webpack_require__(/*! ./unaryMinus */ 44));

	  var algorithm01 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm01 */ 46));
	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm05 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm05 */ 48));
	  var algorithm10 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm10 */ 50));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Subtract two values, `x - y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.subtract(x, y)
	   *
	   * Examples:
	   *
	   *    math.subtract(5.3, 2);        // returns number 3.3
	   *
	   *    var a = math.complex(2, 3);
	   *    var b = math.complex(4, 1);
	   *    math.subtract(a, b);          // returns Complex -2 + 2i
	   *
	   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]
	   *
	   *    var c = math.unit('2.1 km');
	   *    var d = math.unit('500m');
	   *    math.subtract(c, d);          // returns Unit 1.6 km
	   *
	   * See also:
	   *
	   *    add
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
	   *            Initial value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
	   *            Value to subtract from `x`
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Subtraction of `x` and `y`
	   */
	  var subtract = typed('subtract', {

	    'number, number': function (x, y) {
	      return x - y;
	    },

	    'Complex, Complex': function (x, y) {
	      return new type.Complex (
	          x.re - y.re,
	          x.im - y.im
	      );
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return x.minus(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.sub(y);
	    },

	    'Unit, Unit': function (x, y) {
	      if (x.value == null) {
	        throw new Error('Parameter x contains a unit with undefined value');
	      }

	      if (y.value == null) {
	        throw new Error('Parameter y contains a unit with undefined value');
	      }

	      if (!x.equalBase(y)) {
	        throw new Error('Units do not match');
	      }

	      var res = x.clone();
	      res.value -= y.value;
	      res.fixPrefix = false;

	      return res;
	    },
	    
	    'Matrix, Matrix': function (x, y) {
	      // matrix sizes
	      var xsize = x.size();
	      var ysize = y.size();

	      // check dimensions
	      if (xsize.length !== ysize.length)
	        throw new DimensionError(xsize.length, ysize.length);

	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse - sparse
	              c = algorithm05(x, y, subtract);
	              break;
	            default:
	              // sparse - dense
	              c = algorithm03(y, x, subtract, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense - sparse
	              c = algorithm01(x, y, subtract, false);
	              break;
	            default:
	              // dense - dense
	              c = algorithm13(x, y, subtract);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return subtract(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return subtract(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return subtract(x, matrix(y));
	    },
	    
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          // algorithm 7 is faster than 9 since it calls f() for nonzero items only!
	          c = algorithm10(x, unaryMinus(y), addScalar);
	          break;
	        default:
	          c = algorithm14(x, y, subtract);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, subtract, true);
	          break;
	        default:
	          c = algorithm14(y, x, subtract, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, subtract, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, subtract, true).valueOf();
	    }
	  });

	  subtract.toTex = '\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\right)';

	  return subtract;
	}

	exports.name = 'subtract';
	exports.factory = factory;


/***/ },
/* 42 */
/*!*************************************!*\
  !*** ./~/mathjs/lib/utils/latex.js ***!
  \*************************************/
/***/ function(module, exports) {

	'use strict';

	exports.symbols = {
	  // GREEK LETTERS
	  Alpha: 'A',     alpha: '\\alpha',
	  Beta: 'B',      beta: '\\beta',
	  Gamma: '\\Gamma',    gamma: '\\gamma',
	  Delta: '\\Delta',    delta: '\\delta',
	  Epsilon: 'E',   epsilon: '\\epsilon',  varepsilon: '\\varepsilon',
	  Zeta: 'Z',      zeta: '\\zeta',
	  Eta: 'H',       eta: '\\eta',
	  Theta: '\\Theta',    theta: '\\theta',    vartheta: '\\vartheta',
	  Iota: 'I',      iota: '\\iota',
	  Kappa: 'K',     kappa: '\\kappa',    varkappa: '\\varkappa',
	  Lambda: '\\Lambda',   lambda: '\\lambda',
	  Mu: 'M',        mu: '\\mu',
	  Nu: 'N',        nu: '\\nu',
	  Xi: '\\Xi',       xi: '\\xi',
	  Omicron: 'O',   omicron: 'o',
	  Pi: '\\Pi',       pi: '\\pi',       varpi: '\\varpi',
	  Rho: 'P',       rho: '\\rho',      varrho: '\\varrho',
	  Sigma: '\\Sigma',    sigma: '\\sigma',    varsigma: '\\varsigma',
	  Tau: 'T',       tau: '\\tau',
	  Upsilon: '\\Upsilon',  upsilon: '\\upsilon',
	  Phi: '\\Phi',      phi: '\\phi',      varphi: '\\varphi',
	  Chi: 'X',       chi: '\\chi',
	  Psi: '\\Psi',      psi: '\\psi',
	  Omega: '\\Omega',    omega: '\\omega',
	  //logic
	  'true': '\\mathrm{True}',
	  'false': '\\mathrm{False}',
	  //other
	  i: 'i', //TODO use \i ??
	  inf: '\\infty',
	  Inf: '\\infty',
	  infinity: '\\infty',
	  Infinity: '\\infty',
	  oo: '\\infty',
	  lim: '\\lim',
	  'undefined': '\\mathbf{?}'
	};

	exports.operators = {
	  'transpose': '^\\top',
	  'factorial': '!',
	  'pow': '^',
	  'dotPow': '.^\\wedge', //TODO find ideal solution
	  'unaryPlus': '+',
	  'unaryMinus': '-',
	  'bitNot': '~', //TODO find ideal solution
	  'not': '\\neg',
	  'multiply': '\\cdot',
	  'divide': '\\frac', //TODO how to handle that properly?
	  'dotMultiply': '.\\cdot', //TODO find ideal solution
	  'dotDivide': '.:', //TODO find ideal solution
	  'mod': '\\mod',
	  'add': '+',
	  'subtract': '-',
	  'to': '\\rightarrow',
	  'leftShift': '<<',
	  'rightArithShift': '>>',
	  'rightLogShift': '>>>',
	  'equal': '=',
	  'unequal': '\\neq',
	  'smaller': '<',
	  'larger': '>',
	  'smallerEq': '\\leq',
	  'largerEq': '\\geq',
	  'bitAnd': '\\&',
	  'bitXor': '\\underline{|}',
	  'bitOr': '|',
	  'and': '\\wedge',
	  'xor': '\\veebar',
	  'or': '\\vee'
	};

	exports.defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';

	var units = {
	  deg: '^\\circ'
	};

	//@param {string} name
	//@param {boolean} isUnit
	exports.toSymbol = function (name, isUnit) {
	  isUnit = typeof isUnit === 'undefined' ? false : isUnit;
	  if (isUnit) {
	    if (units.hasOwnProperty(name)) {
	      return units[name];
	    }
	    return '\\mathrm{' + name + '}';
	  }

	  if (exports.symbols.hasOwnProperty(name)) {
	    return exports.symbols[name];
	  }
	  else if (name.indexOf('_') !== -1) {
	    //symbol with index (eg. alpha_1)
	    var index = name.indexOf('_');
	    return exports.toSymbol(name.substring(0, index)) + '_{'
	      + exports.toSymbol(name.substring(index + 1)) + '}';
	  }
	  return name;
	};


/***/ },
/* 43 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/addScalar.js ***!
  \*******************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {

	  /**
	   * Add two scalar values, `x + y`.
	   * This function is meant for internal use: it is used by the public function
	   * `add`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`
	   * @private
	   */
	  return typed('add', {

	    'number, number': function (x, y) {
	      return x + y;
	    },

	    'Complex, Complex': function (x, y) {
	      return new type.Complex(
	        x.re + y.re,
	        x.im + y.im
	      );
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return x.plus(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.add(y);
	    },

	    'Unit, Unit': function (x, y) {
	      if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');
	      if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');
	      if (!x.equalBase(y)) throw new Error('Units do not match');

	      var res = x.clone();
	      res.value += y.value;
	      res.fixPrefix = false;
	      return res;
	    }
	  });
	}

	exports.factory = factory;


/***/ },
/* 44 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/unaryMinus.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Inverse the sign of a value, apply a unary minus operation.
	   *
	   * For matrices, the function is evaluated element wise. Boolean values and
	   * strings will be converted to a number. For complex numbers, both real and
	   * complex value are inverted.
	   *
	   * Syntax:
	   *
	   *    math.unaryMinus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryMinus(3.5);      // returns -3.5
	   *    math.unaryMinus(-4.2);     // returns 4.2
	   *
	   * See also:
	   *
	   *    add, subtract, unaryPlus
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
	   */
	  var unaryMinus = typed('unaryMinus', {
	    'number': function (x) {
	      return -x;
	    },

	    'Complex': function (x) {
	      return new type.Complex(-x.re, -x.im);
	    },

	    'BigNumber': function (x) {
	      return x.neg();
	    },

	    'Fraction': function (x) {
	      var tmp = x.clone();
	      tmp.s = -tmp.s;
	      return tmp;
	    },

	    'Unit': function (x) {
	      var res = x.clone();
	      res.value = -x.value;
	      return res;
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since unaryMinus(0) = 0
	      return deepMap(x, unaryMinus, true);
	    }

	    // TODO: add support for string
	  });

	  unaryMinus.toTex = latex.operators['unaryMinus'] + '\\left(${args[0]}\\right)';

	  return unaryMinus;
	}

	exports.name = 'unaryMinus';
	exports.factory = factory;


/***/ },
/* 45 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/utils/collection/deepMap.js ***!
  \**************************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Execute the callback function element wise for each element in array and any
	 * nested array
	 * Returns an array with the results
	 * @param {Array | Matrix} array
	 * @param {Function} callback   The callback is called with two parameters:
	 *                              value1 and value2, which contain the current
	 *                              element of both arrays.
	 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	 *
	 * @return {Array | Matrix} res
	 */
	module.exports = function deepMap(array, callback, skipZeros) {
	  if (array && (typeof array.map === 'function')) {
	    // TODO: replace array.map with a for loop to improve performance
	    return array.map(function (x) {
	      return deepMap(x, callback, skipZeros);
	    });
	  }
	  else {
	    return callback(array);
	  }
	};


/***/ },
/* 46 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm01.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  Dij          ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm01 = function (denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues)
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // process data types
	    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
	    // callback function
	    var cf = dt ? typed.find(callback, [dt, dt]) : callback;

	    // vars
	    var i, j;
	    
	    // result (DenseMatrix)
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++)
	      cdata[i] = [];      
	    
	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns in b
	    for (j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        // mark i as updated
	        w[i] = mark;
	      }
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // check row is in workspace
	        if (w[i] === mark) {
	          // c[i][j] was already calculated
	          cdata[i][j] = x[i];
	        }
	        else {
	          // item does not exist in S
	          cdata[i][j] = adata[i][j];
	        }
	      }
	    }

	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	  
	  return algorithm01;
	}

	exports.name = 'algorithm01';
	exports.factory = factory;


/***/ },
/* 47 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm03.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked M*N times.
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  f(Dij, 0)    ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm03 = function (denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues)
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result (DenseMatrix)
	    var cdata = [];

	    // initialize dense matrix
	    for (var z = 0; z < rows; z++) {
	      // initialize row
	      cdata[z] = [];
	    }

	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns in b
	    for (var j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        w[i] = mark;
	      }
	      // process workspace
	      for (var y = 0; y < rows; y++) {
	        // check we have a calculated value for current row
	        if (w[y] === mark) {
	          // use calculated value
	          cdata[y][j] = x[y];
	        }
	        else {
	          // calculate value
	          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
	        }
	      }
	    }

	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	  
	  return algorithm03;
	}

	exports.name = 'algorithm03';
	exports.factory = factory;


/***/ },
/* 48 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm05.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(/*! ../../../function/relational/equalScalar */ 49));
	  
	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm05 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var xa = cvalues ? [] : undefined;
	    var xb = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // vars
	    var i, j, k, k1;
	    
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop values A(:,j)
	      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // push index
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa)
	          xa[i] = avalues[k];
	      }
	      // loop values B(:,j)
	      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row existed in A
	        if (wa[i] !== mark) {
	          // push index
	          cindex.push(i);
	        }
	        // update workspace
	        wb[i] = mark;
	        // check we need to process values
	        if (xb)
	          xb[i] = bvalues[k];
	      }
	      // check we need to process values (non pattern matrix)
	      if (cvalues) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // marks
	          var wai = wa[i];
	          var wbi = wb[i];
	          // check Aij or Bij are nonzero
	          if (wai === mark || wbi === mark) {
	            // matrix values @ i,j
	            var va = wai === mark ? xa[i] : zero;
	            var vb = wbi === mark ? xb[i] : zero;
	            // Cij
	            var vc = cf(va, vb);
	            // check for zero
	            if (!eq(vc, zero)) {
	              // push value
	              cvalues.push(vc);
	              // increment pointer
	              k++;
	            }
	            else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm05;
	}

	exports.name = 'algorithm05';
	exports.factory = factory;


/***/ },
/* 49 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/relational/equalScalar.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(/*! ../../utils/number */ 24).nearlyEqual;

	function factory (type, config, load, typed) {
	  
	  /**
	   * Test whether two values are equal.
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
	   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
	   * @private
	   */
	  var equalScalar = typed('equalScalar', {

	    'boolean, boolean': function (x, y) {
	      return x === y;
	    },

	    'number, number': function (x, y) {
	      return x === y || nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return x.eq(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.equals(y);
	    },

	    'Complex, Complex': function (x, y) {
	      return (x.re === y.re || nearlyEqual(x.re, y.re, config.epsilon)) &&
	        (x.im === y.im || nearlyEqual(x.im, y.im, config.epsilon));
	    },

	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return x.value === y.value || nearlyEqual(x.value, y.value, config.epsilon);
	    },

	    'string, string': function (x, y) {
	      return x === y;
	    }
	  });
	  
	  return equalScalar;
	}

	exports.factory = factory;


/***/ },
/* 50 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm10.js ***!
  \*******************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  b          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm10 = function (s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues)
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cdata = [];
	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        }
	        else {
	          // dense matrix value @ i, j
	          cdata[i][j] = b;
	        }
	      }
	    }

	    // return sparse matrix
	    return c;
	  };

	  return algorithm10;
	}

	exports.name = 'algorithm10';
	exports.factory = factory;


/***/ },
/* 51 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm13.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../../utils/index */ 52);
	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	var string = util.string,
	    isString = string.isString;

	function factory (type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). 
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, Bij..z)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Matrix}   b                 The DenseMatrix instance (B)
	   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
	   */
	  var algorithm13 = function (a, b, callback) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b arrays
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // c arrays
	    var csize = [];

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // validate each one of the dimension sizes
	    for (var s = 0; s < asize.length; s++) {
	      // must match
	      if (asize[s] !== bsize[s])
	        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	      // update dimension in c
	      csize[s] = asize[s];
	    }

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // populate cdata, iterate through dimensions
	    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];
	    
	    // c matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: csize,
	      datatype: dt
	    });
	  };
	  
	  // recursive function
	  var _iterate = function (f, level, s, n, av, bv) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = f(av[i], bv[i]);
	      }
	    }
	    else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
	      }
	    }
	    return cv;
	  };
	  
	  return algorithm13;
	}

	exports.name = 'algorithm13';
	exports.factory = factory;


/***/ },
/* 52 */
/*!*************************************!*\
  !*** ./~/mathjs/lib/utils/index.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.array = __webpack_require__(/*! ./array */ 34);
	exports['boolean'] = __webpack_require__(/*! ./boolean */ 53);
	exports['function'] = __webpack_require__(/*! ./function */ 54);
	exports.number = __webpack_require__(/*! ./number */ 24);
	exports.object = __webpack_require__(/*! ./object */ 21);
	exports.string = __webpack_require__(/*! ./string */ 36);
	exports.types = __webpack_require__(/*! ./types */ 35);
	exports.emitter = __webpack_require__(/*! ./emitter */ 19);


/***/ },
/* 53 */
/*!***************************************!*\
  !*** ./~/mathjs/lib/utils/boolean.js ***!
  \***************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Test whether value is a boolean
	 * @param {*} value
	 * @return {boolean} isBoolean
	 */
	exports.isBoolean = function(value) {
	  return typeof value == 'boolean';
	};


/***/ },
/* 54 */
/*!****************************************!*\
  !*** ./~/mathjs/lib/utils/function.js ***!
  \****************************************/
/***/ function(module, exports) {

	// function utils

	/*
	 * Memoize a given function by caching the computed result.
	 * The cache of a memoized function can be cleared by deleting the `cache`
	 * property of the function.
	 *
	 * @param {function} fn                     The function to be memoized.
	 *                                          Must be a pure function.
	 * @param {function(args: Array)} [hasher]  A custom hash builder.
	 *                                          Is JSON.stringify by default.
	 * @return {function}                       Returns the memoized function
	 */
	exports.memoize = function(fn, hasher) {
	  return function memoize() {
	    if (typeof memoize.cache !== 'object') {
	      memoize.cache = {};
	    }

	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }

	    var hash = hasher ? hasher(args) : JSON.stringify(args);
	    if (!(hash in memoize.cache)) {
	      return memoize.cache[hash] = fn.apply(fn, args);
	    }
	    return memoize.cache[hash];
	  };
	};


/***/ },
/* 55 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm14.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(/*! ../../../utils/object */ 21).clone;

	function factory (type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). 
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, b)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij..z,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
	   */
	  var algorithm14 = function (a, b, callback, inverse) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    
	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	    
	    // populate cdata, iterate through dimensions
	    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];

	    // c matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: clone(asize),
	      datatype: dt
	    });
	  };
	  
	  // recursive function
	  var _iterate = function (f, level, s, n, av, bv, inverse) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
	      }
	    }
	    else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
	      }
	    }
	    return cv;
	  };

	  return algorithm14;
	}

	exports.name = 'algorithm14';
	exports.factory = factory;


/***/ },
/* 56 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/multiply.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var extend = __webpack_require__(/*! ../../utils/object */ 21).extend;
	var array = __webpack_require__(/*! ../../utils/array */ 34);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var addScalar = load(__webpack_require__(/*! ./addScalar */ 43));
	  var multiplyScalar = load(__webpack_require__(/*! ./multiplyScalar */ 57));
	  var equalScalar = load(__webpack_require__(/*! ../relational/equalScalar */ 49));

	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  var DenseMatrix = type.DenseMatrix;
	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Multiply two values, `x * y`. The result is squeezed.
	   * For matrices, the matrix product is calculated.
	   *
	   * Syntax:
	   *
	   *    math.multiply(x, y)
	   *
	   * Examples:
	   *
	   *    math.multiply(4, 5.2);        // returns number 20.8
	   *
	   *    var a = math.complex(2, 3);
	   *    var b = math.complex(4, 1);
	   *    math.multiply(a, b);          // returns Complex 5 + 14i
	   *
	   *    var c = [[1, 2], [4, 3]];
	   *    var d = [[1, 2, 3], [3, -4, 7]];
	   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]
	   *
	   *    var e = math.unit('2.1 km');
	   *    math.multiply(3, e);          // returns Unit 6.3 km
	   *
	   * See also:
	   *
	   *    divide
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
	   */
	  var multiply = typed('multiply', extend({
	    // we extend the signatures of multiplyScalar with signatures dealing with matrices

	    'Array, Array': function (x, y) {
	      // check dimensions
	      _validateMatrixDimensions(array.size(x), array.size(y));

	      // use dense matrix implementation
	      var m = multiply(matrix(x), matrix(y));
	      // return array or scalar
	      return (m && m.isMatrix === true) ? m.valueOf() : m;
	    },

	    'Matrix, Matrix': function (x, y) {
	      // dimensions
	      var xsize = x.size();
	      var ysize = y.size();

	      // check dimensions
	      _validateMatrixDimensions(xsize, ysize);

	      // process dimensions
	      if (xsize.length === 1) {
	        // process y dimensions
	        if (ysize.length === 1) {
	          // Vector * Vector
	          return _multiplyVectorVector(x, y, xsize[0]);
	        }
	        // Vector * Matrix
	        return _multiplyVectorMatrix(x, y);
	      }
	      // process y dimensions
	      if (ysize.length === 1) {
	        // Matrix * Vector
	        return _multiplyMatrixVector(x, y);
	      }
	      // Matrix * Matrix
	      return _multiplyMatrixMatrix(x, y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(x, matrix(y));
	    },

	    'Array, Matrix': function (x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(matrix(x, y.storage()), y);
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      
	      // process storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, multiplyScalar, false);
	          break;
	        case 'dense':
	          c = algorithm14(x, y, multiplyScalar, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, multiplyScalar, true);
	          break;
	        case 'dense':
	          c = algorithm14(y, x, multiplyScalar, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
	    }
	  }, multiplyScalar.signatures));

	  var _validateMatrixDimensions = function (size1, size2) {
	    // check left operand dimensions
	    switch (size1.length) {
	      case 1:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Vector x Vector
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
	            }
	            break;
	          case 2:
	            // Vector x Matrix
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      case 2:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Matrix x Vector
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
	            }
	            break;
	          case 2:
	            // Matrix x Matrix
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      default:
	        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
	    }
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (N)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {number}             Scalar value
	   */
	  var _multiplyVectorVector = function (a, b, n) {
	    // check empty vector
	    if (n === 0)
	      throw new Error('Cannot multiply two empty vectors');

	    // a dense
	    var adata = a._data;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }
	    
	    // result (do not initialize it with zero)
	    var c = mf(adata[0], bdata[0]);
	    // loop data
	    for (var i = 1; i < n; i++) {
	      // multiply and accumulate
	      c = af(c, mf(adata[i], bdata[i]));
	    }
	    return c;
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Matrix         (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  var _multiplyVectorMatrix = function (a, b) {
	    // process storage
	    switch (b.storage()) {
	      case 'dense':
	        return _multiplyVectorDenseMatrix(a, b);
	    }
	    throw new Error('Not implemented');
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Dense Matrix   (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  var _multiplyVectorDenseMatrix = function (a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var alength = asize[0];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix columns
	    for (var j = 0; j < bcolumns; j++) {
	      // sum (do not initialize it with zero)
	      var sum = mf(adata[0], bdata[0][j]);      
	      // loop vector
	      for (var i = 1; i < alength; i++) {
	        // multiply & accumulate
	        sum = af(sum, mf(adata[i], bdata[i][j]));
	      }
	      c[j] = sum;
	    }

	    // check we need to squeeze the result into a scalar
	    if (bcolumns === 1)
	      return c[0];

	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [bcolumns],
	      datatype: dt
	    });
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {Matrix}             Dense Vector   (M)
	   */
	  var _multiplyMatrixVector = function (a, b) {
	    // process storage
	    switch (a.storage()) {
	      case 'dense':
	        return _multiplyDenseMatrixVector(a, b);
	      case 'sparse':
	        return _multiplySparseMatrixVector(a, b);
	    }
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Matrix         (NxC)
	   *
	   * @return {Matrix}             Matrix         (MxC)
	   */
	  var _multiplyMatrixMatrix = function (a, b) {
	    // process storage
	    switch (a.storage()) {
	      case 'dense':
	        // process storage
	        switch (b.storage()) {
	          case 'dense':
	            return _multiplyDenseMatrixDenseMatrix(a, b);
	          case 'sparse':
	            return _multiplyDenseMatrixSparseMatrix(a, b);
	        }
	        break;
	      case 'sparse':
	        // process storage
	        switch (b.storage()) {
	          case 'dense':
	            return _multiplySparseMatrixDenseMatrix(a, b);
	          case 'sparse':
	            return _multiplySparseMatrixSparseMatrix(a, b);
	        }
	        break;
	    }
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix  (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             Dense Vector (M) 
	   */ 
	  var _multiplyDenseMatrixVector = function (a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }

	    // result
	    var c = [];

	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // sum (do not initialize it with zero)
	      var sum = mf(row[0], bdata[0]);
	      // loop matrix a columns
	      for (var j = 1; j < acolumns; j++) {
	        // multiply & accumulate
	        sum = af(sum, mf(row[j], bdata[j]));
	      }
	      c[i] = sum;
	    }
	    // check we need to squeeze the result into a scalar
	    if (arows === 1)
	      return c[0];

	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [arows],
	      datatype: dt
	    });
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            DenseMatrix    (NxC)
	   *
	   * @return {Matrix}             DenseMatrix    (MxC)
	   */
	  var _multiplyDenseMatrixDenseMatrix = function (a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];
	    var bcolumns = bsize[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }
	    
	    // result
	    var c = [];

	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // initialize row array
	      c[i] = [];
	      // loop matrix b columns
	      for (var j = 0; j < bcolumns; j++) {
	        // sum (avoid initializing sum to zero)
	        var sum = mf(row[0], bdata[0][j]);
	        // loop matrix a columns
	        for (var x = 1; x < acolumns; x++) {
	          // multiply & accumulate
	          sum = af(sum, mf(row[x], bdata[x][j]));
	        }
	        c[i][j] = sum;
	      }
	    }
	    // check we need to squeeze the result into a scalar
	    if (arows === 1 && bcolumns === 1)
	      return c[0][0];

	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            SparseMatrix   (NxC)
	   *
	   * @return {Matrix}             SparseMatrix   (MxC)
	   */
	  var _multiplyDenseMatrixSparseMatrix = function (a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // validate b matrix
	    if (!bvalues)
	      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
	    // rows & columns
	    var arows = asize[0];
	    var bcolumns = bsize[1];
	    
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values : cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // indeces in column jb
	      var kb0 = bptr[jb];
	      var kb1 = bptr[jb + 1];
	      // do not process column jb if no data exists
	      if (kb1 > kb0) {
	        // last row mark processed
	        var last = 0;
	        // loop a rows
	        for (var i = 0; i < arows; i++) {
	          // column mark
	          var mark = i + 1;
	          // C[i, jb]
	          var cij;
	          // values in b column j
	          for (var kb = kb0; kb < kb1; kb++) {
	            // row
	            var ib = bindex[kb];
	            // check value has been initialized
	            if (last !== mark) {
	              // first value in column jb
	              cij = mf(adata[i][ib], bvalues[kb]);
	              // update mark
	              last = mark;
	            }
	            else {
	              // accumulate value
	              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
	            }
	          }
	          // check column has been processed and value != 0
	          if (last === mark && !eq(cij, zero)) {
	            // push row & value
	            cindex.push(i);
	            cvalues.push(cij);
	          }
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // check we need to squeeze the result into a scalar
	    if (arows === 1 && bcolumns === 1)
	      return cvalues.length === 1 ? cvalues[0] : 0;

	    // return sparse matrix
	    return c;
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix    (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             SparseMatrix    (M, 1) 
	   */
	  var _multiplySparseMatrixVector = function (a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues)
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];

	    // update ptr
	    cptr[0] = 0;
	    // rows in b
	    for (var ib = 0; ib < brows; ib++) {
	      // b[ib]
	      var vbi = bdata[ib];
	      // check b[ib] != 0, avoid loops
	      if (!eq(vbi, zero)) {
	        // A values & index in ib column
	        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	          // a row
	          var ia = aindex[ka];
	          // check value exists in current j
	          if (!w[ia]) {
	            // ia is new entry in j
	            w[ia] = true;
	            // add i to pattern of C
	            cindex.push(ia);
	            // x(ia) = A
	            x[ia] = mf(vbi, avalues[ka]);
	          }
	          else {
	            // i exists in C already
	            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
	          }
	        }
	      }
	    }
	    // copy values from x to column jb of c
	    for (var p1 = cindex.length, p = 0; p < p1; p++) {
	      // row
	      var ic = cindex[p];
	      // copy value
	      cvalues[p] = x[ic];
	    }
	    // update ptr
	    cptr[1] = cindex.length;

	    // check we need to squeeze the result into a scalar
	    if (arows === 1)
	      return cvalues.length === 1 ? cvalues[0] : 0;

	    // return sparse matrix
	    return new SparseMatrix({
	      values : cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, 1],
	      datatype: dt
	    });
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            DenseMatrix       (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  var _multiplySparseMatrixDenseMatrix = function (a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues)
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    var bcolumns = b._size[1];

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }

	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values : cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];

	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // rows in jb
	      for (var ib = 0; ib < brows; ib++) {
	        // b[ib, jb]
	        var vbij = bdata[ib][jb];
	        // check b[ib, jb] != 0, avoid loops
	        if (!eq(vbij, zero)) {
	          // A values & index in ib column
	          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // a row
	            var ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(vbij, avalues[ka]);
	            }
	            else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
	            }
	          }
	        }
	      }
	      // copy values from x to column jb of c
	      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	        // row
	        var ic = cindex[p];
	        // copy value
	        cvalues[p] = x[ic];
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // check we need to squeeze the result into a scalar
	    if (arows === 1 && bcolumns === 1)
	      return cvalues.length === 1 ? cvalues[0] : 0;

	    // return sparse matrix
	    return c;
	  };

	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            SparseMatrix      (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  var _multiplySparseMatrixSparseMatrix = function (a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bdt = b._datatype;
	    
	    // rows & columns
	    var arows = a._size[0];
	    var bcolumns = b._size[1];
	    // flag indicating both matrices (a & b) contain data
	    var values = avalues && bvalues;

	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;

	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }
	    
	    // result
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values : cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });

	    // workspace
	    var x = values ? [] : undefined;
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];
	    // variables
	    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;
	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // B values & index in j
	      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
	        // b row
	        ib = bindex[kb];
	        // check we need to process values
	        if (values) {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(bvalues[kb], avalues[ka]);
	            }
	            else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
	            }
	          }
	        }
	        else {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	            }
	          }
	        }
	      }
	      // check we need to process matrix values (pattern matrix)
	      if (values) {
	        // copy values from x to column jb of c
	        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	          // row
	          var ic = cindex[p];
	          // copy value
	          cvalues[p] = x[ic];
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;

	    // check we need to squeeze the result into a scalar
	    if (arows === 1 && bcolumns === 1 && values)
	      return cvalues.length === 1 ? cvalues[0] : 0;

	    // return sparse matrix
	    return c;
	  };

	  multiply.toTex = '\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\right)';

	  return multiply;
	}

	exports.name = 'multiply';
	exports.factory = factory;


/***/ },
/* 57 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/multiplyScalar.js ***!
  \************************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {
	  
	  /**
	   * Multiply two scalar values, `x * y`.
	   * This function is meant for internal use: it is used by the public function
	   * `multiply`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`
	   * @private
	   */
	  var multiplyScalar = typed('multiplyScalar', {

	    'number, number': function (x, y) {
	      return x * y;
	    },

	    'Complex, Complex': function (x, y) {
	      return new type.Complex(
	        x.re * y.re - x.im * y.im,
	        x.re * y.im + x.im * y.re
	      );
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return x.times(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.mul(y);
	    },

	    'number, Unit': function (x, y) {
	      var res = y.clone();
	      res.value = (res.value === null) ? res._normalize(x) : (res.value * x);
	      return res;
	    },

	    'Unit, number': function (x, y) {
	      var res = x.clone();
	      res.value = (res.value === null) ? res._normalize(y) : (res.value * y);
	      return res;
	    }
	  });

	  return multiplyScalar;
	}

	exports.factory = factory;


/***/ },
/* 58 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm11.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(/*! ../../../function/relational/equalScalar */ 49));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm11 = function (s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues)
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize ptr
	      cptr[j] = cindex.length;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = aindex[k];
	        // invoke callback
	        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
	        // check value is zero
	        if (!eq(v, zero)) {
	          // push index & value
	          cindex.push(i);
	          cvalues.push(v);
	        }
	      }
	    }
	    // update ptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm11;
	}

	exports.name = 'algorithm11';
	exports.factory = factory;


/***/ },
/* 59 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/det.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../utils/index */ 52);
	var object = util.object;
	var string = util.string;

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var add = load(__webpack_require__(/*! ../arithmetic/add */ 60));
	  var subtract = load(__webpack_require__(/*! ../arithmetic/subtract */ 41));
	  var multiply = load(__webpack_require__(/*! ../arithmetic/multiply */ 56));
	  var unaryMinus = load(__webpack_require__(/*! ../arithmetic/unaryMinus */ 44));

	  /**
	   * Calculate the determinant of a matrix.
	   *
	   * Syntax:
	   *
	   *    math.det(x)
	   *
	   * Examples:
	   *
	   *    math.det([[1, 2], [3, 4]]); // returns -2
	   *
	   *    var A = [
	   *      [-2, 2, 3],
	   *      [-1, 1, 3],
	   *      [2, 0, -1]
	   *    ]
	   *    math.det(A); // returns 6
	   *
	   * See also:
	   *
	   *    inv
	   *
	   * @param {Array | Matrix} x  A matrix
	   * @return {number} The determinant of `x`
	   */
	  var det = typed('det', {
	    'any': function (x) {
	      return object.clone(x);
	    },

	    'Array | Matrix': function det (x) {
	      var size;
	      if (x && x.isMatrix === true) {
	        size = x.size();
	      }
	      else if (Array.isArray(x)) {
	        x = matrix(x);
	        size = x.size();
	      }
	      else {
	        // a scalar
	        size = [];
	      }

	      switch (size.length) {
	        case 0:
	          // scalar
	          return object.clone(x);

	        case 1:
	          // vector
	          if (size[0] == 1) {
	            return object.clone(x.valueOf()[0]);
	          }
	          else {
	            throw new RangeError('Matrix must be square ' +
	            '(size: ' + string.format(size) + ')');
	          }

	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];
	          if (rows == cols) {
	            return _det(x.clone().valueOf(), rows, cols);
	          }
	          else {
	            throw new RangeError('Matrix must be square ' +
	            '(size: ' + string.format(size) + ')');
	          }

	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' +
	          '(size: ' + string.format(size) + ')');
	      }
	    }
	  });

	  det.toTex = '\\det\\left(${args[0]}\\right)';

	  return det;

	  /**
	   * Calculate the determinant of a matrix
	   * @param {Array[]} matrix  A square, two dimensional matrix
	   * @param {number} rows     Number of rows of the matrix (zero-based)
	   * @param {number} cols     Number of columns of the matrix (zero-based)
	   * @returns {number} det
	   * @private
	   */
	  function _det (matrix, rows, cols) {
	    if (rows == 1) {
	      // this is a 1 x 1 matrix
	      return object.clone(matrix[0][0]);
	    }
	    else if (rows == 2) {
	      // this is a 2 x 2 matrix
	      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
	      return subtract(
	          multiply(matrix[0][0], matrix[1][1]),
	          multiply(matrix[1][0], matrix[0][1])
	      );
	    }
	    else {
	      // this is an n x n matrix
	      var compute_mu = function (matrix) {
	        var i, j;

	        // Compute the matrix with zero lower triangle, same upper triangle,
	        // and diagonals given by the negated sum of the below diagonal
	        // elements.
	        var mu = new Array(matrix.length);
	        var sum = 0;
	        for (i = 1; i < matrix.length; i++) {
	          sum = add(sum, matrix[i][i]);
	        }

	        for (i = 0; i < matrix.length; i++) {
	          mu[i] = new Array(matrix.length);
	          mu[i][i] = unaryMinus(sum);

	          for (j = 0; j < i; j++) {
	            mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation
	          }

	          for (j = i + 1; j < matrix.length; j++) {
	            mu[i][j] = matrix[i][j];
	          }

	          if (i+1 < matrix.length) {
	            sum = subtract(sum, matrix[i + 1][i + 1]);
	          }
	        }

	        return mu;
	      };

	      var fa = matrix;
	      for (var i = 0; i < rows - 1; i++) {
	        fa = multiply(compute_mu(fa), matrix);
	      }

	      if (rows % 2 == 0) {
	        return unaryMinus(fa[0][0]);
	      } else {
	        return fa[0][0];
	      }
	    }
	  }
	}

	exports.name = 'det';
	exports.factory = factory;



/***/ },
/* 60 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/add.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var extend = __webpack_require__(/*! ../../utils/object */ 21).extend;

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var addScalar = load(__webpack_require__(/*! ./addScalar */ 43));
	  var latex = __webpack_require__(/*! ../../utils/latex.js */ 42);
	  
	  var algorithm01 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm01 */ 46));
	  var algorithm04 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm04 */ 61));
	  var algorithm10 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm10 */ 50));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Add two values, `x + y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.add(x, y)
	   *
	   * Examples:
	   *
	   *    math.add(2, 3);               // returns number 5
	   *
	   *    var a = math.complex(2, 3);
	   *    var b = math.complex(-4, 1);
	   *    math.add(a, b);               // returns Complex -2 + 4i
	   *
	   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]
	   *
	   *    var c = math.unit('5 cm');
	   *    var d = math.unit('2.1 mm');
	   *    math.add(c, d);               // returns Unit 52.1 mm
	   *
	   *    math.add("2.3", "4");         // returns number 6.3
	   *
	   * See also:
	   *
	   *    subtract
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
	   */
	  var add = typed('add', extend({
	    // we extend the signatures of addScalar with signatures dealing with matrices

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	      
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm04(x, y, addScalar);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm01(y, x, addScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm01(x, y, addScalar, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, addScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return add(matrix(x), matrix(y)).valueOf();
	    },
	    
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return add(matrix(x), y);
	    },
	    
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return add(x, matrix(y));
	    },
	    
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm10(x, y, addScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, addScalar, false);
	          break;
	      }
	      return c;
	    },
	    
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, addScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, addScalar, true);
	          break;
	      }
	      return c;
	    },
	    
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, addScalar, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, addScalar, true).valueOf();
	    }
	  }, addScalar.signatures));

	  add.toTex = '\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\right)';
	  
	  return add;
	}

	exports.name = 'add';
	exports.factory = factory;


/***/ },
/* 61 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm04.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(/*! ../../../function/relational/equalScalar */ 49));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
	   *          └  B(i,j)       ; B(i,j) !== 0
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm04 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspace
	    var xa = avalues && bvalues ? [] : undefined;
	    var xb = avalues && bvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // vars 
	    var i, j, k, k0, k1;
	    
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop A(:,j)
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // update c
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa)
	          xa[i] = avalues[k];
	      }
	      // loop B(:,j)
	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row exists in A
	        if (wa[i] === mark) {
	          // update record in xa @ i
	          if (xa) {
	            // invoke callback
	            var v = cf(xa[i], bvalues[k]);
	            // check for zero
	            if (!eq(v, zero)) {
	              // update workspace
	              xa[i] = v;              
	            }
	            else {
	              // remove mark (index will be removed later)
	              wa[i] = null;
	            }
	          }
	        }
	        else {
	          // update c
	          cindex.push(i);
	          // update workspace
	          wb[i] = mark;
	          // check we need to process values
	          if (xb)
	            xb[i] = bvalues[k];
	        }
	      }
	      // check we need to process values (non pattern matrix)
	      if (xa && xb) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // check workspace has value @ i
	          if (wa[i] === mark) {
	            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
	            cvalues[k] = xa[i];
	            // increment pointer
	            k++;
	          }
	          else if (wb[i] === mark) {
	            // push value (bij != 0)
	            cvalues[k] = xb[i];
	            // increment pointer
	            k++;
	          }
	          else {
	            // remove index @ k
	            cindex.splice(k, 1);
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };
	  
	  return algorithm04;
	}

	exports.name = 'algorithm04';
	exports.factory = factory;


/***/ },
/* 62 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/diag.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var array     = __webpack_require__(/*! ../../utils/array */ 34);
	var clone     = __webpack_require__(/*! ../../utils/object */ 21).clone;
	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  
	  /**
	   * Create a diagonal matrix or retrieve the diagonal of a matrix
	   *
	   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
	   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
	   * When k is positive, the values are placed on the super diagonal.
	   * When k is negative, the values are placed on the sub diagonal.
	   *
	   * Syntax:
	   *
	   *     math.diag(X)
	   *     math.diag(X, format)
	   *     math.diag(X, k)
	   *     math.diag(X, k, format)
	   *
	   * Examples:
	   *
	   *     // create a diagonal matrix
	   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
	   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *
	   *    // retrieve the diagonal from a matrix
	   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
	   *    math.diag(a);   // returns [1, 5, 9]
	   *
	   * See also:
	   *
	   *     ones, zeros, eye
	   *
	   * @param {Matrix | Array} x          A two dimensional matrix or a vector
	   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
	   *                                    in or retrieved.
	   * @param {string} [format='dense']   The matrix storage format.
	   *
	   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
	   */
	  var diag = typed('diag', {
	    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments

	    'Array': function (x) {
	      return _diag(x, 0, array.size(x), null);
	    },

	    'Array, number': function (x, k) {
	      return _diag(x, k, array.size(x), null);
	    },
	    
	    'Array, BigNumber': function (x, k) {
	      return _diag(x, k.toNumber(), array.size(x), null);
	    },

	    'Array, string': function (x, format) {
	      return _diag(x, 0, array.size(x), format);
	    },

	    'Array, number, string': function (x, k, format) {
	      return _diag(x, k, array.size(x), format);
	    },

	    'Array, BigNumber, string': function (x, k, format) {
	      return _diag(x, k.toNumber(), array.size(x), format);
	    },

	    'Matrix': function (x) {
	      return _diag(x, 0, x.size(), x.storage());
	    },

	    'Matrix, number': function (x, k) {
	      return _diag(x, k, x.size(), x.storage());
	    },

	    'Matrix, BigNumber': function (x, k) {
	      return _diag(x, k.toNumber(), x.size(), x.storage());
	    },

	    'Matrix, string': function (x, format) {
	      return _diag(x, 0, x.size(), format);
	    },

	    'Matrix, number, string': function (x, k, format) {
	      return _diag(x, k, x.size(), format);
	    },

	    'Matrix, BigNumber, string': function (x, k, format) {
	      return _diag(x, k.toNumber(), x.size(), format);
	    }
	  });

	  diag.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return diag;

	  /**
	   * Creeate diagonal matrix from a vector or vice versa
	   * @param {Array | Matrix} x
	   * @param {number} k
	   * @param {string} format Storage format for matrix. If null,
	   *                          an Array is returned
	   * @returns {Array | Matrix}
	   * @private
	   */
	  function _diag (x, k, size, format) {
	    if (!isInteger(k)) {
	      throw new TypeError ('Second parameter in function diag must be an integer');
	    }
	    
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // check dimensions
	    switch (size.length) {
	      case 1:
	        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
	      case 2:
	        return _getDiagonal(x, k, format, size, kSub, kSuper);
	    }
	    throw new RangeError('Matrix for function diag must be 2 dimensional');
	  }
	  
	  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
	    // matrix size
	    var ms = [l + kSub, l + kSuper];
	    // get matrix constructor
	    var F = type.Matrix.storage(format || 'dense');
	    // create diagonal matrix
	    var m = F.diagonal(ms, x, k);
	    // check we need to return a matrix
	    return format !== null ? m : m.valueOf();
	  }
	  
	  function _getDiagonal(x, k, format, s, kSub, kSuper) {
	    // check x is a Matrix
	    if (x && x.isMatrix === true) {
	      // get diagonal matrix
	      var dm = x.diagonal(k);
	      // check we need to return a matrix
	      if (format !== null) {
	        // check we need to change matrix format
	        if (format !== dm.storage())
	          return matrix(dm, format);
	        return dm;
	      }
	      return dm.valueOf();
	    }
	    // vector size
	    var n = Math.min(s[0] - kSub, s[1] - kSuper);
	    // diagonal values
	    var vector = [];
	    // loop diagonal
	    for (var i = 0; i < n; i++) {
	      vector[i] = clone(x[i + kSub][i + kSuper]);
	    }
	    // check we need to return a matrix
	    return format !== null ? matrix(vector) : vector;
	  }
	}

	exports.name = 'diag';
	exports.factory = factory;


/***/ },
/* 63 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/dot.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(/*! ../../utils/array */ 34).size;

	function factory (type, config, load, typed) {
	  var add      = load(__webpack_require__(/*! ../arithmetic/add */ 60));
	  var multiply = load(__webpack_require__(/*! ../arithmetic/multiply */ 56));

	  /**
	   * Calculate the dot product of two vectors. The dot product of
	   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
	   *
	   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
	   *
	   * Syntax:
	   *
	   *    math.dot(x, y)
	   *
	   * Examples:
	   *
	   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15
	   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15
	   *
	   * See also:
	   *
	   *    multiply, cross
	   *
	   * @param  {Array | Matrix} x     First vector
	   * @param  {Array | Matrix} y     Second vector
	   * @return {number}               Returns the dot product of `x` and `y`
	   */
	  var dot = typed('dot', {
	    'Matrix, Matrix': function (x, y) {
	      return _dot(x.toArray(), y.toArray());
	    },

	    'Matrix, Array': function (x, y) {
	      return _dot(x.toArray(), y);
	    },

	    'Array, Matrix': function (x, y) {
	      return _dot(x, y.toArray());
	    },

	    'Array, Array': _dot
	  });
	  
	  dot.toTex = '\\left(${args[0]}\\cdot${args[1]}\\right)';

	  return dot;

	  /**
	   * Calculate the dot product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {number} Returns the dot product of x and y
	   * @private
	   */
	  // TODO: double code with math.multiply
	  function _dot(x, y) {
	    var xSize= size(x);
	    var ySize = size(y);
	    var len = xSize[0];

	    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message
	    if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
	    if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');

	    var prod = 0;
	    for (var i = 0; i < len; i++) {
	      prod = add(prod, multiply(x[i], y[i]));
	    }

	    return prod;
	  }
	}

	exports.name = 'dot';
	exports.factory = factory;


/***/ },
/* 64 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/eye.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var array = __webpack_require__(/*! ../../utils/array */ 34);
	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  
	  /**
	   * Create a 2-dimensional identity matrix with size m x n or n x n.
	   * The matrix has ones on the diagonal and zeros elsewhere.
	   *
	   * Syntax:
	   *
	   *    math.eye(n)
	   *    math.eye(n, format)
	   *    math.eye(m, n)
	   *    math.eye(m, n, format)
	   *    math.eye([m, n])
	   *    math.eye([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
	   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]
	   *
	   *    var A = [[1, 2, 3], [4, 5, 6]];
	   *    math.eye(math.size(b));         // returns [[1, 0, 0], [0, 1, 0]]
	   *
	   * See also:
	   *
	   *    diag, ones, zeros, size, range
	   *
	   * @param {...number | Matrix | Array} size   The size for the matrix
	   * @param {string} [format]                   The Matrix storage format
	   *
	   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
	   */
	  var eye = typed('eye', {
	    '': function () {
	      return (config.matrix === 'matrix') ? matrix([]) : [];
	    },

	    'string': function (format) {
	      return matrix(format);
	    },

	    'number | BigNumber': function (rows) {
	      return _eye(rows, rows, config.matrix === 'matrix' ? 'default' : undefined);
	    },
	    
	    'number | BigNumber, string': function (rows, format) {
	      return _eye(rows, rows, format);
	    },

	    'number | BigNumber, number | BigNumber': function (rows, cols) {
	      return _eye(rows, cols, config.matrix === 'matrix' ? 'default' : undefined);
	    },
	    
	    'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {
	      return _eye(rows, cols, format);
	    },

	    'Array':  function (size) {
	      return _eyeVector(size);
	    },
	    
	    'Array, string':  function (size, format) {
	      return _eyeVector(size, format);
	    },

	    'Matrix': function (size) {
	      return _eyeVector(size.valueOf(), size.storage());
	    },
	    
	    'Matrix, string': function (size, format) {
	      return _eyeVector(size.valueOf(), format);
	    }
	  });

	  eye.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return eye;

	  function _eyeVector (size, format) {
	    switch (size.length) {
	      case 0: return format ? matrix(format) : [];
	      case 1: return _eye(size[0], size[0], format);
	      case 2: return _eye(size[0], size[1], format);
	      default: throw new Error('Vector containing two values expected');
	    }
	  }

	  /**
	   * Create an identity matrix
	   * @param {number | BigNumber} rows
	   * @param {number | BigNumber} cols
	   * @param {string} [format]
	   * @returns {Matrix}
	   * @private
	   */
	  function _eye (rows, cols, format) {
	    // BigNumber constructor with the right precision
	    var Big = (rows && rows.isBigNumber === true)
	        ? type.BigNumber
	        : (cols && cols.isBigNumber === true)
	            ? type.BigNumber
	            : null;

	    if (rows && rows.isBigNumber === true) rows = rows.toNumber();
	    if (cols && cols.isBigNumber === true) cols = cols.toNumber();

	    if (!isInteger(rows) || rows < 1) {
	      throw new Error('Parameters in function eye must be positive integers');
	    }
	    if (!isInteger(cols) || cols < 1) {
	      throw new Error('Parameters in function eye must be positive integers');
	    }
	    
	    var one = Big ? new type.BigNumber(1) : 1;
	    var defaultValue = Big ? new Big(0) : 0;
	    var size = [rows, cols];
	    
	    // check we need to return a matrix
	    if (format) {
	      // get matrix storage constructor
	      var F = type.Matrix.storage(format);
	      // create diagonal matrix (use optimized implementation for storage format)
	      return F.diagonal(size, one, 0, defaultValue);
	    }
	    
	    // create and resize array
	    var res = array.resize([], size, defaultValue);
	    // fill in ones on the diagonal
	    var minimum = rows < cols ? rows : cols;
	    // fill diagonal
	    for (var d = 0; d < minimum; d++) {
	      res[d][d] = one;
	    }
	    return res;
	  }
	}

	exports.name = 'eye';
	exports.factory = factory;


/***/ },
/* 65 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/matrix/flatten.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(/*! ../../utils/object */ 21).clone;
	var _flatten = __webpack_require__(/*! ../../utils/array */ 34).flatten;

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Flatten a multi dimensional matrix into a single dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.flatten(x)
	   *
	   * Examples:
	   *
	   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]
	   *
	   * See also:
	   *
	   *    concat, resize, size, squeeze
	   *
	   * @param {Matrix | Array} x   Matrix to be flattened
	   * @return {Matrix | Array} Returns the flattened matrix
	   */
	  var flatten = typed('flatten', {
	    'Array': function (x) {
	      return _flatten(clone(x));
	    },

	    'Matrix': function (x) {
	      var flat = _flatten(clone(x.toArray()));
	      // TODO: return the same matrix type as x
	      return matrix(flat);
	    }
	  });

	  flatten.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return flatten;
	}

	exports.name = 'flatten';
	exports.factory = factory;


/***/ },
/* 66 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/inv.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../utils/index */ 52);

	function factory (type, config, load, typed) {
	  var matrix       = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var divideScalar = load(__webpack_require__(/*! ../arithmetic/divideScalar */ 67));
	  var addScalar    = load(__webpack_require__(/*! ../arithmetic/addScalar */ 43));
	  var multiply     = load(__webpack_require__(/*! ../arithmetic/multiply */ 56));
	  var unaryMinus   = load(__webpack_require__(/*! ../arithmetic/unaryMinus */ 44));
	  var det          = load(__webpack_require__(/*! ../matrix/det */ 59));
	  var eye          = load(__webpack_require__(/*! ./eye */ 64));

	  /**
	   * Calculate the inverse of a square matrix.
	   *
	   * Syntax:
	   *
	   *     math.inv(x)
	   *
	   * Examples:
	   *
	   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]
	   *     math.inv(4);                 // returns 0.25
	   *     1 / 4;                       // returns 0.25
	   *
	   * See also:
	   *
	   *     det, transpose
	   *
	   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
	   * @return {number | Complex | Array | Matrix} The inverse of `x`.
	   */
	  var inv = typed('inv', {
	    'Array | Matrix': function (x) {
	      var size = (x.isMatrix === true) ? x.size() : util.array.size(x);
	      switch (size.length) {
	        case 1:
	          // vector
	          if (size[0] == 1) {
	            if (x.isMatrix === true) {
	              return matrix([
	                divideScalar(1, x.valueOf()[0])
	              ]);
	            }
	            else {
	              return [
	                divideScalar(1, x[0])
	              ];
	            }
	          }
	          else {
	            throw new RangeError('Matrix must be square ' +
	            '(size: ' + util.string.format(size) + ')');
	          }

	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];
	          if (rows == cols) {
	            if (x.isMatrix === true) {
	              return matrix(
	                  _inv(x.valueOf(), rows, cols),
	                  x.storage()
	              );
	            }
	            else {
	              // return an Array
	              return _inv(x, rows, cols);
	            }
	          }
	          else {
	            throw new RangeError('Matrix must be square ' +
	            '(size: ' + util.string.format(size) + ')');
	          }

	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' +
	          '(size: ' + util.string.format(size) + ')');
	      }
	    },

	    'any': function (x) {
	      // scalar
	      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
	    }
	  });

	  /**
	   * Calculate the inverse of a square matrix
	   * @param {Array[]} mat     A square matrix
	   * @param {number} rows     Number of rows
	   * @param {number} cols     Number of columns, must equal rows
	   * @return {Array[]} inv    Inverse matrix
	   * @private
	   */
	  function _inv (mat, rows, cols){
	    var r, s, f, value, temp;

	    if (rows == 1) {
	      // this is a 1 x 1 matrix
	      value = mat[0][0];
	      if (value == 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [[
	        divideScalar(1, value)
	      ]];
	    }
	    else if (rows == 2) {
	      // this is a 2 x 2 matrix
	      var d = det(mat);
	      if (d == 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [
	        [
	          divideScalar(mat[1][1], d),
	          divideScalar(unaryMinus(mat[0][1]), d)
	        ],
	        [
	          divideScalar(unaryMinus(mat[1][0]), d),
	          divideScalar(mat[0][0], d)
	        ]
	      ];
	    }
	    else {
	      // this is a matrix of 3 x 3 or larger
	      // calculate inverse using gauss-jordan elimination
	      //      http://en.wikipedia.org/wiki/Gaussian_elimination
	      //      http://mathworld.wolfram.com/MatrixInverse.html
	      //      http://math.uww.edu/~mcfarlat/inverse.htm

	      // make a copy of the matrix (only the arrays, not of the elements)
	      var A = mat.concat();
	      for (r = 0; r < rows; r++) {
	        A[r] = A[r].concat();
	      }

	      // create an identity matrix which in the end will contain the
	      // matrix inverse
	      var B = eye(rows).valueOf();

	      // loop over all columns, and perform row reductions
	      for (var c = 0; c < cols; c++) {
	        // element Acc should be non zero. if not, swap content
	        // with one of the lower rows
	        r = c;
	        while (r < rows && A[r][c] == 0) {
	          r++;
	        }
	        if (r == rows || A[r][c] == 0) {
	          // TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)
	          throw Error('Cannot calculate inverse, determinant is zero');
	        }
	        if (r != c) {
	          temp = A[c]; A[c] = A[r]; A[r] = temp;
	          temp = B[c]; B[c] = B[r]; B[r] = temp;
	        }

	        // eliminate non-zero values on the other rows at column c
	        var Ac = A[c],
	            Bc = B[c];
	        for (r = 0; r < rows; r++) {
	          var Ar = A[r],
	              Br = B[r];
	          if(r != c) {
	            // eliminate value at column c and row r
	            if (Ar[c] != 0) {
	              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);

	              // add (f * row c) to row r to eliminate the value
	              // at column c
	              for (s = c; s < cols; s++) {
	                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
	              }
	              for (s = 0; s < cols; s++) {
	                Br[s] = addScalar(Br[s],  multiply(f, Bc[s]));
	              }
	            }
	          }
	          else {
	            // normalize value at Acc to 1,
	            // divide each value on row r with the value at Acc
	            f = Ac[c];
	            for (s = c; s < cols; s++) {
	              Ar[s] = divideScalar(Ar[s], f);
	            }
	            for (s = 0; s < cols; s++) {
	              Br[s] = divideScalar(Br[s], f);
	            }
	          }
	        }
	      }
	      return B;
	    }
	  }

	  inv.toTex = '\\left(${args[0]}\\right)^{-1}';

	  return inv;
	}

	exports.name = 'inv';
	exports.factory = factory;


/***/ },
/* 67 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/divideScalar.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory(type, config, load, typed) {
	  /**
	   * Divide two scalar values, `x / y`.
	   * This function is meant for internal use: it is used by the public functions
	   * `divide` and `inv`.
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`
	   * @private
	   */
	  var divideScalar = typed('divide', {
	    'number, number': function (x, y) {
	      return x / y;
	    },

	    'Complex, Complex': _divideComplex,

	    'BigNumber, BigNumber': function (x, y) {
	      return x.div(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.div(y);
	    },

	    'Unit, number': function (x, y) {
	      var res = x.clone();
	      res.value = ((res.value === null) ? res._normalize(1) : res.value) / y;
	      return res;
	    }
	  });

	  /**
	   * Divide two complex numbers. x / y or divide(x, y)
	   * @param {Complex} x
	   * @param {Complex} y
	   * @return {Complex} res
	   * @private
	   */
	  function _divideComplex (x, y) {
	    var den = y.re * y.re + y.im * y.im;
	    if (den != 0) {
	      return new type.Complex(
	          (x.re * y.re + x.im * y.im) / den,
	          (x.im * y.re - x.re * y.im) / den
	      );
	    }
	    else {
	      // both y.re and y.im are zero
	      return new type.Complex(
	          (x.re != 0) ? (x.re / 0) : 0,
	          (x.im != 0) ? (x.im / 0) : 0
	      );
	    }
	  }

	  return divideScalar;
	}

	exports.factory = factory;


/***/ },
/* 68 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/ones.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var resize = __webpack_require__(/*! ../../utils/array */ 34).resize;

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Create a matrix filled with ones. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.ones(m)
	   *    math.ones(m, format)
	   *    math.ones(m, n)
	   *    math.ones(m, n, format)
	   *    math.ones([m, n])
	   *    math.ones([m, n], format)
	   *    math.ones([m, n, p, ...])
	   *    math.ones([m, n, p, ...], format)
	   *
	   * Examples:
	   *
	   *    math.ones(3);                   // returns [1, 1, 1]
	   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]
	   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
	   *
	   *    var A = [[1, 2, 3], [4, 5, 6]];
	   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]
	   *
	   * See also:
	   *
	   *    zeros, eye, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix | number}  A matrix filled with ones
	   */
	  var ones = typed('ones', {
	    '': function () {
	      return (config.matrix === 'array')
	          ? _ones([])
	          : _ones([], 'default');
	    },

	    // math.ones(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function (size) {
	      var last = size[size.length - 1];
	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _ones(size, format);
	      }
	      else if (config.matrix === 'array') {
	        return _ones(size);
	      }
	      else {
	        return _ones(size, 'default');
	      }
	    },

	    'Array': _ones,

	    'Matrix': function (size) {
	      var format = size.storage();
	      return _ones(size.valueOf(), format);
	    },

	    'Array | Matrix, string': function (size, format) {
	      return _ones (size.valueOf(), format);
	    }
	  });

	  ones.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return ones;

	  /**
	   * Create an Array or Matrix with ones
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */
	  function _ones(size, format) {
	    var hasBigNumbers = _normalize(size);
	    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;
	    _validate(size);

	    if (format) {
	      // return a matrix
	      var m = matrix(format);
	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }
	      return m;
	    }
	    else {
	      // return an Array
	      var arr = [];
	      if (size.length > 0) {
	        return resize(arr, size, defaultValue);
	      }
	      return arr;
	    }
	  }

	  // replace BigNumbers with numbers, returns true if size contained BigNumbers
	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (value && value.isBigNumber === true) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  }

	  // validate arguments
	  function _validate (size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
	        throw new Error('Parameters in function ones must be positive integers');
	      }
	    });
	  }
	}

	exports.name = 'ones';
	exports.factory = factory;


/***/ },
/* 69 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/range.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var ZERO = new type.BigNumber(0);
	  var ONE = new type.BigNumber(1);

	  /**
	   * Create an array from a range.
	   * By default, the range end is excluded. This can be customized by providing
	   * an extra parameter `includeEnd`.
	   *
	   * Syntax:
	   *
	   *     math.range(str [, includeEnd])               // Create a range from a string,
	   *                                                  // where the string contains the
	   *                                                  // start, optional step, and end,
	   *                                                  // separated by a colon.
	   *     math.range(start, end [, includeEnd])        // Create a range with start and
	   *                                                  // end and a step size of 1.
	   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
	   *                                                  // and end.
	   *
	   * Where:
	   *
	   * - `str: string`
	   *   A string 'start:end' or 'start:step:end'
	   * - `start: {number | BigNumber}`
	   *   Start of the range
	   * - `end: number | BigNumber`
	   *   End of the range, excluded by default, included when parameter includeEnd=true
	   * - `step: number | BigNumber`
	   *   Step size. Default value is 1.
	   * - `includeEnd: boolean`
	   *   Option to specify whether to include the end or not. False by default.
	   *
	   * Examples:
	   *
	   *     math.range(2, 6);        // [2, 3, 4, 5]
	   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]
	   *     math.range('2:1:6');     // [2, 3, 4, 5]
	   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]
	   *
	   * See also:
	   *
	   *     ones, zeros, size, subset
	   *
	   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
	   * @return {Array | Matrix} range
	   */
	  var range = typed('range', {
	    // TODO: simplify signatures when typed-function supports default values and optional arguments

	    // TODO: a number or boolean should not be converted to string here
	    'string': _strRange,
	    'string, boolean': _strRange,

	    'number, number':  function (start, end) {
	      return _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number': function (start, end, step) {
	      return _out(_rangeEx(start, end, step));
	    },
	    'number, number, boolean': function (start, end, includeEnd) {
	      return includeEnd
	          ? _out(_rangeInc(start, end, 1))
	          : _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number, boolean': function (start, end, step, includeEnd) {
	      return includeEnd
	          ? _out(_rangeInc(start, end, step))
	          : _out(_rangeEx(start, end, step));
	    },

	    'BigNumber, BigNumber':  function (start, end) {
	      return _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber': function (start, end, step) {
	      return _out(_bigRangeEx(start, end, step));
	    },
	    'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {
	      return includeEnd
	          ? _out(_bigRangeInc(start, end, ONE))
	          : _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {
	      return includeEnd
	          ? _out(_bigRangeInc(start, end, step))
	          : _out(_bigRangeEx(start, end, step));
	    }

	  });

	  range.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return range;

	  function _out(arr) {
	    return config.matrix === 'array' ? arr : matrix(arr);
	  }

	  function _strRange (str, includeEnd) {
	    var r = _parse(str);
	    if (!r){
	      throw new SyntaxError('String "' + str + '" is no valid range');
	    }

	    var fn;
	    if (config.number === 'bignumber') {
	      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
	      return _out(fn(
	          new type.BigNumber(r.start),
	          new type.BigNumber(r.end),
	          new type.BigNumber(r.step)));
	    }
	    else {
	      fn = includeEnd ? _rangeInc : _rangeEx;
	      return _out(fn(r.start, r.end, r.step));
	    }
	  }

	  /**
	   * Create a range with numbers. End is excluded
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */
	  function _rangeEx (start, end, step) {
	    var array = [],
	        x = start;
	    if (step > 0) {
	      while (x < end) {
	        array.push(x);
	        x += step;
	      }
	    }
	    else if (step < 0) {
	      while (x > end) {
	        array.push(x);
	        x += step;
	      }
	    }

	    return array;
	  }

	  /**
	   * Create a range with numbers. End is included
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */
	  function _rangeInc (start, end, step) {
	    var array = [],
	        x = start;
	    if (step > 0) {
	      while (x <= end) {
	        array.push(x);
	        x += step;
	      }
	    }
	    else if (step < 0) {
	      while (x >= end) {
	        array.push(x);
	        x += step;
	      }
	    }

	    return array;
	  }

	  /**
	   * Create a range with big numbers. End is excluded
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */
	  function _bigRangeEx (start, end, step) {
	    var array = [],
	        x = start;
	    if (step.gt(ZERO)) {
	      while (x.lt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }
	    else if (step.lt(ZERO)) {
	      while (x.gt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }

	    return array;
	  }

	  /**
	   * Create a range with big numbers. End is included
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */
	  function _bigRangeInc (start, end, step) {
	    var array = [],
	        x = start;
	    if (step.gt(ZERO)) {
	      while (x.lte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }
	    else if (step.lt(ZERO)) {
	      while (x.gte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }

	    return array;
	  }

	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @param {string} str
	   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
	   * @private
	   */
	  function _parse (str) {
	    var args = str.split(':');

	    // number
	    var nums = args.map(function (arg) {
	      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
	      return Number(arg);
	    });

	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });
	    if(invalid) {
	      return null;
	    }

	    switch (nums.length) {
	      case 2:
	        return {
	          start: nums[0],
	          end: nums[1],
	          step: 1
	        };

	      case 3:
	        return {
	          start: nums[0],
	          end: nums[2],
	          step: nums[1]
	        };

	      default:
	        return null;
	    }
	  }

	}

	exports.name = 'range';
	exports.factory = factory;


/***/ },
/* 70 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/function/matrix/resize.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../error/DimensionError */ 38);
	var ArgumentsError = __webpack_require__(/*! ../../error/ArgumentsError */ 27);

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var format = __webpack_require__(/*! ../../utils/string */ 36).format;
	var clone = __webpack_require__(/*! ../../utils/object */ 21).clone;
	var array = __webpack_require__(/*! ../../utils/array */ 34);

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Resize a matrix
	   *
	   * Syntax:
	   *
	   *     math.resize(x, size)
	   *     math.resize(x, size, defaultValue)
	   *
	   * Examples:
	   *
	   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]
	   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]
	   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]
	   *     math.resize("hello", [8], "!");    // returns string 'hello!!!'
	   *
	   * See also:
	   *
	   *     size, squeeze, subset
	   *
	   * @param {Array | Matrix | *} x             Matrix to be resized
	   * @param {Array | Matrix} size              One dimensional array with numbers
	   * @param {number | string} [defaultValue=0] Zero by default, except in
	   *                                           case of a string, in that case
	   *                                           defaultValue = ' '
	   * @return {* | Array | Matrix} A resized clone of matrix `x`
	   */
	  // TODO: rework resize to a typed-function
	  var resize = function resize (x, size, defaultValue) {
	    if (arguments.length != 2 && arguments.length != 3) {
	      throw new ArgumentsError('resize', arguments.length, 2, 3);
	    }

	    if (size && size.isMatrix === true) {
	      size = size.valueOf(); // get Array
	    }

	    if (size.length && size[0] && size[0].isBigNumber === true) {
	      // convert bignumbers to numbers
	      size = size.map(function (value) {
	        return (value && value.isBigNumber === true) ? value.toNumber() : value;
	      });
	    }
	    
	    // check x is a Matrix
	    if (x && x.isMatrix === true) {
	      // use optimized matrix implementation, return copy
	      return x.resize(size, defaultValue, true);
	    }
	    
	    if (typeof x === 'string') {
	      // resize string
	      return _resizeString(x, size, defaultValue);
	    }
	    
	    // check result should be a matrix
	    var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'array');

	    if (size.length == 0) {
	      // output a scalar
	      while (Array.isArray(x)) {
	        x = x[0];
	      }

	      return clone(x);
	    }
	    else {
	      // output an array/matrix
	      if (!Array.isArray(x)) {
	        x = [x];
	      }
	      x = clone(x);

	      var res = array.resize(x, size, defaultValue);
	      return asMatrix ? matrix(res) : res;
	    }
	  };

	  resize.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return resize;

	  /**
	   * Resize a string
	   * @param {string} str
	   * @param {number[]} size
	   * @param {string} [defaultChar=' ']
	   * @private
	   */
	  function _resizeString(str, size, defaultChar) {
	    if (defaultChar !== undefined) {
	      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    }
	    else {
	      defaultChar = ' ';
	    }

	    if (size.length !== 1) {
	      throw new DimensionError(size.length, 1);
	    }
	    var len = size[0];
	    if (typeof len !== 'number' || !isInteger(len)) {
	      throw new TypeError('Invalid size, must contain positive integers ' +
	          '(size: ' + format(size) + ')');
	    }

	    if (str.length > len) {
	      return str.substring(0, len);
	    }
	    else if (str.length < len) {
	      var res = str;
	      for (var i = 0, ii = len - str.length; i < ii; i++) {
	        res += defaultChar;
	      }
	      return res;
	    }
	    else {
	      return str;
	    }
	  }
	}

	exports.name = 'resize';
	exports.factory = factory;


/***/ },
/* 71 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/size.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var array = __webpack_require__(/*! ../../utils/array */ 34);

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Calculate the size of a matrix or scalar.
	   *
	   * Syntax:
	   *
	   *     math.size(x)
	   *
	   * Examples:
	   *
	   *     math.size(2.3);                  // returns []
	   *     math.size('hello world');        // returns [11]
	   *
	   *     var A = [[1, 2, 3], [4, 5, 6]];
	   *     math.size(A);                    // returns [2, 3]
	   *     math.size(math.range(1,6));      // returns [5]
	   *
	   * See also:
	   *
	   *     resize, squeeze, subset
	   *
	   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
	   * @return {Array | Matrix} A vector with size of `x`.
	   */
	  var size = typed('size', {
	    'Matrix': function (x) {
	      // TODO: return the same matrix type as the input
	      return matrix(x.size());
	    },

	    'Array': array.size,

	    'string': function (x) {
	      return (config.matrix === 'array') ? [x.length] : matrix([x.length]);
	    },

	    'number | Complex | BigNumber | Unit | boolean | null': function (x) {
	      // scalar
	      return (config.matrix === 'array') ? [] : matrix([]);
	    }
	  });

	  size.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return size;
	}

	exports.name = 'size';
	exports.factory = factory;


/***/ },
/* 72 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/matrix/squeeze.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object = __webpack_require__(/*! ../../utils/object */ 21);
	var array = __webpack_require__(/*! ../../utils/array */ 34);

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
	   *
	   * Syntax:
	   *
	   *     math.squeeze(x)
	   *
	   * Examples:
	   *
	   *     math.squeeze([3]);           // returns 3
	   *     math.squeeze([[3]]);         // returns 3
	   *
	   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)
	   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)
	   *
	   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)
	   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)
	   *
	   *     // only inner and outer dimensions are removed
	   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *
	   * See also:
	   *
	   *     subset
	   *
	   * @param {Matrix | Array} x      Matrix to be squeezed
	   * @return {Matrix | Array} Squeezed matrix
	   */
	  var squeeze = typed('squeeze', {
	    'Array': function (x) {
	      return array.squeeze(object.clone(x));
	    },

	    'Matrix': function (x) {
	      var res = array.squeeze(x.toArray());
	      // FIXME: return the same type of matrix as the input
	      return Array.isArray(res) ? matrix(res) : res;
	    },

	    'any': function (x) {
	      // scalar
	      return object.clone(x);
	    }
	  });

	  squeeze.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return squeeze;
	}

	exports.name = 'squeeze';
	exports.factory = factory;


/***/ },
/* 73 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/function/matrix/subset.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(/*! ../../utils/object */ 21).clone;
	var validateIndex = __webpack_require__(/*! ../../utils/array */ 34).validateIndex;
	var DimensionError = __webpack_require__(/*! ../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Get or set a subset of a matrix or string.
	   *
	   * Syntax:
	   *     math.subset(value, index)                                // retrieve a subset
	   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
	   *
	   * Examples:
	   *
	   *     // get a subset
	   *     var d = [[1, 2], [3, 4]];
	   *     math.subset(d, math.index(1, 0));        // returns 3
	   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]
	   *
	   *     // replace a subset
	   *     var e = [];
	   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]
	   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]
	   *
	   * See also:
	   *
	   *     size, resize, squeeze, index
	   *
	   * @param {Array | Matrix | string} matrix  An array, matrix, or string
	   * @param {Index} index                     An index containing ranges for each
	   *                                          dimension
	   * @param {*} [replacement]                 An array, matrix, or scalar.
	   *                                          If provided, the subset is replaced with replacement.
	   *                                          If not provided, the subset is returned
	   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
	   *                                          the matrix is resized. If not provided,
	   *                                          math.matrix elements will be left undefined.
	   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
	   */
	  var subset = typed('subset', {
	    // get subset
	    'Array, Index': function (value, index) {
	      var m = matrix(value);
	      var subset = m.subset(index);       // returns a Matrix
	      return subset && subset.valueOf();  // return an Array (like the input)
	    },

	    'Matrix, Index': function (value, index) {
	      return value.subset(index);
	    },

	    'string, Index': _getSubstring,

	    // set subset
	    'Array, Index, any': function (value, index, replacement) {
	      return matrix(clone(value))
	          .subset(index, replacement, undefined)
	          .valueOf();
	    },

	    'Array, Index, any, any': function (value, index, replacement, defaultValue) {
	      return matrix(clone(value))
	          .subset(index, replacement, defaultValue)
	          .valueOf();
	    },

	    'Matrix, Index, any': function (value, index, replacement) {
	      return value.clone().subset(index, replacement);
	    },

	    'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {
	      return value.clone().subset(index, replacement, defaultValue);
	    },

	    'string, Index, string': _setSubstring,
	    'string, Index, string, string': _setSubstring
	  });

	  subset.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return subset;

	  /**
	   * Retrieve a subset of a string
	   * @param {string} str            string from which to get a substring
	   * @param {Index} index           An index containing ranges for each dimension
	   * @returns {string} substring
	   * @private
	   */
	  function _getSubstring(str, index) {
	    if (!index || index.isIndex !== true) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }
	    if (index.size().length != 1) {
	      throw new DimensionError(index.size().length, 1);
	    }

	    // validate whether the range is out of range
	    var strLen = str.length;
	    validateIndex(index.min()[0], strLen);
	    validateIndex(index.max()[0], strLen);

	    var range = index.dimension(0);

	    var substr = '';
	    range.forEach(function (v) {
	      substr += str.charAt(v);
	    });

	    return substr;
	  }

	  /**
	   * Replace a substring in a string
	   * @param {string} str            string to be replaced
	   * @param {Index} index           An index containing ranges for each dimension
	   * @param {string} replacement    Replacement string
	   * @param {string} [defaultValue] Default value to be uses when resizing
	   *                                the string. is ' ' by default
	   * @returns {string} result
	   * @private
	   */
	  function _setSubstring(str, index, replacement, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }
	    if (index.size().length != 1) {
	      throw new DimensionError(index.size().length, 1);
	    }
	    if (defaultValue !== undefined) {
	      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    }
	    else {
	      defaultValue = ' ';
	    }

	    var range = index.dimension(0);
	    var len = range.size()[0];

	    if (len != replacement.length) {
	      throw new DimensionError(range.size()[0], replacement.length);
	    }

	    // validate whether the range is out of range
	    var strLen = str.length;
	    validateIndex(index.min()[0]);
	    validateIndex(index.max()[0]);

	    // copy the string into an array with characters
	    var chars = [];
	    for (var i = 0; i < strLen; i++) {
	      chars[i] = str.charAt(i);
	    }

	    range.forEach(function (v, i) {
	      chars[v] = replacement.charAt(i[0]);
	    });

	    // initialize undefined characters with a space
	    if (chars.length > strLen) {
	      for (i = strLen - 1, len = chars.length; i < len; i++) {
	        if (!chars[i]) {
	          chars[i] = defaultValue;
	        }
	      }
	    }

	    return chars.join('');
	  }
	}

	exports.name = 'subset';
	exports.factory = factory;


/***/ },
/* 74 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/trace.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(/*! ../../utils/object */ 21).clone;
	var format = __webpack_require__(/*! ../../utils/string */ 36).format;

	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var add = load(__webpack_require__(/*! ../arithmetic/add */ 60));

	  /**
	   * Calculate the trace of a matrix: the sum of the elements on the main
	   * diagonal of a square matrix.
	   *
	   * Syntax:
	   *
	   *    math.trace(x)
	   *
	   * Examples:
	   *
	   *    math.trace([[1, 2], [3, 4]]); // returns 5
	   *
	   *    var A = [
	   *      [1, 2, 3],
	   *      [-1, 2, 3],
	   *      [2, 0, 3]
	   *    ]
	   *    math.trace(A); // returns 6
	   *
	   * See also:
	   *
	   *    diag
	   *
	   * @param {Array | Matrix} x  A matrix
	   *
	   * @return {number} The trace of `x`
	   */
	  var trace = typed('trace', {
	    
	    'Array': function (x) {
	      // use dense matrix implementation
	      return trace(matrix(x));
	    },

	    'Matrix': function (x) {
	      // result
	      var c;
	      // process storage format
	      switch (x.storage()) {
	        case 'dense':
	          c = _denseTrace(x);
	          break;
	        case 'sparse':
	          c = _sparseTrace(x);
	          break;
	      }
	      return c;
	    },
	    
	    'any': clone
	  });
	  
	  var _denseTrace = function (m) {
	    // matrix size & data
	    var size = m._size;
	    var data = m._data;
	    
	    // process dimensions
	    switch (size.length) {
	      case 1:
	        // vector
	        if (size[0] == 1) {
	          // return data[0]
	          return clone(data[0]);
	        }
	        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
	      case 2:
	        // two dimensional
	        var rows = size[0];
	        var cols = size[1];
	        if (rows === cols) {
	          // calulate sum
	          var sum = 0;
	          // loop diagonal
	          for (var i = 0; i < rows; i++)
	            sum = add(sum, data[i][i]);
	          // return trace
	          return sum;
	        }
	        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');        
	      default:
	        // multi dimensional
	        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');
	    }
	  };
	  
	  var _sparseTrace = function (m) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    var size = m._size;
	    // check dimensions
	    var rows = size[0];
	    var columns = size[1];
	    // matrix must be square
	    if (rows === columns) {
	      // calulate sum
	      var sum = 0;
	      // check we have data (avoid looping columns)
	      if (values.length > 0) {
	        // loop columns
	        for (var j = 0; j < columns; j++) {
	          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	          var k0 = ptr[j];
	          var k1 = ptr[j + 1];
	          // loop k within [k0, k1[
	          for (var k = k0; k < k1; k++) {
	            // row index
	            var i = index[k];
	            // check row
	            if (i === j) {
	              // accumulate value
	              sum = add(sum, values[k]);
	              // exit loop
	              break;
	            }
	            if (i > j) {
	              // exit loop, no value on the diagonal for column j
	              break;
	            }
	          }
	        }
	      }
	      // return trace
	      return sum;
	    }
	    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');   
	  };

	  trace.toTex = '\\mathrm{tr}\\left(${args[0]}\\right)';
	  
	  return trace;
	}

	exports.name = 'trace';
	exports.factory = factory;


/***/ },
/* 75 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/matrix/transpose.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(/*! ../../utils/object */ 21).clone;
	var format = __webpack_require__(/*! ../../utils/string */ 36).format;

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var DenseMatrix = type.DenseMatrix,
	      SparseMatrix = type.SparseMatrix;

	  /**
	   * Transpose a matrix. All values of the matrix are reflected over its
	   * main diagonal. Only two dimensional matrices are supported.
	   *
	   * Syntax:
	   *
	   *     math.transpose(x)
	   *
	   * Examples:
	   *
	   *     var A = [[1, 2, 3], [4, 5, 6]];
	   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]
	   *
	   * See also:
	   *
	   *     diag, inv, subset, squeeze
	   *
	   * @param {Array | Matrix} x  Matrix to be transposed
	   * @return {Array | Matrix}   The transposed matrix
	   */
	  var transpose = typed('transpose', {

	    'Array': function (x) {
	      // use dense matrix implementation
	      return transpose(matrix(x)).valueOf();
	    },

	    'Matrix': function (x) {
	      // matrix size
	      var size = x.size();

	      // result
	      var c;
	      
	      // process dimensions
	      switch (size.length) {
	        case 1:
	          // vector
	          c = x.clone();
	          break;

	        case 2:
	          // rows and columns
	          var rows = size[0];
	          var columns = size[1];

	          // check columns
	          if (columns === 0) {
	            // throw exception
	            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');
	          }

	          // process storage format
	          switch (x.storage()) {
	            case 'dense':
	              c = _denseTranspose(x, rows, columns);
	              break;
	            case 'sparse':
	              c = _sparseTranspose(x, rows, columns);
	              break;
	          }
	          break;
	          
	        default:
	          // multi dimensional
	          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');
	      }
	      return c;
	    },

	    // scalars
	    'any': function (x) {
	      return clone(x);
	    }
	  });

	  var _denseTranspose = function (m, rows, columns) {
	    // matrix array
	    var data = m._data;
	    // transposed matrix data
	    var transposed = [];
	    var transposedRow;
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize row
	      transposedRow = transposed[j] = [];
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // set data
	        transposedRow[i] = clone(data[i][j]);
	      }
	    }
	    // return matrix
	    return new DenseMatrix({
	      data: transposed,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  };

	  var _sparseTranspose = function (m, rows, columns) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // result matrices
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // row counts
	    var w = [];
	    for (var x = 0; x < rows; x++)
	      w[x] = 0;
	    // vars
	    var p, l, j;
	    // loop values in matrix
	    for (p = 0, l = index.length; p < l; p++) {
	      // number of values in row
	      w[index[p]]++;
	    }
	    // cumulative sum
	    var sum = 0;
	    // initialize cptr with the cummulative sum of row counts
	    for (var i = 0; i < rows; i++) {
	      // update cptr
	      cptr.push(sum);
	      // update sum
	      sum += w[i];
	      // update w
	      w[i] = cptr[i];
	    }
	    // update cptr
	    cptr.push(sum);
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // values & index in column
	      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
	        // C values & index
	        var q = w[index[k]]++;
	        // C[j, i] = A[i, j]
	        cindex[q] = j;
	        // check we need to process values (pattern matrix)
	        if (values)
	          cvalues[q] = clone(values[k]);
	      }
	    }
	    // return matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  };

	  transpose.toTex = '\\left(${args[0]}\\right)' + latex.operators['transpose'];

	  return transpose;
	}

	exports.name = 'transpose';
	exports.factory = factory;


/***/ },
/* 76 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/matrix/zeros.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var resize = __webpack_require__(/*! ../../utils/array */ 34).resize;

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Create a matrix filled with zeros. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.zeros(m)
	   *    math.zeros(m, format)
	   *    math.zeros(m, n)
	   *    math.zeros(m, n, format)
	   *    math.zeros([m, n])
	   *    math.zeros([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.zeros(3);                  // returns [0, 0, 0]
	   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]
	   *    math.zeros(3, 'dense');         // returns [0, 0, 0]
	   *
	   *    var A = [[1, 2, 3], [4, 5, 6]];
	   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]
	   *
	   * See also:
	   *
	   *    ones, eye, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix}           A matrix filled with zeros
	   */
	  var zeros = typed('zeros', {
	    '': function () {
	      return (config.matrix === 'array')
	          ? _zeros([])
	          : _zeros([], 'default');
	    },

	    // math.zeros(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function (size) {
	      var last = size[size.length - 1];
	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _zeros(size, format);
	      }
	      else if (config.matrix === 'array') {
	        return _zeros(size);
	      }
	      else {
	        return _zeros(size, 'default');
	      }
	    },

	    'Array': _zeros,

	    'Matrix': function (size) {
	      var format = size.storage();
	      return _zeros(size.valueOf(), format);
	    },

	    'Array | Matrix, string': function (size, format) {
	      return _zeros (size.valueOf(), format);
	    }
	  });

	  zeros.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return zeros;

	  /**
	   * Create an Array or Matrix with zeros
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */
	  function _zeros(size, format) {
	    var hasBigNumbers = _normalize(size);
	    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;
	    _validate(size);

	    if (format) {
	      // return a matrix
	      var m = matrix(format);
	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }
	      return m;
	    }
	    else {
	      // return an Array
	      var arr = [];
	      if (size.length > 0) {
	        return resize(arr, size, defaultValue);
	      }
	      return arr;
	    }
	  }

	  // replace BigNumbers with numbers, returns true if size contained BigNumbers
	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (value && value.isBigNumber === true) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  }

	  // validate arguments
	  function _validate (size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
	        throw new Error('Parameters in function zeros must be positive integers');
	      }
	    });
	  }
	}

	// TODO: zeros contains almost the same code as ones. Reuse this?

	exports.name = 'zeros';
	exports.factory = factory;


/***/ },
/* 77 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/index.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  // decomposition
	  __webpack_require__(/*! ./decomposition/lup */ 78),
	  __webpack_require__(/*! ./decomposition/slu */ 83),

	  // solver
	  __webpack_require__(/*! ./solver/lsolve */ 102),
	  __webpack_require__(/*! ./solver/lusolve */ 104),
	  __webpack_require__(/*! ./solver/usolve */ 106)
	];


/***/ },
/* 78 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/decomposition/lup.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../../utils/index */ 52);

	var object = util.object;

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../../type/matrix/function/matrix */ 39));
	  var abs = load(__webpack_require__(/*! ../../arithmetic/abs */ 79));
	  var addScalar = load(__webpack_require__(/*! ../../arithmetic/addScalar */ 43));
	  var divideScalar = load(__webpack_require__(/*! ../../arithmetic/divideScalar */ 67));
	  var multiplyScalar = load(__webpack_require__(/*! ../../arithmetic/multiplyScalar */ 57));
	  var subtract = load(__webpack_require__(/*! ../../arithmetic/subtract */ 41));
	  var larger = load(__webpack_require__(/*! ../../relational/larger */ 80));
	  var equalScalar = load(__webpack_require__(/*! ../../relational/equalScalar */ 49));
	  var unaryMinus = load(__webpack_require__(/*! ../../arithmetic/unaryMinus */ 44));
	  
	  var SparseMatrix = type.SparseMatrix;
	  var DenseMatrix = type.DenseMatrix;
	  var Spa = type.Spa;
	  
	  /**
	   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
	   * row permutation vector `p` where `A[p,:] = L * U`
	   *
	   * Syntax:
	   *
	   *    math.lup(A);
	   *
	   * Example:
	   *
	   *    var m = [[2, 1], [1, 4]];
	   *    var r = math.lup();
	   *    // r = {
	   *    //   L: [[1, 0], [0.5, 1]],
	   *    //   U: [[2, 1], [0, 3.5]],
	   *    //   P: [0, 1]
	   *    // }
	   *
	   * See also:
	   *
	   *    slu, lsolve, lusolve, usolve
	   *
	   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
	   *
	   * @return {Array<Matrix>}      The lower triangular matrix, the upper triangular matrix and the permutation matrix.
	   */
	  var lup = typed('lup', {

	    'DenseMatrix': function (m) {
	      return _denseLUP(m);
	    },
	    
	    'SparseMatrix': function (m) {
	      return _sparseLUP(m);
	    },

	    'Array': function (a) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // lup, use matrix implementation
	      var r = _denseLUP(m);
	      // result
	      return {
	        L: r.L.valueOf(),
	        U: r.U.valueOf(),
	        p: r.p
	      };
	    }
	  });

	  var _denseLUP = function (m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // minimum rows and columns
	    var n = Math.min(rows, columns);
	    // matrix array, clone original data
	    var data = object.clone(m._data);
	    // l matrix arrays
	    var ldata = [];
	    var lsize = [rows, n];
	    // u matrix arrays
	    var udata = [];
	    var usize = [n, columns];
	    // vars
	    var i, j, k;
	    // permutation vector    
	    var p = [];
	    for (i = 0; i < rows; i++)
	      p[i] = i;    
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // skip first column in upper triangular matrix
	      if (j > 0) {
	        // loop rows
	        for (i = 0; i < rows; i++) {
	          // min i,j
	          var min = Math.min(i, j);
	          // v[i, j]
	          var s = 0;
	          // loop up to min
	          for (k = 0; k < min; k++) {
	            // s = l[i, k] - data[k, j]
	            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
	          }
	          data[i][j] = subtract(data[i][j], s);
	        }
	      }      
	      // row with larger value in cvector, row >= j
	      var pi = j;
	      var pabsv = 0;
	      var vjj = 0;
	      // loop rows
	      for (i = j; i < rows; i++) {
	        // data @ i, j
	        var v = data[i][j];
	        // absolute value
	        var absv = abs(v);
	        // value is greater than pivote value
	        if (larger(absv, pabsv)) {
	          // store row
	          pi = i;
	          // update max value
	          pabsv = absv;
	          // value @ [j, j]
	          vjj = v;
	        }
	      }
	      // swap rows (j <-> pi)
	      if (j !== pi) {
	        // swap values j <-> pi in p
	        p[j] = [p[pi], p[pi] = p[j]][0];
	        // swap j <-> pi in data
	        DenseMatrix._swapRows(j, pi, data);
	      }
	      // check column is in lower triangular matrix
	      if (j < rows) {
	        // loop rows (lower triangular matrix)
	        for (i = j + 1; i < rows; i++) {
	          // value @ i, j
	          var vij = data[i][j];
	          if (!equalScalar(vij, 0)) {
	            // update data
	            data[i][j] = divideScalar(data[i][j], vjj);
	          }
	        }
	      }
	    }
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // initialize row in arrays
	        if (j === 0) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i] = [];
	          }
	          // L
	          ldata[i] = [];
	        }
	        // check we are in the upper triangular matrix
	        if (i < j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          }
	          // check column exists in lower triangular matrix
	          if (j < rows) {
	            // L
	            ldata[i][j] = 0;
	          }
	          continue;
	        }
	        // diagonal value
	        if (i === j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          }
	          // check column exists in lower triangular matrix
	          if (j < rows) {
	            // L
	            ldata[i][j] = 1;
	          }
	          continue;
	        }
	        // check row exists in upper triangular matrix
	        if (i < columns) {
	          // U
	          udata[i][j] = 0;
	        }
	        // check column exists in lower triangular matrix
	        if (j < rows) {
	          // L
	          ldata[i][j] = data[i][j];
	        }
	      }
	    }
	    // l matrix
	    var l =  new DenseMatrix({
	      data: ldata,
	      size: lsize
	    });
	    // u matrix
	    var u =  new DenseMatrix({
	      data: udata,
	      size: usize
	    });    
	    // return matrices
	    return { 
	      L: l, 
	      U: u, 
	      p: p, 
	      toString: function () {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  };
	  
	  var _sparseLUP = function (m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // minimum rows and columns
	    var n = Math.min(rows, columns);
	    // matrix arrays (will not be modified, thanks to permutation vector)
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // l matrix arrays
	    var lvalues = [];
	    var lindex = [];
	    var lptr = [];
	    var lsize = [rows, n];
	    // u matrix arrays
	    var uvalues = [];
	    var uindex = [];
	    var uptr = [];
	    var usize = [n, columns];
	    // vars
	    var i, j, k;
	    // permutation vectors, (current index -> original index) and (original index -> current index)
	    var pv_co = [];
	    var pv_oc = [];
	    for (i = 0; i < rows; i++) {
	      pv_co[i] = i;
	      pv_oc[i] = i;
	    }
	    // swap indices in permutation vectors (condition x < y)!
	    var swapIndeces = function (x, y) {      
	      // find pv indeces getting data from x and y
	      var kx = pv_oc[x];
	      var ky = pv_oc[y];
	      // update permutation vector current -> original
	      pv_co[kx] = y;
	      pv_co[ky] = x;
	      // update permutation vector original -> current
	      pv_oc[x] = ky;
	      pv_oc[y] = kx;
	    };
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // sparse accumulator
	      var spa = new Spa();            
	      // check lower triangular matrix has a value @ column j
	      if (j < rows) {
	        // update ptr
	        lptr.push(lvalues.length);
	        // first value in j column for lower triangular matrix
	        lvalues.push(1);
	        lindex.push(j);
	      }
	      // update ptr
	      uptr.push(uvalues.length);
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // copy column j into sparse accumulator
	      for (k = k0; k < k1; k++) {
	        // row
	        i = index[k];
	        // copy column values into sparse accumulator (use permutation vector)
	        spa.set(pv_co[i], values[k]);
	      }
	      // skip first column in upper triangular matrix
	      if (j > 0) {
	        // loop rows in column j (above diagonal)
	        spa.forEach(0, j - 1, function (k, vkj) {
	          // loop rows in column k (L)
	          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
	            // check row is below k
	            if (i > k) {
	              // update spa value
	              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
	            }
	          });
	        });        
	      }
	      // row with larger value in spa, row >= j
	      var pi = j;
	      var vjj = spa.get(j);
	      var pabsv = abs(vjj);      
	      // loop values in spa (order by row, below diagonal)
	      spa.forEach(j + 1, rows - 1, function (x, v) {
	        // absolute value
	        var absv = abs(v);
	        // value is greater than pivote value
	        if (larger(absv, pabsv)) {
	          // store row
	          pi = x;
	          // update max value
	          pabsv = absv;
	          // value @ [j, j]
	          vjj = v;
	        }
	      });
	      // swap rows (j <-> pi)
	      if (j !== pi) {
	        // swap values j <-> pi in L
	        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);
	        // swap values j <-> pi in U
	        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);
	        // swap values in spa
	        spa.swap(j, pi);
	        // update permutation vector (swap values @ j, pi)
	        swapIndeces(j, pi);
	      }
	      // loop values in spa (order by row)
	      spa.forEach(0, rows - 1, function (x, v) {
	        // check we are above diagonal
	        if (x <= j) {
	          // update upper triangular matrix
	          uvalues.push(v);
	          uindex.push(x);
	        }
	        else {
	          // update value
	          v = divideScalar(v, vjj);
	          // check value is non zero
	          if (!equalScalar(v, 0)) {
	            // update lower triangular matrix
	            lvalues.push(v);
	            lindex.push(x);
	          }
	        }
	      });
	    }
	    // update ptrs
	    uptr.push(uvalues.length);
	    lptr.push(lvalues.length);

	    // return matrices
	    return {
	      L: new SparseMatrix({
	        values: lvalues,
	        index: lindex,
	        ptr: lptr,
	        size: lsize
	      }), 
	      U: new SparseMatrix({
	        values: uvalues,
	        index: uindex,
	        ptr: uptr,
	        size: usize
	      }),
	      p: pv_oc,
	      toString: function () {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  };
	  
	  return lup;
	}

	exports.name = 'lup';
	exports.factory = factory;


/***/ },
/* 79 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/abs.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the absolute value of a number. For matrices, the function is
	   * evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.abs(x)
	   *
	   * Examples:
	   *
	   *    math.abs(3.5);                // returns number 3.5
	   *    math.abs(-4.2);               // returns number 4.2
	   *
	   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]
	   *
	   * See also:
	   *
	   *    sign
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x
	   *            A number or matrix for which to get the absolute value
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}
	   *            Absolute value of `x`
	   */
	  var abs = typed('abs', {
	    'number': Math.abs,

	    'Complex': function (x) {
	      var re = Math.abs(x.re);
	      var im = Math.abs(x.im);
	      if (re < 1000 && im < 1000) {
	        return Math.sqrt(re * re + im * im);
	      }
	      else {
	        // prevent overflow for large numbers
	        if (re >= im) {
	          var i = im / re;
	          return re * Math.sqrt(1 + i * i);
	        }
	        else {
	          var j = re / im;
	          return im * Math.sqrt(1 + j * j);
	        }
	      }
	    },

	    'BigNumber': function (x) {
	      return x.abs();
	    },

	    'Fraction': function (x) {
	      return x.abs();
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since abs(0) = 0
	      return deepMap(x, abs, true);
	    }
	  });

	  abs.toTex = '\\left|${args[0]}\\right|';

	  return abs;
	}

	exports.name = 'abs';
	exports.factory = factory;


/***/ },
/* 80 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/relational/larger.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(/*! ../../utils/number */ 24).nearlyEqual;

	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Test whether value x is larger than y.
	   *
	   * The function returns true when x is larger than y and the relative
	   * difference between x and y is larger than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.larger(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 3);             // returns false
	   *    math.larger(5, 2 + 2);         // returns true
	   *
	   *    var a = math.unit('5 cm');
	   *    var b = math.unit('2 inch');
	   *    math.larger(a, b);             // returns false
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
	   */
	  var larger = typed('larger', {

	    'boolean, boolean': function (x, y) {
	      return x > y;
	    },

	    'number, number': function (x, y) {
	      return x > y && !nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return x.gt(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.compare(y) === 1;
	    },

	    'Complex, Complex': function () {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return x.value > y.value && !nearlyEqual(x.value, y.value, config.epsilon);
	    },

	    'string, string': function (x, y) {
	      return x > y;
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, larger);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, larger, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, larger, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, larger);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return larger(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return larger(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return larger(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, larger, false);
	          break;
	        default:
	          c = algorithm14(x, y, larger, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, larger, true);
	          break;
	        default:
	          c = algorithm14(y, x, larger, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, larger, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, larger, true).valueOf();
	    }
	  });

	  larger.toTex = '\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\right)';

	  return larger;
	}

	exports.name = 'larger';
	exports.factory = factory;


/***/ },
/* 81 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm12.js ***!
  \*******************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
	   * Callback function invoked MxN times.
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  f(0, b)    ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm12 = function (s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues)
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	    
	    // result arrays
	    var cdata = [];
	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        }
	        else {
	          // dense matrix value @ i, j
	          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
	        }
	      }
	    }

	    // return sparse matrix
	    return c;
	  };
	  
	  return algorithm12;
	}

	exports.name = 'algorithm12';
	exports.factory = factory;


/***/ },
/* 82 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm07.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {

	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MxN times.
	   *
	   * C(i,j) = f(Aij, Bij)
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm07 = function (a, b, callback) {
	    // sparse matrix arrays
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // vars
	    var i, j;
	    
	    // result arrays
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++)
	      cdata[i] = [];

	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var xa = [];
	    var xb = [];
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // scatter the values of A(:,j) into workspace
	      _scatter(a, j, wa, xa, mark);
	      // scatter the values of B(:,j) into workspace
	      _scatter(b, j, wb, xb, mark);
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // matrix values @ i,j
	        var va = wa[i] === mark ? xa[i] : zero;
	        var vb = wb[i] === mark ? xb[i] : zero;
	        // invoke callback
	        cdata[i][j] = cf(va, vb);
	      }          
	    }

	    // return sparse matrix
	    return c;
	  };
	  
	  var _scatter = function (m, j, w, x, mark) {
	    // a arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // loop values in column j
	    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
	      // row
	      var i = index[k];
	      // update workspace
	      w[i] = mark;
	      x[i] = values[k];
	    }
	  };
	  
	  return algorithm07;
	}

	exports.name = 'algorithm07';
	exports.factory = factory;


/***/ },
/* 83 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/decomposition/slu.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../../utils/index */ 52);

	var number = util.number,
	    
	    isInteger = number.isInteger;

	function factory (type, config, load, typed) {

	  var cs_sqr = load(__webpack_require__(/*! ../../algebra/sparse/cs_sqr */ 84));
	  var cs_lu = load(__webpack_require__(/*! ../../algebra/sparse/cs_lu */ 94));

	  /**
	   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
	   *
	   * `P * A * Q = L * U`
	   *
	   * Syntax:
	   *
	   *    math.slu(A, order, threshold);
	   *
	   * See also:
	   *
	   *    lup, lsolve, usolve, lusolve
	   *
	   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
	   * @param {Number}       order          The Symbolic Ordering and Analysis order:
	   *                                       0 - Natural ordering, no permutation vector q is returned
	   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
	   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. 
	   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
	   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
	   *                                           A dense row is a row with more than 10*sqr(columns) entries.
	   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
	   */
	  var slu = typed('slu', {

	    'SparseMatrix, number, number': function (a, order, threshold) {
	      // verify order
	      if (!isInteger(order) || order < 0 || order > 3)
	        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
	      // verify threshold
	      if (threshold < 0 || threshold > 1)
	        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
	      
	      // perform symbolic ordering and analysis
	      var s = cs_sqr(order, a, false);
	      
	      // perform lu decomposition
	      var f = cs_lu(a, s, threshold);
	      
	      // return decomposition
	      return {
	        L: f.L,
	        U: f.U,
	        p: f.pinv,
	        q: s.q,
	        toString: function () {
	          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
	        }
	      };
	    }
	  });

	  return slu;
	}

	exports.name = 'slu';
	exports.factory = factory;


/***/ },
/* 84 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_sqr.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var cs_amd = load(__webpack_require__(/*! ./cs_amd */ 85));
	  var cs_permute = load(__webpack_require__(/*! ./cs_permute */ 89));
	  var cs_etree = load(__webpack_require__(/*! ./cs_etree */ 90));
	  var cs_post = load(__webpack_require__(/*! ./cs_post */ 91));
	  var cs_counts = load(__webpack_require__(/*! ./cs_counts */ 92));

	  /**
	   * Symbolic ordering and analysis for QR and LU decompositions.
	   *
	   * @param {Number}  order           The ordering strategy (see cs_amd for more details)
	   * @param {Matrix}  a               The A matrix
	   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
	   *                                  symbolic ordering and analysis for LU decomposition (false)
	   *
	   * @return {Object}                 The Symbolic ordering and analysis for matrix A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_sqr = function (order, a, qr) {
	    // a arrays
	    var aptr = a._ptr;
	    var asize = a._size;
	    // columns
	    var n = asize[1];
	    // vars
	    var k;
	    // symbolic analysis result
	    var s = {};    
	    // fill-reducing ordering
	    s.q = cs_amd(order, a);
	    // validate results
	    if (order && !s.q) 
	      return null;
	    // QR symbolic analysis
	    if (qr) {
	      // apply permutations if needed
	      var c = order ? cs_permute(a, null, s.q, 0) : a;
	      // etree of C'*C, where C=A(:,q)
	      s.parent = cs_etree(c, 1);
	      // post order elimination tree
	      var post = cs_post (s.parent, n);
	      // col counts chol(C'*C)
	      s.cp = cs_counts(c, s.parent, post, 1);
	      // check we have everything needed to calculate number of nonzero elements
	      if (c && s.parent && s.cp && _vcount(c, s)) {
	        // calculate number of nonzero elements
	        for (s.unz = 0, k = 0; k < n; k++) 
	          s.unz += s.cp[k];
	      }
	    }
	    else {
	      // for LU factorization only, guess nnz(L) and nnz(U)
	      s.unz = 4 * (aptr[n]) + n;
	      s.lnz = s.unz;
	    }
	    // return result S
	    return s;
	  };
	  
	  /**
	   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
	   */
	  var _vcount = function (a, s) {
	    // a arrays
	    var aptr = a._ptr;
	    var aindex = a._index;
	    var asize = a._size;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    // initialize s arrays
	    s.pinv = []; // (m + n);
	    s.leftmost = []; // (m);
	    // vars
	    var parent = s.parent;
	    var pinv = s.pinv;
	    var leftmost = s.leftmost;
	    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries
	    var w = []; // (m + 3 * n);
	    var next = 0;
	    var head = m;
	    var tail = m + n;
	    var nque = m + 2 * n;
	    // vars
	    var i, k, p, p0, p1;
	    // initialize w
	    for (k = 0; k < n; k++) {
	      // queue k is empty
	      w[head + k] = -1;
	      w[tail + k] = -1;
	      w[nque + k] = 0;
	    }
	    // initialize row arrays
	    for (i = 0; i < m; i++) 
	      leftmost[i] = -1;
	    // loop columns backwards    
	    for (k = n - 1; k >= 0; k--) {
	      // values & index for column k
	      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // leftmost[i] = min(find(A(i,:)))
	        leftmost[aindex[p]] = k;
	      }
	    }
	    // scan rows in reverse order
	    for (i = m - 1; i >= 0; i--) {
	      // row i is not yet ordered
	      pinv[i] = -1;
	      k = leftmost[i];
	      // check row i is empty
	      if (k == -1) 
	        continue;
	      // first row in queue k
	      if (w[nque + k]++ === 0) 
	        w[tail + k] = i;
	      // put i at head of queue k
	      w[next + i] = w[head + k];
	      w[head + k] = i;
	    }
	    s.lnz = 0;
	    s.m2 = m;
	    // find row permutation and nnz(V)
	    for (k = 0; k < n; k++) {
	      // remove row i from queue k
	      i = w[head + k];
	      // count V(k,k) as nonzero
	      s.lnz++;
	      // add a fictitious row
	      if (i < 0) 
	        i = s.m2++;
	      // associate row i with V(:,k)
	      pinv[i] = k;
	      // skip if V(k+1:m,k) is empty
	      if (--nque[k] <= 0) 
	        continue;
	      // nque[k] is nnz (V(k+1:m,k))
	      s.lnz += w[nque + k];
	      // move all rows to parent of k
	      var pa = parent[k];
	      if (pa != -1) {
	        if (w[nque + pa] === 0) 
	          w[tail + pa] = w[tail + k];
	        w[next + w[tail + k]] = w[head + pa];
	        w[head + pa] = w[next + i];
	        w[nque + pa] += w[nque + k];
	      }
	    }
	    for (i = 0; i < m; i++) {
	      if (pinv[i] < 0) 
	        pinv[i] = k++;
	    }
	    return true;
	  };

	  return cs_sqr;
	}

	exports.name = 'cs_sqr';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 85 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_amd.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var cs_flip = load(__webpack_require__(/*! ./cs_flip */ 86));
	  var cs_fkeep = load(__webpack_require__(/*! ./cs_fkeep */ 87));
	  var cs_tdfs = load(__webpack_require__(/*! ./cs_tdfs */ 88));
	  
	  var add       = load(__webpack_require__(/*! ../../arithmetic/add */ 60));
	  var multiply  = load(__webpack_require__(/*! ../../arithmetic/multiply */ 56));
	  var transpose = load(__webpack_require__(/*! ../../matrix/transpose */ 75));

	  /**
	   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used 
	   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
	   * than A. It is a gready method that selects the sparsest pivot row and column during the course
	   * of a right looking sparse Cholesky factorization.
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   *
	   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
	   * @param {Matrix} m        Sparse Matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_amd = function (order, a) {
	    // check input parameters
	    if (!a || order <= 0 || order > 3)
	      return null;
	    // a matrix arrays
	    var asize = a._size;
	    // rows and columns
	    var m = asize[0];
	    var n = asize[1];    
	    // initialize vars
	    var lemax = 0;
	    // dense threshold
	    var dense = Math.max(16, 10 * Math.sqrt(n));
	    dense = Math.min(n - 2, dense);
	    // create target matrix C
	    var cm = _createTargetMatrix(order, a, m, n, dense);
	    // drop diagonal entries
	    cs_fkeep(cm, _diag, null);
	    // C matrix arrays
	    var cindex = cm._index;
	    var cptr = cm._ptr;

	    // number of nonzero elements in C
	    var cnz = cptr[n];
	    
	    // allocate result (n+1)
	    var P = [];
	    
	    // create workspace (8 * (n + 1))
	    var W = [];
	    var len = 0; // first n + 1 entries
	    var nv = n + 1; // next n + 1 entries
	    var next = 2 * (n + 1); // next n + 1 entries
	    var head = 3 * (n + 1);  // next n + 1 entries
	    var elen = 4 * (n + 1);  // next n + 1 entries
	    var degree = 5 * (n + 1);  // next n + 1 entries
	    var w = 6 * (n + 1);  // next n + 1 entries
	    var hhead = 7 * (n + 1);  // last n + 1 entries    

	    // use P as workspace for last
	    var last = P;
	    
	    // initialize quotient graph
	    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);
	    
	    // initialize degree lists
	    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);
	    
	    // minimum degree node
	    var mindeg = 0;
	    
	    // vars
	    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;
	    
	    // while (selecting pivots) do
	    while (nel < n) {
	      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
	      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
	      // many nodes have been eliminated.
	      for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++);      
	      if (W[next + k] != -1) 
	        last[W[next + k]] = -1;
	      // remove k from degree list
	      W[head + mindeg] = W[next + k];
	      // elenk = |Ek|
	      var elenk = W[elen + k];
	      // # of nodes k represents
	      var nvk = W[nv + k];
	      // W[nv + k] nodes of A eliminated
	      nel += nvk;

	      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is 
	      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
	      // degree lists. All elements e in Ek are absorved into element k.
	      var dk = 0;
	      // flag k as in Lk
	      W[nv + k] = -nvk;
	      var p = cptr[k];
	      // do in place if W[elen + k] == 0
	      var pk1 = (elenk === 0) ? p : cnz;
	      var pk2 = pk1;
	      for (k1 = 1; k1 <= elenk + 1; k1++) {
	        if (k1 > elenk) {
	          // search the nodes in k
	          e = k;
	          // list of nodes starts at cindex[pj]
	          pj = p;
	          // length of list of nodes in k
	          ln = W[len + k] - elenk;
	        }
	        else {
	          // search the nodes in e
	          e = cindex[p++];
	          pj = cptr[e];
	          // length of list of nodes in e
	          ln = W[len + e];
	        }
	        for (k2 = 1; k2 <= ln; k2++) {
	          i = cindex[pj++];
	          // check  node i dead, or seen
	          if ((nvi = W[nv + i]) <= 0) 
	            continue;
	          // W[degree + Lk] += size of node i
	          dk += nvi;
	          // negate W[nv + i] to denote i in Lk
	          W[nv + i] = -nvi;
	          // place i in Lk
	          cindex[pk2++] = i;
	          if (W[next + i] != -1) 
	            last[W[next + i]] = last[i];
	          // check we need to remove i from degree list
	          if (last[i] != -1) 
	            W[next + last[i]] = W[next + i];
	          else
	            W[head + W[degree + i]] = W[next + i];
	        }
	        if (e != k) {
	          // absorb e into k
	          cptr[e] = cs_flip(k);
	          // e is now a dead element
	          W[w + e] = 0;
	        }
	      }
	      // cindex[cnz...nzmax] is free
	      if (elenk !== 0) 
	        cnz = pk2;
	      // external degree of k - |Lk\i|
	      W[degree + k] = dk;
	      // element k is in cindex[pk1..pk2-1]
	      cptr[k] = pk1;
	      W[len + k] = pk2 - pk1;
	      // k is now an element
	      W[elen + k] = -2;
	            
	      // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
	      // scan, no entry in the w array is greater than or equal to mark.
	      
	      // clear w if necessary
	      mark = _wclear(mark, lemax, w, n);
	      // scan 1: find |Le\Lk|
	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check if W[elen + i] empty, skip it
	        if ((eln = W[elen + i]) <= 0) 
	          continue;
	        // W[nv + i] was negated
	        nvi = -W[nv + i];
	        var wnvi = mark - nvi;
	        // scan Ei
	        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
	          e = cindex[p];
	          if (W[w + e] >= mark) {
	            // decrement |Le\Lk|
	            W[w + e] -= nvi;
	          }
	          else if (W[w + e] !== 0) {
	            // ensure e is a live element, 1st time e seen in scan 1
	            W[w + e] = W[degree + e] + wnvi;
	          }
	        }
	      }
	      
	      // degree update
	      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
	      // function h(i) for all nodes in Lk.
	      
	      // scan2: degree update
	      for (pk = pk1; pk < pk2; pk++) {
	        // consider node i in Lk
	        i = cindex[pk];
	        p1 = cptr[i];
	        p2 = p1 + W[elen + i] - 1;
	        pn = p1;
	        // scan Ei
	        for (h = 0, d = 0, p = p1; p <= p2; p++) {
	          e = cindex[p];
	          // check e is an unabsorbed element
	          if (W[w + e] !== 0) {
	            // dext = |Le\Lk|
	            var dext = W[w + e] - mark;
	            if (dext > 0) {
	              // sum up the set differences
	              d += dext;
	              // keep e in Ei
	              cindex[pn++] = e;
	              // compute the hash of node i
	              h += e;
	            }
	            else {
	              // aggressive absorb. e->k
	              cptr[e] = cs_flip(k);
	              // e is a dead element
	              W[w + e] = 0;
	            }
	          }
	        }
	        // W[elen + i] = |Ei|
	        W[elen + i] = pn - p1 + 1;
	        var p3 = pn;
	        var p4 = p1 + W[len + i];
	        // prune edges in Ai
	        for (p = p2 + 1; p < p4; p++) {
	          j = cindex[p];
	          // check node j dead or in Lk
	          var nvj = W[nv + j];
	          if (nvj <= 0) 
	            continue;
	          // degree(i) += |j|
	          d += nvj;
	          // place j in node list of i
	          cindex[pn++] = j;
	          // compute hash for node i
	          h += j;
	        }
	        // check for mass elimination
	        if (d === 0) {
	          // absorb i into k
	          cptr[i] = cs_flip(k);
	          nvi = -W[nv + i];
	          // |Lk| -= |i|
	          dk -= nvi;
	          // |k| += W[nv + i]
	          nvk += nvi;
	          nel += nvi;
	          W[nv + i] = 0;
	          // node i is dead
	          W[elen + i] = -1;
	        }
	        else {
	          // update degree(i)
	          W[degree + i] = Math.min(W[degree + i], d);
	          // move first node to end
	          cindex[pn] = cindex[p3];
	          // move 1st el. to end of Ei
	          cindex[p3] = cindex[p1];
	          // add k as 1st element in of Ei
	          cindex[p1] = k;
	          // new len of adj. list of node i
	          W[len + i] = pn - p1 + 1;
	          // finalize hash of i
	          h = (h < 0 ? -h : h) % n;
	          // place i in hash bucket
	          W[next + i] = W[hhead + h];
	          W[hhead + h] = i;
	          // save hash of i in last[i]
	          last[i] = h;
	        }
	      }
	      // finalize |Lk|
	      W[degree + k] = dk;
	      lemax = Math.max(lemax, dk);
	      // clear w
	      mark = _wclear(mark + lemax, lemax, w, n);
	      
	      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
	      // If two nodes have identical adjacency lists, their hash functions wil be identical.
	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check i is dead, skip it
	        if (W[nv + i] >= 0) 
	          continue;
	        // scan hash bucket of node i
	        h = last[i];
	        i = W[hhead + h];
	        // hash bucket will be empty
	        W[hhead + h] = -1;
	        for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {
	          ln = W[len + i];
	          eln = W[elen + i];
	          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) 
	            W[w + cindex[p]] = mark;
	          var jlast = i;
	          // compare i with all j
	          for (j = W[next + i]; j != -1; ) {
	            var ok = W[len + j] === ln && W[elen + j] === eln;
	            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
	              // compare i and j
	              if (W[w + cindex[p]] != mark) 
	                ok = 0;
	            }
	            // check i and j are identical
	            if (ok) {
	              // absorb j into i
	              cptr[j] = cs_flip(i);
	              W[nv + i] += W[nv + j];
	              W[nv + j] = 0;
	              // node j is dead
	              W[elen + j] = -1;
	              // delete j from hash bucket
	              j = W[next + j];
	              W[next + jlast] = j;
	            }
	            else {
	              // j and i are different
	              jlast = j;
	              j = W[next + j];
	            }
	          }
	        }
	      }
	      
	      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
	      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.
	      for (p = pk1, pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check  i is dead, skip it
	        if ((nvi = -W[nv + i]) <= 0) 
	          continue;
	        // restore W[nv + i]
	        W[nv + i] = nvi;
	        // compute external degree(i)
	        d = W[degree + i] + dk - nvi;
	        d = Math.min(d, n - nel - nvi);
	        if (W[head + d] != -1) 
	          last[W[head + d]] = i;
	        // put i back in degree list
	        W[next + i] = W[head + d];
	        last[i] = -1;
	        W[head + d] = i;
	        // find new minimum degree
	        mindeg = Math.min(mindeg, d);
	        W[degree + i] = d;
	        // place i in Lk
	        cindex[p++] = i;
	      }
	      // # nodes absorbed into k
	      W[nv + k] = nvk;
	      // length of adj list of element k
	      if ((W[len + k] = p - pk1) === 0) {
	        // k is a root of the tree
	        cptr[k] = -1;
	        // k is now a dead element
	        W[w + k] = 0;
	      }
	      if (elenk !== 0) {
	        // free unused space in Lk
	        cnz = p;
	      }
	    }
	    
	    // Postordering. The elimination is complete, but no permutation has been computed. All that is left 
	    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
	    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
	    // is computed. The tree is restored by unflipping all of ptr.
	    
	    // fix assembly tree
	    for (i = 0; i < n; i++) 
	      cptr[i] = cs_flip(cptr[i]);
	    for (j = 0; j <= n; j++) 
	      W[head + j] = -1;
	    // place unordered nodes in lists
	    for (j = n; j >= 0; j--) {
	      // skip if j is an element
	      if (W[nv + j] > 0)
	        continue;
	      // place j in list of its parent
	      W[next + j] = W[head + cptr[j]];
	      W[head + cptr[j]] = j;
	    }
	    // place elements in lists
	    for (e = n; e >= 0; e--) {
	      // skip unless e is an element
	      if (W[nv + e] <= 0)
	        continue;
	      if (cptr[e] != -1) {
	        // place e in list of its parent
	        W[next + e] = W[head + cptr[e]];
	        W[head + cptr[e]] = e;
	      }
	    }
	    // postorder the assembly tree
	    for (k = 0, i = 0; i <= n; i++) {
	      if (cptr[i] == -1) 
	        k = cs_tdfs(i, k, W, head, next, P, w);
	    }
	    // remove last item in array
	    P.splice(P.length - 1, 1);
	    // return P
	    return P;
	  };
	  
	  /**
	   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
	   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
	   *
	   * Order: 0
	   *   A natural ordering P=null matrix is returned.
	   *
	   * Order: 1
	   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
	   *   P = M + M'
	   *
	   * Order: 2
	   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
	   *   P = M' * M
	   * 
	   * Order: 3
	   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
	   *   P = M' * M
	   */
	  var _createTargetMatrix = function (order, a, m, n, dense) {
	    // compute A'
	    var at = transpose(a);

	    // check order = 1, matrix must be square
	    if (order === 1 && n === m) {
	      // C = A + A'
	      return add(a, at);
	    }
	    
	    // check order = 2, drop dense columns from M'
	    if (order == 2) {
	      // transpose arrays
	      var tindex = at._index;
	      var tptr = at._ptr;
	      // new column index
	      var p2 = 0;
	      // loop A' columns (rows)
	      for (var j = 0; j < m; j++) {
	        // column j of AT starts here
	        var p = tptr[j];
	        // new column j starts here
	        tptr[j] = p2;
	        // skip dense col j
	        if (tptr[j + 1] - p > dense) 
	          continue;
	        // map rows in column j of A
	        for (var p1 = tptr[j + 1]; p < p1; p++) 
	          tindex[p2++] = tindex[p];
	      }
	      // finalize AT
	      tptr[m] = p2;
	      // recreate A from new transpose matrix
	      a = transpose(at);
	      // use A' * A
	      return multiply(at, a);
	    }
	    
	    // use A' * A, square or rectangular matrix
	    return multiply(at, a);
	  };

	  /**
	   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
	   *
	   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
	   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
	   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
	   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
	   */
	  var _initializeQuotientGraph = function (n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
	    // Initialize quotient graph
	    for (var k = 0; k < n; k++) 
	      W[len + k] = cptr[k + 1] - cptr[k];
	    W[len + n] = 0;
	    // initialize workspace
	    for (var i = 0; i <= n; i++) {
	      // degree list i is empty
	      W[head + i] = -1;
	      last[i] = -1;
	      W[next + i] = -1;
	      // hash list i is empty
	      W[hhead + i] = -1;
	      // node i is just one node
	      W[nv + i] = 1;
	      // node i is alive
	      W[w + i] = 1;
	      // Ek of node i is empty
	      W[elen + i] = 0;
	      // degree of node i
	      W[degree + i] = W[len + i];
	    }
	    // clear w
	    var mark = _wclear(0, 0, w, n);
	    // n is a dead element
	    W[elen + n] = -2;
	    // n is a root of assembly tree
	    cptr[n] = -1;
	    // n is a dead element
	    W[w + n] = 0;
	    // return mark
	    return mark;
	  };

	  /**
	   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with 
	   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
	   * output permutation p.
	   */
	  var _initializeDegreeLists = function (n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
	    // result
	    var nel = 0;
	    // loop columns
	    for (var i = 0; i < n; i++) {
	      // degree @ i
	      var d = W[degree + i];
	      // check node i is empty
	      if (d === 0) {
	        // element i is dead
	        W[elen + i] = -2;
	        nel++;
	        // i is a root of assembly tree
	        cptr[i] = -1;
	        W[w + i] = 0;
	      }
	      else if (d > dense) {
	        // absorb i into element n
	        W[nv + i] = 0;
	        // node i is dead
	        W[elen + i] = -1;
	        nel++;
	        cptr[i] = cs_flip(n);
	        W[nv + n]++;
	      }
	      else {
	        var h = W[head + d];
	        if (h != -1)
	          last[h] = i;
	        // put node i in degree list d
	        W[next + i] = W[head + d];
	        W[head + d] = i;
	      }
	    }
	    return nel;
	  };

	  var _wclear = function(mark, lemax, w, n) {
	    if (mark < 2 || (mark + lemax < 0)) {
	      for (var k = 0; k < n; k++) {
	        if (w[k] !== 0)
	          w[k] = 1;
	      }
	      mark = 2 ;
	    }
	    // at this point, w [0..n-1] < mark holds
	    return mark;
	  };
	  
	  var _diag = function (i, j) { 
	    return i != j;
	  };
	  
	  return cs_amd;
	}

	exports.name = 'cs_amd';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 86 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_flip.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory () {

	  /**
	   * This function "flips" its input about the integer -1.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_flip = function (i) {
	    // flip the value
	    return -i - 2;
	  };

	  return cs_flip;
	}

	exports.name = 'cs_flip';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 87 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_fkeep.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory () {

	  /**
	   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
	   *
	   * @param {Matrix}   a              The sparse matrix
	   * @param {function} callback       The callback function, function will be invoked with the following args:
	   *                                    - The entry row
	   *                                    - The entry column
	   *                                    - The entry value
	   *                                    - The state parameter
	   * @param {any}      other          The state
	   *
	   * @return                          The number of nonzero elements in the matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_fkeep = function (a, callback, other) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    // columns
	    var n = asize[1];
	    // nonzero items
	    var nz = 0;
	    // loop columns
	    for (var j = 0; j < n; j++) {
	      // get current location of col j
	      var p = aptr[j];
	      // record new location of col j
	      aptr[j] = nz;
	      for (; p < aptr[j+1]; p++) {
	        // check we need to keep this item
	        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
	          // keep A(i,j)
	          aindex[nz] = aindex[p];
	          // check we need to process values (pattern only)
	          if (avalues) 
	            avalues[nz] = avalues[p];
	          // increment nonzero items
	          nz++;
	        }
	      }
	    }
	    // finalize A
	    aptr[n] = nz;
	    // trim arrays
	    aindex.splice(nz, aindex.length - nz);
	    // check we need to process values (pattern only)
	    if (avalues)
	      avalues.splice(nz, avalues.length - nz);    
	    // return number of nonzero items
	    return (nz);
	  };
	  
	  return cs_fkeep;
	}

	exports.name = 'cs_fkeep';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 88 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_tdfs.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory () {

	  /**
	   * Depth-first search and postorder of a tree rooted at node j
	   *
	   * @param {Number}  j               The tree node
	   * @param {Number}  k               
	   * @param {Array}   w               The workspace array
	   * @param {Number}  head            The index offset within the workspace for the head array
	   * @param {Number}  next            The index offset within the workspace for the next array
	   * @param {Array}   post            The post ordering array
	   * @param {Number}  stack           The index offset within the workspace for the stack array
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_tdfs = function (j, k, w, head, next, post, stack) {
	    // variables
	    var top = 0;
	    // place j on the stack
	    w[stack] = j;
	    // while (stack is not empty) 
	    while (top >= 0) {
	      // p = top of stack
	      var p = w[stack + top];
	      // i = youngest child of p
	      var i = w[head + p];
	      if (i == -1) {
	        // p has no unordered children left
	        top--;
	        // node p is the kth postordered node
	        post[k++] = p;
	      }
	      else {
	        // remove i from children of p
	        w[head + p] = w[next + i];
	        // increment top
	        ++top;
	        // start dfs on child node i
	        w[stack + top] = i;
	      }
	    }
	    return k;
	  };

	  return cs_tdfs;
	}

	exports.name = 'cs_tdfs';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 89 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_permute.js ***!
  \************************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type) {

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Permutes a sparse matrix C = P * A * Q
	   *
	   * @param {Matrix}  a               The Matrix A
	   * @param {Array}   pinv            The row permutation vector
	   * @param {Array}   q               The column permutation vector
	   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
	   *
	   * @return {Matrix}                 C = P * A * Q, null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_permute = function (a, pinv, q, values) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    // c arrays
	    var cvalues = values && a._values ? [] : null;
	    var cindex = []; // (aptr[n]);
	    var cptr = []; // (n + 1);
	    // initialize vars
	    var nz = 0;
	    // loop columns    
	    for (var k = 0; k < n; k++) {
	      // column k of C is column q[k] of A
	      cptr[k] = nz;
	      // apply column permutation
	      var j = q ? (q[k]) : k;
	      // loop values in column j of A
	      for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
	        // row i of A is row pinv[i] of C
	        var r = pinv ? pinv[aindex[t]] : aindex[t];
	        // index
	        cindex[nz] = r;
	        // check we need to populate values
	        if (cvalues) 
	          cvalues[nz] = avalues[t];
	        // increment number of nonzero elements
	        nz++;
	      }
	    }
	    // finalize the last column of C
	    cptr[n] = nz;
	    // return C matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [m, n],
	      datatype: adt
	    });
	  };

	  return cs_permute;
	}

	exports.name = 'cs_permute';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 90 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_etree.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory () {

	  /**
	   * Computes the elimination tree of Matrix A (using triu(A)) or the 
	   * elimination tree of A'A without forming A'A.
	   *
	   * @param {Matrix}  a               The A Matrix
	   * @param {boolean} ata             A value of true the function computes the etree of A'A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_etree = function (a, ata) {
	    // check inputs
	    if (!a)
	      return null;
	    // a arrays
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    
	    // allocate result
	    var parent = []; // (n)
	    
	    // allocate workspace
	    var w = []; // (n + (ata ? m : 0))
	    var ancestor = 0; // first n entries in w
	    var prev = n; // last m entries (ata = true)
	    
	    var i, inext;
	    
	    // check we are calculating A'A
	    if (ata) {
	      // initialize workspace
	      for (i = 0; i < m; i++) 
	        w[prev + i] = -1;
	    }
	    // loop columns
	    for (var k = 0; k < n; k++) {
	      // node k has no parent yet
	      parent[k] = -1;
	      // nor does k have an ancestor
	      w[ancestor + k] = -1;
	      // values in column k
	      for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // row
	        var r = aindex[p];
	        // node
	        i = ata ? (w[prev + r]) : r;
	        // traverse from i to k 
	        for (; i != -1 && i < k; i = inext) {
	          // inext = ancestor of i
	          inext = w[ancestor + i];
	          // path compression
	          w[ancestor + i] = k;
	          // check no anc., parent is k
	          if (inext == -1) 
	            parent[i] = k;
	        }
	        if (ata) 
	          w[prev + r] = k;
	      }
	    }
	    return parent;
	  };

	  return cs_etree;
	}

	exports.name = 'cs_etree';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 91 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_post.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var cs_tdfs = load(__webpack_require__(/*! ./cs_tdfs */ 88));

	  /**
	   * Post order a tree of forest
	   *
	   * @param {Array}   parent          The tree or forest
	   * @param {Number}  n               Number of columns
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_post = function (parent, n) {
	    // check inputs
	    if (!parent) 
	      return null;
	    // vars 
	    var k = 0;
	    var j;
	    // allocate result
	    var post = []; // (n);
	    // workspace, head: first n entries, next: next n entries, stack: last n entries
	    var w = []; // (3 * n);
	    var head = 0; 
	    var next = n; 
	    var stack = 2 * n;
	    // initialize workspace
	    for (j = 0; j < n; j++) {
	      // empty linked lists
	      w[head + j] = -1;
	    }
	    // traverse nodes in reverse order
	    for (j = n-1; j >= 0; j--) {
	      // check j is a root
	      if (parent[j] == -1) 
	        continue;
	      // add j to list of its parent
	      w[next + j] = w[head + parent[j]];
	      w[head + parent[j]] = j;
	    }
	    // loop nodes
	    for (j = 0; j < n; j++) {
	      // skip j if it is not a root
	      if (parent[j] != -1) 
	        continue;
	      // depth-first search
	      k = cs_tdfs(j, k, w, head, next, post, stack);
	    }
	    return post;
	  };

	  return cs_post;
	}

	exports.name = 'cs_post';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 92 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_counts.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var transpose = load(__webpack_require__(/*! ../../matrix/transpose */ 75));
	  
	  var cs_leaf = load(__webpack_require__(/*! ./cs_leaf */ 93));

	  /**
	   * Computes the column counts using the upper triangular part of A.
	   * It transposes A internally, none of the input parameters are modified.
	   *
	   * @param {Matrix} a           The sparse matrix A
	   *
	   * @param {Matrix} ata         Count the columns of A'A instead
	   *
	   * @return                     An array of size n of the column counts or null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_counts = function (a, parent, post, ata) {
	    // check inputs
	    if (!a || !parent || !post) 
	      return null;
	    // a matrix arrays
	    var asize = a._size;
	    // rows and columns
	    var m = asize[0];
	    var n = asize[1];   
	    // variables
	    var i, j, k,  J,  p, p0, p1;
	    
	    // workspace size
	    var s = 4 * n + (ata ? (n + m + 1) : 0);
	    // allocate workspace
	    var w = []; // (s)
	    var ancestor = 0; // first n entries
	    var maxfirst = n; // next n entries
	    var prevleaf = 2 * n; // next n entries
	    var first = 3 * n; // next n entries
	    var head = 4 * n; // next n + 1 entries (used when ata is true)
	    var next = 5 * n + 1; // last entries in workspace
	    // clear workspace w[0..s-1]
	    for (k = 0; k < s; k++) 
	      w[k] = -1;
	    
	    // allocate result
	    var colcount = []; // (n);
	    
	    // AT = A'
	    var at = transpose(a);
	    // at arrays
	    var tindex = at._index;
	    var tptr = at._ptr;

	    // find w[first + j]
	    for (k = 0; k < n; k++) {
	      j = post[k];
	      // colcount[j]=1 if j is a leaf
	      colcount[j] = (w[first + j] == -1) ? 1 : 0;
	      for (; j != -1 && w[first + j] == -1; j = parent[j]) 
	        w[first + j] = k;
	    }

	    // initialize ata if needed
	    if (ata) {
	      // invert post
	      for (k = 0; k < n; k++) 
	        w[post[k]] = k;
	      // loop rows (columns in AT)
	      for (i = 0; i < m; i++) {
	        // values in column i of AT
	        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) 
	          k = Math.min(k, w[tindex[p]]);
	        // place row i in linked list k
	        w[next + i] = w[head + k];
	        w[head + k] = i;
	      }
	    }
	    
	    // each node in its own set
	    for (i = 0; i < n; i++) 
	      w[ancestor + i] = i;
	    
	    for (k = 0; k < n; k++) {
	      // j is the kth node in postordered etree
	      j = post[k];
	      // check j is not a root
	      if (parent[j] != -1) 
	        colcount[parent[j]]--;
	      
	      // J=j for LL'=A case
	      for (J = (ata ? w[head + k] : j); J != -1; J = (ata ? w[next + J] : -1)) {
	        for (p = tptr[J]; p < tptr[J+1]; p++) {
	          i = tindex[p];
	          var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);
	          // check A(i,j) is in skeleton
	          if (r.jleaf >= 1) 
	            colcount[j]++;
	          // check account for overlap in q
	          if (r.jleaf == 2) 
	            colcount[r.q]--;
	        }
	      }
	      if (parent[j] != -1) 
	        w[ancestor + j] = parent[j];
	    }
	    // sum up colcount's of each child
	    for (j = 0; j < n; j++) {
	      if (parent[j] != -1) 
	        colcount[parent[j]] += colcount[j];
	    }
	    return colcount;
	  };

	  return cs_counts;
	}

	exports.name = 'cs_counts';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 93 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_leaf.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory () {

	  /**
	   * This function determines if j is a leaf of the ith row subtree.
	   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
	   *
	   * @param {Number}  i               The ith row subtree
	   * @param {Number}  j               The node to test
	   * @param {Array}   w               The workspace array
	   * @param {Number}  first           The index offset within the workspace for the first array
	   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
	   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
	   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
	   *
	   * @return {Object}
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_leaf = function (i, j, w, first, maxfirst, prevleaf, ancestor) {
	    
	    var s, sparent, jprev;
	    
	    // our result
	    var jleaf = 0;
	    var q;
	    
	    // check j is a leaf
	    if (i <= j || w[first + j] <= w[maxfirst + i]) 
	      return (-1);
	    // update max first[j] seen so far
	    w[maxfirst + i] = w[first + j];
	    // jprev = previous leaf of ith subtree
	    jprev = w[prevleaf + i];
	    w[prevleaf + i] = j;
	    
	    // check j is first or subsequent leaf
	    if (jprev === -1) {
	      // 1st leaf, q = root of ith subtree
	      jleaf = 1;
	      q = i;
	    }
	    else {
	      // update jleaf
	      jleaf = 2;
	      // q = least common ancester (jprev,j)
	      for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q]);
	      for (s = jprev; s != q; s = sparent) {
	        // path compression
	        sparent = w[ancestor + s];
	        w[ancestor + s] = q;
	      }      
	    }
	    return {
	      jleaf: jleaf,
	      q: q
	    };
	  };

	  return cs_leaf;
	}

	exports.name = 'cs_leaf';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 94 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_lu.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var abs = load(__webpack_require__(/*! ../../arithmetic/abs */ 79));
	  var divideScalar = load(__webpack_require__(/*! ../../arithmetic/divideScalar */ 67));
	  var multiply = load(__webpack_require__(/*! ../../arithmetic/multiply */ 56));
	  
	  var larger = load(__webpack_require__(/*! ../../relational/larger */ 80));
	  var largerEq = load(__webpack_require__(/*! ../../relational/largerEq */ 95));
	  
	  var cs_spsolve = load(__webpack_require__(/*! ./cs_spsolve */ 96));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
	   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L 
	   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
	   * L * U = A(p, q), where p is the inverse of pinv.
	   *
	   * @param {Matrix}  m               The A Matrix to factorize
	   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing 
	   *                                  column ordering q
	   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Number}                 The numeric LU factorization of A or null
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_lu = function (m, s, tol) {
	    // validate input
	    if (!m)
	      return null;
	    // m arrays
	    var size = m._size;
	    // columns
	    var n = size[1];
	    // symbolic analysis result
	    var q;
	    var lnz = 100;
	    var unz = 100;
	    // update symbolic analysis parameters
	    if (s) {
	      q = s.q;
	      lnz = s.lnz || lnz;
	      unz = s.unz || unz;
	    }
	    // L arrays
	    var lvalues = []; // (lnz)
	    var lindex = []; // (lnz);
	    var lptr = []; // (n + 1);
	    // L
	    var L = new SparseMatrix({
	      values: lvalues,
	      index: lindex,
	      ptr: lptr,
	      size: [n, n]
	    });
	    // U arrays
	    var uvalues = []; // (unz);
	    var uindex = []; // (unz);
	    var uptr = []; // (n + 1);
	    // U
	    var U = new SparseMatrix({
	      values: uvalues,
	      index: uindex,
	      ptr: uptr,
	      size: [n, n]
	    });
	    // inverse of permutation vector
	    var pinv = []; // (n);
	    // vars 
	    var i, p;
	    // allocate arrays
	    var x = []; // (n);
	    var xi = []; // (2 * n);
	    // initialize variables
	    for (i = 0; i < n; i++) {
	      // clear workspace
	      x[i] = 0;
	      // no rows pivotal yet
	      pinv[i] = -1;
	      // no cols of L yet
	      lptr[i + 1] = 0;
	    }
	    // reset number of nonzero elements in L and U
	    lnz = 0;
	    unz = 0;
	    // compute L(:,k) and U(:,k)
	    for (var k = 0; k < n; k++) {
	      // update ptr
	      lptr[k] = lnz;
	      uptr[k] = unz;
	      // apply column permutations if needed
	      var col = q ? q[k] : k;
	      // solve triangular system, x = L\A(:,col)
	      var top = cs_spsolve(L, m, col, xi, x, pinv, 1);
	      // find pivot
	      var ipiv = -1;
	      var a = -1;
	      // loop xi[] from top -> n
	      for (p = top; p < n; p++) {
	        // x[i] is nonzero
	        i = xi[p];
	        // check row i is not yet pivotal
	        if (pinv[i] < 0) {
	          // absolute value of x[i]          
	          var xabs = abs(x[i]);
	          // check absoulte value is greater than pivot value
	          if (larger(xabs, a)) {
	            // largest pivot candidate so far
	            a = xabs;
	            ipiv = i;
	          }
	        }
	        else {
	          // x(i) is the entry U(pinv[i],k)
	          uindex[unz] = pinv[i];
	          uvalues[unz++] = x[i];
	        }
	      }
	      // validate we found a valid pivot
	      if (ipiv == -1 || a <= 0) 
	        return null;
	      // update actual pivot column, give preference to diagonal value
	      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))
	        ipiv = col;
	      // the chosen pivot
	      var pivot = x[ipiv];
	      // last entry in U(:,k) is U(k,k)
	      uindex[unz] = k;
	      uvalues[unz++] = pivot;
	      // ipiv is the kth pivot row
	      pinv[ipiv] = k;
	      // first entry in L(:,k) is L(k,k) = 1
	      lindex[lnz] = ipiv;
	      lvalues[lnz++] = 1;
	      // L(k+1:n,k) = x / pivot      
	      for (p = top; p < n; p++) {
	        // row
	        i = xi[p];
	        // check x(i) is an entry in L(:,k)
	        if (pinv[i] < 0) {
	          // save unpermuted row in L
	          lindex[lnz] = i;
	          // scale pivot column
	          lvalues[lnz++] = divideScalar(x[i], pivot);
	        }
	        // x[0..n-1] = 0 for next k
	        x[i] = 0;
	      }
	    }
	    // update ptr
	    lptr[n] = lnz;
	    uptr[n] = unz;
	    // fix row indices of L for final pinv
	    for (p = 0; p < lnz; p++) 
	      lindex[p] = pinv[lindex[p]];
	    // trim arrays
	    lvalues.splice(lnz, lvalues.length - lnz);
	    lindex.splice(lnz, lindex.length - lnz);
	    uvalues.splice(unz, uvalues.length - unz);
	    uindex.splice(unz, uindex.length - unz);    
	    // return LU factor
	    return {
	      L: L,
	      U: U,
	      pinv: pinv
	    };
	  };

	  return cs_lu;
	}

	exports.name = 'cs_lu';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 95 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/function/relational/largerEq.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(/*! ../../utils/number */ 24).nearlyEqual;

	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Test whether value x is larger or equal to y.
	   *
	   * The function returns true when x is larger than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.largerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 1 + 1);         // returns false
	   *    math.largerEq(2, 1 + 1);       // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
	   */
	  var largerEq = typed('largerEq', {

	    'boolean, boolean': function (x, y) {
	      return x >= y;
	    },

	    'number, number': function (x, y) {
	      return x >= y || nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return x.gte(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.compare(y) !== -1;
	    },

	    'Complex, Complex': function () {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return x.value >= y.value || nearlyEqual(x.value, y.value, config.epsilon);
	    },

	    'string, string': function (x, y) {
	      return x >= y;
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, largerEq);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, largerEq, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, largerEq, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, largerEq);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return largerEq(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return largerEq(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return largerEq(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, largerEq, false);
	          break;
	        default:
	          c = algorithm14(x, y, largerEq, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, largerEq, true);
	          break;
	        default:
	          c = algorithm14(y, x, largerEq, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, largerEq, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, largerEq, true).valueOf();
	    }
	  });

	  largerEq.toTex = '\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\right)';

	  return largerEq;
	}

	exports.name = 'largerEq';
	exports.factory = factory;


/***/ },
/* 96 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_spsolve.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var divideScalar = load(__webpack_require__(/*! ../../arithmetic/divideScalar */ 67));
	  var multiply = load(__webpack_require__(/*! ../../arithmetic/multiply */ 56));
	  var subtract = load(__webpack_require__(/*! ../../arithmetic/subtract */ 41));

	  var cs_reach = load(__webpack_require__(/*! ./cs_reach */ 97));

	  /**
	   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the
	   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
	   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U 
	   * is upper triangular with the diagonal entry as the last entry in each column.
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   x               The soluton to the linear system G * x = b
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   * @param {boolean} lo              The lower (true) upper triangular (false) flag
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_spsolve = function (g, b, k, xi, x, pinv, lo) {
	    // g arrays
	    var gvalues = g._values;
	    var gindex = g._index;
	    var gptr = g._ptr;
	    var gsize = g._size;
	    // columns
	    var n = gsize[1];
	    // b arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    // vars
	    var p, p0, p1, q;
	    // xi[top..n-1] = cs_reach(B(:,k))
	    var top = cs_reach(g, b, k, xi, pinv);
	    // clear x
	    for (p = top; p < n; p++) 
	      x[xi[p]] = 0;
	    // scatter b
	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) 
	      x[bindex[p]] = bvalues[p];
	    // loop columns
	    for (var px = top; px < n; px++) {
	      // x array index for px
	      var j = xi[px];
	      // apply permutation vector (U x = b), j maps to column J of G
	      var J = pinv ? pinv[j] : j;
	      // check column J is empty
	      if (J < 0)
	        continue;
	      // column value indeces in G, p0 <= p < p1
	      p0 = gptr[J];
	      p1 = gptr[J + 1];
	      // x(j) /= G(j,j)
	      x[j] = divideScalar(x[j], gvalues[lo ? p0 : (p1 - 1)]);
	      // first entry L(j,j)
	      p = lo ? (p0 + 1) : p0;
	      q = lo ? (p1) : (p1 - 1);
	      // loop
	      for ( ; p < q ; p++) {
	        // row
	        var i = gindex[p];
	        // x(i) -= G(i,j) * x(j)
	        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
	      }
	    }
	    // return top of stack
	    return top;
	  };
	  
	  return cs_spsolve;
	}

	exports.name = 'cs_spsolve';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 97 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_reach.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var cs_dfs = load(__webpack_require__(/*! ./cs_dfs */ 98));
	  var cs_marked = load(__webpack_require__(/*! ./cs_marked */ 99));
	  var cs_mark = load(__webpack_require__(/*! ./cs_mark */ 100));

	  /**
	   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 
	   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
	   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_reach = function (g, b, k, xi, pinv) {
	    // g arrays
	    var gptr = g._ptr;
	    var gsize = g._size;
	    // b arrays
	    var bindex = b._index;
	    var bptr = b._ptr;
	    // columns
	    var n = gsize[1];
	    // vars
	    var p, p0, p1;
	    // initialize top
	    var top = n;
	    // loop column indeces in B
	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
	      // node i
	      var i = bindex[p];
	      // check node i is marked
	      if (!cs_marked(gptr, i)) {
	        // start a dfs at unmarked node i
	        top = cs_dfs(i, g, top, xi, pinv);
	      }
	    }
	    // loop columns from top -> n - 1
	    for (p = top; p < n; p++) {
	      // restore G
	      cs_mark(gptr, xi[p]);
	    }
	    return top;
	  };

	  return cs_reach;
	}

	exports.name = 'cs_reach';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 98 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_dfs.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var cs_marked = load(__webpack_require__(/*! ./cs_marked */ 99));
	  var cs_mark   = load(__webpack_require__(/*! ./cs_mark */ 100));
	  var cs_unflip = load(__webpack_require__(/*! ./cs_unflip */ 101));

	  /**
	   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
	   * at nodes in B (see cs_reach()).
	   *
	   * @param {Number}  j               The starting node for the DFS algorithm
	   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
	   * @param {Number}  top             Start index in stack xi[top..n-1]
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   *
	   * @return {Number}                 New value of top
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_dfs = function (j, g, top, xi, pinv) {
	    // g arrays
	    var index = g._index;
	    var ptr = g._ptr;
	    var size = g._size;
	    // columns
	    var n = size[1];
	    // vars
	    var i, p, p2;
	    // initialize head
	    var head = 0;
	    // initialize the recursion stack
	    xi[0] = j;
	    // loop
	    while (head >= 0) {
	      // get j from the top of the recursion stack
	      j = xi[head];
	      // apply permutation vector
	      var jnew = pinv ? pinv[j] : j;
	      // check node j is marked
	      if (!cs_marked(ptr, j)) {
	        // mark node j as visited
	        cs_mark(ptr, j);
	        // update stack (last n entries in xi)
	        xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);
	      }
	      // node j done if no unvisited neighbors
	      var done = 1;
	      // examine all neighbors of j, stack (last n entries in xi)
	      for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew+1]); p < p2; p++) {
	        // consider neighbor node i
	        i = index[p];
	        // check we have visited node i, skip it
	        if (cs_marked(ptr, i)) 
	          continue;
	        // pause depth-first search of node j, update stack (last n entries in xi)
	        xi[n + head] = p;
	        // start dfs at node i
	        xi[++head] = i;
	        // node j is not done
	        done = 0;
	        // break, to start dfs(i)
	        break;
	      }
	      // check depth-first search at node j is done
	      if (done) {
	        // remove j from the recursion stack
	        head--;
	        // and place in the output stack
	        xi[--top] = j;
	      }
	    }
	    return top;    
	  };

	  return cs_dfs;
	}

	exports.name = 'cs_dfs';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 99 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_marked.js ***!
  \***********************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory () {

	  /**
	   * Checks if the node at w[j] is marked
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_marked = function (w, j) {
	    // check node is marked
	    return w[j] < 0;
	  };

	  return cs_marked;
	}

	exports.name = 'cs_marked';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 100 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_mark.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var cs_flip = load(__webpack_require__(/*! ./cs_flip */ 86));

	  /**
	   * Marks the node at w[j]
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_mark = function (w, j) {
	    // mark w[j]
	    w[j] = cs_flip(w [j]);
	  };

	  return cs_mark;
	}

	exports.name = 'cs_mark';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 101 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_unflip.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {

	  var cs_flip = load(__webpack_require__(/*! ./cs_flip */ 86));
	  
	  /**
	   * Flips the value if it is negative of returns the same value otherwise.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_unflip = function (i) {
	    // flip the value if it is negative
	    return i < 0 ? cs_flip(i) : i;
	  };

	  return cs_unflip;
	}

	exports.name = 'cs_unflip';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 102 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/solver/lsolve.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../../type/matrix/function/matrix */ 39));
	  var divideScalar = load(__webpack_require__(/*! ../../arithmetic/divideScalar */ 67));
	  var multiplyScalar = load(__webpack_require__(/*! ../../arithmetic/multiplyScalar */ 57));
	  var subtract = load(__webpack_require__(/*! ../../arithmetic/subtract */ 41));
	  var equalScalar = load(__webpack_require__(/*! ../../relational/equalScalar */ 49));

	  var solveValidation = load(__webpack_require__(/*! ./utils/solveValidation */ 103));

	  var DenseMatrix = type.DenseMatrix;

	  /** 
	   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
	   *
	   * `L * x = b`
	   *
	   * Syntax:
	   *
	   *    math.lsolve(L, b);
	   *
	   * Examples:
	   *
	   *    var a = [[-2, 3], [2, 1]];
	   *    var b = [11, 9];
	   *    var x = lsolve(a, b);  // [[-5.5], [20]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} L       A N x N matrix or array (L)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */
	  var lsolve = typed('lsolve', {

	    'SparseMatrix, Array | Matrix': function (m, b) {
	      // process matrix
	      return _sparseForwardSubstitution(m, b);
	    },
	    
	    'DenseMatrix, Array | Matrix': function (m, b) {
	      // process matrix
	      return _denseForwardSubstitution(m, b);
	    },
	    
	    'Array, Array | Matrix': function (a, b) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // use matrix implementation
	      var r = _denseForwardSubstitution(m, b);
	      // result
	      return r.valueOf();
	    }
	  });

	  var _denseForwardSubstitution = function (m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // result
	    var x = [];
	    // data
	    var data = m._data;
	    // forward solve m * x = b, loop columns
	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // x[j]
	      var xj;
	      // forward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j];
	        // check vjj
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        xj = divideScalar(bj, vjj);
	        // loop rows
	        for (var i = j + 1; i < rows; i++) {
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
	        }
	      }
	      else {
	        // zero @ j
	        xj = 0;
	      }
	      // update x
	      x[j] = [xj];
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };

	  var _sparseForwardSubstitution = function (m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // vars
	    var i, k;
	    // result
	    var x = [];
	    // forward solve m * x = b, loop columns
	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // forward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0;
	        // last index in column
	        var l = ptr[j + 1];
	        // values in column, find value @ [j, j]
	        for (k = ptr[j]; k < l; k++) {
	          // row
	          i = index[k];
	          // check row (do not exist when i > j, rows are not sorted!)
	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	            // exit loop
	            break;
	          }
	        }
	        // at this point we must have a value @ [j, j]
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        var xj = divideScalar(bj, vjj);
	        // values in column, continue from last loop
	        for (; k < l; k++) {
	          // row
	          i = index[k];
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, values[k]))];
	        }
	        // update x
	        x[j] = [xj];
	      }
	      else {
	        // update x
	        x[j] = [0];
	      }
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };

	  return lsolve;
	}

	exports.name = 'lsolve';
	exports.factory = factory;


/***/ },
/* 103 */
/*!***********************************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/solver/utils/solveValidation.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../../../utils/index */ 52);

	var string = util.string;
	var array = util.array;

	var isArray = Array.isArray;

	function factory (type) {
	  
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Validates matrix and column vector b for backward/forward substitution algorithms.
	   *
	   * @param {Matrix} m            An N x N matrix
	   * @param {Array | Matrix} b    A column vector
	   * @param {Boolean} copy        Return a copy of vector b
	   *
	   * @return {DenseMatrix}        Dense column vector b
	   */
	  var solveValidation = function (m, b, copy) {
	    // matrix size
	    var size = m.size();
	    // validate matrix dimensions
	    if (size.length !== 2)
	      throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');
	    // rows & columns
	    var rows = size[0];
	    var columns = size[1];    
	    // validate rows & columns
	    if (rows !== columns) 
	      throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');
	    // vars
	    var data, i, bdata;
	    // check b is matrix
	    if (b && b.isMatrix === true) {
	      // matrix size
	      var msize = b.size();
	      // vector
	      if (msize.length === 1) {
	        // check vector length
	        if (msize[0] !== rows)
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // create data array
	        data = [];
	        // matrix data (DenseMatrix)
	        bdata = b._data;
	        // loop b data
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [bdata[i]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      }
	      // two dimensions
	      if (msize.length === 2) {
	        // array must be a column vector
	        if (msize[0] !== rows || msize[1] !== 1)
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // check matrix type
	        if (b.isDenseMatrix === true) {
	          // check a copy is needed
	          if (copy) {
	            // create data array
	            data = [];
	            // matrix data (DenseMatrix)
	            bdata = b._data;
	            // loop b data
	            for (i = 0; i < rows; i++) {
	              // row array
	              data[i] = [bdata[i][0]];
	            }
	            // return Dense Matrix
	            return new DenseMatrix({
	              data: data,
	              size: [rows, 1],
	              datatype: b._datatype
	            });
	          }
	          // b is already a column vector
	          return b;
	        }
	        // create data array
	        data = [];
	        for (i = 0; i < rows; i++)
	          data[i] = [0];
	        // sparse matrix arrays
	        var values = b._values;
	        var index = b._index;
	        var ptr = b._ptr;
	        // loop values in column 0
	        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
	          // row
	          i = index[k];
	          // add to data
	          data[i][0] = values[k]; 
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      }
	      // throw error
	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	    }
	    // check b is array
	    if (isArray(b)) {
	      // size
	      var asize = array.size(b);
	      // check matrix dimensions, vector
	      if (asize.length === 1) {
	        // check vector length
	        if (asize[0] !== rows)
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');        
	        // create data array
	        data = [];
	        // loop b
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      }
	      if (asize.length === 2) {
	        // array must be a column vector
	        if (asize[0] !== rows || asize[1] !== 1)
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // create data array
	        data = [];
	        // loop b data
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i][0]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      }
	      // throw error
	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');      
	    }
	  };
	  
	  return solveValidation;
	}

	exports.factory = factory;

/***/ },
/* 104 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/solver/lusolve.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isArray = Array.isArray;

	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(/*! ../../../type/matrix/function/matrix */ 39));
	  var lup = load(__webpack_require__(/*! ../decomposition/lup */ 78));
	  var slu = load(__webpack_require__(/*! ../decomposition/slu */ 83));
	  var cs_ipvec = load(__webpack_require__(/*! ../sparse/cs_ipvec */ 105));

	  var solveValidation = load(__webpack_require__(/*! ./utils/solveValidation */ 103));

	  var usolve = load(__webpack_require__(/*! ./usolve */ 106));
	  var lsolve = load(__webpack_require__(/*! ./lsolve */ 102));

	  /**
	   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
	   *
	   * Syntax:
	   *
	   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
	   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
	   *
	   * Examples:
	   *
	   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];
	   *
	   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]
	   *
	   *    var f = math.lup(m);
	   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
	   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]
	   *
	   *    var a = [[-2, 3], [2, 1]];
	   *    var b = [11, 9];
	   *    var x = lusolve(a, b);  // [[-5.5], [20]]
	   *
	   * See also:
	   *
	   *    lup, slu, lsolve, usolve
	   *
	   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
	   * @param {Matrix | Array} b               Column Vector
	   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
	   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
	   *
	   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
	   */
	  var lusolve = typed('lusolve', {
	    
	    'Array, Array | Matrix': function (a, b) {
	      // convert a to matrix
	      a = matrix(a);
	      // matrix lup decomposition
	      var d = lup(a);
	      // solve
	      var x = _lusolve(d.L, d.U, d.p, null, b);
	      // convert result to array
	      return x.valueOf();
	    },
	    
	    'DenseMatrix, Array | Matrix': function (a, b) {
	      // matrix lup decomposition
	      var d = lup(a);
	      // solve
	      return _lusolve(d.L, d.U, d.p, null, b);
	    },
	    
	    'SparseMatrix, Array | Matrix': function (a, b) {
	      // matrix lup decomposition
	      var d = lup(a);
	      // solve
	      return _lusolve(d.L, d.U, d.p, null, b);
	    },
	    
	    'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {
	      // matrix lu decomposition
	      var d = slu(a, order, threshold);
	      // solve
	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    },

	    'Object, Array | Matrix': function (d, b) {
	      // solve
	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    }
	  });
	  
	  var _toMatrix = function (a) {
	    // check it is a matrix
	    if (a && a.isMatrix === true)
	      return a;
	    // check array
	    if (isArray(a))
	      return matrix(a);
	    // throw
	    throw new TypeError('Invalid Matrix LU decomposition');
	  };
	  
	  var _lusolve = function (l, u, p, q, b) {
	    // verify L, U, P
	    l = _toMatrix(l);
	    u = _toMatrix(u);
	    // validate matrix and vector
	    b = solveValidation(l, b, false);
	    // apply row permutations if needed (b is a DenseMatrix)
	    if (p)
	      b._data = cs_ipvec(p, b._data);
	    // use forward substitution to resolve L * y = b
	    var y = lsolve(l, b);
	    // use backward substitution to resolve U * x = y
	    var x = usolve(u, y);
	    // apply column permutations if needed (x is a DenseMatrix)
	    if (q)
	      x._data = cs_ipvec(q, x._data);
	    // return solution
	    return x;
	  };

	  return lusolve;
	}

	exports.name = 'lusolve';
	exports.factory = factory;


/***/ },
/* 105 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/sparse/cs_ipvec.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory () {

	  /**
	   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
	   *
	   * @param {Array} p           The permutation vector of length n. null value denotes identity
	   * @param {Array} b           The input vector
	   *
	   * @return {Array}            The output vector x = P'b
	   */
	  var cs_ipvec = function (p, b, n) {
	    // vars 
	    var k;
	    var n = p.length;
	    var x = [];
	    // check permutation vector was provided, p = null denotes identity
	    if (p) {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // apply permutation
	        x[p[k]] = b[k];
	      }
	    }
	    else {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // x[i] = b[i]
	        x[k] = b[k];
	      }
	    }
	    return x;
	  };

	  return cs_ipvec;
	}

	exports.name = 'cs_ipvec';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ },
/* 106 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/algebra/solver/usolve.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../../type/matrix/function/matrix */ 39));
	  var divideScalar = load(__webpack_require__(/*! ../../arithmetic/divideScalar */ 67));
	  var multiplyScalar = load(__webpack_require__(/*! ../../arithmetic/multiplyScalar */ 57));
	  var subtract = load(__webpack_require__(/*! ../../arithmetic/subtract */ 41));
	  var equalScalar = load(__webpack_require__(/*! ../../relational/equalScalar */ 49));

	  var solveValidation = load(__webpack_require__(/*! ./utils/solveValidation */ 103));
	  
	  var DenseMatrix = type.DenseMatrix;

	  /**
	   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
	   *
	   * `U * x = b`
	   *
	   * Syntax:
	   *
	   *    math.usolve(U, b);
	   *
	   * Examples:
	   *
	   *    var a = [[-2, 3], [2, 1]];
	   *    var b = [11, 9];
	   *    var x = usolve(a, b);  // [[8], [9]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} U       A N x N matrix or array (U)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */
	  var usolve = typed('usolve', {
	    
	    'SparseMatrix, Array | Matrix': function (m, b) {
	      // process matrix
	      return _sparseBackwardSubstitution(m, b);
	    },

	    'DenseMatrix, Array | Matrix': function (m, b) {
	      // process matrix
	      return _denseBackwardSubstitution(m, b);
	    },

	    'Array, Array | Matrix': function (a, b) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // use matrix implementation
	      var r = _denseBackwardSubstitution(m, b);
	      // result
	      return r.valueOf();
	    }
	  });

	  var _denseBackwardSubstitution = function (m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // result
	    var x = [];
	    // arrays
	    var data = m._data;
	    // backward solve m * x = b, loop columns (backwards)
	    for (var j = columns - 1; j >= 0 ; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // x[j]
	      var xj;
	      // backward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j];
	        // check vjj
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        xj = divideScalar(bj, vjj);        
	        // loop rows
	        for (var i = j - 1; i >= 0; i--) {
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
	        }
	      }
	      else {
	        // zero value @ j
	        xj = 0;
	      }
	      // update x
	      x[j] = [xj];
	    }
	    // return column vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };
	  
	  var _sparseBackwardSubstitution = function (m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // vars
	    var i, k;
	    // result
	    var x = [];
	    // backward solve m * x = b, loop columns (backwards)
	    for (var j = columns - 1; j >= 0 ; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // backward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0;
	        // first & last indeces in column
	        var f = ptr[j];
	        var l = ptr[j + 1];
	        // values in column, find value @ [j, j], loop backwards
	        for (k = l - 1; k >= f; k--) {
	          // row
	          i = index[k];
	          // check row
	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	          }
	          else if (i < j) {
	            // exit loop
	            break;
	          }
	        }
	        // at this point we must have a value @ [j, j]
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        var xj = divideScalar(bj, vjj);
	        // values in column, continue from last loop
	        for (; k >= f; k--) {
	          // row
	          i = index[k];
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, values[k]))];
	        }
	        // update x
	        x[j] = [xj];
	      }
	      else {
	        // update x
	        x[j] = [0];
	      }
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };
	  
	  return usolve;
	}

	exports.name = 'usolve';
	exports.factory = factory;


/***/ },
/* 107 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/index.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./abs */ 79),
	  __webpack_require__(/*! ./add */ 60),
	  __webpack_require__(/*! ./addScalar */ 43),
	  __webpack_require__(/*! ./ceil */ 108),
	  __webpack_require__(/*! ./cube */ 109),
	  __webpack_require__(/*! ./divide */ 110),
	  __webpack_require__(/*! ./dotDivide */ 111),
	  __webpack_require__(/*! ./dotMultiply */ 113),
	  __webpack_require__(/*! ./dotPow */ 115),
	  __webpack_require__(/*! ./exp */ 117),
	  __webpack_require__(/*! ./fix */ 119),
	  __webpack_require__(/*! ./floor */ 120),
	  __webpack_require__(/*! ./gcd */ 121),
	  __webpack_require__(/*! ./lcm */ 122),
	  __webpack_require__(/*! ./log */ 118),
	  __webpack_require__(/*! ./log10 */ 125),
	  __webpack_require__(/*! ./mod */ 126),
	  __webpack_require__(/*! ./multiply */ 56),
	  __webpack_require__(/*! ./norm */ 127),
	  __webpack_require__(/*! ./nthRoot */ 130),
	  __webpack_require__(/*! ./pow */ 116),
	  __webpack_require__(/*! ./round */ 131),
	  __webpack_require__(/*! ./sign */ 132),
	  __webpack_require__(/*! ./sqrt */ 128),
	  __webpack_require__(/*! ./square */ 133),
	  __webpack_require__(/*! ./subtract */ 41),
	  __webpack_require__(/*! ./unaryMinus */ 44),
	  __webpack_require__(/*! ./unaryPlus */ 134),
	  __webpack_require__(/*! ./xgcd */ 135)
	];


/***/ },
/* 108 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/ceil.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Round a value towards plus infinity
	   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.ceil(x)
	   *
	   * Examples:
	   *
	   *    math.ceil(3.2);               // returns number 4
	   *    math.ceil(3.8);               // returns number 4
	   *    math.ceil(-4.2);              // returns number -4
	   *    math.ceil(-4.7);              // returns number -4
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.ceil(c);                 // returns Complex 4 - 2i
	   *
	   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]
	   *
	   * See also:
	   *
	   *    floor, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var ceil = typed('ceil', {
	    'number': Math.ceil,

	    'Complex': function (x) {
	      return new type.Complex(
	          Math.ceil(x.re),
	          Math.ceil(x.im)
	      );
	    },

	    'BigNumber': function (x) {
	      return x.ceil();
	    },

	    'Fraction': function (x) {
	      return x.ceil();
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since ceil(0) = 0
	      return deepMap(x, ceil, true);
	    }
	  });

	  ceil.toTex = '\\left\\lceil${args[0]}\\right\\rceil';

	  return ceil;
	}

	exports.name = 'ceil';
	exports.factory = factory;


/***/ },
/* 109 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/cube.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  var complexMultiply = typed.find(load(__webpack_require__(/*! ./multiplyScalar */ 57)), ['Complex,Complex']);

	  /**
	   * Compute the cube of a value, `x * x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cube(x)
	   *
	   * Examples:
	   *
	   *    math.cube(2);            // returns number 8
	   *    math.pow(2, 3);          // returns number 8
	   *    math.cube(4);            // returns number 64
	   *    4 * 4 * 4;               // returns number 64
	   *
	   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]
	   *
	   * See also:
	   *
	   *    multiply, square, pow
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number for which to calculate the cube
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Cube of x
	   */
	  var cube = typed('cube', {
	    'number': function (x) {
	      return x * x * x;
	    },

	    'Complex': function (x) {
	      return complexMultiply(complexMultiply(x, x), x);
	    },

	    'BigNumber': function (x) {
	      return x.times(x).times(x);
	    },

	    'Fraction': function (x) {
	      return x.mul(x).mul(x);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since cube(0) = 0
	      return deepMap(x, cube, true);
	    }
	  });

	  cube.toTex = '\\left(${args[0]}\\right)^3';

	  return cube;
	}

	exports.name = 'cube';
	exports.factory = factory;


/***/ },
/* 110 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/divide.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var extend = __webpack_require__(/*! ../../utils/object */ 21).extend;

	function factory (type, config, load, typed) {

	  var divideScalar = load(__webpack_require__(/*! ./divideScalar */ 67));
	  var multiply     = load(__webpack_require__(/*! ./multiply */ 56));
	  var inv          = load(__webpack_require__(/*! ../matrix/inv */ 66));
	  var matrix       = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  /**
	   * Divide two values, `x / y`.
	   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
	   *
	   * Syntax:
	   *
	   *    math.divide(x, y)
	   *
	   * Examples:
	   *
	   *    math.divide(2, 3);            // returns number 0.6666666666666666
	   *
	   *    var a = math.complex(5, 14);
	   *    var b = math.complex(4, 1);
	   *    math.divide(a, b);            // returns Complex 2 + 3i
	   *
	   *    var c = [[7, -6], [13, -4]];
	   *    var d = [[1, 2], [4, 3]];
	   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]
	   *
	   *    var e = math.unit('18 km');
	   *    math.divide(e, 4.5);          // returns Unit 4 km
	   *
	   * See also:
	   *
	   *    multiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
	   */
	  var divide = typed('divide', extend({
	    // we extend the signatures of divideScalar with signatures dealing with matrices

	    'Array | Matrix, Array | Matrix': function (x, y) {
	      // TODO: implement matrix right division using pseudo inverse
	      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html
	      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
	      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
	      return multiply(x, inv(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;

	      // process storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, divideScalar, false);
	          break;
	        case 'dense':
	          c = algorithm14(x, y, divideScalar, false);
	          break;
	      }
	      return c;
	    },
	    
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
	    },

	    'any, Array | Matrix': function (x, y) {
	      return multiply(x, inv(y));
	    }
	  }, divideScalar.signatures));

	  divide.toTex = '\\frac{${args[0]}}{${args[1]}}';

	  return divide;
	}

	exports.name = 'divide';
	exports.factory = factory;


/***/ },
/* 111 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/dotDivide.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var divideScalar = load(__webpack_require__(/*! ./divideScalar */ 67));
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);
	  
	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Divide two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotDivide(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotDivide(2, 4);   // returns 0.5
	   *
	   *    a = [[9, 5], [6, 1]];
	   *    b = [[3, 2], [5, 2]];
	   *
	   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]
	   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]
	   *
	   * See also:
	   *
	   *    divide, multiply, dotMultiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
	   */
	  var dotDivide = typed('dotDivide', {
	    
	    'any, any': divideScalar,
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse ./ sparse
	              c = algorithm07(x, y, divideScalar, false);
	              break;
	            default:
	              // sparse ./ dense
	              c = algorithm02(y, x, divideScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense ./ sparse
	              c = algorithm03(x, y, divideScalar, false);
	              break;
	            default:
	              // dense ./ dense
	              c = algorithm13(x, y, divideScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return dotDivide(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return dotDivide(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return dotDivide(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, divideScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, divideScalar, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, divideScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, divideScalar, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
	    }
	  });

	  dotDivide.toTex = '\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\right)';
	  
	  return dotDivide;
	}

	exports.name = 'dotDivide';
	exports.factory = factory;


/***/ },
/* 112 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm02.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(/*! ../../../function/relational/equalScalar */ 49));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm02 = function (denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues)
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	    
	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result (SparseMatrix)
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];

	    // loop columns in b
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k];
	        // update C(i,j)
	        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        // check for nonzero
	        if (!eq(cij, zero)) {
	          // push i & v
	          cindex.push(i);
	          cvalues.push(cij);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	  
	  return algorithm02;
	}

	exports.name = 'algorithm02';
	exports.factory = factory;


/***/ },
/* 113 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/dotMultiply.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var multiplyScalar = load(__webpack_require__(/*! ./multiplyScalar */ 57));
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm09 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm09 */ 114));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Multiply two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotMultiply(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotMultiply(2, 4); // returns 8
	   *
	   *    a = [[9, 5], [6, 1]];
	   *    b = [[3, 2], [5, 2]];
	   *
	   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]
	   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]
	   *
	   * See also:
	   *
	   *    multiply, divide, dotDivide
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
	   */
	  var dotMultiply = typed('dotMultiply', {
	    
	    'any, any': multiplyScalar,
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse .* sparse
	              c = algorithm09(x, y, multiplyScalar, false);
	              break;
	            default:
	              // sparse .* dense
	              c = algorithm02(y, x, multiplyScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense .* sparse
	              c = algorithm02(x, y, multiplyScalar, false);
	              break;
	            default:
	              // dense .* dense
	              c = algorithm13(x, y, multiplyScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix(x), matrix(y)).valueOf();
	    },
	    
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return dotMultiply(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, multiplyScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, multiplyScalar, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, multiplyScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, multiplyScalar, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
	    }
	  });

	  dotMultiply.toTex = '\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\right)';
	  
	  return dotMultiply;
	}

	exports.name = 'dotMultiply';
	exports.factory = factory;


/***/ },
/* 114 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm09.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(/*! ../../../function/relational/equalScalar */ 49));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked NZA times, number of nonzero elements in A.
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm09 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // vars
	    var i, j, k, k0, k1;
	    
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // column mark
	      var mark = j + 1;
	      // check we need to process values
	      if (x) {
	        // loop B(:,j)
	        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	          // row
	          i = bindex[k];
	          // update workspace
	          w[i] = mark;
	          x[i] = bvalues[k];
	        }
	      }
	      // loop A(:,j)
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // check we need to process values
	        if (x) {
	          // b value @ i,j
	          var vb = w[i] === mark ? x[i] : zero;
	          // invoke f
	          var vc = cf(avalues[k], vb);
	          // check zero value
	          if (!eq(vc, zero)) {
	            // push index
	            cindex.push(i);
	            // push value
	            cvalues.push(vc);
	          }
	        }
	        else {
	          // push index
	          cindex.push(i);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm09;
	}

	exports.name = 'algorithm09';
	exports.factory = factory;


/***/ },
/* 115 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/dotPow.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var pow = load(__webpack_require__(/*! ./pow */ 116));
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Calculates the power of x to y element wise.
	   *
	   * Syntax:
	   *
	   *    math.dotPow(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotPow(2, 3);            // returns number 8
	   *
	   *    var a = [[1, 2], [4, 3]];
	   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]
	   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    pow, sqrt, multiply
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
	   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
	   */
	  var dotPow = typed('dotPow', {
	    
	    'any, any': pow,
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse .^ sparse
	              c = algorithm07(x, y, pow, false);
	              break;
	            default:
	              // sparse .^ dense
	              c = algorithm03(y, x, pow, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense .^ sparse
	              c = algorithm03(x, y, pow, false);
	              break;
	            default:
	              // dense .^ dense
	              c = algorithm13(x, y, pow);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return dotPow(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return dotPow(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return dotPow(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, dotPow, false);
	          break;
	        default:
	          c = algorithm14(x, y, dotPow, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, dotPow, true);
	          break;
	        default:
	          c = algorithm14(y, x, dotPow, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, dotPow, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, dotPow, true).valueOf();
	    }
	  });

	  dotPow.toTex = '\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\right)';
	  
	  return dotPow;
	}

	exports.name = 'dotPow';
	exports.factory = factory;


/***/ },
/* 116 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/pow.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var size = __webpack_require__(/*! ../../utils/array */ 34).size;

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);
	  var exp = load(__webpack_require__(/*! ./exp */ 117));
	  var eye = load(__webpack_require__(/*! ../matrix/eye */ 64));
	  var log = load(__webpack_require__(/*! ./log */ 118));
	  var multiply = load(__webpack_require__(/*! ./multiply */ 56));
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Calculates the power of x to y, `x ^ y`.
	   * Matrix exponentiation is supported for square matrices `x`, and positive
	   * integer exponents `y`.
	   *
	   * Syntax:
	   *
	   *    math.pow(x, y)
	   *
	   * Examples:
	   *
	   *    math.pow(2, 3);               // returns number 8
	   *
	   *    var a = math.complex(2, 3);
	   *    math.pow(a, 2)                // returns Complex -5 + 12i
	   *
	   *    var b = [[1, 2], [4, 3]];
	   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    multiply, sqrt
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex} y                   The exponent
	   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
	   */
	  var pow = typed('pow', {
	    'number, number': _pow,

	    'Complex, Complex': _powComplex,

	    'BigNumber, BigNumber': function (x, y) {
	      if (y.isInteger() || x >= 0 || config.predictable) {
	        return x.pow(y);
	      }
	      else {
	        return _powComplex(new type.Complex(x.toNumber(), 0), new type.Complex(y.toNumber(), 0));
	      }
	    },

	    'Fraction, Fraction': function (x, y) {
	      if (y.d !== 1) {
	        if (config.predictable) {
	          throw new Error('Function pow does not support non-integer exponents for fractions.');
	        }
	        else {
	          return _pow(x.valueOf(), y.valueOf());
	        }
	      }
	      else {
	        return x.pow(y);
	     }
	    },

	    'Array, number': _powArray,

	    'Array, BigNumber': function (x, y) {
	      return _powArray(x, y.toNumber());
	    },

	    'Matrix, number': _powMatrix,

	    'Matrix, BigNumber': function (x, y) {
	      return _powMatrix(x, y.toNumber());
	    }
	  });

	  /**
	   * Calculates the power of x to y, x^y, for two numbers.
	   * @param {number} x
	   * @param {number} y
	   * @return {number | Complex} res
	   * @private
	   */
	  function _pow(x, y) {
	    if (isInteger(y) || x >= 0 || config.predictable) {
	      return Math.pow(x, y);
	    }
	    else {
	      return _powComplex(new type.Complex(x, 0), new type.Complex(y, 0));
	    }
	  }

	  /**
	   * Calculates the power of x to y, x^y, for two complex numbers.
	   * @param {Complex} x
	   * @param {Complex} y
	   * @return {Complex} res
	   * @private
	   */
	  function _powComplex (x, y) {
	    // complex computation
	    // x^y = exp(log(x)*y) = exp((abs(x)+i*arg(x))*y)
	    // TODO: we can optimize this as we know x and y are Complex
	    //   expComplex      = exp.signatures['Complex,Complex']
	    //   multiplyComplex = multiply.signatures['Complex,Complex']
	    //   logComplex      = log.signatures['Complex,Complex']
	    //   return expComplex(multiplyComplex(logComplex(x), y));
	    return exp(multiply(log(x), y));
	  }

	  /**
	   * Calculate the power of a 2d array
	   * @param {Array} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Array}
	   * @private
	   */
	  function _powArray(x, y) {
	    if (!isInteger(y) || y < 0) {
	      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
	    }
	    // verify that A is a 2 dimensional square matrix
	    var s = size(x);
	    if (s.length != 2) {
	      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
	    }
	    if (s[0] != s[1]) {
	      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
	    }

	    var res = eye(s[0]).valueOf();
	    var px = x;
	    while (y >= 1) {
	      if ((y & 1) == 1) {
	        res = multiply(px, res);
	      }
	      y >>= 1;
	      px = multiply(px, px);
	    }
	    return res;
	  }

	  /**
	   * Calculate the power of a 2d matrix
	   * @param {Matrix} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Matrix}
	   * @private
	   */
	  function _powMatrix (x, y) {
	    return matrix(_powArray(x.valueOf(), y));
	  }

	  pow.toTex = '\\left(${args[0]}\\right)' + latex.operators['pow'] + '{${args[1]}}';

	  return pow;
	}

	exports.name = 'pow';
	exports.factory = factory;


/***/ },
/* 117 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/exp.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the exponent of a value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.exp(x)
	   *
	   * Examples:
	   *
	   *    math.exp(2);                  // returns number 7.3890560989306495
	   *    math.pow(math.e, 2);          // returns number 7.3890560989306495
	   *    math.log(math.exp(2));        // returns number 2
	   *
	   *    math.exp([1, 2, 3]);
	   *    // returns Array [
	   *    //   2.718281828459045,
	   *    //   7.3890560989306495,
	   *    //   20.085536923187668
	   *    // ]
	   *
	   * See also:
	   *
	   *    log, pow
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
	   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
	   */
	  var exp = typed('exp', {
	    'number': Math.exp,

	    'Complex': function (x) {
	      var r = Math.exp(x.re);
	      return new type.Complex(
	          r * Math.cos(x.im),
	          r * Math.sin(x.im)
	      );
	    },

	    'BigNumber': function (x) {
	      return x.exp();
	    },

	    'Array | Matrix': function (x) {
	      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
	      return deepMap(x, exp);
	    }
	  });

	  exp.toTex = '\\exp\\left(${args[0]}\\right)';

	  return exp;
	}

	exports.name = 'exp';
	exports.factory = factory;


/***/ },
/* 118 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/log.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  var divideScalar = load(__webpack_require__(/*! ./divideScalar */ 67));

	  /**
	   * Calculate the logarithm of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log(x)
	   *    math.log(x, base)
	   *
	   * Examples:
	   *
	   *    math.log(3.5);                  // returns 1.252762968495368
	   *    math.exp(math.log(2.4));        // returns 2.4
	   *
	   *    math.pow(10, 4);                // returns 10000
	   *    math.log(10000, 10);            // returns 4
	   *    math.log(10000) / math.log(10); // returns 4
	   *
	   *    math.log(1024, 2);              // returns 10
	   *    math.pow(2, 10);                // returns 1024
	   *
	   * See also:
	   *
	   *    exp, log10
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @param {number | BigNumber | Complex} [base=e]
	   *            Optional base for the logarithm. If not provided, the natural
	   *            logarithm of `x` is calculated.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the logarithm of `x`
	   */
	  var log = typed('log', {
	    'number': _logNumber,

	    'Complex': _logComplex,

	    'BigNumber': function (x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.ln();
	      }
	      else {
	        // downgrade to number, return Complex valued result
	        return _logComplex(new type.Complex(x.toNumber(), 0));
	      }
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, log);
	    },

	    'any, any': function (x, base) {
	      // calculate logarithm for a specified base, log(x, base)
	      return divideScalar(log(x), log(base));
	    }
	  });

	  /**
	   * Calculate the natural logarithm of a number
	   * @param {number} x
	   * @returns {number | Complex}
	   * @private
	   */
	  function _logNumber(x) {
	    if (x >= 0 || config.predictable) {
	      return Math.log(x);
	    }
	    else {
	      // negative value -> complex value computation
	      return log(new type.Complex(x, 0));
	    }
	  }

	  /**
	   * Calculate the natural logarithm of a complex number
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _logComplex(x) {
	    return new type.Complex (
	        Math.log(Math.sqrt(x.re * x.re + x.im * x.im)),
	        Math.atan2(x.im, x.re)
	    );
	  }

	  log.toTex = {
	    1: '\\ln\\left(${args[0]}\\right)',
	    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
	  };

	  return log;
	}

	exports.name = 'log';
	exports.factory = factory;


/***/ },
/* 119 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/fix.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Round a value towards zero.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.fix(x)
	   *
	   * Examples:
	   *
	   *    math.fix(3.2);                // returns number 3
	   *    math.fix(3.8);                // returns number 3
	   *    math.fix(-4.2);               // returns number -4
	   *    math.fix(-4.7);               // returns number -4
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.fix(c);                  // returns Complex 3 - 2i
	   *
	   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]
	   *
	   * See also:
	   *
	   *    ceil, floor, round
	   *
	   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
	   */
	  var fix = typed('fix', {
	    'number': function (x) {
	      return (x > 0) ? Math.floor(x) : Math.ceil(x);
	    },

	    'Complex': function (x) {
	      return new type.Complex(
	          (x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re),
	          (x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im)
	      );
	    },

	    'BigNumber': function (x) {
	      return x.isNegative() ? x.ceil() : x.floor();
	    },

	    'Fraction': function (x) {
	      return x.s < 0 ? x.ceil() : x.floor();
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since fix(0) = 0
	      return deepMap(x, fix, true);
	    }
	  });

	  fix.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return fix;
	}

	exports.name = 'fix';
	exports.factory = factory;


/***/ },
/* 120 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/floor.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Round a value towards minus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.floor(x)
	   *
	   * Examples:
	   *
	   *    math.floor(3.2);              // returns number 3
	   *    math.floor(3.8);              // returns number 3
	   *    math.floor(-4.2);             // returns number -5
	   *    math.floor(-4.7);             // returns number -5
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.floor(c);                // returns Complex 3 - 3i
	   *
	   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var floor = typed('floor', {
	    'number': Math.floor,

	    'Complex': function (x) {
	      return new type.Complex(
	          Math.floor(x.re),
	          Math.floor(x.im)
	      );
	    },

	    'BigNumber': function (x) {
	      return x.floor();
	    },

	    'Fraction': function (x) {
	      return x.floor();
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since floor(0) = 0
	      return deepMap(x, floor, true);
	    }
	  });

	  floor.toTex = '\\left\\lfloor${args[0]}\\right\\rfloor';

	  return floor;
	}

	exports.name = 'floor';
	exports.factory = factory;


/***/ },
/* 121 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/gcd.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm01 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm01 */ 46));
	  var algorithm04 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm04 */ 61));
	  var algorithm10 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm10 */ 50));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Calculate the greatest common divisor for two or more values or arrays.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gcd(a, b)
	   *    math.gcd(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.gcd(8, 12);              // returns 4
	   *    math.gcd(-4, 6);              // returns 2
	   *    math.gcd(25, 15, -10);        // returns 5
	   *
	   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]
	   *
	   * See also:
	   *
	   *    lcm, xgcd
	   *
	   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
	   */
	  var gcd = typed('gcd', {

	    'number, number': _gcd,

	    'BigNumber, BigNumber': _gcdBigNumber,

	    'Fraction, Fraction': function (x, y) {
	      return x.gcd(y);
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm04(x, y, gcd);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm01(y, x, gcd, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm01(x, y, gcd, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, gcd);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return gcd(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return gcd(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return gcd(x, matrix(y));
	    },
	    
	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm10(x, y, gcd, false);
	          break;
	        default:
	          c = algorithm14(x, y, gcd, false);
	          break;
	      }
	      return c;
	    },

	    'number | BigNumber, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, gcd, true);
	          break;
	        default:
	          c = algorithm14(y, x, gcd, true);
	          break;
	      }
	      return c;
	    },

	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, gcd, false).valueOf();
	    },

	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, gcd, true).valueOf();
	    },

	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
	      var res = gcd(a, b);
	      for (var i = 0; i < args.length; i++) {
	        res = gcd(res, args[i]);
	      }
	      return res;
	    }
	  });

	  gcd.toTex = '\\gcd\\left(${args}\\right)';

	  return gcd;

	  /**
	   * Calculate gcd for BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns greatest common denominator of a and b
	   * @private
	   */
	  function _gcdBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function gcd must be integer numbers');
	    }

	    // http://en.wikipedia.org/wiki/Euclidean_algorithm
	    var zero = new type.BigNumber(0);
	    while (!b.isZero()) {
	      var r = a.mod(b);
	      a = b;
	      b = r;
	    }
	    return a.lt(zero) ? a.neg() : a;
	  }
	}

	/**
	 * Calculate gcd for numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the greatest common denominator of a and b
	 * @private
	 */
	function _gcd(a, b) {
	  if (!isInteger(a) || !isInteger(b)) {
	    throw new Error('Parameters in function gcd must be integer numbers');
	  }

	  // http://en.wikipedia.org/wiki/Euclidean_algorithm
	  var r;
	  while (b != 0) {
	    r = a % b;
	    a = b;
	    b = r;
	  }
	  return (a < 0) ? -a : a;
	}

	exports.name = 'gcd';
	exports.factory = factory;


/***/ },
/* 122 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/lcm.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm06 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm06 */ 123));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Calculate the least common multiple for two or more values or arrays.
	   *
	   * lcm is defined as:
	   *
	   *     lcm(a, b) = abs(a * b) / gcd(a, b)
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.lcm(a, b)
	   *    math.lcm(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.lcm(4, 6);               // returns 12
	   *    math.lcm(6, 21);              // returns 42
	   *    math.lcm(6, 21, 5);           // returns 210
	   *
	   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]
	   *
	   * See also:
	   *
	   *    gcd, xgcd
	   *
	   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
	   */
	  var lcm = typed('lcm', {
	    'number, number': _lcm,

	    'BigNumber, BigNumber': _lcmBigNumber,

	    // TODO: implement support for Fraction

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm06(x, y, lcm);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm02(y, x, lcm, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm02(x, y, lcm, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, lcm);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return lcm(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return lcm(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return lcm(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, lcm, false);
	          break;
	        default:
	          c = algorithm14(x, y, lcm, false);
	          break;
	      }
	      return c;
	    },

	    'number | BigNumber, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, lcm, true);
	          break;
	        default:
	          c = algorithm14(y, x, lcm, true);
	          break;
	      }
	      return c;
	    },

	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, lcm, false).valueOf();
	    },

	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, lcm, true).valueOf();
	    },

	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
	      var res = lcm(a, b);
	      for (var i = 0; i < args.length; i++) {
	        res = lcm(res, args[i]);
	      }
	      return res;
	    }
	  });

	  lcm.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return lcm;

	  /**
	   * Calculate lcm for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns the least common multiple of a and b
	   * @private
	   */
	  function _lcmBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function lcm must be integer numbers');
	    }

	    if (a.isZero() || b.isZero()) {
	      return new type.BigNumber(0);
	    }

	    // http://en.wikipedia.org/wiki/Euclidean_algorithm
	    // evaluate lcm here inline to reduce overhead
	    var prod = a.times(b);
	    while (!b.isZero()) {
	      var t = b;
	      b = a.mod(t);
	      a = t;
	    }
	    return prod.div(a).abs();
	  }
	}

	/**
	 * Calculate lcm for two numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the least common multiple of a and b
	 * @private
	 */
	function _lcm (a, b) {
	  if (!isInteger(a) || !isInteger(b)) {
	    throw new Error('Parameters in function lcm must be integer numbers');
	  }

	  if (a == 0 || b == 0) {
	    return 0;
	  }

	  // http://en.wikipedia.org/wiki/Euclidean_algorithm
	  // evaluate lcm here inline to reduce overhead
	  var t;
	  var prod = a * b;
	  while (b != 0) {
	    t = b;
	    b = a % t;
	    a = t;
	  }
	  return Math.abs(prod / a);
	}

	exports.name = 'lcm';
	exports.factory = factory;


/***/ },
/* 123 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm06.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var scatter = __webpack_require__(/*! ./../../../utils/collection/scatter */ 124);
	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(/*! ../../../function/relational/equalScalar */ 49));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm06 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspaces
	    var x = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var w = [];
	    // marks indicating value in a given row has been updated
	    var u = [];

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // scatter the values of A(:,j) into workspace
	      scatter(a, j, w, x, u, mark, c, cf);
	      // scatter the values of B(:,j) into workspace
	      scatter(b, j, w, x, u, mark, c, cf);
	      // check we need to process values (non pattern matrix)
	      if (x) {
	        // initialize first index in j
	        var k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          var i = cindex[k];
	          // check function was invoked on current row (Aij !=0 && Bij != 0)
	          if (u[i] === mark) {
	            // value @ i
	            var v = x[i];
	            // check for zero value
	            if (!eq(v, zero)) {
	              // push value
	              cvalues.push(v);
	              // increment pointer
	              k++;
	            }
	            else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          }
	          else {
	            // remove value @ i, do not increment pointer
	            cindex.splice(k, 1);
	          }
	        }
	      }
	      else {
	        // initialize first index in j
	        var p = cptr[j];
	        // loop index in j
	        while (p < cindex.length) {
	          // row
	          var r = cindex[p];
	          // check function was invoked on current row (Aij !=0 && Bij != 0)
	          if (u[r] !== mark) {
	            // remove value @ i, do not increment pointer
	            cindex.splice(p, 1);
	          }
	          else {
	            // increment pointer
	            p++;
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };
	  
	  return algorithm06;
	}

	exports.name = 'algorithm06';
	exports.factory = factory;


/***/ },
/* 124 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/utils/collection/scatter.js ***!
  \**************************************************/
/***/ function(module, exports) {

	'use strict';

	module.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
	  // a arrays
	  var avalues = a._values;
	  var aindex = a._index;
	  var aptr = a._ptr;
	  // c arrays
	  var cindex = c._index;

	  // vars
	  var k, k0, k1, i;

	  // check we need to process values (pattern matrix)
	  if (x) {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k];
	      // check value exists in current j
	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark;
	        // add i to pattern of C
	        cindex.push(i);
	        // x(i) = A, check we need to call function this time
	        if (update) {
	          // copy value to workspace calling callback function
	          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);
	          // function was called on current row
	          u[i] = mark;
	        }
	        else {
	          // copy value to workspace
	          x[i] = avalues[k];
	        }
	      }
	      else {
	        // i exists in C already
	        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);
	        // function was called on current row
	        u[i] = mark;
	      }
	    }
	  }
	  else {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k];
	      // check value exists in current j
	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark;
	        // add i to pattern of C
	        cindex.push(i);
	      }
	      else {
	        // indicate function was called on current row
	        u[i] = mark;
	      }
	    }
	  }
	};


/***/ },
/* 125 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/log10.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the 10-base of a value. This is the same as calculating `log(x, 10)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log10(x)
	   *
	   * Examples:
	   *
	   *    math.log10(0.00001);            // returns -5
	   *    math.log10(10000);              // returns 4
	   *    math.log(10000) / math.log(10); // returns 4
	   *    math.pow(10, 4);                // returns 10000
	   *
	   * See also:
	   *
	   *    exp, log
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the 10-base logarithm of `x`
	   */
	  var log10 = typed('log10', {
	    'number': function (x) {
	      if (x >= 0 || config.predictable) {
	        return Math.log(x) / Math.LN10;
	      }
	      else {
	        // negative value -> complex value computation
	        return log10(new type.Complex(x, 0));
	      }
	    },

	    'Complex': _log10Complex,

	    'BigNumber': function (x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.log();
	      }
	      else {
	        // downgrade to number, return Complex valued result
	        return _log10Complex(new type.Complex(x.toNumber(), 0));
	      }
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, log10);
	    }
	  });

	  log10.toTex = '\\log_{10}\\left(${args[0]}\\right)';

	  return log10;

	  /**
	   * Calculate log10 for a complex value
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _log10Complex(x) {
	    return new type.Complex (
	        Math.log(Math.sqrt(x.re * x.re + x.im * x.im)) / Math.LN10,
	        Math.atan2(x.im, x.re) / Math.LN10
	    );
	  }
	}

	exports.name = 'log10';
	exports.factory = factory;



/***/ },
/* 126 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/mod.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm05 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm05 */ 48));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  /**
	   * Calculates the modulus, the remainder of an integer division.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * The modulus is defined as:
	   *
	   *     x - y * floor(x / y)
	   *
	   * See http://en.wikipedia.org/wiki/Modulo_operation.
	   *
	   * Syntax:
	   *
	   *    math.mod(x, y)
	   *
	   * Examples:
	   *
	   *    math.mod(8, 3);                // returns 2
	   *    math.mod(11, 2);               // returns 1
	   *
	   *    function isOdd(x) {
	   *      return math.mod(x, 2) != 0;
	   *    }
	   *
	   *    isOdd(2);                      // returns false
	   *    isOdd(3);                      // returns true
	   *
	   * See also:
	   *
	   *    divide
	   *
	   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
	   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
	   */
	  var mod = typed('mod', {

	    'number, number': _mod,

	    'BigNumber, BigNumber': function (x, y) {
	      return y.isZero() ? x : x.mod(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.mod(y);
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // mod(sparse, sparse)
	              c = algorithm05(x, y, mod, false);
	              break;
	            default:
	              // mod(sparse, dense)
	              c = algorithm02(y, x, mod, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // mod(dense, sparse)
	              c = algorithm03(x, y, mod, false);
	              break;
	            default:
	              // mod(dense, dense)
	              c = algorithm13(x, y, mod);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return mod(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return mod(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return mod(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, mod, false);
	          break;
	        default:
	          c = algorithm14(x, y, mod, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, mod, true);
	          break;
	        default:
	          c = algorithm14(y, x, mod, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, mod, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, mod, true).valueOf();
	    }
	  });

	  mod.toTex = '\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\right)';

	  return mod;

	  /**
	   * Calculate the modulus of two numbers
	   * @param {number} x
	   * @param {number} y
	   * @returns {number} res
	   * @private
	   */
	  function _mod(x, y) {
	    if (y > 0) {
	      // We don't use JavaScript's % operator here as this doesn't work
	      // correctly for x < 0 and x == 0
	      // see http://en.wikipedia.org/wiki/Modulo_operation
	      return x - y * Math.floor(x / y);
	    }
	    else if (y === 0) {
	      return x;
	    }
	    else { // y < 0
	      // TODO: implement mod for a negative divisor
	      throw new Error('Cannot calculate mod for a negative divisor');
	    }
	  }
	}

	exports.name = 'mod';
	exports.factory = factory;


/***/ },
/* 127 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/norm.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  
	  var abs         = load(__webpack_require__(/*! ../arithmetic/abs */ 79));
	  var add         = load(__webpack_require__(/*! ../arithmetic/add */ 60));
	  var pow         = load(__webpack_require__(/*! ../arithmetic/pow */ 116));
	  var sqrt        = load(__webpack_require__(/*! ../arithmetic/sqrt */ 128));
	  var multiply    = load(__webpack_require__(/*! ../arithmetic/multiply */ 56));
	  var equalScalar = load(__webpack_require__(/*! ../relational/equalScalar */ 49));
	  var larger      = load(__webpack_require__(/*! ../relational/larger */ 80));
	  var smaller     = load(__webpack_require__(/*! ../relational/smaller */ 129));
	  var matrix      = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var trace       = load(__webpack_require__(/*! ../matrix/trace */ 74));
	  var transpose   = load(__webpack_require__(/*! ../matrix/transpose */ 75));
	  
	  var complexAbs = typed.find(abs, ['Complex']);

	  /**
	   * Calculate the norm of a number, vector or matrix.
	   *
	   * The second parameter p is optional. If not provided, it defaults to 2.
	   *
	   * Syntax:
	   *
	   *    math.norm(x)
	   *    math.norm(x, p)
	   *
	   * Examples:
	   *
	   *    math.abs(-3.5);                         // returns 3.5
	   *    math.norm(-3.5);                        // returns 3.5
	   *
	   *    math.norm(math.complex(3, -4));         // returns 5
	   *
	   *    math.norm([1, 2, -3], Infinity);        // returns 3
	   *    math.norm([1, 2, -3], -Infinity);       // returns 1
	   *
	   *    math.norm([3, 4], 2);                   // returns 5
	   *
	   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
	   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7
	   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661
	   *
	   * See also:
	   *
	   *    abs
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the norm
	   * @param  {number | BigNumber | string} [p=2]
	   *            Vector space.
	   *            Supported numbers include Infinity and -Infinity.
	   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
	   * @return {number | BigNumber} the p-norm
	   */
	  var norm = typed('norm', {
	    'number': Math.abs,

	    'Complex': complexAbs,

	    'BigNumber': function (x) {
	      // norm(x) = abs(x)
	      return x.abs();
	    },
	    
	    'boolean | null' : function (x) {
	      // norm(x) = abs(x)
	      return Math.abs(x);
	    },

	    'Array': function (x) {
	      return _norm(matrix(x), 2);
	    },
	    
	    'Matrix': function (x) {
	      return _norm(x, 2);
	    },

	    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function (x) {
	      // ignore second parameter, TODO: remove the option of second parameter for these types
	      return norm(x);
	    },

	    'Array, number | BigNumber | string': function (x, p) {
	      return _norm(matrix(x), p);
	    },
	    
	    'Matrix, number | BigNumber | string': function (x, p) {
	      return _norm(x, p);
	    }
	  });

	  /**
	   * Calculate the norm for an array
	   * @param {Array} x
	   * @param {number | string} p
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _norm (x, p) {
	    // size
	    var sizeX = x.size();
	    
	    // check if it is a vector
	    if (sizeX.length == 1) {
	      // check p
	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x, Infinity) = max(abs(x))
	        var pinf = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(
	          function (value) {
	            var v = abs(value);
	            if (larger(v, pinf))
	              pinf = v;
	          },
	          true);
	        return pinf;
	      }
	      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
	        // norm(x, -Infinity) = min(abs(x))
	        var ninf;
	        // skip zeros since abs(0) == 0
	        x.forEach(
	          function (value) {
	            var v = abs(value);
	            if (!ninf || smaller(v, ninf))
	              ninf = v;
	          },
	          true);
	        return ninf || 0;
	      }
	      if (p === 'fro') {
	        return _norm(x, 2);
	      }
	      if (typeof p === 'number' && !isNaN(p)) {
	        // check p != 0
	        if (!equalScalar(p, 0)) {
	          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
	          var n = 0;
	          // skip zeros since abs(0) == 0
	          x.forEach(
	            function (value) {
	              n = add(pow(abs(value), p), n);
	            },
	            true);
	          return pow(n, 1 / p);
	        }
	        return Number.POSITIVE_INFINITY;
	      }
	      // invalid parameter value
	      throw new Error('Unsupported parameter value');
	    }
	    // MxN matrix
	    if (sizeX.length == 2) {
	      // check p
	      if (p === 1) {
	        // norm(x) = the largest column sum
	        var c = [];
	        // result
	        var maxc = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(
	          function (value, index) {
	            var j = index[1];
	            var cj = add(c[j] || 0, abs(value));
	            if (larger(cj, maxc))
	              maxc = cj;
	            c[j] = cj;
	          },
	          true);
	        return maxc;
	      }
	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x) = the largest row sum
	        var r = [];
	        // result
	        var maxr = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(
	          function (value, index) {
	            var i = index[0];
	            var ri = add(r[i] || 0, abs(value));
	            if (larger(ri, maxr))
	              maxr = ri;
	            r[i] = ri;
	          },
	          true);
	        return maxr;
	      }
	      if (p === 'fro') {
	        // norm(x) = sqrt(sum(diag(x'x)))
	        return sqrt(trace(multiply(transpose(x), x)));
	      }
	      if (p === 2) {
	        // not implemented
	        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
	      }
	      // invalid parameter value
	      throw new Error('Unsupported parameter value');
	    }
	  }

	  norm.toTex = {
	    1: '\\left\\|${args[0]}\\right\\|',
	    2: '\\mathrm{${name}}\\left(${args}\\right)'
	  };

	  return norm;
	}

	exports.name = 'norm';
	exports.factory = factory;


/***/ },
/* 128 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/sqrt.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the square root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sqrt(x)
	   *
	   * Examples:
	   *
	   *    math.sqrt(25);                // returns 5
	   *    math.square(5);               // returns 25
	   *    math.sqrt(-4);                // returns Complex -2i
	   *
	   * See also:
	   *
	   *    square, multiply
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the square root.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the square root of `x`
	   */
	  var sqrt = typed('sqrt', {
	    'number': _sqrtNumber,

	    'Complex': _sqrtComplex,

	    'BigNumber': function (x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.sqrt();
	      }
	      else {
	        // negative value -> downgrade to number to do complex value computation
	        return _sqrtNumber(x.toNumber());
	      }
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since sqrt(0) = 0
	      return deepMap(x, sqrt, true);
	    }
	  });

	  /**
	   * Calculate sqrt for a number
	   * @param {number} x
	   * @returns {number | Complex} Returns the square root of x
	   * @private
	   */
	  function _sqrtNumber(x) {
	    if (x >= 0 || config.predictable) {
	      return Math.sqrt(x);
	    }
	    else {
	      return _sqrtComplex(new type.Complex(x, 0));
	    }
	  }

	  /**
	   * Calculate sqrt for a complex number
	   * @param {Complex} x
	   * @returns {Complex} Returns the square root of x
	   * @private
	   */
	  function _sqrtComplex(x) {
	    var r = Math.sqrt(x.re * x.re + x.im * x.im);

	    var re, im;

	    if (x.re >= 0) {
	      re = 0.5 * Math.sqrt(2.0 * (r + x.re));
	    }
	    else {
	      re = Math.abs(x.im) / Math.sqrt(2 * (r - x.re));
	    }

	    if (x.re <= 0) {
	      im = 0.5 * Math.sqrt(2.0 * (r - x.re));
	    }
	    else {
	      im = Math.abs(x.im) / Math.sqrt(2 * (r + x.re));
	    }

	    if (x.im >= 0) {
	      return new type.Complex(re, im);
	    }
	    else {
	      return new type.Complex(re, -im);
	    }
	  }

	  sqrt.toTex = '\\sqrt{${args[0]}}';

	  return sqrt;
	}

	exports.name = 'sqrt';
	exports.factory = factory;


/***/ },
/* 129 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/relational/smaller.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(/*! ../../utils/number */ 24).nearlyEqual;

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Test whether value x is smaller than y.
	   *
	   * The function returns true when x is smaller than y and the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.smaller(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(2, 3);            // returns true
	   *    math.smaller(5, 2 * 2);        // returns false
	   *
	   *    var a = math.unit('5 cm');
	   *    var b = math.unit('2 inch');
	   *    math.smaller(a, b);            // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smallerEq, smaller, smallerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  var smaller = typed('smaller', {

	    'boolean, boolean': function (x, y) {
	      return x < y;
	    },

	    'number, number': function (x, y) {
	      return x < y && !nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return x.lt(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.compare(y) === -1;
	    },

	    'Complex, Complex': function (x, y) {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return x.value < y.value && !nearlyEqual(x.value, y.value, config.epsilon);
	    },

	    'string, string': function (x, y) {
	      return x < y;
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, smaller);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, smaller, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, smaller, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, smaller);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return smaller(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return smaller(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return smaller(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, smaller, false);
	          break;
	        default:
	          c = algorithm14(x, y, smaller, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, smaller, true);
	          break;
	        default:
	          c = algorithm14(y, x, smaller, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, smaller, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, smaller, true).valueOf();
	    }
	  });

	  smaller.toTex = '\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\right)';

	  return smaller;
	}

	exports.name = 'smaller';
	exports.factory = factory;


/***/ },
/* 130 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/nthRoot.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm01 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm01 */ 46));
	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm06 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm06 */ 123));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Calculate the nth root of a value.
	   * The principal nth root of a positive real number A, is the positive real
	   * solution of the equation
	   *
	   *     x^root = A
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *     math.nthRoot(a)
	   *     math.nthRoot(a, root)
	   *
	   * Examples:
	   *
	   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9
	   *     math.sqrt(9);          // returns 3, as 3^2 == 9
	   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64
	   *
	   * See also:
	   *
	   *     sqrt, pow
	   *
	   * @param {number | BigNumber | Array | Matrix | Complex} a
	   *              Value for which to calculate the nth root
	   * @param {number | BigNumber} [root=2]    The root.
	   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
	   */
	  var nthRoot = typed('nthRoot', {
	    
	    'number': function (x) {
	      return _nthRoot(x, 2);
	    },
	    'number, number': _nthRoot,

	    'BigNumber': function (x) {
	      return _bigNthRoot(x, new type.BigNumber(2));
	    },
	    'Complex' : function(x) {
	      return _nthComplexRoot(x, 2);
	    }, 
	    'Complex, number' : _nthComplexRoot,
	    'BigNumber, BigNumber': _bigNthRoot,

	    'Array | Matrix': function (x) {
	      return nthRoot(x, 2);
	    },
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // density must be one (no zeros in matrix)
	              if (y.density() === 1) {
	                // sparse + sparse
	                c = algorithm06(x, y, nthRoot);
	              }
	              else {
	                // throw exception
	                throw new Error('Root must be non-zero');
	              }
	              break;
	            default:
	              // sparse + dense
	              c = algorithm02(y, x, nthRoot, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // density must be one (no zeros in matrix)
	              if (y.density() === 1) {
	                // dense + sparse
	                c = algorithm01(x, y, nthRoot, false);
	              }
	              else {
	                // throw exception
	                throw new Error('Root must be non-zero');
	              }
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, nthRoot);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return nthRoot(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return nthRoot(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix(y));
	    },
	    
	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, nthRoot, false);
	          break;
	        default:
	          c = algorithm14(x, y, nthRoot, false);
	          break;
	      }
	      return c;
	    },

	    'number | BigNumber, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          // density must be one (no zeros in matrix)
	          if (y.density() === 1) {
	            // sparse - scalar
	            c = algorithm11(y, x, nthRoot, true);
	          }
	          else {
	            // throw exception
	            throw new Error('Root must be non-zero');
	          }
	          break;
	        default:
	          c = algorithm14(y, x, nthRoot, true);
	          break;
	      }
	      return c;
	    },

	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return nthRoot(matrix(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix(y)).valueOf();
	    }
	  });

	  nthRoot.toTex = '\\sqrt[${args[1]}]{${args[0]}}';

	  return nthRoot;

	  /**
	   * Calculate the nth root of a for BigNumbers, solve x^root == a
	   * http://rosettacode.org/wiki/Nth_root#JavaScript
	   * @param {BigNumber} a
	   * @param {BigNumber} root
	   * @private
	   */
	  function _bigNthRoot(a, root) {
	    var zero = new type.BigNumber(0);
	    var one = new type.BigNumber(1);
	    var inv = root.isNegative();
	    if (inv) root = root.negated();

	    if (root.isZero()) throw new Error('Root must be non-zero');
	    if (a.isNegative() && !root.abs().mod(2).equals(1)) throw new Error('Root must be odd when a is negative.');

	    // edge cases zero and infinity
	    if (a.isZero()) return zero;
	    if (!a.isFinite())
	    {
	      return inv ? zero : a;
	    }

	    var x = one; // Initial guess
	    var i = 0;
	    var iMax = 10000;
	    do {
	      var xPrev = x;
	      var delta = a.div(x.pow(root.minus(1))).minus(x).div(root);
	      x = x.plus(delta);
	      i++;
	    }
	    while (!x.equals(xPrev) && i < iMax);

	    if (!x.equals(xPrev)) {
	      throw new Error('Function nthRoot failed to converge');
	    }

	    return inv ? one.div(x) : x;
	  }
	}

	/**
	 * Calculate the nth root of a, solve x^root == a
	 * http://rosettacode.org/wiki/Nth_root#JavaScript
	 * @param {number} a
	 * @param {number} root
	 * @private
	 */
	function _nthRoot(a, root) {
	  var inv = root < 0;
	  if (inv) root = -root;

	  if (root === 0) throw new Error('Root must be non-zero');
	  if (a < 0 && (Math.abs(root) % 2 != 1)) throw new Error('Root must be odd when a is negative.');

	  // edge cases zero and infinity
	  if (a == 0) return 0;
	  if (!Number.isFinite(a)) {
	    return inv ? 0 : a;
	  }

	  var x = 1; // Initial guess
	  var xPrev = 1;
	  var i = 0;
	  var iMax = 10000;
	  do {
	    var delta = (a / Math.pow(x, root - 1) - x) / root;
	    xPrev = x;
	    x = x + delta;
	    i++;
	  }
	  while (xPrev !== x && i < iMax);

	  if (xPrev !== x) {
	    throw new Error('Function nthRoot failed to converge');
	  }

	  return inv ? 1 / x : x;
	}

	/**
	 * Calculate the nth root of a Complex Number a using De Moviers Theorem.
	 * @param  {Complex} a
	 * @param  {number} root
	 * @return {Array} array or n Complex Roots in Polar Form.
	 */
	function _nthComplexRoot(a, root) {
	  if (root < 0) throw new Error('Root must be greater than zero');
	  if (root === 0) throw new Error('Root must be non-zero');
	  if (root % 1 !== 0) throw new Error('Root must be an integer');  
	  var polar = a.toPolar();
	  var roots = [];
	  var r = Math.pow(polar.r, 1/root);
	  for(var k = 0; k < root; k++) {
	    roots.push({r: r, phi: (polar.phi + 2 * Math.PI * k)/root});
	  }
	  return roots;
	}

	exports.name = 'nthRoot';
	exports.factory = factory;


/***/ },
/* 131 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/round.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var toFixed = __webpack_require__(/*! ../../utils/number */ 24).toFixed;
	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	var NO_INT = 'Number of decimals in function round must be an integer';

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var equalScalar = load(__webpack_require__(/*! ../relational/equalScalar */ 49));
	  var zeros = load(__webpack_require__(/*! ../matrix/zeros */ 76));

	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  /**
	   * Round a value towards the nearest integer.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.round(x)
	   *    math.round(x, n)
	   *
	   * Examples:
	   *
	   *    math.round(3.2);              // returns number 3
	   *    math.round(3.8);              // returns number 4
	   *    math.round(-4.2);             // returns number -4
	   *    math.round(-4.7);             // returns number -5
	   *    math.round(math.pi, 3);       // returns number 3.142
	   *    math.round(123.45678, 2);     // returns number 123.46
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.round(c);                // returns Complex 3 - 3i
	   *
	   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, floor
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var round = typed('round', {

	    'number': Math.round,

	    'number, number': function (x, n) {
	      if (!isInteger(n))   {throw new TypeError(NO_INT);}
	      if (n < 0 || n > 15) {throw new Error('Number of decimals in function round must be in te range of 0-15');}

	      return _round(x, n);
	    },

	    'Complex': function (x) {
	      return new type.Complex (
	          Math.round(x.re),
	          Math.round(x.im)
	      );
	    },

	    'Complex, number': function (x, n) {
	      return new type.Complex (
	          _round(x.re, n),
	          _round(x.im, n)
	      );
	    },

	    'Complex, BigNumber': function (x, n) {
	      if (!n.isInteger()) {throw new TypeError(NO_INT);}

	      var _n = n.toNumber();
	      return new type.Complex (
	          _round(x.re, _n),
	          _round(x.im, _n)
	      );
	    },

	    'number, BigNumber': function (x, n) {
	      if (!n.isInteger()) {throw new TypeError(NO_INT);}

	      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
	    },

	    'BigNumber': function (x) {
	      return x.toDecimalPlaces(0);
	    },

	    'BigNumber, BigNumber': function (x, n) {
	      if (!n.isInteger()) {throw new TypeError(NO_INT);}

	      return x.toDecimalPlaces(n.toNumber());
	    },

	    'Fraction': function (x) {
	      return x.round();
	    },
	    // TODO: add support for math.round(Fraction, Fraction | number)

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since round(0) = 0
	      return deepMap(x, round, true);
	    },

	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, round, false);
	          break;
	        default:
	          c = algorithm14(x, y, round, false);
	          break;
	      }
	      return c;
	    },

	    'number | Complex | BigNumber, Matrix': function (x, y) {
	      // check scalar is zero
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm12(y, x, round, true);
	            break;
	          default:
	            c = algorithm14(y, x, round, true);
	            break;
	        }
	        return c;
	      }
	      // do not execute algorithm, result will be a zero matrix
	      return zeros(y.size(), y.storage());
	    },

	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, round, false).valueOf();
	    },

	    'number | Complex | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, round, true).valueOf();
	    }
	  });

	  round.toTex = {
	    1: '\\left\\lfloor${args[0]}\\right\\rceil',
	    2: '\\mathrm{${name}}\\left(${args}\\right)'
	  };

	  return round;
	}

	/**
	 * round a number to the given number of decimals, or to zero if decimals is
	 * not provided
	 * @param {number} value
	 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
	 * @return {number} roundedValue
	 * @private
	 */
	function _round (value, decimals) {
	  return parseFloat(toFixed(value, decimals));
	}

	exports.name = 'round';
	exports.factory = factory;


/***/ },
/* 132 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/sign.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var number = __webpack_require__(/*! ../../utils/number */ 24);
	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Compute the sign of a value. The sign of a value x is:
	   *
	   * -  1 when x > 1
	   * - -1 when x < 0
	   * -  0 when x == 0
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sign(x)
	   *
	   * Examples:
	   *
	   *    math.sign(3.5);               // returns 1
	   *    math.sign(-4.2);              // returns -1
	   *    math.sign(0);                 // returns 0
	   *
	   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]
	   *
	   * See also:
	   *
	   *    abs
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x
	   *            The number for which to determine the sign
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}e
	   *            The sign of `x`
	   */
	  var sign = typed('sign', {
	    'number': number.sign,

	    'Complex': function (x) {
	      var abs = Math.sqrt(x.re * x.re + x.im * x.im);
	      return new type.Complex(x.re / abs, x.im / abs);
	    },

	    'BigNumber': function (x) {
	      return new type.BigNumber(x.cmp(0));
	    },

	    'Fraction': function (x) {
	      return new type.Fraction(x.s);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since sign(0) = 0
	      return deepMap(x, sign, true);
	    }
	  });

	  sign.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return sign;
	}

	exports.name = 'sign';
	exports.factory = factory;



/***/ },
/* 133 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/square.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Compute the square of a value, `x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.square(x)
	   *
	   * Examples:
	   *
	   *    math.square(2);           // returns number 4
	   *    math.square(3);           // returns number 9
	   *    math.pow(3, 2);           // returns number 9
	   *    math.multiply(3, 3);      // returns number 9
	   *
	   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]
	   *
	   * See also:
	   *
	   *    multiply, cube, sqrt, pow
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x
	   *            Number for which to calculate the square
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}
	   *            Squared value
	   */
	  var square = typed('square', {
	    'number': function (x) {
	      return x * x;
	    },

	    'Complex': function (x) {
	      return new type.Complex(
	          x.re * x.re - x.im * x.im,
	          x.re * x.im + x.im * x.re
	      );
	    },

	    'BigNumber': function (x) {
	      return x.times(x);
	    },

	    'Fraction': function (x) {
	      return x.clone().mul(x);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since square(0) = 0
	      return deepMap(x, square, true);
	    }
	  });

	  square.toTex = '\\left(${args[0]}\\right)^2';

	  return square;
	}

	exports.name = 'square';
	exports.factory = factory;


/***/ },
/* 134 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/unaryPlus.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Unary plus operation.
	   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.unaryPlus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryPlus(3.5);      // returns 3.5
	   *    math.unaryPlus(1);     // returns 1
	   *
	   * See also:
	   *
	   *    unaryMinus, add, subtract
	   *
	   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
	   *            Input value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns the input value when numeric, converts to a number when input is non-numeric.
	   */
	  var unaryPlus = typed('unaryPlus', {
	    'number': function (x) {
	      return x;
	    },

	    'Complex': function (x) {
	      return x.clone();
	    },

	    'BigNumber': function (x) {
	      return x; // bignumbers are immutable
	    },

	    'Fraction': function (x) {
	      return x; // fractions are immutable
	    },

	    'Unit': function (x) {
	      return x.clone();
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since unaryPlus(0) = 0
	      return deepMap(x, unaryPlus, true);
	    },

	    'boolean | string | null': function (x) {
	      // convert to a number or bignumber
	      return (config.number == 'bignumber') ? new type.BigNumber(+x): +x;
	    }
	  });

	  unaryPlus.toTex = latex.operators['unaryPlus'] + '\\left(${args[0]}\\right)'

	  return unaryPlus;
	}

	exports.name = 'unaryPlus';
	exports.factory = factory;


/***/ },
/* 135 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/arithmetic/xgcd.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Calculate the extended greatest common divisor for two values.
	   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
	   *
	   * Syntax:
	   *
	   *    math.xgcd(a, b)
	   *
	   * Examples:
	   *
	   *    math.xgcd(8, 12);             // returns [4, -1, 1]
	   *    math.gcd(8, 12);              // returns 4
	   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]
	   *
	   * See also:
	   *
	   *    gcd, lcm
	   *
	   * @param {number | BigNumber} a  An integer number
	   * @param {number | BigNumber} b  An integer number
	   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
	   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
	   */
	  var xgcd = typed('xgcd', {
	    'number, number': _xgcd,
	    'BigNumber, BigNumber': _xgcdBigNumber
	    // TODO: implement support for Fraction
	  });

	  xgcd.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return xgcd;

	  /**
	   * Calculate xgcd for two numbers
	   * @param {number} a
	   * @param {number} b
	   * @return {number} result
	   * @private
	   */
	  function _xgcd (a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var t, // used to swap two variables
	        q, // quotient
	        r, // remainder
	        x = 0, lastx = 1,
	        y = 1, lasty = 0;

	    if (!isInteger(a) || !isInteger(b)) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }

	    while (b) {
	      q = Math.floor(a / b);
	      r = a % b;

	      t = x;
	      x = lastx - q * x;
	      lastx = t;

	      t = y;
	      y = lasty - q * y;
	      lasty = t;

	      a = b;
	      b = r;
	    }

	    var res;
	    if (a < 0) {
	      res = [-a, -lastx, -lasty];
	    }
	    else {
	      res = [a, a ? lastx : 0, lasty];
	    }
	    return (config.matrix === 'array') ? res : matrix(res);
	  }

	  /**
	   * Calculate xgcd for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @return {BigNumber[]} result
	   * @private
	   */
	  function _xgcdBigNumber(a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var t, // used to swap two variables
	        q, // quotient
	        r, // remainder
	        zero = new type.BigNumber(0),
	        x = new type.BigNumber(0), lastx = new type.BigNumber(1),
	        y = new type.BigNumber(1), lasty = new type.BigNumber(0);

	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }

	    while (!b.isZero()) {
	      q = a.div(b).floor();
	      r = a.mod(b);

	      t = x;
	      x = lastx.minus(q.times(x));
	      lastx = t;

	      t = y;
	      y = lasty.minus(q.times(y));
	      lasty = t;

	      a = b;
	      b = r;
	    }

	    var res;
	    if (a.lt(zero)) {
	      res = [a.neg(), lastx.neg(), lasty.neg()];
	    }
	    else {
	      res = [a, !a.isZero() ? lastx : 0, lasty];
	    }
	    return (config.matrix === 'array') ? res : matrix(res);
	  }
	}

	exports.name = 'xgcd';
	exports.factory = factory;


/***/ },
/* 136 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/function/bitwise/index.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./bitAnd */ 137),
	  __webpack_require__(/*! ./bitNot */ 141),
	  __webpack_require__(/*! ./bitOr */ 142),
	  __webpack_require__(/*! ./bitXor */ 144),
	  __webpack_require__(/*! ./leftShift */ 146),
	  __webpack_require__(/*! ./rightArithShift */ 149),
	  __webpack_require__(/*! ./rightLogShift */ 151)
	];


/***/ },
/* 137 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/bitwise/bitAnd.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var bigBitAnd = __webpack_require__(/*! ../../utils/bignumber/bitAnd */ 138);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm06 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm06 */ 123));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  /**
	   * Bitwise AND two values, `x & y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitAnd(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitAnd(53, 131);               // returns number 1
	   *
	   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]
	   *
	   * See also:
	   *
	   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to and
	   * @param  {number | BigNumber | Array | Matrix} y Second value to and
	   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
	   */
	  var bitAnd = typed('bitAnd', {

	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function bitAnd');
	      }

	      return x & y;
	    },

	    'BigNumber, BigNumber': bigBitAnd,

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm06(x, y, bitAnd, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, bitAnd, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm02(x, y, bitAnd, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, bitAnd);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return bitAnd(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return bitAnd(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return bitAnd(x, matrix(y));
	    },
	    
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, bitAnd, false);
	          break;
	        default:
	          c = algorithm14(x, y, bitAnd, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, bitAnd, true);
	          break;
	        default:
	          c = algorithm14(y, x, bitAnd, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, bitAnd, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, bitAnd, true).valueOf();
	    }
	  });

	  bitAnd.toTex = '\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\right)';

	  return bitAnd;
	}

	exports.name = 'bitAnd';
	exports.factory = factory;


/***/ },
/* 138 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/bitAnd.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	var bitwise = __webpack_require__(/*! ./bitwise */ 139);

	/**
	 * Bitwise and for Bignumbers
	 *
	 * Special Cases:
	 *   N &  n =  N
	 *   n &  0 =  0
	 *   n & -1 =  n
	 *   n &  n =  n
	 *   I &  I =  I
	 *  -I & -I = -I
	 *   I & -I =  0
	 *   I &  n =  n
	 *   I & -n =  I
	 *  -I &  n =  0
	 *  -I & -n = -I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` & `y`, is fully precise
	 * @private
	 */
	module.exports = function bitAnd(x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function bitAnd');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  if (x.isZero() || y.eq(-1) || x.eq(y)) {
	    return x;
	  }
	  if (y.isZero() || x.eq(-1)) {
	    return y;
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      if (x.isNegative() == y.isNegative()) {
	        return x;
	      }
	      return new BigNumber(0);
	    }
	    if (!x.isFinite()) {
	      if (y.isNegative()) {
	        return x;
	      }
	      if (x.isNegative()) {
	        return new BigNumber(0);
	      }
	      return y;
	    }
	    if (!y.isFinite()) {
	      if (x.isNegative()) {
	        return y;
	      }
	      if (y.isNegative()) {
	        return new BigNumber(0);
	      }
	      return x;
	    }
	  }
	  return bitwise(x, y, function (a, b) { return a & b });
	};


/***/ },
/* 139 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/bitwise.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	var bitNot = __webpack_require__(/*! ./bitNot */ 140);

	/**
	 * Applies bitwise function to numbers
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @param {function (a, b)} func
	 * @return {BigNumber}
	 */
	module.exports = function bitwise(x, y, func) {
	  var BigNumber = x.constructor;

	  var xBits, yBits;
	  var xSign = +(x.s < 0);
	  var ySign = +(y.s < 0);
	  if (xSign) {
	    xBits = decCoefficientToBinaryString(bitNot(x));
	    for (var i = 0; i < xBits.length; ++i) {
	      xBits[i] ^= 1;
	    }
	  } else {
	    xBits = decCoefficientToBinaryString(x);
	  }
	  if (ySign) {
	    yBits = decCoefficientToBinaryString(bitNot(y));
	    for (var i = 0; i < yBits.length; ++i) {
	      yBits[i] ^= 1;
	    }
	  } else {
	    yBits = decCoefficientToBinaryString(y);
	  }

	  var minBits, maxBits, minSign;
	  if (xBits.length <= yBits.length) {
	    minBits = xBits;
	    maxBits = yBits;
	    minSign = xSign;
	  } else {
	    minBits = yBits;
	    maxBits = xBits;
	    minSign = ySign;
	  }

	  var shortLen = minBits.length;
	  var longLen = maxBits.length;
	  var expFuncVal = func(xSign, ySign) ^ 1;
	  var outVal = new BigNumber(expFuncVal ^ 1);
	  var twoPower = BigNumber.ONE;
	  var two = new BigNumber(2);

	  var prevPrec = BigNumber.precision;
	  BigNumber.config({precision: 1E9});

	  while (shortLen > 0) {
	    if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }
	    twoPower = twoPower.times(two);
	  }
	  while (longLen > 0) {
	    if (func(minSign, maxBits[--longLen]) == expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }
	    twoPower = twoPower.times(two);
	  }

	  BigNumber.config({precision: prevPrec});

	  if (expFuncVal == 0) {
	    outVal.s = -outVal.s;
	  }
	  return outVal;
	};

	/* Extracted from decimal.js, and edited to specialize. */
	function decCoefficientToBinaryString (x) {
	  // Convert to string
	  var a = x.c;
	  var r = a[0] + '';

	  for (var i = 1; i < a.length; ++i) {
	    var s = a[i] + '';
	    for (var z = 7 - s.length; z--; ) {
	      s = '0' + s;
	    }

	    r += s;
	  }

	  var j;
	  for (j = r.length - 1; r.charAt(j) == '0'; --j);

	  var xe = x.e;
	  var str = r.slice(0, j + 1 || 1);
	  var strL = str.length;
	  if (xe > 0) {
	    if (++xe > strL) {
	      // Append zeros.
	      for (xe -= strL; xe--; str += '0');
	    } else if (xe < strL) {
	      str = str.slice(0, xe) + '.' + str.slice(xe);
	    }
	  }

	  // Convert from base 10 (decimal) to base 2
	  var arr = [0];
	  for (var i = 0; i < str.length; ) {
	    for (var arrL = arr.length; arrL--; arr[arrL] *= 10);

	    arr[0] += str.charAt(i++) << 0;  // convert to int
	    for (var j = 0; j < arr.length; ++j) {
	      if (arr[j] > 1) {
	        if (arr[j + 1] == null) {
	          arr[j + 1] = 0;
	        }

	        arr[j + 1] += arr[j] >> 1;
	        arr[j] &= 1;
	      }
	    }
	  }

	  return arr.reverse();
	}


/***/ },
/* 140 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/bitNot.js ***!
  \************************************************/
/***/ function(module, exports) {

	/**
	 * Bitwise not
	 * @param {BigNumber} value
	 * @return {BigNumber} Result of ~`x`, fully precise
	 *
	 */
	module.exports = function bitNot (x) {
	  if (x.isFinite() && !x.isInteger()) {
	    throw new Error('Integer expected in function bitNot');
	  }

	  var BigNumber = x.constructor;
	  var prevPrec = BigNumber.precision;
	  BigNumber.config({precision: 1E9});

	  var x = x.plus(BigNumber.ONE);
	  x.s = -x.s || null;

	  BigNumber.config({precision: prevPrec});
	  return x;
	};


/***/ },
/* 141 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/bitwise/bitNot.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var bigBitNot = __webpack_require__(/*! ../../utils/bignumber/bitNot */ 140);
	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Bitwise NOT value, `~x`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.bitNot(x)
	   *
	   * Examples:
	   *
	   *    math.bitNot(1);               // returns number -2
	   *
	   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]
	   *
	   * See also:
	   *
	   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to not
	   * @return {number | BigNumber | Array | Matrix} NOT of `x`
	   */
	  var bitNot = typed('bitNot', {
	    'number': function (x) {
	      if (!isInteger(x)) {
	        throw new Error('Integer expected in function bitNot');
	      }

	      return ~x;
	    },

	    'BigNumber': bigBitNot,

	    'Array | Matrix': function (x) {
	      return deepMap(x, bitNot);
	    }
	  });

	  bitNot.toTex = latex.operators['bitNot'] + '\\left(${args[0]}\\right)';

	  return bitNot;
	}

	exports.name = 'bitNot';
	exports.factory = factory;


/***/ },
/* 142 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/function/bitwise/bitOr.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var bigBitOr = __webpack_require__(/*! ../../utils/bignumber/bitOr */ 143);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm01 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm01 */ 46));
	  var algorithm04 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm04 */ 61));
	  var algorithm10 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm10 */ 50));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  /**
	   * Bitwise OR two values, `x | y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the lowest print base.
	   *
	   * Syntax:
	   *
	   *    math.bitOr(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitOr(1, 2);               // returns number 3
	   *
	   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to or
	   * @param  {number | BigNumber | Array | Matrix} y Second value to or
	   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
	   */
	  var bitOr = typed('bitOr', {

	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function bitOr');
	      }

	      return x | y;
	    },

	    'BigNumber, BigNumber': bigBitOr,

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm04(x, y, bitOr);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm01(y, x, bitOr, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm01(x, y, bitOr, false);
	              break;
	            default:
	              c = algorithm13(x, y, bitOr);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return bitOr(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return bitOr(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return bitOr(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm10(x, y, bitOr, false);
	          break;
	        default:
	          c = algorithm14(x, y, bitOr, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, bitOr, true);
	          break;
	        default:
	          c = algorithm14(y, x, bitOr, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, bitOr, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, bitOr, true).valueOf();
	    }
	  });

	  bitOr.toTex = '\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\right)';

	  return bitOr;
	}

	exports.name = 'bitOr';
	exports.factory = factory;


/***/ },
/* 143 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/bitOr.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	var bitwise = __webpack_require__(/*! ./bitwise */ 139);

	/**
	 * Bitwise OR for BigNumbers
	 *
	 * Special Cases:
	 *   N |  n =  N
	 *   n |  0 =  n
	 *   n | -1 = -1
	 *   n |  n =  n
	 *   I |  I =  I
	 *  -I | -I = -I
	 *   I | -n = -1
	 *   I | -I = -1
	 *   I |  n =  I
	 *  -I |  n = -I
	 *  -I | -n = -n
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` | `y`, fully precise
	 */
	module.exports = function bitOr (x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function bitOr');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  var negOne = new BigNumber(-1);
	  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
	    return y;
	  }
	  if (y.isZero() || x.eq(negOne)) {
	    return x;
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if ((!x.isFinite() && !x.isNegative() && y.isNegative()) ||
	        (x.isNegative() && !y.isNegative() && !y.isFinite())) {
	      return negOne;
	    }
	    if (x.isNegative() && y.isNegative()) {
	      return x.isFinite() ? x : y;
	    }
	    return x.isFinite() ? y : x;
	  }

	  return bitwise(x, y, function (a, b) { return a | b });
	};


/***/ },
/* 144 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/bitwise/bitXor.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var bigBitXor = __webpack_require__(/*! ../../utils/bignumber/bitXor */ 145);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Bitwise XOR two values, `x ^ y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitXor(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitXor(1, 2);               // returns number 3
	   *
	   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to xor
	   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
	   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
	   */
	  var bitXor = typed('bitXor', {

	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function bitXor');
	      }

	      return x ^ y;
	    },

	    'BigNumber, BigNumber': bigBitXor,

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, bitXor);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, bitXor, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, bitXor, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, bitXor);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return bitXor(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return bitXor(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return bitXor(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, bitXor, false);
	          break;
	        default:
	          c = algorithm14(x, y, bitXor, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, bitXor, true);
	          break;
	        default:
	          c = algorithm14(y, x, bitXor, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, bitXor, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, bitXor, true).valueOf();
	    }
	  });

	  bitXor.toTex = '\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\right)';

	  return bitXor;
	}

	exports.name = 'bitXor';
	exports.factory = factory;


/***/ },
/* 145 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/bitXor.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	var bitwise = __webpack_require__(/*! ./bitwise */ 139);
	var bitNot = __webpack_require__(/*! ./bitNot */ 140);

	/**
	 * Bitwise XOR for BigNumbers
	 *
	 * Special Cases:
	 *   N ^  n =  N
	 *   n ^  0 =  n
	 *   n ^  n =  0
	 *   n ^ -1 = ~n
	 *   I ^  n =  I
	 *   I ^ -n = -I
	 *   I ^ -I = -1
	 *  -I ^  n = -I
	 *  -I ^ -n =  I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` ^ `y`, fully precise
	 *
	 */
	module.exports = function bitXor(x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function bitXor');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero()) {
	    return y;
	  }
	  if (y.isZero()) {
	    return x;
	  }

	  if (x.eq(y)) {
	    return new BigNumber(0);
	  }

	  var negOne = new BigNumber(-1);
	  if (x.eq(negOne)) {
	    return bitNot(y);
	  }
	  if (y.eq(negOne)) {
	    return bitNot(x);
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      return negOne;
	    }
	    return new BigNumber(x.isNegative() == y.isNegative()
	        ?  Infinity
	        : -Infinity);
	  }
	  return bitwise(x, y, function (a, b) { return a ^ b });
	};


/***/ },
/* 146 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/bitwise/leftShift.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var bigLeftShift = __webpack_require__(/*! ../../utils/bignumber/leftShift */ 147);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var equalScalar = load(__webpack_require__(/*! ../relational/equalScalar */ 49));
	  var zeros = load(__webpack_require__(/*! ../matrix/zeros */ 76));

	  var algorithm01 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm01 */ 46));
	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm08 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm08 */ 148));
	  var algorithm10 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm10 */ 50));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.leftShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.leftShift(1, 2);               // returns number 4
	   *
	   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]
	   *
	   * See also:
	   *
	   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
	   */
	  var leftShift = typed('leftShift', {
	    
	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function leftShift');
	      }

	      return x << y;
	    },

	    'BigNumber, BigNumber': bigLeftShift,

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm08(x, y, leftShift, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, leftShift, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm01(x, y, leftShift, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, leftShift);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return leftShift(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return leftShift(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return leftShift(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function (x, y) {
	      // check scalar
	      if (!equalScalar(y, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (x.storage()) {
	          case 'sparse':
	            c = algorithm11(x, y, leftShift, false);
	            break;
	          default:
	            c = algorithm14(x, y, leftShift, false);
	            break;
	        }
	        return c;
	      }
	      return x.clone();
	    },

	    'number | BigNumber, Matrix': function (x, y) {
	      // check scalar
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm10(y, x, leftShift, true);
	            break;
	          default:
	            c = algorithm14(y, x, leftShift, true);
	            break;
	        }
	        return c;
	      }
	      return zeros(y.size(), y.storage());
	    },

	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return leftShift(matrix(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return leftShift(x, matrix(y)).valueOf();
	    }
	  });

	  leftShift.toTex = '\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\right)';

	  return leftShift;
	}

	exports.name = 'leftShift';
	exports.factory = factory;


/***/ },
/* 147 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/leftShift.js ***!
  \***************************************************/
/***/ function(module, exports) {

	
	/**
	 * Bitwise left shift
	 *
	 * Special Cases:
	 *  n << -n = N
	 *  n <<  N = N
	 *  N <<  n = N
	 *  n <<  0 = n
	 *  0 <<  n = 0
	 *  I <<  I = N
	 *  I <<  n = I
	 *  n <<  I = I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` << `y`
	 *
	 */
	module.exports = function leftShift (x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function leftShift');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero() || y.isZero()) {
	    return x;
	  }
	  if (!x.isFinite() && !y.isFinite()) {
	    return new BigNumber(NaN);
	  }

	  // Math.pow(2, y) is fully precise for y < 55, and fast
	  if (y.lt(55)) {
	    return x.times(Math.pow(2, y.toNumber()) + '');
	  }
	  return x.times(new BigNumber(2).pow(y));
	};


/***/ },
/* 148 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/utils/algorithm08.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DimensionError = __webpack_require__(/*! ../../../error/DimensionError */ 38);

	function factory (type, config, load, typed) {

	  var equalScalar = load(__webpack_require__(/*! ../../../function/relational/equalScalar */ 49));

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm08 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;

	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);

	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues || !bvalues)
	      throw new Error('Cannot perform operation on Pattern Sparse Matrices');

	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];

	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;

	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }

	    // result arrays
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });

	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];

	    // vars
	    var k, k0, k1, i;

	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop values in a
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // mark workspace
	        w[i] = mark;
	        // set value
	        x[i] = avalues[k];
	        // add index
	        cindex.push(i);
	      }
	      // loop values in b
	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check value exists in workspace
	        if (w[i] === mark) {
	          // evaluate callback
	          x[i] = cf(x[i], bvalues[k]);
	        }
	      }
	      // initialize first index in j
	      k = cptr[j];
	      // loop index in j
	      while (k < cindex.length) {
	        // row
	        i = cindex[k];
	        // value @ i
	        var v = x[i];
	        // check for zero value
	        if (!eq(v, zero)) {
	          // push value
	          cvalues.push(v);
	          // increment pointer
	          k++;
	        }
	        else {
	          // remove value @ i, do not increment pointer
	          cindex.splice(k, 1);
	        }
	      }      
	    }
	    // update cptr
	    cptr[columns] = cindex.length;

	    // return sparse matrix
	    return c;
	  };

	  return algorithm08;
	}

	exports.name = 'algorithm08';
	exports.factory = factory;


/***/ },
/* 149 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/function/bitwise/rightArithShift.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var bigRightArithShift = __webpack_require__(/*! ../../utils/bignumber/rightArithShift */ 150);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);
	  
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var equalScalar = load(__webpack_require__(/*! ../relational/equalScalar */ 49));
	  var zeros = load(__webpack_require__(/*! ../matrix/zeros */ 76));

	  var algorithm01 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm01 */ 46));
	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm08 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm08 */ 148));
	  var algorithm10 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm10 */ 50));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightArithShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightArithShift(4, 2);               // returns number 1
	   *
	   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
	   */
	  var rightArithShift = typed('rightArithShift', {

	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function rightArithShift');
	      }

	      return x >> y;
	    },

	    'BigNumber, BigNumber': bigRightArithShift,

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm08(x, y, rightArithShift, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, rightArithShift, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm01(x, y, rightArithShift, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, rightArithShift);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function (x, y) {
	      // check scalar
	      if (!equalScalar(y, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (x.storage()) {
	          case 'sparse':
	            c = algorithm11(x, y, rightArithShift, false);
	            break;
	          default:
	            c = algorithm14(x, y, rightArithShift, false);
	            break;
	        }
	        return c;
	      }
	      return x.clone();
	    },

	    'number | BigNumber, Matrix': function (x, y) {
	      // check scalar
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm10(y, x, rightArithShift, true);
	            break;
	          default:
	            c = algorithm14(y, x, rightArithShift, true);
	            break;
	        }
	        return c;
	      }
	      return zeros(y.size(), y.storage());
	    },

	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(matrix(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(x, matrix(y)).valueOf();
	    }
	  });

	  rightArithShift.toTex = '\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\right)';

	  return rightArithShift;
	}

	exports.name = 'rightArithShift';
	exports.factory = factory;


/***/ },
/* 150 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/rightArithShift.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	/*
	 * Special Cases:
	 *   n >> -n =  N
	 *   n >>  N =  N
	 *   N >>  n =  N
	 *   I >>  I =  N
	 *   n >>  0 =  n
	 *   I >>  n =  I
	 *  -I >>  n = -I
	 *  -I >>  I = -I
	 *   n >>  I =  I
	 *  -n >>  I = -1
	 *   0 >>  n =  0
	 *
	 * @param {BigNumber} value
	 * @param {BigNumber} value
	 * @return {BigNumber} Result of `x` >> `y`
	 *
	 */
	module.exports = function rightArithShift (x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function rightArithShift');
	  }

	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero() || y.isZero()) {
	    return x;
	  }
	  if (!y.isFinite()) {
	    if (x.isNegative()) {
	      return new BigNumber(-1);
	    }
	    if (!x.isFinite()) {
	      return new BigNumber(NaN);
	    }
	    return new BigNumber(0);
	  }

	  // Math.pow(2, y) is fully precise for y < 55, and fast
	  if (y.lt(55)) {
	    return x.div(Math.pow(2, y.toNumber()) + '').floor();
	  }
	  return x.div(new BigNumber(2).pow(y)).floor();
	};


/***/ },
/* 151 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/bitwise/rightLogShift.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var equalScalar = load(__webpack_require__(/*! ../relational/equalScalar */ 49));
	  var zeros = load(__webpack_require__(/*! ../matrix/zeros */ 76));

	  var algorithm01 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm01 */ 46));
	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm08 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm08 */ 148));
	  var algorithm10 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm10 */ 50));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  /**
	   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightLogShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightLogShift(4, 2);               // returns number 1
	   *
	   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
	   *
	   * @param  {number | Array | Matrix} x Value to be shifted
	   * @param  {number} y Amount of shifts
	   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
	   */

	  var rightLogShift = typed('rightLogShift', {

	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function rightLogShift');
	      }

	      return x >>> y;
	    },

	    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm08(x, y, rightLogShift, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, rightLogShift, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm01(x, y, rightLogShift, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, rightLogShift);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function (x, y) {
	      // check scalar
	      if (!equalScalar(y, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (x.storage()) {
	          case 'sparse':
	            c = algorithm11(x, y, rightLogShift, false);
	            break;
	          default:
	            c = algorithm14(x, y, rightLogShift, false);
	            break;
	        }
	        return c;
	      }
	      return x.clone();
	    },

	    'number | BigNumber, Matrix': function (x, y) {
	      // check scalar
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm10(y, x, rightLogShift, true);
	            break;
	          default:
	            c = algorithm14(y, x, rightLogShift, true);
	            break;
	        }
	        return c;
	      }
	      return zeros(y.size(), y.storage());
	    },

	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix(x), y).valueOf();
	    },

	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix(y)).valueOf();
	    }
	  });

	  rightLogShift.toTex = '\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\right)';

	  return rightLogShift;
	}

	exports.name = 'rightLogShift';
	exports.factory = factory;


/***/ },
/* 152 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/function/combinatorics/index.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./bellNumbers */ 153),
	  __webpack_require__(/*! ./composition */ 162),
	  __webpack_require__(/*! ./stirlingS2 */ 154)
	];


/***/ },
/* 153 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/function/combinatorics/bellNumbers.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(/*! ../arithmetic/add */ 60));
	  var stirlingS2 = load(__webpack_require__(/*! ./stirlingS2 */ 154));
	  var isNegative = load(__webpack_require__(/*! ../utils/isNegative */ 160));
	  var isInteger = load(__webpack_require__(/*! ../utils/isInteger */ 161));

	  /**
	   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
	   * bellNumbers only takes integer arguments.
	   * The following condition must be enforced: n >= 0
	   *
	   * Syntax:
	   *
	   *   math.bellNumbers(n)
	   *
	   * Examples:
	   *
	   *    math.bellNumbers(3); // returns 5;
	   *    math.bellNumbers(8); // returns 4140;
	   *
	   * See also:
	   *
	   *    stirlingS2
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @return {Number | BigNumber}     B(n)
	   */
	  var bellNumbers = typed('bellNumbers', {
	    'number | BigNumber': function (n) {

	      if (!isInteger(n) || isNegative(n)) {
	        throw new TypeError('Non-negative integer value expected in function bellNumbers');
	      }

	      // Sum (k=0, n) S(n,k).
	      var result = 0;
	      for(var i = 0; i <= n; i++) {
	        result = add(result, stirlingS2(n, i));
	      }

	      return result;
	    }
	  });

	  bellNumbers.toTex = '\\mathrm{B}_{${args[0]}}';

	  return bellNumbers;
	}

	exports.name = 'bellNumbers';
	exports.factory = factory;


/***/ },
/* 154 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/function/combinatorics/stirlingS2.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(/*! ../arithmetic/add */ 60));
	  var subtract = load(__webpack_require__(/*! ../arithmetic/subtract */ 41));
	  var multiply = load(__webpack_require__(/*! ../arithmetic/multiply */ 56));
	  var divide = load(__webpack_require__(/*! ../arithmetic/divide */ 110));
	  var pow = load(__webpack_require__(/*! ../arithmetic/pow */ 116));
	  var factorial = load(__webpack_require__(/*! ../probability/factorial */ 155));
	  var combinations = load(__webpack_require__(/*! ../probability/combinations */ 159));
	  var isNegative = load(__webpack_require__(/*! ../utils/isNegative */ 160));
	  var isInteger = load(__webpack_require__(/*! ../utils/isInteger */ 161));
	  var larger = load(__webpack_require__(/*! ../relational/larger */ 80));

	  /**
	   * The Stirling numbers of the second kind, counts the number of ways to partition
	   * a set of n labelled objects into k nonempty unlabelled subsets.
	   * stirlingS2 only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   *  If n = k or k = 1, then s(n,k) = 1
	   *
	   * Syntax:
	   *
	   *   math.stirlingS2(n, k)
	   *
	   * Examples:
	   *
	   *    math.stirlingS2(5, 3); //returns 25
	   *
	   * See also:
	   *
	   *    Bell numbers
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     S(n,k)
	   */
	  var stirlingS2 = typed('stirlingS2', {
	    'number | BigNumber, number | BigNumber': function (n, k) {
	      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
	        throw new TypeError('Non-negative integer value expected in function stirlingS2');
	      }
	      else if (larger(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function stirlingS2');
	      }

	      // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]
	      var kFactorial = factorial(k);
	      var result = 0;
	      for(var i = 0; i <= k; i++) {
	        var negativeOne = pow(-1, subtract(k,i));
	        var kChooseI = combinations(k,i);
	        var iPower = pow(i,n);

	        result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));
	      }

	      return divide(result, kFactorial);
	    }
	  });

	  stirlingS2.toTex = '\\mathrm{S}\\left(${args[0]},${args[1]}\\right)';

	  return stirlingS2;
	}

	exports.name = 'stirlingS2';
	exports.factory = factory;


/***/ },
/* 155 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/probability/factorial.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var constants = __webpack_require__(/*! ../../utils/bignumber/constants */ 156);

	function factory (type, config, load, typed) {
	  var gamma = load(__webpack_require__(/*! ./gamma */ 158));
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Compute the factorial of a value
	   *
	   * Factorial only supports an integer value as argument.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.factorial(n)
	   *
	   * Examples:
	   *
	   *    math.factorial(5);    // returns 120
	   *    math.factorial(3);    // returns 6
	   *
	   * See also:
	   *
	   *    combinations, gamma, permutations
	   *
	   * @param {number | BigNumber | Array | Matrix} n   An integer number
	   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
	   */
	  var factorial = typed('factorial', {
	    'number': function (n) {
	      if (n === Number.POSITIVE_INFINITY) {
	       return Math.sqrt(2 * Math.PI);
	      }

	      return gamma(n + 1);
	    },

	    'BigNumber': function (n) {
	      if (!n.isFinite() && !n.isNegative()) {
	        return constants.tau(type.BigNumber).sqrt();
	      }

	      return gamma(n.plus(1));
	    },

	    'Array | Matrix': function (n) {
	      return deepMap(n, factorial);
	    }
	  });

	  factorial.toTex = '\\left(${args[0]}\\right)' + latex.operators['factorial'];

	  return factorial;
	}

	exports.name = 'factorial';
	exports.factory = factory;


/***/ },
/* 156 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/constants.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(/*! ../function */ 54).memoize;
	var atan = __webpack_require__(/*! ./atan */ 157);

	/**
	 * Calculate BigNumber e
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns e
	 */
	exports.e = memoize(function (BigNumber) {
	  return new BigNumber(1).exp();
	}, hasher);

	/**
	 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns phi
	 */
	exports.phi = memoize(function (BigNumber) {
	  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
	}, hasher);

	/**
	 * Calculate BigNumber pi.
	 *
	 * Uses Machin's formula: pi / 4 = 4 * arctan(1 / 5) - arctan(1 / 239)
	 * http://milan.milanovic.org/math/english/pi/machin.html
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns pi
	 */
	exports.pi = memoize(function (BigNumber) {
	  // we calculate pi with a few decimal places extra to prevent round off issues
	  var Big = BigNumber.constructor({precision: BigNumber.precision + 4});
	  var pi4th = new Big(4).times(atan(new Big(1).div(5)))
	      .minus(atan(new Big(1).div(239)));

	  // the final pi has the requested number of decimals
	  return new BigNumber(4).times(pi4th);
	}, hasher);

	/**
	 * Calculate BigNumber tau, tau = 2 * pi
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns tau
	 */
	exports.tau = memoize(function (BigNumber) {
	  // we calculate pi at a slightly higher precision than configured to prevent round off errors
	  // when multiplying by two in the end

	  var pi = exports.pi(BigNumber.constructor({precision: BigNumber.precision + 2}));

	  return new BigNumber(2).times(pi);
	}, hasher);

	/**
	 * Create a hash for a BigNumber constructor function. The created has is
	 * the configured precision
	 * @param {Array} args         Supposed to contain a single entry with
	 *                             a BigNumber constructor
	 * @return {number} precision
	 * @private
	 */
	function hasher (args) {
	  return args[0].precision;
	}


/***/ },
/* 157 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/atan.js ***!
  \**********************************************/
/***/ function(module, exports) {

	/**
	 * Calculate the arc tangent of x using a Taylor expansion
	 *
	 * arctan(x) = x - x^3/3 + x^5/5 - x^7/7 + x^9/9 - ...
	 *           = x - x^2*x^1/3 + x^2*x^3/5 - x^2*x^5/7 + x^2*x^7/9 - ...
	 *
	 * @param {BigNumber} x
	 * @returns {BigNumber} arc tangent of x
	 */
	module.exports = function atan(x) {
	  var y = x;
	  var yPrev = NaN;
	  var x2 = x.times(x);
	  var num = x;
	  var add = true;

	  for (var k = 3; !y.equals(yPrev); k += 2) {
	    num = num.times(x2);

	    yPrev = y;
	    add = !add;
	    y = (add) ? y.plus(num.div(k)) : y.minus(num.div(k));
	  }

	  return y;
	};


/***/ },
/* 158 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/probability/gamma.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {
	  var multiply = load(__webpack_require__(/*! ../arithmetic/multiply */ 56));
	  var pow = load(__webpack_require__(/*! ../arithmetic/pow */ 116));

	  /**
	   * Compute the gamma function of a value using Lanczos approximation for
	   * small values, and an extended Stirling approximation for large values.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gamma(n)
	   *
	   * Examples:
	   *
	   *    math.gamma(5);       // returns 24
	   *    math.gamma(-0.5);    // returns -3.5449077018110335
	   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i
	   *
	   * See also:
	   *
	   *    combinations, factorial, permutations
	   *
	   * @param {number | Array | Matrix} n   A real or complex number
	   * @return {number | Array | Matrix}    The gamma of `n`
	   */
	  var gamma = typed('gamma', {
	    'number': function (n) {
	      var t, x;

	      if (isInteger(n)) {
	        if (n <= 0) {
	          return isFinite(n) ? Infinity : NaN;
	        }

	        if (n > 171) {
	          return Infinity;                  // Will overflow
	        }

	        var value = n - 2;
	        var res = n - 1;
	        while (value > 1) {
	          res *= value;
	          value--;
	        }

	        if (res == 0) {
	          res = 1;                          // 0! is per definition 1
	        }

	        return res;
	      }

	      if (n < 0.5) {
	        return Math.PI / (Math.sin(Math.PI * n) * gamma(1-n));
	      }

	      if (n >= 171.35) {
	        return Infinity;                    // will overflow
	      }

	      if (n > 85.0) {                       // Extended Stirling Approx
	        var twoN = n*n;
	        var threeN = twoN*n;
	        var fourN = threeN*n;
	        var fiveN = fourN*n;
	        return Math.sqrt(2*Math.PI/n) * Math.pow((n/Math.E), n) *
	            (1 + 1/(12*n) + 1/(288*twoN) - 139/(51840*threeN) -
	            571/(2488320*fourN) + 163879/(209018880*fiveN) +
	            5246819/(75246796800*fiveN*n));
	      }

	      --n;
	      x = p[0];
	      for (var i = 1; i < p.length; ++i) {
	        x += p[i] / (n+i);
	      }

	      t = n + g + 0.5;
	      return Math.sqrt(2*Math.PI) * Math.pow(t, n+0.5) * Math.exp(-t) * x;
	    },

	    'Complex': function (n) {
	      var t, x;

	      if (n.im == 0) {
	        return gamma(n.re);
	      }

	      n = new type.Complex(n.re - 1, n.im);
	      x = new type.Complex(p[0], 0);
	      for (var i = 1; i < p.length; ++i) {
	        var real = n.re + i;                // x += p[i]/(n+i)
	        var den = real*real + n.im*n.im;
	        if (den != 0) {
	          x.re += p[i] * real / den;
	          x.im += -(p[i] * n.im) / den;
	        } else {
	          x.re = p[i] < 0
	              ? -Infinity
	              :  Infinity;
	        }
	      }

	      t = new type.Complex(n.re + g + 0.5, n.im);
	      var twoPiSqrt = Math.sqrt(2*Math.PI);

	      n.re += 0.5;
	      var result = pow(t, n);
	      if (result.im == 0) {                 // sqrt(2*PI)*result
	        result.re *= twoPiSqrt;
	      } else if (result.re == 0) {
	        result.im *= twoPiSqrt;
	      } else {
	        result.re *= twoPiSqrt;
	        result.im *= twoPiSqrt;
	      }

	      var r = Math.exp(-t.re);              // exp(-t)
	      t.re = r * Math.cos(-t.im);
	      t.im = r * Math.sin(-t.im);

	      return multiply(multiply(result, t), x);
	    },

	    'BigNumber': function (n) {
	      if (n.isInteger()) {
	        return (n.isNegative() || n.isZero())
	            ? new type.BigNumber(Infinity)
	            : bigFactorial(n.minus(1));
	      }

	      if (!n.isFinite()) {
	        return new type.BigNumber(n.isNegative() ? NaN : Infinity);
	      }

	      throw new Error('Integer BigNumber expected');
	    },

	    'Array | Matrix': function (n) {
	      return deepMap(n, gamma);
	    }
	  });

	  /**
	   * Calculate factorial for a BigNumber
	   * @param {BigNumber} n
	   * @returns {BigNumber} Returns the factorial of n
	   */
	  function bigFactorial(n) {
	    var value, res, preciseFacs;

	    var num = n.toNumber();   // should definitely be below Number.MAX_VALUE
	    if (num < smallBigFacs.length) {
	      return new type.BigNumber(smallBigFacs[num]).toSD(config.precision);
	    }

	    // be wary of round-off errors
	    var precision = config.precision + (Math.log(num) | 0);
	    var Big = type.BigNumber.constructor({precision: precision});

	    // adjust n do align with the precision specific tables
	    num -= smallBigFacs.length;
	    if (preciseFacs = bigBigFacs[precision]) {
	      if (preciseFacs[num]) {
	        return new type.BigNumber(preciseFacs[num].toPrecision(config.precision));
	      }
	      res = preciseFacs[preciseFacs.length-1];
	    } else {
	      preciseFacs = bigBigFacs[precision] = [];
	      res = new Big(smallBigFacs[smallBigFacs.length-1])
	          .toSD(precision);
	    }

	    var one = new Big(1);
	    value = new Big(preciseFacs.length + smallBigFacs.length);
	    for (var i = preciseFacs.length; i < num; ++i) {
	      preciseFacs[i] = res = res.times(value);
	      value = value.plus(one);
	    }

	    preciseFacs[num] = res.times(value);
	    return new type.BigNumber(preciseFacs[num].toPrecision(config.precision));
	  }

	  gamma.toTex = '\\Gamma\\left(${args[0]}\\right)';

	  return gamma;
	}

	// TODO: comment on the variables g and p

	var g = 4.7421875;

	var p = [
	  0.99999999999999709182,
	  57.156235665862923517,
	  -59.597960355475491248,
	  14.136097974741747174,
	  -0.49191381609762019978,
	  0.33994649984811888699e-4,
	  0.46523628927048575665e-4,
	  -0.98374475304879564677e-4,
	  0.15808870322491248884e-3,
	  -0.21026444172410488319e-3,
	  0.21743961811521264320e-3,
	  -0.16431810653676389022e-3,
	  0.84418223983852743293e-4,
	  -0.26190838401581408670e-4,
	  0.36899182659531622704e-5
	];

	// 21! >= values for each precision
	var bigBigFacs = [];

	// 0-20! values
	var smallBigFacs = [
	  1,
	  1,
	  2,
	  6,
	  24,
	  120,
	  720,
	  5040,
	  40320,
	  362880,
	  3628800,
	  39916800,
	  479001600,
	  6227020800,
	  87178291200,
	  1307674368000,
	  20922789888000,
	  355687428096000,
	  6402373705728000,
	  121645100408832000,
	  2432902008176640000
	];

	exports.name = 'gamma';
	exports.factory = factory;


/***/ },
/* 159 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/function/probability/combinations.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {
	  /**
	   * Compute the number of ways of picking `k` unordered outcomes from `n`
	   * possibilities.
	   *
	   * Combinations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.combinations(n, k)
	   *
	   * Examples:
	   *
	   *    math.combinations(7, 5); // returns 21
	   *
	   * See also:
	   *
	   *    permutations, factorial
	   *
	   * @param {number | BigNumber} n    Total number of objects in the set
	   * @param {number | BigNumber} k    Number of objects in the subset
	   * @return {number | BigNumber}     Number of possible combinations.
	   */
	  var combinations = typed('combinations', {
	    'number, number': function (n, k) {
	      var max, result, i;

	      if (!isInteger(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (k > n) {
	        throw new TypeError('k must be less than or equal to n');
	      }

	      max = Math.max(k, n - k);
	      result = 1;
	      for (i = 1; i <= n - max; i++) {
	        result = result * (max + i) / i;
	      }

	      return result;
	    },

	    'BigNumber, BigNumber': function (n, k) {
	      var max, result, i, ii;
	      var one = new type.BigNumber(1);

	      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (k.gt(n)) {
	        throw new TypeError('k must be less than n in function combinations');
	      }

	      max = n.minus(k);
	      if (k.lt(max)) max = k;
	      result = one;
	      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
	        result = result.times(max.plus(i)).dividedBy(i);
	      }

	      return result;
	    }

	    // TODO: implement support for collection in combinations
	  });

	  combinations.toTex = '\\binom{${args[0]}}{${args[1]}}';

	  return combinations;
	}

	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */
	function isPositiveInteger(n) {
	  return n.isInteger() && n.gte(0);
	}

	exports.name = 'combinations';
	exports.factory = factory;


/***/ },
/* 160 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/utils/isNegative.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var number = __webpack_require__(/*! ../../utils/number */ 24);

	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is negative: smaller than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNegative(x)
	   *
	   * Examples:
	   *
	   *    math.isNegative(3);                     // returns false
	   *    math.isNegative(-2);                    // returns true
	   *    math.isNegative(0);                     // returns false
	   *    math.isNegative(-0);                    // returns false
	   *    math.isNegative(math.bignumber(2));     // returns false
	   *    math.isNegative(math.fraction(-2, 5));  // returns true
	   *    math.isNegative('-2');                  // returns true
	   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isZero, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isNegative = typed('isNegative', {
	    'number': function (x) {
	      return x < 0;
	    },

	    'BigNumber': function (x) {
	      return x.isNeg() && !x.isZero() && !x.isNaN();
	    },

	    'Fraction': function (x) {
	      return x.s < 0 && x.n > 0;
	    },

	    'Unit': function (x) {
	      return x.value < 0;
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, isNegative);
	    }
	  });

	  return isNegative;
	}

	exports.name = 'isNegative';
	exports.factory = factory;


/***/ },
/* 161 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/utils/isInteger.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var number = __webpack_require__(/*! ../../utils/number */ 24);

	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is an integer number.
	   * The function supports `number`, `BigNumber`, and `Fraction`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isInteger(x)
	   *
	   * Examples:
	   *
	   *    math.isInteger(2);                     // returns true
	   *    math.isInteger(0);                     // returns true
	   *    math.isInteger(0.5);                   // returns false
	   *    math.isInteger(math.bignumber(500));   // returns true
	   *    math.isInteger(math.fraction(4));      // returns true
	   *    math.isInteger('3');                   // returns true
	   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]
	   *    math.isInteger(math.complex('2 - 4i'); // throws an error
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isZero
	   *
	   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
	   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isInteger = typed('isInteger', {
	    'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?

	    'BigNumber': function (x) {
	      return x.isInt();
	    },

	    'Fraction': function (x) {
	      return x.d === 1 && isFinite(x.n);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, isInteger);
	    }
	  });

	  return isInteger;
	}

	exports.name = 'isInteger';
	exports.factory = factory;


/***/ },
/* 162 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/function/combinatorics/composition.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var combinations = load(__webpack_require__(/*! ../probability/combinations */ 159));
	  var add = load(__webpack_require__(/*! ../arithmetic/addScalar */ 43));
	  var isPositive = load(__webpack_require__(/*! ../utils/isPositive */ 163));
	  var isInteger = load(__webpack_require__(/*! ../utils/isInteger */ 161));
	  var larger = load(__webpack_require__(/*! ../relational/larger */ 80));

	  /**
	   * The composition counts of n into k parts.
	   *
	   * composition only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *   math.composition(n, k)
	   *
	   * Examples:
	   *
	   *    math.composition(5, 3); // returns 6
	   *
	   * See also:
	   *
	   *    combinations
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
	   */
	  var composition =  typed('composition', {
	    'number | BigNumber, number | BigNumber': function (n, k) {
	      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
	        throw new TypeError('Positive integer value expected in function composition');
	      }
	      else if (larger(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function composition');
	      }

	      return combinations(add(n, -1), add(k, -1));
	    }
	  });

	  composition.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return composition;
	}

	exports.name = 'composition';
	exports.factory = factory;


/***/ },
/* 163 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/utils/isPositive.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var number = __webpack_require__(/*! ../../utils/number */ 24);

	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is positive: larger than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPositive(x)
	   *
	   * Examples:
	   *
	   *    math.isPositive(3);                     // returns true
	   *    math.isPositive(-2);                    // returns false
	   *    math.isPositive(0);                     // returns false
	   *    math.isPositive(-0);                    // returns false
	   *    math.isPositive(0.5);                   // returns true
	   *    math.isPositive(math.bignumber(2));     // returns true
	   *    math.isPositive(math.fraction(-2, 5));  // returns false
	   *    math.isPositive(math.fraction(1,3));    // returns false
	   *    math.isPositive('2');                   // returns true
	   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isPositive = typed('isPositive', {
	    'number': function (x) {
	      return x > 0;
	    },

	    'BigNumber': function (x) {
	      return !x.isNeg() && !x.isZero() && !x.isNaN();
	    },

	    'Fraction': function (x) {
	      return x.s > 0 && x.n > 0;
	    },

	    'Unit': function (x) {
	      return x.value > 0;
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, isPositive);
	    }
	  });

	  return isPositive;
	}

	exports.name = 'isPositive';
	exports.factory = factory;


/***/ },
/* 164 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/function/complex/index.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./arg */ 165),
	  __webpack_require__(/*! ./conj */ 166),
	  __webpack_require__(/*! ./im */ 167),
	  __webpack_require__(/*! ./re */ 168)
	];


/***/ },
/* 165 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/complex/arg.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Compute the argument of a complex value.
	   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.arg(x)
	   *
	   * Examples:
	   *
	   *    var a = math.complex(2, 2);
	   *    math.arg(a) / math.pi;          // returns number 0.25
	   *
	   *    var b = math.complex('2 + 3i');
	   *    math.arg(b);                    // returns number 0.982793723247329
	   *    math.atan2(3, 2);               // returns number 0.982793723247329
	   *
	   * See also:
	   *
	   *    re, im, conj, abs
	   *
	   * @param {number | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | Array | Matrix} The argument of x
	   */
	  var arg = typed('arg', {
	    'number': function (x) {
	      return Math.atan2(0, x);
	    },

	    'Complex': function (x) {
	      return Math.atan2(x.im, x.re);
	    },

	    // TODO: implement BigNumber support for function arg

	    'Array | Matrix': function (x) {
	      return deepMap(x, arg);
	    }
	  });

	  arg.toTex = '\\arg\\left(${args[0]}\\right)';

	  return arg;
	}

	exports.name = 'arg';
	exports.factory = factory;


/***/ },
/* 166 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/complex/conj.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Compute the complex conjugate of a complex value.
	   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.conj(x)
	   *
	   * Examples:
	   *
	   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i
	   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i
	   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i
	   *
	   * See also:
	   *
	   *    re, im, arg, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            The complex conjugate of x
	   */
	  var conj = typed('conj', {
	    'number': function (x) {
	      return x;
	    },

	    'BigNumber': function (x) {
	      return x;
	    },

	    'Complex': function (x) {
	      return new type.Complex(x.re, -x.im);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, conj);
	    }
	  });

	  conj.toTex = '\\left(${args[0]}\\right)^*';

	  return conj;
	}

	exports.name = 'conj';
	exports.factory = factory;


/***/ },
/* 167 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/function/complex/im.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Get the imaginary part of a complex number.
	   * For a complex number `a + bi`, the function returns `b`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.im(x)
	   *
	   * Examples:
	   *
	   *    var a = math.complex(2, 3);
	   *    math.re(a);                     // returns number 2
	   *    math.im(a);                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')); // returns number -5.2
	   *    math.re(math.complex(2.4));     // returns number 0
	   *
	   * See also:
	   *
	   *    re, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
	   */
	  var im = typed('im', {
	    'number': function (x) {
	      return 0;
	    },

	    'BigNumber': function (x) {
	      return new type.BigNumber(0);
	    },

	    'Complex': function (x) {
	      return x.im;
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, im);
	    }
	  });

	  im.toTex = '\\Im\\left\\lbrace${args[0]}\\right\\rbrace';

	  return im;
	}

	exports.name = 'im';
	exports.factory = factory;


/***/ },
/* 168 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/function/complex/re.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Get the real part of a complex number.
	   * For a complex number `a + bi`, the function returns `a`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.re(x)
	   *
	   * Examples:
	   *
	   *    var a = math.complex(2, 3);
	   *    math.re(a);                     // returns number 2
	   *    math.im(a);                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')); // returns number 0
	   *    math.re(math.complex(2.4));     // returns number 2.4
	   *
	   * See also:
	   *
	   *    im, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The real part of x
	   */
	  var re = typed('re', {
	    'number': function (x) {
	      return x;
	    },

	    'BigNumber': function (x) {
	      return x;
	    },

	    'Complex': function (x) {
	      return x.re;
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, re);
	    }
	  });

	  re.toTex = '\\Re\\left\\lbrace${args[0]}\\right\\rbrace';

	  return re;
	}

	exports.name = 're';
	exports.factory = factory;


/***/ },
/* 169 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/geometry/index.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./intersect */ 170)
	];


/***/ },
/* 170 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/geometry/intersect.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  /**
	   * Calculates the point of intersection of two lines in two or three dimensions
	   * and of a line and a plane in three dimensions. The inputs are in the form of
	   * arrays or 1 dimensional matrices. The line intersection functions return null
	   * if the lines do not meet.
	   *
	   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
	   *
	   * Syntax:
	   *
	   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
	   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
	   *
	   * Examples:
	   *
	   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]
	   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]
	   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]
	   *
	   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
	   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
	   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
	   *                              OR Co-efficients of the plane's equation
	   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
	   *                              OR null if the calculation is for line and plane
	   * @return {Array}              Returns the point of intersection of lines/lines-planes
	   */
	  var intersect = typed('intersect', {
	    'Array, Array, Array': function (x, y, plane) {
	      if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
	      if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
	      if (!_4d(plane)) { throw new TypeError('Array with 4 numbers expected as third argument'); }

	      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
	    },

	    'Array, Array, Array, Array': function (w, x, y, z) {
	      if (w.length === 2) {
	        if (!_2d(w)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
	        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for second argument'); }
	        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for third argument'); }
	        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for fourth argument'); }

	        return _intersect2d(w[0], w[1], x[0], x[1], y[0], y[1], z[0], z[1]);
	      }
	      else if (w.length === 3) {
	        if (!_3d(w)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
	        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
	        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for third argument'); }
	        if (!_3d(z)) { throw new TypeError('Array with 3 numbers expected for fourth argument'); }

	        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
	      }
	      else {
	        throw new TypeError('Arrays with two or thee dimensional points expected');
	      }
	    },

	    'Matrix, Matrix, Matrix': function (x, y, plane) {
	      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
	    },

	    'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {
	      // TODO: output matrix type should match input matrix type
	      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
	    }
	  });

	  return intersect;
	}

	function _2d(x) {
	  return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';
	}

	function _3d(x) {
	  return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';
	}

	function _4d(x) {
	  return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';
	}

	function _intersect2d(x1, y1, x2, y2, x3, y3, x4, y4){
	  var d1343 = (x1 - x3)*(x4 - x3) + (y1 - y3)*(y4 - y3);
	  var d4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1);
	  var d1321 = (x1 - x3)*(x2 - x1) + (y1 - y3)*(y2 - y1);
	  var d4343 = (x4 - x3)*(x4 - x3) + (y4 - y3)*(y4 - y3);
	  var d2121 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1);
	  var ta = ( d1343*d4321 - d1321*d4343 ) / ( d2121*d4343 - d4321*d4321 );
	  var tb = ( d1343 + ta * d4321 ) / (d4343);

	  var pax = x1 + ta * (x2 - x1);
	  var pay = y1 + ta * (y2 - y1);
	  var pbx = x3 + tb * (x4 - x3);
	  var pby = y3 + tb * (y4 - y3);
	  if (pax === pbx && pay === pby){
	    return [pax, pay];
	  }
	  else{
	    return null;
	  }
	}

	function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4){
	  var d1343 = (x1 - x3)*(x4 - x3) + (y1 - y3)*(y4 - y3) + (z1 - z3)*(z4 - z3);
	  var d4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1) + (z4 - z3)*(z2 - z1);
	  var d1321 = (x1 - x3)*(x2 - x1) + (y1 - y3)*(y2 - y1) + (z1 - z3)*(z2 - z1);
	  var d4343 = (x4 - x3)*(x4 - x3) + (y4 - y3)*(y4 - y3) + (z4 - z3)*(z4 - z3);
	  var d2121 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1) + (z2 - z1)*(z2 - z1);
	  var ta = ( d1343*d4321 - d1321*d4343 ) / ( d2121*d4343 - d4321*d4321 );
	  var tb = ( d1343 + ta * d4321 ) / (d4343);

	  var pax = x1 + ta * (x2 - x1);
	  var pay = y1 + ta * (y2 - y1);
	  var paz = z1 + ta * (z2 - z1);
	  var pbx = x3 + tb * (x4 - x3);
	  var pby = y3 + tb * (y4 - y3);
	  var pbz = z3 + tb * (z4 - z3);
	  if (pax === pbx && pay === pby && paz === pbz){
	    return [pax, pay, paz];
	  }
	  else{
	    return null;
	  }
	}

	function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c){
	  var t = (c - x1*x - y1*y - z1*z)/(x2*x + y2*y + z2*z - x1 - y1 - z1);
	  var px = x1 + t * (x2 - x1);
	  var py = y1 + t * (y2 - y1);
	  var pz = z1 + t * (z2 - z1);
	  return [px, py, pz];
	  // TODO: Add cases when line is parallel to the plane:
	  //       (a) no intersection,
	  //       (b) line contained in plane
	}

	exports.name = 'intersect';
	exports.factory = factory;


/***/ },
/* 171 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/function/logical/index.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./and */ 172),
	  __webpack_require__(/*! ./not */ 173),
	  __webpack_require__(/*! ./or */ 174),
	  __webpack_require__(/*! ./xor */ 175)
	];


/***/ },
/* 172 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/logical/and.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var zeros = load(__webpack_require__(/*! ../matrix/zeros */ 76));
	  var not = load(__webpack_require__(/*! ./not */ 173));

	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm06 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm06 */ 123));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.and(x, y)
	   *
	   * Examples:
	   *
	   *    math.and(2, 4);   // returns true
	   *
	   *    a = [2, 0, 0];
	   *    b = [3, 7, 0];
	   *    c = 0;
	   *
	   *    math.and(a, b);   // returns [true, false, false]
	   *    math.and(a, c);   // returns [false, false, false]
	   *
	   * See also:
	   *
	   *    not, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when both inputs are defined with a nonzero/nonempty value.
	   */
	  var and = typed('and', {

	    'number, number': function (x, y) {
	      return !!(x && y);
	    },

	    'Complex, Complex': function (x, y) {
	      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
	    },

	    'Unit, Unit': function (x, y) {
	      return (x.value !== 0 && x.value !== null) && (y.value !== 0 && y.value !== null);
	    },
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm06(x, y, and, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, and, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm02(x, y, and, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, and);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return and(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return and(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return and(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // check scalar
	      if (not(y)) {
	        // return zero matrix
	        return zeros(x.size(), x.storage());
	      }
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, and, false);
	          break;
	        default:
	          c = algorithm14(x, y, and, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // check scalar
	      if (not(x)) {
	        // return zero matrix
	        return zeros(x.size(), x.storage());
	      }
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, and, true);
	          break;
	        default:
	          c = algorithm14(y, x, and, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return and(matrix(x), y).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return and(x, matrix(y)).valueOf();
	    }
	  });

	  and.toTex = '\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\right)';

	  return and;
	}

	exports.name = 'and';
	exports.factory = factory;


/***/ },
/* 173 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/logical/not.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Logical `not`. Flips boolean value of a given parameter.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.not(x)
	   *
	   * Examples:
	   *
	   *    math.not(2);      // returns false
	   *    math.not(0);      // returns true
	   *    math.not(true);   // returns false
	   *
	   *    a = [2, -7, 0];
	   *    math.not(a);      // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    and, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when input is a zero or empty value.
	   */
	  var not = typed('not', {
	    'number': function (x) {
	      return !x;
	    },

	    'Complex': function (x) {
	      return x.re === 0 && x.im === 0;
	    },

	    'BigNumber': function (x) {
	      return x.isZero() || x.isNaN();
	    },

	    'Unit': function (x) {
	      return x.value === null || x.value == 0;
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, not);
	    }
	  });

	  not.toTex = latex.operators['not'] + '\\left(${args[0]}\\right)';

	  return not;
	}

	exports.name = 'not';
	exports.factory = factory;


/***/ },
/* 174 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/function/logical/or.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm05 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm05 */ 48));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  /**
	   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.or(x, y)
	   *
	   * Examples:
	   *
	   *    math.or(2, 4);   // returns true
	   *
	   *    a = [2, 5, 0];
	   *    b = [0, 22, 0];
	   *    c = 0;
	   *
	   *    math.or(a, b);   // returns [true, true, false]
	   *    math.or(b, c);   // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    and, not, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
	   */
	  var or = typed('or', {

	    'number, number': function (x, y) {
	      return !!(x || y);
	    },

	    'Complex, Complex': function (x, y) {
	      return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());
	    },

	    'Unit, Unit': function (x, y) {
	      return (x.value !== 0 && x.value !== null) || (y.value !== 0 && y.value !== null);
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm05(x, y, or);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, or, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, or, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, or);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return or(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return or(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return or(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, or, false);
	          break;
	        default:
	          c = algorithm14(x, y, or, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, or, true);
	          break;
	        default:
	          c = algorithm14(y, x, or, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, or, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, or, true).valueOf();
	    }
	  });

	  or.toTex = '\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\right)';

	  return or;
	}

	exports.name = 'or';
	exports.factory = factory;


/***/ },
/* 175 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/logical/xor.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  /**
	   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.xor(x, y)
	   *
	   * Examples:
	   *
	   *    math.xor(2, 4);   // returns false
	   *
	   *    a = [2, 0, 0];
	   *    b = [2, 7, 0];
	   *    c = 0;
	   *
	   *    math.xor(a, b);   // returns [false, true, false]
	   *    math.xor(a, c);   // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    and, not, or
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
	   */
	  var xor = typed('xor', {
	 
	    'number, number': function (x, y) {
	      return !!(!!x ^ !!y);
	    },

	    'Complex, Complex': function (x, y) {
	      return !!((x.re !== 0 || x.im !== 0) ^ (y.re !== 0 || y.im !== 0));
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return !!((!x.isZero() && !x.isNaN()) ^ (!y.isZero() && !y.isNaN()));
	    },

	    'Unit, Unit': function (x, y) {
	      return !!((x.value !== 0 && x.value !== null) ^ (y.value !== 0 && y.value !== null));
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, xor);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, xor, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, xor, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, xor);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return xor(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return xor(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return xor(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, xor, false);
	          break;
	        default:
	          c = algorithm14(x, y, xor, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, xor, true);
	          break;
	        default:
	          c = algorithm14(y, x, xor, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, xor, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, xor, true).valueOf();
	    }
	  });

	  xor.toTex = '\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\right)';

	  return xor;
	}

	exports.name = 'xor';
	exports.factory = factory;


/***/ },
/* 176 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/probability/index.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  //require('./distribution'), // TODO: rethink math.distribution
	  __webpack_require__(/*! ./combinations */ 159),
	  __webpack_require__(/*! ./factorial */ 155),
	  __webpack_require__(/*! ./gamma */ 158),
	  __webpack_require__(/*! ./multinomial */ 178),
	  __webpack_require__(/*! ./permutations */ 177),
	  __webpack_require__(/*! ./pickRandom */ 180),
	  __webpack_require__(/*! ./random */ 183),
	  __webpack_require__(/*! ./randomInt */ 184)
	];


/***/ },
/* 177 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/function/probability/permutations.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {
	  var factorial = load(__webpack_require__(/*! ./factorial */ 155));

	  /**
	   * Compute the number of ways of obtaining an ordered subset of `k` elements
	   * from a set of `n` elements.
	   *
	   * Permutations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.permutations(n)
	   *     math.permutations(n, k)
	   *
	   * Examples:
	   *
	   *    math.permutations(5);     // 120
	   *    math.permutations(5, 3);  // 60
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number | BigNumber} n   The number of objects in total
	   * @param {number | BigNumber} [k] The number of objects in the subset
	   * @return {number | BigNumber}    The number of permutations
	   */
	  var permutations = typed('permutations', {
	    'number | BigNumber': factorial,

	    'number, number': function (n, k) {
	      var result, i;

	      if (!isInteger(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (!isInteger(k) || k < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (k > n) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      }

	      // Permute n objects, k at a time
	      result = 1;
	      for (i = n - k + 1; i <= n; i++) {
	        result = result * i;
	      }

	      return result;
	    },

	    'BigNumber, BigNumber': function (n, k) {
	      var result, i;

	      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (k.gt(n)) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      }

	      result = new type.BigNumber(1);
	      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
	        result = result.times(i);
	      }

	      return result;
	    }

	    // TODO: implement support for collection in permutations
	  });

	  permutations.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return permutations;
	}

	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */
	function isPositiveInteger(n) {
	  return n.isInteger() && n.gte(0);
	}

	exports.name = 'permutations';
	exports.factory = factory;


/***/ },
/* 178 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/function/probability/multinomial.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(/*! ../../utils/collection/deepForEach */ 179);

	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(/*! ../arithmetic/add */ 60));
	  var multiply = load(__webpack_require__(/*! ../arithmetic/multiply */ 56));
	  var divide = load(__webpack_require__(/*! ../arithmetic/divide */ 110));
	  var factorial = load(__webpack_require__(/*! ../probability/factorial */ 155));
	  var isInteger = load(__webpack_require__(/*! ../utils/isInteger */ 161));
	  var isPositive = load(__webpack_require__(/*! ../utils/isPositive */ 163));

	  /**
	   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
	   *
	   * multinomial takes one array of integers as an argument.
	   * The following condition must be enforced: every ai <= 0
	   *
	   * Syntax:
	   *
	   *     math.multinomial(a) // a is an array type
	   *
	   * Examples:
	   *
	   *    math.multinomial([1,2,1]); // returns 12
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
	   * @return {Number | BigNumber}         Multinomial coefficient.
	   */
	  return typed('multinomial', {
	    'Array | Matrix': function (a) {
	      var sum = 0;
	      var denom = 1;

	      deepForEach(a, function(ai) {
	        if(!isInteger(ai) || !isPositive(ai)) {
	          throw new TypeError('Positive integer value expected in function multinomial');
	        }
	        sum = add(sum, ai);
	        denom = multiply(denom, factorial(ai));
	      });

	      return divide(factorial(sum), denom);
	    }
	  });
	}

	exports.name = 'multinomial';
	exports.factory = factory;


/***/ },
/* 179 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/utils/collection/deepForEach.js ***!
  \******************************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Recursively loop over all elements in a given multi dimensional array
	 * and invoke the callback on each of the elements.
	 * @param {Array | Matrix} array
	 * @param {Function} callback     The callback method is invoked with one
	 *                                parameter: the current element in the array
	 */
	module.exports = function deepForEach (array, callback) {
	  if (array && array.isMatrix === true) {
	    array = array.valueOf();
	  }

	  for (var i = 0, ii = array.length; i < ii; i++) {
	    var value = array[i];

	    if (Array.isArray(value)) {
	      deepForEach(value, callback);
	    }
	    else {
	      callback(value);
	    }
	  }
	};


/***/ },
/* 180 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/probability/pickRandom.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var distribution = load(__webpack_require__(/*! ./distribution */ 181));

	  /**
	   * Random pick a value from a one dimensional array.
	   * Array element is picked using a random function with uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.pickRandom(array)
	   *
	   * Examples:
	   *
	   *     math.pickRandom([3, 6, 12, 2]);       // returns one of the values in the array
	   *
	   * See also:
	   *
	   *     random, randomInt
	   *
	   * @param {Array} array     A one dimensional array
	   * @return {number} One of the elements of the provided input array
	   */
	  // TODO: rework pickRandom to a typed-function
	  var pickRandom =  distribution('uniform').pickRandom;

	  pickRandom.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return pickRandom;
	}

	exports.name = 'pickRandom';
	exports.factory = factory;


/***/ },
/* 181 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/function/probability/distribution.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ArgumentsError = __webpack_require__(/*! ../../error/ArgumentsError */ 27);
	var isCollection = __webpack_require__(/*! ../../utils/collection/isCollection */ 182);

	// TODO: rethink math.distribution
	// TODO: rework to a typed function
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var array = __webpack_require__(/*! ../../utils/array */ 34);

	  /**
	   * Create a distribution object with a set of random functions for given
	   * random distribution.
	   *
	   * Syntax:
	   *
	   *     math.distribution(name)
	   *
	   * Examples:
	   *
	   *     var normalDist = math.distribution('normal'); // create a normal distribution
	   *     normalDist.random(0, 10);                     // get a random value between 0 and 10
	   *
	   * See also:
	   *
	   *     random, randomInt, pickRandom
	   *
	   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.
	   * @return {Object}       Returns a distribution object containing functions:
	   *                        `random([size] [, min] [, max])`,
	   *                        `randomInt([min] [, max])`,
	   *                        `pickRandom(array)`
	   */
	  function distribution(name) {
	    if (!distributions.hasOwnProperty(name))
	      throw new Error('Unknown distribution ' + name);

	    var args = Array.prototype.slice.call(arguments, 1),
	        distribution = distributions[name].apply(this, args);

	    return (function(distribution) {

	      // This is the public API for all distributions
	      var randFunctions = {

	        random: function(arg1, arg2, arg3) {
	          var size, min, max;
	          if (arguments.length > 3) {
	            throw new ArgumentsError('random', arguments.length, 0, 3);

	          // `random(max)` or `random(size)`
	          } else if (arguments.length === 1) {
	            if (isCollection(arg1)) {
	              size = arg1;
	            }
	            else {
	              max = arg1;
	            }
	          // `random(min, max)` or `random(size, max)`
	          } else if (arguments.length === 2) {
	            if (isCollection(arg1)) {
	              size = arg1;
	              max = arg2;
	            }
	            else {
	              min = arg1;
	              max = arg2;
	            }
	          // `random(size, min, max)`
	          } else {
	            size = arg1;
	            min = arg2;
	            max = arg3;
	          }

	          // TODO: validate type of min, max, and size

	          if (max === undefined) max = 1;
	          if (min === undefined) min = 0;
	          if (size !== undefined) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);
	            return (size && size.isMatrix === true) ? matrix(res) : res;
	          }
	          else return _random(min, max);
	        },

	        randomInt: function(arg1, arg2, arg3) {
	          var size, min, max;
	          if (arguments.length > 3 || arguments.length < 1)
	            throw new ArgumentsError('randomInt', arguments.length, 1, 3);

	          // `random(max)` or `random(size)`
	          else if (arguments.length === 1)
	            if (isCollection(arg1)) {
	              size = arg1;
	            }
	            else {
	              max = arg1;
	            }
	          // `randomInt(min, max)` or `randomInt(size, max)`
	          else if (arguments.length === 2) {
	            if (isCollection(arg1)) {
	              size = arg1;
	              max = arg2;
	            }
	            else {
	              min = arg1;
	              max = arg2;
	            }
	          // `randomInt(size, min, max)`
	          } else {
	            size = arg1;
	            min = arg2;
	            max = arg3;
	          }

	          // TODO: validate type of min, max, and size

	          if (min === undefined) min = 0;
	          if (size !== undefined) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
	            return (size && size.isMatrix === true) ? matrix(res) : res;
	          }
	          else return _randomInt(min, max);
	        },

	        pickRandom: function(possibles) {
	          if (arguments.length !== 1) {
	            throw new ArgumentsError('pickRandom', arguments.length, 1);
	          }
	          if (possibles && possibles.isMatrix === true) {
	            possibles = possibles.valueOf(); // get Array
	          }
	          else if (!Array.isArray(possibles)) {
	            throw new TypeError('Unsupported type of value in function pickRandom');
	          }

	          if (array.size(possibles).length > 1) {
	            throw new Error('Only one dimensional vectors supported');
	          }

	          // TODO: add support for multi dimensional matrices
	          return possibles[Math.floor(Math.random() * possibles.length)];
	        }

	      };

	      var _random = function(min, max) {
	        return min + distribution() * (max - min);
	      };

	      var _randomInt = function(min, max) {
	        return Math.floor(min + distribution() * (max - min));
	      };

	      // This is a function for generating a random matrix recursively.
	      var _randomDataForMatrix = function(size, min, max, randFunc) {
	        var data = [], length, i;
	        size = size.slice(0);

	        if (size.length > 1) {
	          for (i = 0, length = size.shift(); i < length; i++)
	            data.push(_randomDataForMatrix(size, min, max, randFunc));
	        } else {
	          for (i = 0, length = size.shift(); i < length; i++)
	            data.push(randFunc(min, max));
	        }

	        return data;
	      };

	      return randFunctions;

	    })(distribution);
	  }

	  // Each distribution is a function that takes no argument and when called returns
	  // a number between 0 and 1.
	  var distributions = {

	    uniform: function() {
	      return Math.random;
	    },

	    // Implementation of normal distribution using Box-Muller transform
	    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
	    // We take : mean = 0.5, standard deviation = 1/6
	    // so that 99.7% values are in [0, 1].
	    normal: function() {
	      return function() {
	        var u1, u2,
	            picked = -1;
	        // We reject values outside of the interval [0, 1]
	        // TODO: check if it is ok to do that?
	        while (picked < 0 || picked > 1) {
	          u1 = Math.random();
	          u2 = Math.random();
	          picked = 1/6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
	        }
	        return picked;
	      }
	    }
	  };

	  distribution.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return distribution;
	}

	exports.name = 'distribution';
	exports.factory = factory;


/***/ },
/* 182 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/utils/collection/isCollection.js ***!
  \*******************************************************/
/***/ function(module, exports) {

	'use strict';

	/**
	 * Test whether a value is a collection: an Array or Matrix
	 * @param {*} x
	 * @returns {boolean} isCollection
	 */
	module.exports = function isCollection (x) {
	  return (Array.isArray(x) || (x && x.isMatrix === true));
	};


/***/ },
/* 183 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/probability/random.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var distribution = load(__webpack_require__(/*! ./distribution */ 181));

	  /**
	   * Return a random number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.random()                // generate a random number between 0 and 1
	   *     math.random(max)             // generate a random number between 0 and max
	   *     math.random(min, max)        // generate a random number between min and max
	   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
	   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
	   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
	   *
	   * Examples:
	   *
	   *     math.random();       // returns a random number between 0 and 1
	   *     math.random(100);    // returns a random number between 0 and 100
	   *     math.random(30, 40); // returns a random number between 30 and 40
	   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1
	   *
	   * See also:
	   *
	   *     randomInt, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random number
	   */
	  // TODO: rework random to a typed-function
	  var random = distribution('uniform').random;

	  random.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return random;
	}

	exports.name = 'random';
	exports.factory = factory;


/***/ },
/* 184 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/probability/randomInt.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var distribution = load(__webpack_require__(/*! ./distribution */ 181));

	  /**
	   * Return a random integer number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.randomInt(max)             // generate a random integer between 0 and max
	   *     math.randomInt(min, max)        // generate a random integer between min and max
	   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
	   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
	   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
	   *
	   * Examples:
	   *
	   *     math.randomInt(100);    // returns a random integer between 0 and 100
	   *     math.randomInt(30, 40); // returns a random integer between 30 and 40
	   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1
	   *
	   * See also:
	   *
	   *     random, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random integer value
	   */
	  // TODO: rework randomInt to a typed-function
	  var randomInt = distribution('uniform').randomInt;

	  randomInt.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return randomInt;
	}

	exports.name = 'randomInt';
	exports.factory = factory;


/***/ },
/* 185 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/relational/index.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./compare */ 186),
	  __webpack_require__(/*! ./deepEqual */ 187),
	  __webpack_require__(/*! ./equal */ 188),
	  __webpack_require__(/*! ./larger */ 80),
	  __webpack_require__(/*! ./largerEq */ 95),
	  __webpack_require__(/*! ./smaller */ 129),
	  __webpack_require__(/*! ./smallerEq */ 189),
	  __webpack_require__(/*! ./unequal */ 190)
	];


/***/ },
/* 186 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/relational/compare.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(/*! ../../utils/number */ 24).nearlyEqual;

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm05 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm05 */ 48));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));
	  
	  /**
	   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
	   *
	   * x and y are considered equal when the relative difference between x and y
	   * is smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.compare(x, y)
	   *
	   * Examples:
	   *
	   *    math.compare(6, 1);           // returns 1
	   *    math.compare(2, 3);           // returns -1
	   *    math.compare(7, 7);           // returns 0
	   *
	   *    var a = math.unit('5 cm');
	   *    var b = math.unit('40 mm');
	   *    math.compare(a, b);           // returns 1
	   *
	   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, largerEq
	   *
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.
	   */
	  var compare = typed('compare', {

	    'boolean, boolean': function (x, y) {
	      return x === y ? 0 : (x > y ? 1 : -1);
	    },

	    'number, number': function (x, y) {
	      return (x === y || nearlyEqual(x, y, config.epsilon)) ? 0 : (x > y ? 1 : -1);
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return new type.BigNumber(x.cmp(y));
	    },

	    'Fraction, Fraction': function (x, y) {
	      return new type.Fraction(x.compare(y));
	    },

	    'Complex, Complex': function () {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return (x.value === y.value || nearlyEqual(x.value, y.value, config.epsilon)) ? 0 : (x.value > y.value ? 1 : -1);
	    },

	    'string, string': function (x, y) {
	      return x === y ? 0 : (x > y ? 1 : -1);
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm05(x, y, compare);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, compare, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, compare, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, compare);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return compare(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return compare(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return compare(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, compare, false);
	          break;
	        default:
	          c = algorithm14(x, y, compare, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, compare, true);
	          break;
	        default:
	          c = algorithm14(y, x, compare, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, compare, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, compare, true).valueOf();
	    }
	  });

	  compare.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return compare;
	}

	exports.name = 'compare';
	exports.factory = factory;


/***/ },
/* 187 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/function/relational/deepEqual.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var equal = load(__webpack_require__(/*! ./equal */ 188));

	  /**
	   * Test element wise whether two matrices are equal.
	   * The function accepts both matrices and scalar values.
	   *
	   * Syntax:
	   *
	   *    math.deepEqual(x, y)
	   *
	   * Examples:
	   *
	   *    math.deepEqual(2, 4);   // returns false
	   *
	   *    a = [2, 5, 1];
	   *    b = [2, 7, 1];
	   *
	   *    math.deepEqual(a, b);   // returns false
	   *    math.equal(a, b);       // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    equal, unequal
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns true when the input matrices have the same size and each of their elements is equal.
	   */
	  var deepEqual = typed('deepEqual', {
	    'any, any': function (x, y) {
	      return _deepEqual(x.valueOf(), y.valueOf());
	    }
	  });

	  deepEqual.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return deepEqual;

	  /**
	   * Test whether two arrays have the same size and all elements are equal
	   * @param {Array | *} x
	   * @param {Array | *} y
	   * @return {boolean} Returns true if both arrays are deep equal
	   */
	  function _deepEqual(x, y) {
	    if (Array.isArray(x)) {
	      if (Array.isArray(y)) {
	        var len = x.length;
	        if (len !== y.length) {
	          return false;
	        }

	        for (var i = 0; i < len; i++) {
	          if (!_deepEqual(x[i], y[i])) {
	            return false;
	          }
	        }

	        return true;
	      }
	      else {
	        return false;
	      }
	    }
	    else {
	      if (Array.isArray(y)) {
	        return false;
	      }
	      else {
	        return equal(x, y);
	      }
	    }
	  }
	}

	exports.name = 'deepEqual';
	exports.factory = factory;


/***/ },
/* 188 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/relational/equal.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var equalScalar = load(__webpack_require__(/*! ./equalScalar */ 49));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Test whether two values are equal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is only
	   * equal to `null` and nothing else, and `undefined` is only equal to
	   * `undefined` and nothing else.
	   *
	   * Syntax:
	   *
	   *    math.equal(x, y)
	   *
	   * Examples:
	   *
	   *    math.equal(2 + 2, 3);         // returns false
	   *    math.equal(2 + 2, 4);         // returns true
	   *
	   *    var a = math.unit('50 cm');
	   *    var b = math.unit('5 m');
	   *    math.equal(a, b);             // returns true
	   *
	   *    var c = [2, 5, 1];
	   *    var d = [2, 7, 1];
	   *
	   *    math.equal(c, d);             // returns [true, false, true]
	   *    math.deepEqual(c, d);         // returns false
	   *
	   *    math.equal(0, null);          // returns false
	   *
	   * See also:
	   *
	   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual
	   *
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
	   */
	  var equal = typed('equal', {
	    
	    'any, any': function (x, y) {
	      // strict equality for null and undefined?
	      if (x === null) { return y === null; }
	      if (y === null) { return x === null; }
	      if (x === undefined) { return y === undefined; }
	      if (y === undefined) { return x === undefined; }

	      return equalScalar(x, y);
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, equalScalar);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, equalScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, equalScalar, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, equalScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return equal(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return equal(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return equal(x, matrix(y));
	    },
	    
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, equalScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, equalScalar, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, equalScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, equalScalar, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, equalScalar, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, equalScalar, true).valueOf();
	    }
	  });

	  equal.toTex = '\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\right)';

	  return equal;
	}

	exports.name = 'equal';
	exports.factory = factory;


/***/ },
/* 189 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/function/relational/smallerEq.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(/*! ../../utils/number */ 24).nearlyEqual;

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Test whether value x is smaller or equal to y.
	   *
	   * The function returns true when x is smaller than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.smallerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(1 + 2, 3);        // returns false
	   *    math.smallerEq(1 + 2, 3);      // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  var smallerEq = typed('smallerEq', {

	    'boolean, boolean': function (x, y) {
	      return x <= y;
	    },

	    'number, number': function (x, y) {
	      return x <= y || nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return x.lte(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.compare(y) !== 1;
	    },

	    'Complex, Complex': function () {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },

	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return x.value <= y.value || nearlyEqual(x.value, y.value, config.epsilon);
	    },

	    'string, string': function (x, y) {
	      return x <= y;
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, smallerEq);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, smallerEq, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, smallerEq, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, smallerEq);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return smallerEq(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return smallerEq(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return smallerEq(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, smallerEq, false);
	          break;
	        default:
	          c = algorithm14(x, y, smallerEq, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, smallerEq, true);
	          break;
	        default:
	          c = algorithm14(y, x, smallerEq, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, smallerEq, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, smallerEq, true).valueOf();
	    }
	  });

	  smallerEq.toTex = '\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\right)';

	  return smallerEq;
	}

	exports.name = 'smallerEq';
	exports.factory = factory;


/***/ },
/* 190 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/relational/unequal.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var nearlyEqual = __webpack_require__(/*! ../../utils/number */ 24).nearlyEqual;

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm07 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm07 */ 82));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  /**
	   * Test whether two values are unequal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * larger than the configured epsilon. The function cannot be used to compare
	   * values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
	   * with everything except `null`, and `undefined` is unequal with everying
	   * except. `undefined`.
	   *
	   * Syntax:
	   *
	   *    math.unequal(x, y)
	   *
	   * Examples:
	   *
	   *    math.unequal(2 + 2, 3);       // returns true
	   *    math.unequal(2 + 2, 4);       // returns false
	   *
	   *    var a = math.unit('50 cm');
	   *    var b = math.unit('5 m');
	   *    math.unequal(a, b);           // returns false
	   *
	   *    var c = [2, 5, 1];
	   *    var d = [2, 7, 1];
	   *
	   *    math.unequal(c, d);           // returns [false, true, false]
	   *    math.deepEqual(c, d);         // returns false
	   *
	   *    math.unequal(0, null);        // returns true
	   * See also:
	   *
	   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
	   */
	  var unequal = typed('unequal', {
	    
	    'any, any': function (x, y) {
	      // strict equality for null and undefined?
	      if (x === null) { return y !== null; }
	      if (y === null) { return x !== null; }
	      if (x === undefined) { return y !== undefined; }
	      if (y === undefined) { return x !== undefined; }

	      return _unequal(x, y);
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, _unequal);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, _unequal, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, _unequal, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, _unequal);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return unequal(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return unequal(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return unequal(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, _unequal, false);
	          break;
	        default:
	          c = algorithm14(x, y, _unequal, false);
	          break;
	      }
	      return c;
	    },

	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, _unequal, true);
	          break;
	        default:
	          c = algorithm14(y, x, _unequal, true);
	          break;
	      }
	      return c;
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, _unequal, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, _unequal, true).valueOf();
	    }
	  });

	  var _unequal = typed('_unequal', {

	    'boolean, boolean': function (x, y) {
	      return x !== y;
	    },

	    'number, number': function (x, y) {
	      return !nearlyEqual(x, y, config.epsilon);
	    },

	    'BigNumber, BigNumber': function (x, y) {
	      return !x.eq(y);
	    },

	    'Fraction, Fraction': function (x, y) {
	      return x.compare(y) !== 0;
	    },

	    'Complex, Complex': function (x, y) {
	      return !nearlyEqual(x.re, y.re, config.epsilon) ||
	          !nearlyEqual(x.im, y.im, config.epsilon);
	    },

	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return !nearlyEqual(x.value, y.value, config.epsilon);
	    },

	    'string, string': function (x, y) {
	      return x !== y;
	    }
	  });

	  unequal.toTex = '\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\right)';

	  return unequal;
	}

	exports.name = 'unequal';
	exports.factory = factory;


/***/ },
/* 191 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/index.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./max */ 192),
	  __webpack_require__(/*! ./mean */ 194),
	  __webpack_require__(/*! ./median */ 195),
	  __webpack_require__(/*! ./min */ 197),
	  __webpack_require__(/*! ./prod */ 198),
	  __webpack_require__(/*! ./quantileSeq */ 199),
	  __webpack_require__(/*! ./std */ 200),
	  __webpack_require__(/*! ./sum */ 202),
	  __webpack_require__(/*! ./var */ 201)
	];

/***/ },
/* 192 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/max.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(/*! ../../utils/collection/deepForEach */ 179);
	var reduce = __webpack_require__(/*! ../../utils/collection/reduce */ 193);

	function factory (type, config, load, typed) {
	  var larger = load(__webpack_require__(/*! ../relational/larger */ 80));

	  /**
	   * Compute the maximum value of a matrix or a  list with values.
	   * In case of a multi dimensional array, the maximum of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.max(a, b, c, ...)
	   *     math.max(A)
	   *     math.max(A, dim)
	   *
	   * Examples:
	   *
	   *     math.max(2, 1, 4, 3);                  // returns 4
	   *     math.max([2, 1, 4, 3]);                // returns 4
	   *
	   *     // maximum over a specified dimension (zero-based)
	   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]
	   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, min, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The maximum value
	   */
	  var max = typed('max', {
	    // max([a, b, c, d, ...])
	    'Array | Matrix': _max,

	    // max([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function (array, dim) {
	      return reduce(array, dim.valueOf(), _largest);
	    },

	    // max(a, b, c, d, ...)
	    '...': function () {
	      return _max(arguments);
	    }
	  });

	  max.toTex = '\\max\\left(${args}\\right)';

	  return max;

	  /**
	   * Return the largest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is largest, or y when y is largest
	   * @private
	   */
	  function _largest(x, y){
	    return larger(x, y) ? x : y;
	  }

	  /**
	   * Recursively calculate the maximum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} max
	   * @private
	   */
	  function _max(array) {
	    var max = undefined;

	    deepForEach(array, function (value) {
	      if (max === undefined || larger(value, max)) {
	        max = value;
	      }
	    });

	    if (max === undefined) {
	      throw new Error('Cannot calculate max of an empty array');
	    }

	    return max;
	  }
	}

	exports.name = 'max';
	exports.factory = factory;


/***/ },
/* 193 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/utils/collection/reduce.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var arraySize = __webpack_require__(/*! ../array */ 34).size;
	var IndexError = __webpack_require__(/*! ../../error/IndexError */ 33);

	/**
	 * Reduce a given matrix or array to a new matrix or
	 * array with one less dimension, applying the given
	 * callback in the selected dimension.
	 * @param {Array | Matrix} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @return {Array | Matrix} res
	 */
	module.exports = function(mat, dim, callback) {
	  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
	  if (dim < 0) {
	    // TODO: would be more clear when throwing a DimensionError here
	    throw new IndexError(dim);
	  }
	  if (dim >= size.length) {
	    // TODO: would be more clear when throwing a DimensionError here
	    throw new IndexError(dim, size.length);
	  }

	  if (mat && mat.isMatrix === true) {
	    return mat.create(_reduce(mat.valueOf(), dim, callback));
	  }else {
	    return _reduce(mat, dim, callback);
	  }
	};

	/**
	 * Recursively reduce a matrix
	 * @param {Array} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @returns {Array} ret
	 * @private
	 */
	function _reduce(mat, dim, callback){
	  var i, ret, val, tran;

	  if(dim<=0){
	    if( !Array.isArray(mat[0]) ){
	      val = mat[0];
	      for(i=1; i<mat.length; i++){
	        val = callback(val, mat[i]);
	      }
	      return val;
	    }else{
	      tran = _switch(mat);
	      ret = [];
	      for(i=0; i<tran.length; i++){
	        ret[i] = _reduce(tran[i], dim-1, callback);
	      }
	      return ret;
	    }
	  }else{
	    ret = [];
	    for(i=0; i<mat.length; i++){
	      ret[i] = _reduce(mat[i], dim-1, callback);
	    }
	    return ret;
	  }
	}

	/**
	 * Transpose a matrix
	 * @param {Array} mat
	 * @returns {Array} ret
	 * @private
	 */
	function _switch(mat){
	  var I = mat.length;
	  var J = mat[0].length;
	  var i, j;
	  var ret = [];
	  for( j=0; j<J; j++) {
	    var tmp = [];
	    for( i=0; i<I; i++) {
	      tmp.push(mat[i][j]);
	    }
	    ret.push(tmp);
	  }
	  return ret;
	}


/***/ },
/* 194 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/mean.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(/*! ../../utils/array */ 34).size;
	var deepForEach = __webpack_require__(/*! ../../utils/collection/deepForEach */ 179);
	var reduce = __webpack_require__(/*! ../../utils/collection/reduce */ 193);

	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(/*! ../arithmetic/add */ 60));
	  var divide = load(__webpack_require__(/*! ../arithmetic/divide */ 110));

	  /**
	   * Compute the mean value of matrix or a list with values.
	   * In case of a multi dimensional array, the mean of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.mean(a, b, c, ...)
	   *     math.mean(A)
	   *     math.mean(A, dim)
	   *
	   * Examples:
	   *
	   *     math.mean(2, 1, 4, 3);                     // returns 2.5
	   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725
	   *
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]
	   *
	   * See also:
	   *
	   *     median, min, max, sum, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The mean of all values
	   */
	  var mean = typed('mean', {
	      // mean([a, b, c, d, ...])
	    'Array | Matrix': _mean,

	      // mean([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': _nmean,

	    // mean(a, b, c, d, ...)
	    '...': function () {
	      return _mean(arguments);
	    }
	  });

	  mean.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return mean;

	  /**
	   * Calculate the mean value in an n-dimensional array, returning a
	   * n-1 dimensional array
	   * @param {Array} array
	   * @param {number} dim
	   * @return {number} mean
	   * @private
	   */
	  function _nmean(array, dim){
		  var sum = reduce(array, dim, add);
	    var s = Array.isArray(array) ? size(array) : array.size();
	    return divide(sum, s[dim]);
	  }

	  /**
	   * Recursively calculate the mean value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} mean
	   * @private
	   */
	  function _mean(array) {
	    var sum = 0;
	    var num = 0;

	    deepForEach(array, function (value) {
	      sum = add(sum, value);
	      num++;
	    });

	    if (num === 0) {
	      throw new Error('Cannot calculate mean of an empty array');
	    }

	    return divide(sum, num);
	  }
	}

	exports.name = 'mean';
	exports.factory = factory;


/***/ },
/* 195 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/median.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var flatten = __webpack_require__(/*! ../../utils/array */ 34).flatten;

	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(/*! ../arithmetic/addScalar */ 43));
	  var divide = load(__webpack_require__(/*! ../arithmetic/divideScalar */ 67));
	  var compare = load(__webpack_require__(/*! ../relational/compare */ 186));
	  var partitionSelect = load(__webpack_require__(/*! ../utils/partitionSelect */ 196));

	  /**
	   * Compute the median of a matrix or a list with values. The values are
	   * sorted and the middle value is returned. In case of an even number of
	   * values, the average of the two middle values is returned.
	   * Supported types of values are: Number, BigNumber, Unit
	   *
	   * In case of a (multi dimensional) array or matrix, the median of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.median(a, b, c, ...)
	   *     math.median(A)
	   *
	   * Examples:
	   *
	   *     math.median(5, 2, 7);        // returns 5
	   *     math.median([3, -1, 5, 7]);  // returns 4
	   *
	   * See also:
	   *
	   *     mean, min, max, sum, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The median
	   */
	  var median = typed('median', {
	    // median([a, b, c, d, ...])
	    'Array | Matrix': _median,

	    // median([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function (array, dim) {
	      // TODO: implement median(A, dim)
	      throw new Error('median(A, dim) is not yet supported');
	      //return reduce(arguments[0], arguments[1], ...);
	    },

	    // median(a, b, c, d, ...)
	    '...': function () {
	      return _median(Array.prototype.slice.call(arguments));
	    }
	  });


	  /**
	   * Recursively calculate the median of an n-dimensional array
	   * @param {Array} array
	   * @return {Number} median
	   * @private
	   */
	  function _median(array) {
	    array = flatten(array.valueOf());

	    var num = array.length;
	    if (num == 0) {
	      throw new Error('Cannot calculate median of an empty array');
	    }

	    if (num % 2 == 0) {
	      // even: return the average of the two middle values
	      var mid = num / 2 - 1;
	      var right = partitionSelect(array, mid + 1);

	      // array now partitioned at mid + 1, take max of left part
	      var left = array[mid];
	      for (var i = 0; i < mid; ++i) {
	        if (compare(array[i], left) > 0) {
	          left = array[i];
	        }
	      }

	      return middle2(left, right);
	    }
	    else {
	      // odd: return the middle value
	      var m = partitionSelect(array, (num - 1) / 2);

	      return middle(m);
	    }
	  }

	  // helper function to type check the middle value of the array
	  var middle = typed({
	    'number | BigNumber | Unit': function (value) {
	      return value;
	    }
	  });

	  // helper function to type check the two middle value of the array
	  var middle2 = typed({
	    'number | BigNumber | Unit, number | BigNumber | Unit': function (left, right) {
	      return divide(add(left, right), 2);
	    }
	  });

	  median.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return median;
	}

	exports.name = 'median';
	exports.factory = factory;


/***/ },
/* 196 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/function/utils/partitionSelect.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type, config, load, typed) {
	  var asc = load(__webpack_require__(/*! ../relational/compare */ 186));
	  function desc(a, b) {
	    return -asc(a, b);
	  }

	  /**
	   * Partition-based selection of an array or 1D matrix.
	   * Will find the kth smallest value, and mutates the input array.
	   * Uses Quickselect.
	   *
	   * Syntax:
	   *
	   *    math.partitionSelect(x, k)
	   *    math.partitionSelect(x, k, compare)
	   *
	   * Examples:
	   *
	   *    math.partitionSelect([5, 10, 1], 2);           // returns 10
	   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length;
	   *    }
	   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'
	   *
	   * See also:
	   *
	   *    sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Number} k            The kth smallest value to be retrieved; zero-based index
	   * @param {Function | 'asc' | 'desc'} [compare='asc']
	   *        An optional comparator function. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {*} Returns the kth lowest value.
	   */
	  return typed('partitionSelect', {
	    'Array | Matrix, number': function (x, k) {
	      return _partitionSelect(x, k, asc);
	    },

	    'Array | Matrix, number, string': function (x, k, compare) {
	      if (compare === 'asc') {
	        return _partitionSelect(x, k, asc);
	      }
	      else if (compare === 'desc') {
	        return _partitionSelect(x, k, desc);
	      }
	      else {
	        throw new Error('Compare string must be "asc" or "desc"');
	      }
	    },

	    'Array | Matrix, number, function': _partitionSelect
	  });

	  function _partitionSelect(x, k, compare) {
	    if (!isInteger(k) || k < 0) {
	      throw new Error('k must be a non-negative integer');
	    }

	    if (x && x.isMatrix) {
	      var size = x.size();
	      if (size.length > 1) {
	        throw new Error('Only one dimensional matrices supported');
	      }
	      return quickSelect(x.valueOf(), k, compare);
	    }

	    if (Array.isArray(x)) {
	      return quickSelect(x, k, compare);
	    }
	  }

	  /**
	   * Quickselect algorithm.
	   * Code adapted from:
	   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
	   *
	   * @param {Array} arr
	   * @param {Number} k
	   * @param {Function} compare
	   * @private
	   */
	  function quickSelect(arr, k, compare) {
	    if (k >= arr.length) {
	      throw new Error('k out of bounds');
	    }

	    var from = 0;
	    var to = arr.length - 1;

	    // if from == to we reached the kth element
	    while (from < to) {
	      var r = from;
	      var w = to;
	      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];

	      // stop if the reader and writer meets
	      while (r < w) {
	        // arr[r] >= pivot
	        if (compare(arr[r], pivot) >= 0) { // put the large values at the end
	          var tmp = arr[w];
	          arr[w] = arr[r];
	          arr[r] = tmp;
	          --w;
	        } else { // the value is smaller than the pivot, skip
	          ++r;
	        }
	      }

	      // if we stepped up (r++) we need to step one down (arr[r] > pivot)
	      if (compare(arr[r], pivot) > 0) {
	        --r;
	      }

	      // the r pointer is on the end of the first k elements
	      if (k <= r) {
	        to = r;
	      } else {
	        from = r + 1;
	      }
	    }

	    return arr[k];
	  }
	}

	exports.name = 'partitionSelect';
	exports.factory = factory;


/***/ },
/* 197 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/min.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(/*! ../../utils/collection/deepForEach */ 179);
	var reduce = __webpack_require__(/*! ../../utils/collection/reduce */ 193);

	function factory (type, config, load, typed) {
	  var smaller = load(__webpack_require__(/*! ../relational/smaller */ 129));
	  
	  /**
	   * Compute the maximum value of a matrix or a  list of values.
	   * In case of a multi dimensional array, the maximum of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.min(a, b, c, ...)
	   *     math.min(A)
	   *     math.min(A, dim)
	   *
	   * Examples:
	   *
	   *     math.min(2, 1, 4, 3);                  // returns 1
	   *     math.min([2, 1, 4, 3]);                // returns 1
	   *
	   *     // maximum over a specified dimension (zero-based)
	   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]
	   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, max, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The minimum value
	   */
	  var min = typed('min', {
	    // min([a, b, c, d, ...])
	    'Array | Matrix': _min,

	    // min([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function (array, dim) {
	      return reduce(array, dim.valueOf(), _smallest);
	    },

	    // min(a, b, c, d, ...)
	    '...': function () {
	      return _min(arguments);
	    }
	  });

	  min.toTex = '\\min\\left(${args}\\right)';

	  return min;

	  /**
	   * Return the smallest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is smallest, or y when y is smallest
	   * @private
	   */
	  function _smallest(x, y) {
	    return smaller(x, y) ? x : y;
	  }

	  /**
	   * Recursively calculate the minimum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} min
	   * @private
	   */
	  function _min(array) {
	    var min = undefined;

	    deepForEach(array, function (value) {
	      if (min === undefined || smaller(value, min)) {
	        min = value;
	      }
	    });

	    if (min === undefined) {
	      throw new Error('Cannot calculate min of an empty array');
	    }

	    return min;
	  }
	}

	exports.name = 'min';
	exports.factory = factory;


/***/ },
/* 198 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/prod.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(/*! ../../utils/collection/deepForEach */ 179);

	function factory (type, config, load, typed) {
	  var multiply = load(__webpack_require__(/*! ../arithmetic/multiplyScalar */ 57));

	  /**
	   * Compute the product of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.prod(a, b, c, ...)
	   *     math.prod(A)
	   *
	   * Examples:
	   *
	   *     math.multiply(2, 3);           // returns 6
	   *     math.prod(2, 3);               // returns 6
	   *     math.prod(2, 3, 4);            // returns 24
	   *     math.prod([2, 3, 4]);          // returns 24
	   *     math.prod([[2, 5], [4, 3]]);   // returns 120
	   *
	   * See also:
	   *
	   *    mean, median, min, max, sum, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The product of all values
	   */
	  var prod = typed('prod', {
	    // prod([a, b, c, d, ...])
	    'Array | Matrix': _prod,

	    // prod([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function (array, dim) {
	      // TODO: implement prod(A, dim)
	      throw new Error('prod(A, dim) is not yet supported');
	      //return reduce(arguments[0], arguments[1], math.prod);
	    },

	    // prod(a, b, c, d, ...)
	    '...': function () {
	      return _prod(arguments);
	    }
	  });

	  prod.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return prod;

	  /**
	   * Recursively calculate the product of an n-dimensional array
	   * @param {Array} array
	   * @return {number} prod
	   * @private
	   */
	  function _prod(array) {
	    var prod = undefined;

	    deepForEach(array, function (value) {
	      prod = (prod === undefined) ? value : multiply(prod, value);
	    });

	    if (prod === undefined) {
	      throw new Error('Cannot calculate prod of an empty array');
	    }

	    return prod;
	  }
	}

	exports.name = 'prod';
	exports.factory = factory;


/***/ },
/* 199 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/quantileSeq.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;
	var isNumber = __webpack_require__(/*! ../../utils/number */ 24).isNumber;
	var flatten = __webpack_require__(/*! ../../utils/array */ 34).flatten;
	var isCollection = __webpack_require__(/*! ../../utils/collection/isCollection */ 182);

	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(/*! ../arithmetic/add */ 60));
	  var multiply = load(__webpack_require__(/*! ../arithmetic/multiply */ 56));
	  var partitionSelect = load(__webpack_require__(/*! ../utils/partitionSelect */ 196));
	  var compare = load(__webpack_require__(/*! ../relational/compare */ 186));

	  /**
	   * Compute the prob order quantile of a matrix or a list with values.
	   * The sequence is sorted and the middle value is returned.
	   * Supported types of sequence values are: Number, BigNumber, Unit
	   * Supported types of probability are: Number, BigNumber
	   *
	   * In case of a (multi dimensional) array or matrix, the prob order quantile
	   * of all elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.quantileSeq(A, prob[, sorted])
	   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
	   *     math.quantileSeq(A, N[, sorted])
	   *
	   * Examples:
	   *
	   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4
	   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]
	   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]
	   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4
	   *
	   * See also:
	   *
	   *     median, mean, min, max, sum, prod, std, var
	   *
	   * @param {Array, Matrix} data                A single matrix or Array
	   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
	   *                                            the amount of evenly distributed steps of
	   *                                            probabilities; only one of these options can
	   *                                            be provided
	   * @param {Boolean} sorted=false              is data sorted in ascending order
	   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
	   */
	  function quantileSeq(data, probOrN, sorted) {
	    var probArr, dataArr, one;

	    if (arguments.length < 2 || arguments.length > 3) {
	      throw new SyntaxError('Function quantileSeq requires two or three parameters');
	    }

	    if (isCollection(data)) {
	      sorted = sorted || false;
	      if (typeof sorted === 'boolean') {
	        dataArr = data.valueOf();
	        if (isNumber(probOrN)) {
	          if (probOrN < 0) {
	            throw new Error('N/prob must be non-negative');
	          }

	          if (probOrN <= 1) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return _quantileSeq(dataArr, probOrN, sorted);
	          }

	          if (probOrN > 1) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!isInteger(probOrN)) {
	              throw new Error('N must be a positive integer');
	            }

	            var nPlusOne = probOrN + 1;
	            probArr = new Array(probOrN);
	            for (var i = 0; i < probOrN;) {
	              probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);
	            }
	            return probArr;
	          }
	        }

	        if (probOrN && probOrN.isBigNumber) {
	          if (probOrN.isNegative()) {
	            throw new Error('N/prob must be non-negative');
	          }

	          one = probOrN.constructor.ONE;

	          if (probOrN.lte(one)) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return _quantileSeq(dataArr, probOrN, sorted);
	          }

	          if (probOrN.gt(one)) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!probOrN.isInteger()) {
	              throw new Error('N must be a positive integer');
	            }

	            // largest possible Array length is 2^32-1;
	            // 2^32 < 10^15, thus safe conversion guaranteed
	            var intN = probOrN.toNumber();
	            if (intN > 4294967295) {
	              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
	            }

	            var nPlusOne = new type.BigNumber(intN + 1);
	            probArr = new Array(intN);
	            for (var i = 0; i < intN;) {
	              probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);
	            }
	            return probArr;
	          }
	        }

	        if (Array.isArray(probOrN)) {
	          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
	          probArr = new Array(probOrN.length);
	          for (var i = 0; i < probArr.length; ++i) {
	            var currProb = probOrN[i];
	            if (isNumber(currProb)) {
	              if (currProb < 0 || currProb > 1) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else if (currProb && currProb.isBigNumber) {
	              one = currProb.constructor.ONE;
	              if (currProb.isNegative() || currProb.gt(one)) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else {
	              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	            }

	            probArr[i] = _quantileSeq(dataArr, currProb, sorted);
	          }
	          return probArr;
	        }

	        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	      }

	      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	    }

	    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	  }

	  /**
	   * Calculate the prob order quantile of an n-dimensional array.
	   * 
	   * @param {Array} array
	   * @param {Number, BigNumber} prob
	   * @param {Boolean} sorted
	   * @return {Number, BigNumber, Unit} prob order quantile
	   * @private
	   */
	  function _quantileSeq(array, prob, sorted) {
	    var flat = flatten(array);
	    var len = flat.length;
	    if (len === 0) {
	      throw new Error('Cannot calculate quantile of an empty sequence');
	    }

	    if (isNumber(prob)) {
	      var index = prob * (len-1);
	      var fracPart = index % 1;
	      if (fracPart === 0) {
	        var value = sorted ? flat[index] : partitionSelect(flat, index);

	        validate(value);

	        return value;
	      }

	      var integerPart = Math.floor(index);

	      var left, right;
	      if (sorted) {
	        left = flat[integerPart];
	        right = flat[integerPart+1];
	      } else {
	        right = partitionSelect(flat, integerPart+1);

	        // max of partition is kth largest
	        left = flat[integerPart];
	        for (var i = 0; i < integerPart; ++i) {
	          if (compare(flat[i], left) > 0) {
	            left = flat[i];
	          }
	        }
	      }

	      validate(left);
	      validate(right);

	      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
	      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
	    }

	    // If prob is a BigNumber
	    var index = prob.times(len-1);
	    if (index.isInteger()) {
	      index = index.toNumber();
	      var value = sorted ? flat[index] : partitionSelect(flat, index);

	      validate(value);

	      return value;
	    }

	    var integerPart = index.floor();
	    var fracPart = index.minus(integerPart);
	    var integerPartNumber = integerPart.toNumber();

	    var left, right;
	    if (sorted) {
	      left = flat[integerPartNumber];
	      right = flat[integerPartNumber+1];
	    } else {
	      right = partitionSelect(flat, integerPartNumber+1);

	      // max of partition is kth largest
	      left = flat[integerPartNumber];
	      for (var i = 0; i < integerPartNumber; ++i) {
	        if (compare(flat[i], left) > 0) {
	          left = flat[i];
	        }
	      }
	    }

	    validate(left);
	    validate(right);

	    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
	    var one = fracPart.constructor.ONE;
	    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
	  }

	  /**
	   * Check if array value types are valid, throw error otherwise.
	   * @param {number | BigNumber | Unit} x
	   * @param {number | BigNumber | Unit} x
	   * @private
	   */
	  var validate = typed({
	    'number | BigNumber | Unit': function (x) {
	      return x;
	    }
	  });

	  return quantileSeq;
	}

	exports.name = 'quantileSeq';
	exports.factory = factory;


/***/ },
/* 200 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/std.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var sqrt       = load(__webpack_require__(/*! ../arithmetic/sqrt */ 128));
	  var variance   = load(__webpack_require__(/*! ../statistics/var */ 201));

	  /**
	   * Compute the standard deviation of a matrix or a  list with values.
	   * The standard deviations is defined as the square root of the variance:
	   * `std(A) = sqrt(var(A))`.
	   * In case of a (multi dimensional) array or matrix, the standard deviation
	   * over all elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Syntax:
	   *
	   *     math.std(a, b, c, ...)
	   *     math.std(A)
	   *     math.std(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.std(2, 4, 6);                     // returns 2
	   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611
	   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979
	   *     math.std([2, 4, 6, 8], 'biased');      // returns 2
	   *
	   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, sum, var
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The standard deviation
	   */
	  var std = typed('std', {
	    // std([a, b, c, d, ...])
	    'Array | Matrix': _std,

	    // std([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _std,

	    // std(a, b, c, d, ...)
	    '...': function () {
	      return _std(Array.prototype.slice.call(arguments));
	    }
	  });
	  
	  std.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return std;

	  function _std(array, normalization) {
	    if (array.length == 0) {
	      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
	    }

	    return sqrt(variance.apply(null, arguments));
	  }
	}

	exports.name = 'std';
	exports.factory = factory;


/***/ },
/* 201 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/var.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DEFAULT_NORMALIZATION = 'unbiased';

	var deepForEach = __webpack_require__(/*! ../../utils/collection/deepForEach */ 179);

	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(/*! ../arithmetic/addScalar */ 43));
	  var subtract = load(__webpack_require__(/*! ../arithmetic/subtract */ 41));
	  var multiply = load(__webpack_require__(/*! ../arithmetic/multiplyScalar */ 57));
	  var divide = load(__webpack_require__(/*! ../arithmetic/divideScalar */ 67));

	  /**
	   * Compute the variance of a matrix or a  list with values.
	   * In case of a (multi dimensional) array or matrix, the variance over all
	   * elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Note that older browser may not like the variable name `var`. In that
	   * case, the function can be called as `math['var'](...)` instead of
	   * `math.var(...)`.
	   *
	   * Syntax:
	   *
	   *     math.var(a, b, c, ...)
	   *     math.var(A)
	   *     math.var(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.var(2, 4, 6);                     // returns 4
	   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667
	   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5
	   *     math.var([2, 4, 6, 8], 'biased');      // returns 4
	   *
	   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, std, sum
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The variance
	   */
	  var variance = typed('variance', {
	    // var([a, b, c, d, ...])
	    'Array | Matrix': function (array) {
	      return _var(array, DEFAULT_NORMALIZATION);
	    },

	    // var([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _var,

	    // var(a, b, c, d, ...)
	    '...': function () {
	      return _var(arguments, DEFAULT_NORMALIZATION);
	    }
	  });

	  variance.toTex = '\\mathrm{Var}\\left(${args}\\right)';

	  return variance;

	  /**
	   * Recursively calculate the variance of an n-dimensional array
	   * @param {Array} array
	   * @param {string} normalization
	   *                        Determines how to normalize the variance:
	   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
	   *                        - 'uncorrected' The sum of squared errors is divided by n
	   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
	   * @return {number | BigNumber} variance
	   * @private
	   */
	  function _var(array, normalization) {
	    var sum = 0;
	    var num = 0;

	    if (array.length == 0) {
	      throw new SyntaxError('Function var requires one or more parameters (0 provided)');
	    }

	    // calculate the mean and number of elements
	    deepForEach(array, function (value) {
	      sum = add(sum, value);
	      num++;
	    });
	    if (num === 0) throw new Error('Cannot calculate var of an empty array');

	    var mean = divide(sum, num);

	    // calculate the variance
	    sum = 0;
	    deepForEach(array, function (value) {
	      var diff = subtract(value, mean);
	      sum = add(sum, multiply(diff, diff));
	    });

	    switch (normalization) {
	      case 'uncorrected':
	        return divide(sum, num);

	      case 'biased':
	        return divide(sum, num + 1);

	      case 'unbiased':
	        var zero = (sum && sum.isBigNumber === true) ? new type.BigNumber(0) : 0;
	        return (num == 1) ? zero : divide(sum, num - 1);

	      default:
	        throw new Error('Unknown normalization "' + normalization + '". ' +
	        'Choose "unbiased" (default), "uncorrected", or "biased".');
	    }
	  }
	}

	exports.name = 'var';
	exports.factory = factory;


/***/ },
/* 202 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/function/statistics/sum.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepForEach = __webpack_require__(/*! ../../utils/collection/deepForEach */ 179);

	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(/*! ../arithmetic/addScalar */ 43));

	  /**
	   * Compute the sum of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.sum(a, b, c, ...)
	   *     math.sum(A)
	   *
	   * Examples:
	   *
	   *     math.sum(2, 1, 4, 3);               // returns 10
	   *     math.sum([2, 1, 4, 3]);             // returns 10
	   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22
	   *
	   * See also:
	   *
	   *    mean, median, min, max, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The sum of all values
	   */
	  var sum = typed('sum', {
	    'Array | Matrix': function (args) {
	      // sum([a, b, c, d, ...])
	      return _sum(args);
	    },

	    'Array | Matrix, number | BigNumber': function () {
	      // sum([a, b, c, d, ...], dim)
	      // TODO: implement sum(A, dim)
	      throw new Error('sum(A, dim) is not yet supported');
	    },

	    '...': function () {
	      // sum(a, b, c, d, ...)
	      return _sum(arguments);
	    }
	  });

	  sum.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return sum;

	  /**
	   * Recursively calculate the sum of an n-dimensional array
	   * @param {Array} array
	   * @return {number} sum
	   * @private
	   */
	  function _sum(array) {
	    var sum = undefined;

	    deepForEach(array, function (value) {
	      sum = (sum === undefined) ? value : add(sum, value);
	    });

	    if (sum === undefined) {
	      switch (config.number) {
	        case 'number':
	          return 0;
	        case 'bignumber':
	          return new type.BigNumber(0);
	        case 'fraction':
	          return new type.Fraction(0);
	        default:
	          return 0;
	      }
	    }

	    return sum;
	  }
	}

	exports.name = 'sum';
	exports.factory = factory;


/***/ },
/* 203 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/index.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./acos */ 204),
	  __webpack_require__(/*! ./acosh */ 214),
	  __webpack_require__(/*! ./acot */ 216),
	  __webpack_require__(/*! ./acoth */ 218),
	  __webpack_require__(/*! ./acsc */ 221),
	  __webpack_require__(/*! ./acsch */ 223),
	  __webpack_require__(/*! ./asec */ 225),
	  __webpack_require__(/*! ./asech */ 226),
	  __webpack_require__(/*! ./asin */ 222),
	  __webpack_require__(/*! ./asinh */ 224),
	  __webpack_require__(/*! ./atan */ 217),
	  __webpack_require__(/*! ./atan2 */ 227),
	  __webpack_require__(/*! ./atanh */ 220),
	  __webpack_require__(/*! ./cos */ 229),
	  __webpack_require__(/*! ./cosh */ 230),
	  __webpack_require__(/*! ./cot */ 233),
	  __webpack_require__(/*! ./coth */ 235),
	  __webpack_require__(/*! ./csc */ 237),
	  __webpack_require__(/*! ./csch */ 238),
	  __webpack_require__(/*! ./sec */ 239),
	  __webpack_require__(/*! ./sech */ 240),
	  __webpack_require__(/*! ./sin */ 241),
	  __webpack_require__(/*! ./sinh */ 232),
	  __webpack_require__(/*! ./tan */ 242),
	  __webpack_require__(/*! ./tanh */ 243)
	];


/***/ },
/* 204 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/acos.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var acosAsec = __webpack_require__(/*! ../../utils/bignumber/acosAsec */ 205);

	function factory (type, config, load, typed) {
	  var complexSqrt = typed.find(load(__webpack_require__(/*! ../arithmetic/sqrt */ 128)), ['Complex']);
	  var complexLog = typed.find(load(__webpack_require__(/*! ../arithmetic/log */ 118)), ['Complex']);

	  /**
	   * Calculate the inverse cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acos(x)
	   *
	   * Examples:
	   *
	   *    math.acos(0.5);           // returns number 1.0471975511965979
	   *    math.acos(math.cos(1.5)); // returns number 1.5
	   *
	   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cos, atan, asin
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
	   */
	  var acos = typed('acos', {
	    'number': function (x) {
	      if ((x >= -1 && x <= 1) || config.predictable) {
	        return Math.acos(x);
	      }
	      else {
	        return _complexAcos(new type.Complex(x, 0));
	      }
	    },

	    'Complex': _complexAcos,

	    'BigNumber': function (x) {
	      return acosAsec(x, type.BigNumber, false);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, acos);
	    }
	  });

	  /**
	   * Calculate acos for a complex value
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _complexAcos(x) {
	    // acos(z) = 0.5*pi + i*log(iz + sqrt(1-z^2))
	    var temp1 = new type.Complex(
	        x.im * x.im - x.re * x.re + 1.0,
	        -2.0 * x.re * x.im
	    );
	    var temp2 = complexSqrt(temp1);
	    var temp3 = new type.Complex(
	        temp2.re - x.im,
	        temp2.im + x.re
	    );
	    var temp4 = complexLog(temp3);

	    // 0.5*pi = 1.5707963267948966192313216916398
	    return new type.Complex(
	        1.57079632679489661923 - temp4.im,
	        temp4.re
	    );
	  }

	  acos.toTex = '\\cos^{-1}\\left(${args[0]}\\right)';

	  return acos;
	}

	exports.name = 'acos';
	exports.factory = factory;


/***/ },
/* 205 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/acosAsec.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	var pi = __webpack_require__(/*! ./constants */ 156).pi;
	var atanAcot = __webpack_require__(/*! ./atanAcot */ 206);

	/**
	 * Calculate the arccosine or arcsecant of x
	 *
	 * acos(x) = 2*atan(sqrt(1-x^2)/(1+x))
	 *
	 * asec(x) = acos(1/x)
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {boolean} reciprocal   is sec
	 * @returns {BigNumber} arccosine or arcsecant of x
	 */
	module.exports = function acosAsec(x, BigNumber, reciprocal) {
	  if (reciprocal) {
	    if (x.abs().lt(BigNumber.ONE)) {
	      throw new Error('asec() only has non-complex values for |x| >= 1.');
	    }
	  } else if (x.abs().gt(BigNumber.ONE)) {
	    throw new Error('acos() only has non-complex values for |x| <= 1.');
	  }
	  if (x.eq(-1)) {
	    return pi(BigNumber);
	  }

	  var precision = BigNumber.precision;
	  BigNumber.config({precision: precision + 4});

	  if (reciprocal) {
	    x = BigNumber.ONE.div(x);
	  }

	  var acos = atanAcot(BigNumber.ONE.minus(x.times(x)).sqrt()
	      .div(x.plus(BigNumber.ONE)), BigNumber).times(2);

	  BigNumber.config({precision: precision});
	  return acos.toDP(precision - 1);
	};


/***/ },
/* 206 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/atanAcot.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	var constants = __webpack_require__(/*! ./constants */ 156);
	var asinAcsc = __webpack_require__(/*! ./asinAcsc */ 207);
	var atan = __webpack_require__(/*! ./atan */ 157);

	/**
	 * Calculate the arctangent or arccotangent of x
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {boolean} reciprocal   is cot
	 * @returns {BigNumber} arctangent or arccotangent of x
	 */
	module.exports = function atanAcot (x, BigNumber, reciprocal) {
	  if (x.isNaN()) {
	    return new BigNumber(NaN);
	  }
	  if ((!reciprocal && x.isZero()) || (reciprocal && !x.isFinite())) {
	    return new BigNumber(0);
	  }

	  var precision = BigNumber.precision;
	  if ((!reciprocal && !x.isFinite()) || (reciprocal && x.isZero())) {
	    var halfPi = constants.pi(BigNumber.constructor({precision: precision + 2})).div(2).toDP(precision - 1);
	    halfPi.constructor = BigNumber;
	    halfPi.s = x.s;

	    return halfPi;
	  }

	  BigNumber.config({precision: precision + 4});

	  if (reciprocal) {
	    x = BigNumber.ONE.div(x);
	  }

	  var absX = x.abs();
	  if (absX.lte(0.875)) {
	    var ret = atan(x);

	    ret.constructor = BigNumber;
	    BigNumber.config({precision: precision});
	    return ret.toDP(BigNumber.precision - 1);
	  }
	  if (absX.gte(1.143)) {
	    // arctan(x) = sign(x)*((PI / 2) - arctan(1 / |x|))
	    var halfPi = constants.pi(BigNumber.constructor({precision: precision + 4})).div(2);
	    var ret = halfPi.minus(atan(BigNumber.ONE.div(absX)));
	    ret.s = x.s;

	    ret.constructor = BigNumber;
	    BigNumber.config({precision: precision});
	    return ret.toDP(BigNumber.precision - 1);
	  }

	  // arctan(x) = arcsin(x / [sqrt(1 + x^2)])
	  x = x.div(x.times(x).plus(1).sqrt());

	  BigNumber.config({precision: precision});
	  return asinAcsc(x, BigNumber);
	};


/***/ },
/* 207 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/asinAcsc.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	var pi = __webpack_require__(/*! ./constants */ 156).pi;
	var asin = __webpack_require__(/*! ./asin */ 208);
	var asinNewton = __webpack_require__(/*! ./asinNewton */ 209);

	/**
	 * Calculate the arcsine or arccosecant of x
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {boolean} reciprocal   is csc
	 * @returns {BigNumber} arcsine or arccosecant of x
	 */
	module.exports = function asinAcsc(x, BigNumber, reciprocal) {
	  if (x.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  var precision = BigNumber.precision;
	  var absX = x.abs();
	  if (reciprocal) {
	    if (absX.lt(BigNumber.ONE)) {
	      throw new Error('acsc() only has non-complex values for |x| >= 1.');
	    }

	    BigNumber.config({precision: precision + 2});
	    x = BigNumber.ONE.div(x);
	    BigNumber.config({precision: precision});

	    absX = x.abs();
	  } else if (absX.gt(BigNumber.ONE)) {
	    throw new Error('asin() only has non-complex values for |x| <= 1.');
	  }

	  // Get x below 0.58
	  if (absX.gt(0.8)) {
	    BigNumber.config({precision: precision + 4});

	    // arcsin(x) = sign(x)*(Pi/2 - arcsin(sqrt(1 - x^2)))
	    var sign = x.s;
	    var halfPi = pi(BigNumber.constructor({precision: precision + 4})).div(2);
	    x = halfPi.minus(asinAcsc(BigNumber.ONE.minus(x.times(x)).sqrt(), BigNumber));
	    x.s = sign;

	    x.constructor = BigNumber;
	    BigNumber.config({precision: precision});
	    return x.toDP(precision - 1);
	  }
	  var wasReduced = absX.gt(0.58);
	  if (wasReduced) {
	    BigNumber.config({precision: precision + 8});

	    // arcsin(x) = 2*arcsin(x / (sqrt(2)*sqrt(sqrt(1 - x^2) + 1)))
	    x = x.div(new BigNumber(2).sqrt().times(BigNumber.ONE.minus(x.times(x)).sqrt()
	        .plus(BigNumber.ONE).sqrt()));

	    BigNumber.config({precision: precision});
	  }

	  // Avoid overhead of Newton's Method if feasible
	  var ret = (precision <= 60 || ((x.dp() <= Math.log(precision)) && x.lt(0.05)))
	      ? asin(x, precision)
	      : asinNewton(x, BigNumber);

	  if (wasReduced) {
	    return ret.times(2);
	  }
	  return ret;
	};


/***/ },
/* 208 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/asin.js ***!
  \**********************************************/
/***/ function(module, exports) {

	/**
	 * Calculate the arc sine of x
	 *
	 * arcsin(x) = x + (1/2)*x^3/3 + (3/8)*x^5/5 + (15/48)*x^7/7 ...
	 *           = x + (1/2)*x^2*x^1/3 + [(1*3)/(2*4)]*x^2*x^3/5 + [(1*3*5)/(2*4*6)]*x^2*x^5/7 ...
	 *
	 * @param {BigNumber} x
	 * @param {number} precision
	 * @returns {BigNumber} arc sine of x
	 */
	module.exports = function asinTaylor(x, precision) {
	  var BigNumber = x.constructor;
	  BigNumber.config({precision: precision + Math.log(precision) | 0 + 4});

	  var one = new BigNumber(1);
	  var y = x;
	  var yPrev = NaN;
	  var x2 = x.times(x);
	  var polyNum = x;
	  var constNum = new BigNumber(one);
	  var constDen = new BigNumber(one);

	  var bigK = new BigNumber(one);
	  for (var k = 3; !y.equals(yPrev); k += 2) {
	    polyNum = polyNum.times(x2);

	    constNum = constNum.times(bigK);
	    constDen = constDen.times(bigK.plus(one));

	    yPrev = y;
	    bigK = new BigNumber(k);
	    y = y.plus(polyNum.times(constNum).div(bigK.times(constDen)));
	  }

	  BigNumber.config({precision: precision});
	  return y.toDP(precision - 1);
	}


/***/ },
/* 209 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/asinNewton.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	var cosSinSecCsc = __webpack_require__(/*! ./cosSinSecCsc */ 210);
	var sinToCos = __webpack_require__(/*! ./sinToCos */ 213);

	/**
	 * Calculate the arc sine of x using Newton's method
	 *
	 * f(x) = sin(x) = N  =>  f(x)  = sin(x) - N
	 *                        f'(x) = cos(x)
	 *
	 * Thus we solve each step as follows:
	 *     x_(i+1) = x_i - (sin(x_i) - N)/cos(x_i)
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} arc sine of x
	 */
	module.exports = function asinNewton(x, BigNumber) {
	  var oldPrecision = BigNumber.precision;

	  // Calibration variables, adjusted from MAPM
	  var tolerance = -(oldPrecision + 4);
	  var maxp = oldPrecision + 8 - x.e;
	  var localPrecision = 25 - x.e;
	  var maxIter = Math.max(Math.log(oldPrecision + 2) * 1.442695 | 0 + 5, 5);
	  BigNumber.config({precision: localPrecision});

	  var i = 0;
	  var curr = new BigNumber(Math.asin(x.toNumber()) + '');
	  do {
	    var tmp0 = cosSinSecCsc(curr, BigNumber, 1, false);
	    var tmp1 = sinToCos(tmp0);
	    if (!tmp0.isZero()) {
	      tmp0.s = curr.s;
	    }

	    var tmp2 = tmp0.minus(x).div(tmp1);
	    curr = curr.minus(tmp2);

	    localPrecision = Math.min(2*localPrecision, maxp);
	    BigNumber.config({precision: localPrecision});
	  } while ((2*tmp2.e >= tolerance) && !tmp2.isZero() && (++i <= maxIter))

	  if (i == maxIter) {
	    throw new Error('asin() failed to converge to the requested accuracy.' +
	        'Try with a higher precision.');
	  }

	  BigNumber.config({precision: oldPrecision});
	  return curr.toDP(oldPrecision - 1);
	};


/***/ },
/* 210 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/cosSinSecCsc.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	var reduceToPeriod = __webpack_require__(/*! ./reduceToPeriod */ 211);
	var cosSin = __webpack_require__(/*! ./cosSin */ 212);

	/**
	 * Calculate the cosine/sine of x using the multiple angle identity:
	 *
	 * cos(4x) = 8[cos(x)^4 - cos(x)^2] + 1
	 *
	 * sin(5x) = 16sin(x)^5 - 20sin(x)^3 + 5sin(x)
	 * http://www.tc.umn.edu/~ringx004/sidebar.html
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {number} mode          cosine function if 0, sine function if 1
	 * @param {boolean} reciprocal   is sec or csc
	 * @returns {BigNumber} cosine, sine, secant, or cosecant of x
	 */
	module.exports = function cosSinSecCsc(x, BigNumber, mode, reciprocal) {
	  if (x.isNaN() || !x.isFinite()) {
	    return new BigNumber(NaN);
	  }
	  var precision = BigNumber.precision;

	  // Avoid changing the original value
	  var y = new BigNumber(x);

	  // sin(-x) == -sin(x), cos(-x) == cos(x)
	  var isNeg = y.isNegative();
	  if (isNeg) {
	    y.s = -y.s;
	  }

	  // Apply ~log(precision) guard bits
	  var precPlusGuardDigits = precision + (Math.log(precision) | 0) + 3;
	  BigNumber.config({precision: precPlusGuardDigits});

	  y = reduceToPeriod(y, BigNumber.constructor({precision: precPlusGuardDigits}), mode);  // Make this destructive
	  y[0].constructor = BigNumber;
	  if (y[1]) {
	    y = y[0];
	    if (reciprocal && y.isZero()) {
	      y = new BigNumber(Infinity);
	    }

	    BigNumber.config({precision: precision});
	    return y;
	  }

	  var ret;
	  y = y[0];
	  if (mode) {
	    ret = cosSin(y.div(3125), mode);
	    BigNumber.config({precision: Math.min(precPlusGuardDigits, precision + 15)});

	    var five = new BigNumber(5);
	    var sixteen = new BigNumber(16);
	    var twenty = new BigNumber(20);
	    for (var i = 0; i < 5; ++i) {
	      var ret2 = ret.times(ret);
	      var ret3 = ret2.times(ret);
	      var ret5 = ret3.times(ret2);
	      ret = sixteen.times(ret5).minus(
	          twenty.times(ret3)).plus(
	          five.times(ret));
	    }

	    if (isNeg) {
	      ret.s = -ret.s;
	    }
	  } else {
	    var div_factor, loops;
	    if (y.abs().lt(BigNumber.ONE)) {
	      div_factor = 64;
	      loops = 3;
	    } else {
	      div_factor = 256;
	      loops = 4;
	    }

	    ret = cosSin(y.div(div_factor), mode);
	    BigNumber.config({precision: Math.min(precPlusGuardDigits, precision + 8)});

	    var eight = new BigNumber(8);
	    for (; loops > 0; --loops) {
	      var ret2 = ret.times(ret);
	      var ret4 = ret2.times(ret2);
	      ret = eight.times(ret4.minus(ret2)).plus(BigNumber.ONE);
	    }
	  }

	  if (reciprocal) {
	    ret = (ret.e <= -precision)
	        ? new BigNumber(Infinity)
	        : BigNumber.ONE.div(ret);
	  }

	  BigNumber.config({precision: precision});
	  return ret.toDP(precision - 1);
	};


/***/ },
/* 211 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/reduceToPeriod.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var constants = __webpack_require__(/*! ./constants */ 156);

	/**
	 * Reduce x within a period of pi (0, pi] with guard digits.
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {number} mode
	 * @returns {Array} [Reduced x, is tau multiple?]
	 */
	module.exports = function reduceToPeriod(x, BigNumber, mode) {
	  var pi = constants.pi(BigNumber.constructor({precision: BigNumber.precision + 2}));
	  var tau = constants.tau(BigNumber);

	  if (x.abs().lte(pi.toDP(x.dp()))) {
	    return [x, false];
	  }

	  // Catch if input is tau multiple using pi's precision
	  if (x.div(pi.toDP(x.dp())).toNumber() % 2 == 0) {
	    return [new BigNumber(mode ^ 1), true];
	  }

	  var y = x.mod(tau);

	  // Catch if tau multiple with tau's precision
	  if (y.toDP(x.dp(), 1).isZero()) {
	    return [new BigNumber(mode ^ 1), true];
	  }

	  if (y.gt(pi)) {
	    if (mode) {
	      // sin(x + pi) = -sin(x)
	      y = y.minus(pi);
	      y.s = -y.s;
	    } else {
	      // cos(x) = cos(tau - x)
	      y = tau.minus(y);
	    }
	  }

	  y.constructor = x.constructor;
	  return [y, false];
	};


/***/ },
/* 212 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/cosSin.js ***!
  \************************************************/
/***/ function(module, exports) {

	/**
	 * Calculate the cosine or sine of x using Taylor Series.
	 *
	 * cos(x) = 1 - x^2/2! + x^4/4! - x^6/6! + x^8/8! - ...
	 *        = 1 - 1*x^2/2! + x^2*x^2/4! - x^2*x^4/6! + x^2*x^6/8! - ...
	 *
	 * sin(x) = x - x^3/3! + x^5/5! - x^7/7! + x^9/9! - ...
	 *        = x - x^2*x^1/3! + x^2*x^3/5! - x^2*x^5/7! + x^2*x^7/9! - ...
	 *
	 * @param {BigNumber} x     reduced argument
	 * @param {number} mode     sine function if 1, cosine function if 0
	 * @returns {BigNumber} sine or cosine of x
	 */
	module.exports = function cosSin(x, mode) {
	  var one = x.constructor.ONE;

	  var y = x;
	  var yPrev = NaN;
	  var x2 = x.times(x);
	  var num = (mode) ? y : y = one;
	  var den = one;
	  var add = true;

	  for (var k = mode; !y.equals(yPrev); k += 2) {
	    num = num.times(x2);
	    den = den.times(k+1).times(k+2);

	    yPrev = y;
	    add = !add;
	    y = (add) ? y.plus(num.div(den)) : y.minus(num.div(den));
	  }

	  return y;
	};


/***/ },
/* 213 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/sinToCos.js ***!
  \**************************************************/
/***/ function(module, exports) {

	/**
	 * Convert from sine to cosine
	 *
	 * |cos(x)| = sqrt(1 - sin(x)^2)
	 *
	 * @param {BigNumber} value    Sine value of x
	 * @returns {BigNumber} sine as cosine
	 */
	module.exports = function sinToCos(value) {
	  var BigNumber = value.constructor;
	  var precision = BigNumber.precision;
	  BigNumber.config({precision: precision + 2});

	  var ret = BigNumber.ONE.minus(value.times(value)).sqrt();

	  BigNumber.config({precision: precision});
	  return ret.toDP(precision - 1);
	};


/***/ },
/* 214 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/acosh.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var acoshAsinhAsechAcsch = __webpack_require__(/*! ../../utils/bignumber/acoshAsinhAsechAcsch */ 215);

	function factory (type, config, load, typed) {
	  var complexAcos = typed.find(load(__webpack_require__(/*! ./acos */ 204)), ['Complex']);

	  /**
	   * Calculate the hyperbolic arccos of a value,
	   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acosh(x)
	   *
	   * Examples:
	   *
	   *    math.acosh(1.5);       // returns 0.9624236501192069
	   *
	   * See also:
	   *
	   *    cosh, asinh, atanh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
	   */
	  var acosh = typed('acosh', {
	    'number': function (x) {
	      if (x >= 1 || config.predictable) {
	        return Math.log(Math.sqrt(x*x - 1) + x);
	      }
	      if (x <= -1) {
	        return new type.Complex(Math.log(Math.sqrt(x*x - 1) - x), Math.PI);
	      }
	      return _complexAcosh(new type.Complex(x, 0));
	    },

	    'Complex': _complexAcosh,

	    'BigNumber': function (x) {
	      return acoshAsinhAsechAcsch(x, type.BigNumber, false, false);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, acosh);
	    }
	  });

	  /**
	   * Calculate acosh for a complex value
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _complexAcosh(x) {
	    // acosh(z) = (-acos(z).im,  acos(z).re)   for acos(z).im <= 0
	    //            ( acos(z).im, -acos(z).re)   otherwise
	    var temp;
	    var res = complexAcos(x);
	    if (res.im <= 0) {
	      temp = res.re;
	      res.re = -res.im;
	      res.im = temp;
	    } else {
	      temp = res.im;
	      res.im = -res.re;
	      res.re = temp;
	    }

	    return res;
	  }

	  acosh.toTex = '\\cosh^{-1}\\left(${args[0]}\\right)';

	  return acosh;
	}

	exports.name = 'acosh';
	exports.factory = factory;


/***/ },
/* 215 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/acoshAsinhAsechAcsch.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	/**
	 * Calculate the hyperbolic arccosine, arcsine, arcsecant, or arccosecant of x
	 *
	 * acosh(x) = ln(x + sqrt(x^2 - 1))
	 *
	 * asinh(x) = ln(x + sqrt(x^2 + 1))
	 *
	 * asech(x) = acosh(1 / x)
	 *
	 * acsch(x) = asinh(1 / x)
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {boolean} mode         sine function if true, cosine function if false
	 * @param {boolean} reciprocal   is sec or csc
	 * @returns {BigNumber} hyperbolic arccosine, arcsine, arcsecant, or arccosecant of x
	 */
	module.exports = function acoshAsinhAsechAcsch(x, BigNumber, mode, reciprocal) {
	  if (x.isNaN()) {
	    return new BigNumber(NaN);
	  }
	  if (reciprocal && x.isZero()) {
	    return new BigNumber(Infinity);
	  }
	  if (!mode) {
	    if (reciprocal) {
	      if (x.isNegative() || x.gt(BigNumber.ONE)) {
	        throw new Error('asech() only has non-complex values for 0 <= x <= 1.');
	      }
	    } else if (x.lt(BigNumber.ONE)) {
	      throw new Error('acosh() only has non-complex values for x >= 1.');
	    }
	  }

	  var precision = BigNumber.precision;
	  BigNumber.config({precision: precision + 4});

	  var y = new BigNumber(x);
	  y.constructor = BigNumber;

	  if (reciprocal) {
	    y = BigNumber.ONE.div(y);
	  }

	  var x2PlusOrMinus = (mode) ? y.times(y).plus(BigNumber.ONE) : y.times(y).minus(BigNumber.ONE);
	  var ret = y.plus(x2PlusOrMinus.sqrt()).ln();

	  BigNumber.config({precision: precision});
	  return new BigNumber(ret.toPrecision(precision));
	};


/***/ },
/* 216 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/acot.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var atanAcot = __webpack_require__(/*! ../../utils/bignumber/atanAcot */ 206);

	var HALF_PI = 1.5707963267948966;

	function factory (type, config, load, typed) {
	  var complexAtan = typed.find(load(__webpack_require__(/*! ./atan */ 217)), ['Complex']);

	  /**
	   * Calculate the inverse cotangent of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acot(x)
	   *
	   * Examples:
	   *
	   *    math.acot(0.5);           // returns number 0.4636476090008061
	   *    math.acot(math.cot(1.5)); // returns number 1.5
	   *
	   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cot, atan
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cotangent of x
	   */
	  var acot = typed('acot', {
	    'number': function (x) {
	      return (x) ? Math.atan(1 / x) : HALF_PI;
	    },

	    'Complex': function (x) {
	      if (x.im == 0) {
	        return new type.Complex(x.re ? Math.atan(1 / x.re) : HALF_PI, 0);
	      }

	      var den = x.re*x.re + x.im*x.im;
	      x = (den != 0)
	          ? new type.Complex(
	          x.re =  x.re / den,
	          x.im = -x.im / den)
	          : new type.Complex(
	          (x.re != 0) ?  (x.re / 0) : 0,
	          (x.im != 0) ? -(x.im / 0) : 0);

	      return complexAtan(x);
	    },

	    'BigNumber': function (x) {
	      return atanAcot(x, type.BigNumber, true);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, acot);
	    }
	  });

	  acot.toTex = '\\cot^{-1}\\left(${args[0]}\\right)';

	  return acot;
	}

	exports.name = 'acot';
	exports.factory = factory;


/***/ },
/* 217 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/atan.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var atanAcot = __webpack_require__(/*! ../../utils/bignumber/atanAcot */ 206);

	function factory (type, config, load, typed) {
	  var complexLog = typed.find(load(__webpack_require__(/*! ../arithmetic/log */ 118)), ['Complex']);

	  /**
	   * Calculate the inverse tangent of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan(x)
	   *
	   * Examples:
	   *
	   *    math.atan(0.5);           // returns number 0.4636476090008061
	   *    math.atan(math.tan(1.5)); // returns number 1.5
	   *
	   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, asin, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
	   */
	  var atan = typed('atan', {
	    'number': function (x) {
	      return Math.atan(x);
	    },

	    'Complex': function (x) {
	      if (x.re == 0) {
	        if (x.im == 1) {
	          return new type.Complex(0, Infinity);
	        }
	        if (x.im == -1) {
	          return new type.Complex(0, -Infinity);
	        }
	      }

	      // atan(z) = 1/2 * i * (ln(1-iz) - ln(1+iz))
	      var re = x.re;
	      var im = x.im;
	      var den = re * re + (1.0 - im) * (1.0 - im);

	      var temp1 = new type.Complex(
	          (1.0 - im * im - re * re) / den,
	          (-2.0 * re) / den
	      );
	      var temp2 = complexLog(temp1);

	      return new type.Complex(
	          -0.5 * temp2.im,
	          0.5 * temp2.re
	      );
	    },

	    'BigNumber': function (x) {
	      return atanAcot(x, type.BigNumber, false);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since atan(0) = 0
	      return deepMap(x, atan, true);
	    }
	  });

	  atan.toTex = '\\tan^{-1}\\left(${args[0]}\\right)';

	  return atan;
	}

	exports.name = 'atan';
	exports.factory = factory;


/***/ },
/* 218 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/acoth.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var atanhAcoth = __webpack_require__(/*! ../../utils/bignumber/atanhAcoth */ 219);

	var HALF_PI = 1.5707963267948966;

	function factory (type, config, load, typed) {
	  var atanh = typed.find(load(__webpack_require__(/*! ./atanh */ 220)), ['Complex']);

	  /**
	   * Calculate the hyperbolic arccotangent of a value,
	   * defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acoth(x)
	   *
	   * Examples:
	   *
	   *    math.acoth(0.5);       // returns 0.8047189562170503
	   *
	   * See also:
	   *
	   *    acsch, asech
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
	   */
	  var acoth = typed('acoth', {
	    'number': function (x) {
	      if (x >= 1 || x <= -1 || config.predictable) {
	        return isFinite(x) ? (Math.log((x+1)/x) + Math.log(x/(x-1))) / 2 : 0;
	      }
	      return x !== 0 ? _complexAcoth(new type.Complex(x, 0)) : new type.Complex(0, HALF_PI);
	    },

	    'Complex': _complexAcoth,

	    'BigNumber': function (x) {
	      return atanhAcoth(x, type.BigNumber, true);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, acoth);
	    }
	  });

	  /**
	   * Calculate the hyperbolic arccotangent of a complex value
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _complexAcoth (x) {
	    if (x.re == 0 && x.im == 0) {
	      return new type.Complex(0, HALF_PI);
	    }

	    // acoth(z) = -i*atanh(1/z)
	    var den = x.re*x.re + x.im*x.im;
	    x = (den != 0)
	        ? new type.Complex(
	            x.re / den,
	           -x.im / den
	          )
	        : new type.Complex(
	            (x.re != 0) ?  (x.re / 0) : 0,
	            (x.im != 0) ? -(x.im / 0) : 0
	          );

	    return atanh(x);
	  }

	  acoth.toTex = '\\coth^{-1}\\left(${args[0]}\\right)';

	  return acoth;
	}

	exports.name = 'acoth';
	exports.factory = factory;


/***/ },
/* 219 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/atanhAcoth.js ***!
  \****************************************************/
/***/ function(module, exports) {

	
	/**
	 * Calculate the hyperbolic arctangent or arccotangent of x
	 *
	 * atanh(x) = ln((1 + x)/(1 - x)) / 2
	 *
	 * acoth(x) = atanh(1 / x)
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {boolean} reciprocal   is sec or csc
	 * @returns {BigNumber} hyperbolic arctangent or arccotangent of x
	 */
	module.exports = function atanhAcoth(x, BigNumber, reciprocal) {
	  if (x.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  var absX = x.abs();
	  if (absX.eq(BigNumber.ONE)) {
	    return new BigNumber(x.isNegative() ? -Infinity : Infinity);
	  }
	  if (absX.gt(BigNumber.ONE)) {
	    if (!reciprocal) {
	      throw new Error('atanh() only has non-complex values for |x| <= 1.');
	    }
	  } else if (reciprocal) {
	    throw new Error('acoth() has complex values for |x| < 1.');
	  }

	  if (x.isZero()) {
	    return new BigNumber(0);
	  }

	  var precision = BigNumber.precision;
	  BigNumber.config({precision: precision + 4});

	  var y = new BigNumber(x);
	  y.constructor = BigNumber;

	  if (reciprocal) {
	    y = BigNumber.ONE.div(y);
	  }
	  var ret = BigNumber.ONE.plus(y).div(BigNumber.ONE.minus(y)).ln().div(2);

	  BigNumber.config({precision: precision});
	  return new BigNumber(ret.toPrecision(precision));
	};


/***/ },
/* 220 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/atanh.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var atanhAcoth = __webpack_require__(/*! ../../utils/bignumber/atanhAcoth */ 219);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arctangent of a value,
	   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atanh(x)
	   *
	   * Examples:
	   *
	   *    math.atanh(0.5);       // returns 0.5493061443340549
	   *
	   * See also:
	   *
	   *    acosh, asinh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
	   */
	  var atanh = typed('atanh', {
	    'number': function (x) {
	      if ((x <= 1 && x >= -1) || config.predictable) {
	        return Math.log((1 + x)/(1 - x)) / 2;
	      }
	      return _complexAtanh(new type.Complex(x, 0));
	    },

	    'Complex': _complexAtanh,

	    'BigNumber': function (x) {
	      return atanhAcoth(x, type.BigNumber, false);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since atanh(0) = 0
	      return deepMap(x, atanh, true);
	    }
	  });

	  /**
	   * Calculate the hyperbolic arctangent of a complex number
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _complexAtanh (x) {
	    // x.im should equal -pi / 2 in this case
	    var noIM = x.re > 1 && x.im == 0;

	    var oneMinus = 1 - x.re;
	    var onePlus = 1 + x.re;
	    var den = oneMinus*oneMinus + x.im*x.im;
	    x = (den != 0)
	        ? new type.Complex(
	        (onePlus*oneMinus - x.im*x.im) / den,
	        (x.im*oneMinus + onePlus*x.im) / den
	    )
	        : new type.Complex(
	        (x.re != -1) ? (x.re / 0) : 0,
	        (x.im != 0) ? (x.im / 0) : 0
	    );

	    var temp = x.re;
	    x.re = Math.log(Math.sqrt(x.re*x.re + x.im*x.im)) / 2;
	    x.im = Math.atan2(x.im, temp) / 2;

	    if (noIM) {
	      x.im = -x.im;
	    }
	    return x;
	  }

	  atanh.toTex = '\\tanh^{-1}\\left(${args[0]}\\right)';

	  return atanh;
	}

	exports.name = 'atanh';
	exports.factory = factory;


/***/ },
/* 221 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/acsc.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var asinAcsc = __webpack_require__(/*! ../../utils/bignumber/asinAcsc */ 207);

	var HALF_PI = 1.5707963267948966;

	function factory (type, config, load, typed) {
	  var complexAsin = typed.find(load(__webpack_require__(/*! ./asin */ 222)), ['Complex']);

	  /**
	   * Calculate the inverse cosecant of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsc(x)
	   *
	   * Examples:
	   *
	   *    math.acsc(0.5);           // returns number 0.5235987755982989
	   *    math.acsc(math.csc(1.5)); // returns number ~1.5
	   *
	   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    csc, asin, asec
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cosecant of x
	   */
	  var acsc = typed('acsc', {
	    'number': function (x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.asin(1 / x);
	      }
	      return _complexAcsc(new type.Complex(x, 0));
	    },

	    'Complex': _complexAcsc,

	    'BigNumber': function (x) {
	      return asinAcsc(x, type.BigNumber, true);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, acsc);
	    }
	  });

	  /**
	   * Calculate acsc for a complex value
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _complexAcsc (x) {
	    if (x.re == 0 && x.im == 0) {
	      return new type.Complex(HALF_PI, Infinity);
	    }

	    var den = x.re*x.re + x.im*x.im;
	    x = (den != 0)
	        ? new type.Complex(
	        x.re =  x.re / den,
	        x.im = -x.im / den)
	        : new type.Complex(
	        (x.re != 0) ?  (x.re / 0) : 0,
	        (x.im != 0) ? -(x.im / 0) : 0);

	    return complexAsin(x);
	  }

	  acsc.toTex = '\\csc^{-1}\\left(${args[0]}\\right)';

	  return acsc;
	}

	exports.name = 'acsc';
	exports.factory = factory;


/***/ },
/* 222 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/asin.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var asinAcsc = __webpack_require__(/*! ../../utils/bignumber/asinAcsc */ 207);

	function factory (type, config, load, typed) {
	  var complexSqrt = typed.find(load(__webpack_require__(/*! ../arithmetic/sqrt */ 128)), ['Complex']);
	  var complexLog = typed.find(load(__webpack_require__(/*! ../arithmetic/log */ 118)), ['Complex']);

	  /**
	   * Calculate the inverse sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asin(x)
	   *
	   * Examples:
	   *
	   *    math.asin(0.5);           // returns number 0.5235987755982989
	   *    math.asin(math.sin(1.5)); // returns number ~1.5
	   *
	   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    sin, atan, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
	   */
	  var asin = typed('asin', {
	    'number': function (x) {
	      if ((x >= -1 && x <= 1) || config.predictable) {
	        return Math.asin(x);
	      }
	      else {
	        return _complexAsin(new type.Complex(x, 0));
	      }
	    },

	    'Complex': _complexAsin,

	    'BigNumber': function (x) {
	      return asinAcsc(x, type.BigNumber, false);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since asin(0) = 0
	      return deepMap(x, asin, true);
	    }
	  });

	  /**
	   * Calculate asin for a complex value
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _complexAsin(x) {
	    // asin(z) = -i*log(iz + sqrt(1-z^2))
	    var re = x.re;
	    var im = x.im;
	    var temp1 = new type.Complex(
	        im * im - re * re + 1.0,
	        -2.0 * re * im
	    );
	    var temp2 = complexSqrt(temp1);
	    var temp3 = new type.Complex(
	        temp2.re - im,
	        temp2.im + re
	    );
	    var temp4 = complexLog(temp3);

	    return new type.Complex(temp4.im, -temp4.re);
	  }

	  asin.toTex = '\\sin^{-1}\\left(${args[0]}\\right)';

	  return asin;
	}

	exports.name = 'asin';
	exports.factory = factory;


/***/ },
/* 223 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/acsch.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var acoshAsinhAsechAcsch = __webpack_require__(/*! ../../utils/bignumber/acoshAsinhAsechAcsch */ 215);

	function factory (type, config, load, typed) {
	  var asinh = typed.find(load(__webpack_require__(/*! ./asinh */ 224)), ['Complex']);

	  /**
	   * Calculate the hyperbolic arccosecant of a value,
	   * defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsch(x)
	   *
	   * Examples:
	   *
	   *    math.acsch(0.5);       // returns 1.4436354751788103
	   *
	   * See also:
	   *
	   *    asech, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
	   */
	  var acsch = typed('acsch', {
	    'number': function (x) {
	      x = 1 / x;
	      return Math.log(x + Math.sqrt(x*x + 1));
	    },

	    'Complex': function (x) {
	      if (x.im == 0) {
	        x = (x.re != 0)
	            ? Math.log(x.re + Math.sqrt(x.re*x.re + 1))
	            : Infinity;
	        return new type.Complex(x, 0);
	      }

	      // acsch(z) = -i*asinh(1/z)
	      var den = x.re*x.re + x.im*x.im;
	      x = (den != 0)
	          ? new type.Complex(
	          x.re / den,
	          -x.im / den
	      )
	          : new type.Complex(
	          (x.re != 0) ?  (x.re / 0) : 0,
	          (x.im != 0) ? -(x.im / 0) : 0
	      );

	      return asinh(x);
	    },

	    'BigNumber': function (x) {
	      return acoshAsinhAsechAcsch(x, type.BigNumber, true, true);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, acsch);
	    }
	  });

	  acsch.toTex = '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)';

	  return acsch;
	}

	exports.name = 'acsch';
	exports.factory = factory;


/***/ },
/* 224 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/asinh.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var acoshAsinhAsechAcsch = __webpack_require__(/*! ../../utils/bignumber/acoshAsinhAsechAcsch */ 215);

	function factory (type, config, load, typed) {
	  var complexAsin = typed.find(load(__webpack_require__(/*! ./asin */ 222)), ['Complex']);

	  /**
	   * Calculate the hyperbolic arcsine of a value,
	   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asinh(x)
	   *
	   * Examples:
	   *
	   *    math.asinh(0.5);       // returns 0.48121182505960347
	   *
	   * See also:
	   *
	   *    acosh, atanh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
	   */
	  var asinh = typed('asinh', {
	    'number': function (x) {
	      return Math.log(Math.sqrt(x*x + 1) + x);
	    },

	    'Complex': function (x) {
	      // asinh(z) = (-asin((z.im, -z.re)).im, asin((z.im, -z.re)).re)
	      var temp = x.im;
	      x.im = -x.re;
	      x.re = temp;

	      var res = complexAsin(x);

	      // restore original values
	      x.re = -x.im;
	      x.im = temp;

	      temp = res.re;
	      res.re = -res.im;
	      res.im = temp;

	      return res;
	    },

	    'BigNumber': function (x) {
	      return acoshAsinhAsechAcsch(x, type.BigNumber, true, false);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since asinh(0) = 0
	      return deepMap(x, asinh, true);
	    }
	  });

	  asinh.toTex = '\\sinh^{-1}\\left(${args[0]}\\right)';

	  return asinh;
	}

	exports.name = 'asinh';
	exports.factory = factory;


/***/ },
/* 225 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/asec.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var acosAsec = __webpack_require__(/*! ../../utils/bignumber/acosAsec */ 205);

	function factory (type, config, load, typed) {
	  var complexAcos = typed.find(load(__webpack_require__(/*! ./acos */ 204)), ['Complex']);

	  /**
	   * Calculate the inverse secant of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asec(x)
	   *
	   * Examples:
	   *
	   *    math.asec(0.5);           // returns 1.0471975511965979
	   *    math.asec(math.sec(1.5)); // returns 1.5
	   *
	   *    math.asec(2);             // returns 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    acos, acot, acsc
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} The arc secant of x
	   */
	  var asec = typed('asec', {
	    'number': function (x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.acos(1 / x);
	      }
	      return _complexAsec(new type.Complex(x, 0));
	    },

	    'Complex': _complexAsec,

	    'BigNumber': function (x) {
	      return acosAsec(x, type.BigNumber, true);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, asec);
	    }
	  });

	  /**
	   * Calculate asec for a complex value
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _complexAsec (x) {
	    if (x.re == 0 && x.im == 0) {
	      return new type.Complex(0, Infinity);
	    }

	    var den = x.re*x.re + x.im*x.im;
	    x = (den != 0)
	        ? new type.Complex(
	        x.re =  x.re / den,
	        x.im = -x.im / den)
	        : new type.Complex(
	        (x.re != 0) ?  (x.re / 0) : 0,
	        (x.im != 0) ? -(x.im / 0) : 0);

	    return complexAcos(x);
	  }

	  asec.toTex = '\\sec^{-1}\\left(${args[0]}\\right)';

	  return asec;
	}

	exports.name = 'asec';
	exports.factory = factory;


/***/ },
/* 226 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/asech.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var acoshAsinhAsechAcsch = __webpack_require__(/*! ../../utils/bignumber/acoshAsinhAsechAcsch */ 215);

	function factory (type, config, load, typed) {
	  var acosh = typed.find(load(__webpack_require__(/*! ./acosh */ 214)), ['Complex']);

	  /**
	   * Calculate the hyperbolic arcsecant of a value,
	   * defined as `asech(x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asech(x)
	   *
	   * Examples:
	   *
	   *    math.asech(0.5);       // returns 1.3169578969248166
	   *
	   * See also:
	   *
	   *    acsch, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
	   */
	  var asech = typed('asech', {
	    'number': function (x) {
	      if ((x <= 1 && x >= -1) || config.predictable) {
	        x = 1 / x;

	        var ret = Math.sqrt(x*x - 1);
	        if (x > 0 || config.predictable) {
	          return Math.log(ret + x);
	        }

	        return new type.Complex(Math.log(ret - x), Math.PI);
	      }

	      return _complexAsech(new type.Complex(x, 0));
	    },

	    'Complex': _complexAsech,

	    'BigNumber': function (x) {
	      return acoshAsinhAsechAcsch(x, type.BigNumber, false, true);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, asech);
	    }
	  });

	  /**
	   * Calculate the hyperbolic arcsecant of a number
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */
	  function _complexAsech (x) {
	    if (x.re == 0 && x.im == 0) {
	      return new type.Complex(Infinity, 0);
	    }

	    // acsch(z) = -i*asinh(1/z)
	    var den = x.re*x.re + x.im*x.im;
	    x = (den != 0)
	        ? new type.Complex(
	        x.re / den,
	        -x.im / den
	    )
	        : new type.Complex(
	        (x.re != 0) ?  (x.re / 0) : 0,
	        (x.im != 0) ? -(x.im / 0) : 0
	    );

	    return acosh(x);
	  }

	  asech.toTex = '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)';

	  return asech;
	}

	exports.name = 'asech';
	exports.factory = factory;


/***/ },
/* 227 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/atan2.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bigAtan2 = __webpack_require__(/*! ../../utils/bignumber/atan2 */ 228);

	function factory (type, config, load, typed) {

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm02 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm02 */ 112));
	  var algorithm03 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm03 */ 47));
	  var algorithm09 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm09 */ 114));
	  var algorithm11 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm11 */ 58));
	  var algorithm12 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm12 */ 81));
	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Calculate the inverse tangent function with two arguments, y/x.
	   * By providing two arguments, the right quadrant of the computed angle can be
	   * determined.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan2(y, x)
	   *
	   * Examples:
	   *
	   *    math.atan2(2, 2) / math.pi;       // returns number 0.25
	   *
	   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg
	   *    var x = math.cos(angle);
	   *    var y = math.sin(angle);
	   *
	   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, atan, sin, cos
	   *
	   * @param {number | Array | Matrix} y  Second dimension
	   * @param {number | Array | Matrix} x  First dimension
	   * @return {number | Array | Matrix} Four-quadrant inverse tangent
	   */
	  var atan2 = typed('atan2', {

	    'number, number': Math.atan2,

	    // TODO: implement atan2 for complex numbers

	    'BigNumber, BigNumber': function (y, x) {
	      return bigAtan2(y, x, type.BigNumber);
	    },

	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;

	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse .* sparse
	              c = algorithm09(x, y, atan2, false);
	              break;
	            default:
	              // sparse .* dense
	              c = algorithm02(y, x, atan2, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense .* sparse
	              c = algorithm03(x, y, atan2, false);
	              break;
	            default:
	              // dense .* dense
	              c = algorithm13(x, y, atan2);
	              break;
	          }
	          break;
	      }
	      return c;
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return atan2(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return atan2(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return atan2(x, matrix(y));
	    },

	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, atan2, false);
	          break;
	        default:
	          c = algorithm14(x, y, atan2, false);
	          break;
	      }
	      return c;
	    },

	    'number | BigNumber, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, atan2, true);
	          break;
	        default:
	          c = algorithm14(y, x, atan2, true);
	          break;
	      }
	      return c;
	    },

	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, atan2, false).valueOf();
	    },

	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, atan2, true).valueOf();
	    }
	  });

	  atan2.toTex = '\\mathrm{atan2}\\left(${args}\\right)';

	  return atan2;
	}

	exports.name = 'atan2';
	exports.factory = factory;


/***/ },
/* 228 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/atan2.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	var constants = __webpack_require__(/*! ./constants */ 156);
	var atanAcot = __webpack_require__(/*! ./atanAcot */ 206);

	/**
	 * Calculate the arctangent of y, x
	 *
	 * @param {BigNumber} y
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} arctangent of y, x
	 */
	module.exports = function arctan2(y, x, BigNumber) {
	  var precision = BigNumber.precision;

	  if (x.isZero()) {
	    if (y.isZero()) {
	      return new BigNumber(NaN);
	    }

	    var halfPi = constants.pi(BigNumber.constructor({precision: precision + 2})).div(2).toDP(precision - 1);
	    halfPi.constructor = BigNumber;
	    halfPi.s = y.s;

	    return halfPi;
	  }

	  BigNumber.config({precision: precision + 2});

	  var ret = atanAcot(y.div(x), BigNumber, false);
	  if (x.isNegative()) {
	    var pi = constants.pi(BigNumber);
	    ret = y.isNegative() ? ret.minus(pi) : ret.plus(pi);
	  }

	  ret.constructor = BigNumber;
	  BigNumber.config({precision: precision});
	  return ret.toDP(precision - 1);
	};


/***/ },
/* 229 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/cos.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var cosSinSecCsc = __webpack_require__(/*! ../../utils/bignumber/cosSinSecCsc */ 210);

	function factory (type, config, load, typed) {
	  var cosh = typed.find(load(__webpack_require__(/*! ./cosh */ 230)), ['number']);
	  var sinh = typed.find(load(__webpack_require__(/*! ./sinh */ 232)), ['number']);

	  /**
	   * Calculate the cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cos(x)
	   *
	   * Examples:
	   *
	   *    math.cos(2);                      // returns number -0.4161468365471422
	   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475
	   *    math.cos(math.unit(180, 'deg'));  // returns number -1
	   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5
	   *
	   *    var angle = 0.2;
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
	   */
	  var cos = typed('cos', {
	    'number': Math.cos,

	    'Complex': function (x) {
	      // cos(z) = (exp(iz) + exp(-iz)) / 2
	      return new type.Complex(
	          Math.cos(x.re) * cosh(-x.im),
	          Math.sin(x.re) * sinh(-x.im)
	      );
	    },

	    'BigNumber': function (x) {
	      return cosSinSecCsc(x, type.BigNumber, 0, false);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function cos is no angle');
	      }
	      return Math.cos(x.value);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, cos);
	    }
	  });

	  cos.toTex = '\\cos\\left(${args[0]}\\right)';

	  return cos;
	}

	exports.name = 'cos';
	exports.factory = factory;


/***/ },
/* 230 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/cosh.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var coshSinhCschSech = __webpack_require__(/*! ../../utils/bignumber/coshSinhCschSech */ 231);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosine of a value,
	   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cosh(x)
	   *
	   * Examples:
	   *
	   *    math.cosh(0.5);       // returns number 1.1276259652063807
	   *
	   * See also:
	   *
	   *    sinh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
	   */
	  var cosh = typed('cosh', {
	    'number': _cosh,

	    'Complex': function (x) {
	      var ep = Math.exp(x.re);
	      var en = Math.exp(-x.re);
	      return new type.Complex(Math.cos(x.im) * (ep + en) / 2, Math.sin(x.im) * (ep - en) / 2);
	    },

	    'BigNumber': function (x) {
	      return coshSinhCschSech(x, type.BigNumber, false, false);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function cosh is no angle');
	      }
	      return _cosh(x.value);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, cosh);
	    }
	  });

	  cosh.toTex = '\\cosh\\left(${args[0]}\\right)';

	  return cosh;
	}

	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _cosh(x) {
	  return (Math.exp(x) + Math.exp(-x)) / 2;
	}

	exports.name = 'cosh';
	exports.factory = factory;


/***/ },
/* 231 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/coshSinhCschSech.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	/**
	 * Calculate the hyperbolic sine, cosine, secant, or cosecant of x
	 *
	 * cosh(x) = (exp(x) + exp(-x)) / 2
	 *         = (e^x + 1/e^x) / 2
	 *
	 * sinh(x) = (exp(x) - exp(-x)) / 2
	 *         = (e^x - 1/e^x) / 2
	 *
	 * sech(x) = 2 / (exp(x) + exp(-x))
	 *         = 2 / (e^x + 1/e^x)
	 *
	 * csch(x) = 2 / (exp(x) - exp(-x))
	 *         = 2 / (e^x - 1/e^x)
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {boolean} mode         sinh function if true, cosh function if false
	 * @param {boolean} reciprocal   is sech or csch
	 * @returns {BigNumber} hyperbolic cosine, sine, secant. or cosecant of x
	 */
	module.exports = function coshSinhSschSech(x, BigNumber, mode, reciprocal) {
	  if (x.isNaN()) {
	    return new BigNumber(NaN);
	  }
	  if (!x.isFinite()) {
	    if (reciprocal) {
	      return new BigNumber(0);
	    }
	    return new BigNumber((mode) ? x : Infinity);
	  }

	  var precision = BigNumber.precision;
	  BigNumber.config({precision: precision + 4});

	  var y = new BigNumber(x);
	  y.constructor = BigNumber;

	  y = y.exp();
	  y = (mode) ? y.minus(BigNumber.ONE.div(y)) : y.plus(BigNumber.ONE.div(y));
	  y = (reciprocal) ? new BigNumber(2).div(y) : y.div(2);

	  BigNumber.config({precision: precision});
	  return new BigNumber(y.toPrecision(precision));
	};


/***/ },
/* 232 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/sinh.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var coshSinhCschSech = __webpack_require__(/*! ../../utils/bignumber/coshSinhCschSech */ 231);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic sine of a value,
	   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sinh(x)
	   *
	   * Examples:
	   *
	   *    math.sinh(0.5);       // returns number 0.5210953054937474
	   *
	   * See also:
	   *
	   *    cosh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
	   */
	  var sinh = typed('sinh', {
	    'number': _sinh,

	    'Complex': function (x) {
	      var cim = Math.cos(x.im);
	      var sim = Math.sin(x.im);
	      var ep = Math.exp(x.re);
	      var en = Math.exp(-x.re);
	      return new type.Complex(cim * (ep - en) / 2, sim * (ep + en) / 2);
	    },

	    'BigNumber': function (x) {
	      return coshSinhCschSech(x, type.BigNumber, true, false);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function sinh is no angle');
	      }
	      return _sinh(x.value);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since sinh(0) = 0
	      return deepMap(x, sinh, true);
	    }
	  });

	  sinh.toTex = '\\sinh\\left(${args[0]}\\right)';

	  return sinh;
	}

	/**
	 * Calculate the hyperbolic sine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _sinh (x) {
	  if (Math.abs(x) < 1) {
	    return x + (x * x * x) / 6 + (x * x * x * x * x) / 120;
	  } else {
	    return (Math.exp(x) - Math.exp(-x)) / 2;
	  }
	}

	exports.name = 'sinh';
	exports.factory = factory;


/***/ },
/* 233 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/cot.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var tanCot = __webpack_require__(/*! ../../utils/bignumber/tanCot */ 234);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the cotangent of a value. `cot(x)` is defined as `1 / tan(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cot(x)
	   *
	   * Examples:
	   *
	   *    math.cot(2);      // returns number -0.45765755436028577
	   *    1 / math.tan(2);  // returns number -0.45765755436028577
	   *
	   * See also:
	   *
	   *    tan, sec, csc
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cotangent of x
	   */
	  var cot = typed('cot', {
	    'number': function (x) {
	      return 1 / Math.tan(x);
	    },

	    'Complex': function (x) {
	      var den =
	          Math.exp(-4 * x.im) -
	          2 * Math.exp(-2 * x.im) * Math.cos(2 * x.re) + 1;

	      return new type.Complex(
	          2 * Math.exp(-2 * x.im) * Math.sin(2 * x.re) / den,
	          (Math.exp(-4 * x.im) - 1) / den
	      );
	    },

	    'BigNumber': function (x) {
	      return tanCot(x, type.BigNumber, true);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function cot is no angle');
	      }
	      return 1 / Math.tan(x.value);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, cot);
	    }
	  });

	  cot.toTex = '\\cot\\left(${args[0]}\\right)';

	  return cot;
	}

	exports.name = 'cot';
	exports.factory = factory;


/***/ },
/* 234 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/tanCot.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	var constants = __webpack_require__(/*! ./constants */ 156);
	var cosSinSecCsc = __webpack_require__(/*! ./cosSinSecCsc */ 210);
	var sinToCos = __webpack_require__(/*! ./sinToCos */ 213);
	var reduceToPeriod = __webpack_require__(/*! ./reduceToPeriod */ 211);

	/**
	 * Calculate the tangent of x
	 *
	 * tan(x) = sin(x) / cos(x)
	 *
	 * cot(x) = cos(x) / sin(x)
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {boolean} reciprocal   is cot
	 * @returns {BigNumber} tangent or cotangent of x
	 */
	module.exports = function tanCot(x, BigNumber, reciprocal) {
	  if (x.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  var precision = BigNumber.precision;
	  var pi = constants.pi(BigNumber.constructor({precision: precision + 2}));
	  var halfPi = pi.div(2).toDP(precision - 1);
	  pi = pi.toDP(precision - 1);

	  var y = reduceToPeriod(x, BigNumber, 1)[0];
	  if (y.abs().eq(pi)) {
	    return new BigNumber(Infinity);
	  }

	  BigNumber.config({precision: precision + 4});
	  var sin = cosSinSecCsc(y, BigNumber, 1, false);
	  var cos = sinToCos(sin);

	  sin = sin.toDP(precision);
	  cos = cos.toDP(precision);

	  // Make sure sign for cosine is correct
	  if (y.eq(x)) {
	    if (y.gt(halfPi)) {
	      cos.s = -cos.s;
	    }
	  } else if (pi.minus(y.abs()).gt(halfPi)) {
	    cos.s = -cos.s;
	  }

	  var tan = (reciprocal) ? cos.div(sin) : sin.div(cos);

	  BigNumber.config({precision: precision});
	  return new BigNumber(tan.toPrecision(precision));
	};


/***/ },
/* 235 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/coth.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var tanhCoth = __webpack_require__(/*! ../../utils/bignumber/tanhCoth */ 236);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cotangent of a value,
	   * defined as `coth(x) = 1 / tanh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.coth(x)
	   *
	   * Examples:
	   *
	   *    // coth(x) = 1 / tanh(x)
	   *    math.coth(2);         // returns 1.0373147207275482
	   *    1 / math.tanh(2);     // returns 1.0373147207275482
	   *
	   * See also:
	   *
	   *    sinh, tanh, cosh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
	   */
	  var coth = typed('coth', {
	    'number': _coth,

	    'Complex': function (x) {
	      var r = Math.exp(2 * x.re);
	      var re = r * Math.cos(2 * x.im);
	      var im = r * Math.sin(2 * x.im);
	      var den = (re - 1) * (re - 1) + im * im;
	      return new type.Complex(
	          ((re + 1) * (re - 1) + im * im) / den,
	          -2 * im / den
	      );
	    },

	    'BigNumber': function (x) {
	      return tanhCoth(x, type.BigNumber, true);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function coth is no angle');
	      }
	      return _coth(x.value);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, coth);
	    }
	  });

	  coth.toTex = '\\coth\\left(${args[0]}\\right)';

	  return coth;
	}

	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _coth(x) {
	  var e = Math.exp(2 * x);
	  return (e + 1) / (e - 1);
	}

	exports.name = 'coth';
	exports.factory = factory;


/***/ },
/* 236 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/utils/bignumber/tanhCoth.js ***!
  \**************************************************/
/***/ function(module, exports) {

	/**
	 * Calculate the hyperbolic tangent of x
	 *
	 * tanh(x) = (exp(x) + exp(-x)) / (exp(x) - exp(-x))
	 *         = (exp(2x) - 1) / (exp(2x) + 1)
	 *         = (e^x - 1/e^x) / (e^x + 1/e^x)
	 *
	 * coth(x) = (exp(x) - exp(-x)) / (exp(x) + exp(-x))
	 *         = (exp(2x) + 1) / (exp(2x) - 1)
	 *         = (e^x + 1/e^x) / (e^x - 1/e^x)
	 *
	 * @param {BigNumber} x
	 * @param {function} BigNumber   BigNumber constructor
	 * @param {boolean} reciprocal   is coth
	 * @returns {BigNumber} hyperbolic tangent or cotangent of x
	 */
	module.exports = function tanhCoth(x, BigNumber, reciprocal) {
	  if (x.isNaN()) {
	    return new BigNumber(NaN);
	  }
	  if (!x.isFinite()) {
	    return new BigNumber(x.s);
	  }

	  var precision = BigNumber.precision;
	  BigNumber.config({precision: precision + 4});

	  var y = new BigNumber(x);
	  y.constructor = BigNumber;

	  var posExp = y.exp();
	  var negExp = BigNumber.ONE.div(posExp);
	  var ret = posExp.minus(negExp);
	  ret = (reciprocal) ? posExp.plus(negExp).div(ret) : ret.div(posExp.plus(negExp));

	  BigNumber.config({precision: precision});
	  return ret.toDP(precision - 1);
	};


/***/ },
/* 237 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/csc.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var cosSinSecCsc = __webpack_require__(/*! ../../utils/bignumber/cosSinSecCsc */ 210);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csc(x)
	   *
	   * Examples:
	   *
	   *    math.csc(2);      // returns number 1.099750170294617
	   *    1 / math.sin(2);  // returns number 1.099750170294617
	   *
	   * See also:
	   *
	   *    sin, sec, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cosecant of x
	   */
	  var csc = typed('csc', {
	    'number': function (x) {
	      return 1 / Math.sin(x);
	    },

	    'Complex': function (x) {
	      // csc(z) = 1/sin(z) = (2i) / (exp(iz) - exp(-iz))
	      var den =
	          0.25 * (Math.exp(-2 * x.im) + Math.exp(2 * x.im)) -
	          0.5 * Math.cos(2 * x.re);

	      return new type.Complex (
	          0.5 * Math.sin(x.re) * (Math.exp(-x.im) + Math.exp(x.im)) / den,
	          0.5 * Math.cos(x.re) * (Math.exp(-x.im) - Math.exp(x.im)) / den
	      );
	    },

	    'BigNumber': function (x) {
	      return cosSinSecCsc(x, type.BigNumber, 1, true);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function csc is no angle');
	      }
	      return 1 / Math.sin(x.value);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, csc);
	    }
	  });

	  csc.toTex = '\\csc\\left(${args[0]}\\right)';

	  return csc;
	}

	exports.name = 'csc';
	exports.factory = factory;


/***/ },
/* 238 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/csch.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var coshSinhCschSech = __webpack_require__(/*! ../../utils/bignumber/coshSinhCschSech */ 231);
	var sign = __webpack_require__(/*! ../../utils/number */ 24).sign;

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosecant of a value,
	   * defined as `csch(x) = 1 / sinh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csch(x)
	   *
	   * Examples:
	   *
	   *    // csch(x) = 1/ sinh(x)
	   *    math.csch(0.5);       // returns 1.9190347513349437
	   *    1 / math.sinh(0.5);   // returns 1.9190347513349437
	   *
	   * See also:
	   *
	   *    sinh, sech, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
	   */
	  var csch = typed('csch', {
	    'number': _csch,

	    'Complex': function (x) {
	      var ep = Math.exp(x.re);
	      var en = Math.exp(-x.re);
	      var re = Math.cos(x.im) * (ep - en);
	      var im = Math.sin(x.im) * (ep + en);
	      var den = re * re + im * im;
	      return new type.Complex(2 * re / den, -2 * im /den);
	    },

	    'BigNumber': function (x) {
	      return coshSinhCschSech(x, type.BigNumber, true, true);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function csch is no angle');
	      }
	      return _csch(x.value);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, csch);
	    }
	  });

	  csch.toTex = '\\mathrm{csch}\\left(${args[0]}\\right)';

	  return csch;
	}

	/**
	 * Calculate the hyperbolic cosecant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _csch(x) {
	  // consider values close to zero (+/-)
	  if (x == 0) {
	    return Number.POSITIVE_INFINITY;
	  }
	  else {
	    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
	  }
	}

	exports.name = 'csch';
	exports.factory = factory;


/***/ },
/* 239 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/sec.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var cosSinSecCsc = __webpack_require__(/*! ../../utils/bignumber/cosSinSecCsc */ 210);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sec(x)
	   *
	   * Examples:
	   *
	   *    math.sec(2);      // returns number -2.4029979617223822
	   *    1 / math.cos(2);  // returns number -2.4029979617223822
	   *
	   * See also:
	   *
	   *    cos, csc, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Secant of x
	   */
	  var sec = typed('sec', {
	    'number': function (x) {
	      return 1 / Math.cos(x);
	    },

	    'Complex': function (x) {
	      // sec(z) = 1/cos(z) = 2 / (exp(iz) + exp(-iz))
	      var den =
	          0.25 * (Math.exp(-2 * x.im) + Math.exp(2 * x.im)) +
	          0.5 * Math.cos(2 * x.re);

	      return new type.Complex(
	          0.5 * Math.cos(x.re) * (Math.exp(-x.im) + Math.exp( x.im)) / den,
	          0.5 * Math.sin(x.re) * (Math.exp( x.im) - Math.exp(-x.im)) / den
	      );
	    },

	    'BigNumber': function (x) {
	      return cosSinSecCsc(x, type.BigNumber, 0, true);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function sec is no angle');
	      }
	      return 1 / Math.cos(x.value);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, sec);
	    }
	  });

	  sec.toTex = '\\sec\\left(${args[0]}\\right)';

	  return sec;
	}

	exports.name = 'sec';
	exports.factory = factory;


/***/ },
/* 240 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/sech.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var coshSinhCschSech = __webpack_require__(/*! ../../utils/bignumber/coshSinhCschSech */ 231);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic secant of a value,
	   * defined as `sech(x) = 1 / cosh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sech(x)
	   *
	   * Examples:
	   *
	   *    // sech(x) = 1/ cosh(x)
	   *    math.sech(0.5);       // returns 0.886818883970074
	   *    1 / math.cosh(0.5);   // returns 0.886818883970074
	   *
	   * See also:
	   *
	   *    cosh, csch, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
	   */
	  var sech = typed('sech', {
	    'number': _sech,

	    'Complex': function (x) {
	      var ep = Math.exp(x.re);
	      var en = Math.exp(-x.re);
	      var re = Math.cos(x.im) * (ep + en);
	      var im = Math.sin(x.im) * (ep - en);
	      var den = re * re + im * im;
	      return new type.Complex(2 * re / den, -2 * im / den);
	    },

	    'BigNumber': function (x) {
	      return coshSinhCschSech(x, type.BigNumber, false, true);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function sech is no angle');
	      }
	      return _sech(x.value);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, sech);
	    }
	  });

	  sech.toTex = '\\mathrm{sech}\\left(${args[0]}\\right)';

	  return sech;
	}

	/**
	 * Calculate the hyperbolic secant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _sech(x) {
	  return 2 / (Math.exp(x) + Math.exp(-x));
	}

	exports.name = 'sech';
	exports.factory = factory;


/***/ },
/* 241 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/sin.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var cosSinSecCsc = __webpack_require__(/*! ../../utils/bignumber/cosSinSecCsc */ 210);

	function factory (type, config, load, typed) {
	  var cosh = typed.find(load(__webpack_require__(/*! ./cosh */ 230)), ['number']);
	  var sinh = typed.find(load(__webpack_require__(/*! ./sinh */ 232)), ['number']);

	  /**
	   * Calculate the sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sin(x)
	   *
	   * Examples:
	   *
	   *    math.sin(2);                      // returns number 0.9092974268256813
	   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475
	   *    math.sin(math.unit(90, 'deg'));   // returns number 1
	   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5
	   *
	   *    var angle = 0.2;
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
	   */
	  var sin = typed('sin', {
	    'number': Math.sin,

	    'Complex': function (x) {
	      return new type.Complex(
	          Math.sin(x.re) * cosh(-x.im),
	          Math.cos(x.re) * sinh(x.im)
	      );
	    },

	    'BigNumber': function (x) {
	      return cosSinSecCsc(x, type.BigNumber, 1, false);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function sin is no angle');
	      }
	      return Math.sin(x.value);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since sin(0) = 0
	      return deepMap(x, sin, true);
	    }
	  });

	  sin.toTex = '\\sin\\left(${args[0]}\\right)';

	  return sin;
	}

	exports.name = 'sin';
	exports.factory = factory;


/***/ },
/* 242 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/tan.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var tanCot = __webpack_require__(/*! ../../utils/bignumber/tanCot */ 234);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tan(x)
	   *
	   * Examples:
	   *
	   *    math.tan(0.5);                    // returns number 0.5463024898437905
	   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905
	   *    math.tan(math.pi / 4);            // returns number 1
	   *    math.tan(math.unit(45, 'deg'));   // returns number 1
	   *
	   * See also:
	   *
	   *    atan, sin, cos
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
	   */
	  var tan = typed('tan', {
	    'number': Math.tan,

	    'Complex': function (x) {
	      var den =
	          Math.exp(-4 * x.im) +
	          2 * Math.exp(-2 * x.im) * Math.cos(2 * x.re) +
	          1;

	      return new type.Complex(
	          2 * Math.exp(-2 * x.im) * Math.sin(2 * x.re) / den,
	          (1 - Math.exp(-4 * x.im)) / den
	      );
	    },

	    'BigNumber': function (x) {
	      return tanCot(x, type.BigNumber, false);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function tan is no angle');
	      }
	      return Math.tan(x.value);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since tan(0) = 0
	      return deepMap(x, tan, true);
	    }
	  });

	  tan.toTex = '\\tan\\left(${args[0]}\\right)';

	  return tan;
	}

	exports.name = 'tan';
	exports.factory = factory;


/***/ },
/* 243 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/function/trigonometry/tanh.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var tanhCoth = __webpack_require__(/*! ../../utils/bignumber/tanhCoth */ 236);

	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic tangent of a value,
	   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tanh(x)
	   *
	   * Examples:
	   *
	   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
	   *    math.tanh(0.5);                   // returns 0.46211715726000974
	   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974
	   *    1 / math.coth(0.5);               // returns 0.46211715726000974
	   *
	   * See also:
	   *
	   *    sinh, cosh, coth
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
	   */
	  var tanh = typed('tanh', {
	    'number': _tanh,

	    'Complex': function (x) {
	      var r = Math.exp(2 * x.re);
	      var re = r * Math.cos(2 * x.im);
	      var im = r * Math.sin(2 * x.im);
	      var den = (re + 1) * (re + 1) + im * im;
	      return new type.Complex(
	          ((re - 1) * (re + 1) + im * im) / den,
	          im * 2 / den
	      );
	    },

	    'BigNumber': function (x) {
	      return tanhCoth(x, type.BigNumber, false);
	    },

	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function tanh is no angle');
	      }
	      return _tanh(x.value);
	    },

	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since tanh(0) = 0
	      return deepMap(x, tanh, true);
	    }
	  });

	  tanh.toTex = '\\tanh\\left(${args[0]}\\right)';

	  return tanh;
	}

	/**
	 * Calculate the hyperbolic tangent of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _tanh (x) {
	  var e = Math.exp(2 * x);
	  return (e - 1) / (e + 1);
	}

	exports.name = 'tanh';
	exports.factory = factory;


/***/ },
/* 244 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/units/index.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./to */ 245)
	];

/***/ },
/* 245 */
/*!*******************************************!*\
  !*** ./~/mathjs/lib/function/units/to.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  var algorithm13 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm13 */ 51));
	  var algorithm14 = load(__webpack_require__(/*! ../../type/matrix/utils/algorithm14 */ 55));

	  /**
	   * Change the unit of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.to(x, unit)
	   *
	   * Examples:
	   *
	   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm
	   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm
	   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits
	   *
	   * See also:
	   *
	   *    unit
	   *
	   * @param {Unit | Array | Matrix} x     The unit to be converted.
	   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
	   *                                      or a unit without value.
	   * @return {Unit | Array | Matrix} value with changed, fixed unit.
	   */
	  var to = typed('to', {

	    'Unit, Unit | string': function (x, unit) {
	      return x.to(unit);
	    },

	    'Matrix, Matrix': function (x, y) {
	      // SparseMatrix does not support Units
	      return algorithm13(x, y, to);
	    },

	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return to(matrix(x), matrix(y)).valueOf();
	    },

	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return to(matrix(x), y);
	    },

	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return to(x, matrix(y));
	    },

	    'Matrix, any': function (x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14(x, y, to, false);
	    },

	    'any, Matrix': function (x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14(y, x, to, true);
	    },

	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, to, false).valueOf();
	    },

	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, to, true).valueOf();
	    }
	  });

	  to.toTex = '\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\right)';

	  return to;
	}

	exports.name = 'to';
	exports.factory = factory;


/***/ },
/* 246 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/utils/index.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./clone */ 248),
	  __webpack_require__(/*! ./filter */ 249),
	  __webpack_require__(/*! ./format */ 250),
	  __webpack_require__(/*! ./isInteger */ 161),
	  __webpack_require__(/*! ./isNegative */ 160),
	  __webpack_require__(/*! ./isNumeric */ 251),
	  __webpack_require__(/*! ./isPositive */ 163),
	  __webpack_require__(/*! ./isZero */ 247),
	  __webpack_require__(/*! ./map */ 252),
	  __webpack_require__(/*! ./partitionSelect */ 196),
	  __webpack_require__(/*! ./print */ 253),
	  __webpack_require__(/*! ./sort */ 254),
	  __webpack_require__(/*! ./typeof */ 255),
	  __webpack_require__(/*! ./forEach */ 256)
	];


/***/ },
/* 247 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/utils/isZero.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var number = __webpack_require__(/*! ../../utils/number */ 24);

	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is zero.
	   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
	   * `Complex`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isZero(x)
	   *
	   * Examples:
	   *
	   *    math.isZero(0);                     // returns true
	   *    math.isZero(2);                     // returns false
	   *    math.isZero(0.5);                   // returns false
	   *    math.isZero(math.bignumber(0));     // returns true
	   *    math.isZero(math.fraction(0));      // returns true
	   *    math.isZero(math.fraction(1,3));    // returns false
	   *    math.isZero(math.complex('2 - 4i'); // returns false
	   *    math.isZero(math.complex('0i');     // returns true
	   *    math.isZero('0');                   // returns true
	   *    math.isZero('2');                   // returns false
	   *    math.isZero([2, 0, -3]');           // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isZero = typed('isZero', {
	    'number': function (x) {
	      return x === 0;
	    },

	    'BigNumber': function (x) {
	      return x.isZero();
	    },

	    'Complex': function (x) {
	      return x.re === 0 && x.im === 0;
	    },

	    'Fraction': function (x) {
	      return x.d === 1 && x.n === 0;
	    },

	    'Unit': function (x) {
	      return x.value === 0;
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, isZero);
	    }
	  });

	  return isZero;
	}

	exports.name = 'isZero';
	exports.factory = factory;


/***/ },
/* 248 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/utils/clone.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object= __webpack_require__(/*! ../../utils/object */ 21);

	function factory (type, config, load, typed) {
	  /**
	   * Clone an object.
	   *
	   * Syntax:
	   *
	   *     math.clone(x)
	   *
	   * Examples:
	   *
	   *    math.clone(3.5);                   // returns number 3.5
	   *    math.clone(math.complex('2 - 4i'); // returns Complex 2 - 4i
	   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg
	   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]
	   *    math.clone("hello world");         // returns string "hello world"
	   *
	   * @param {*} x   Object to be cloned
	   * @return {*} A clone of object x
	   */
	  var clone = typed('clone', {
	    'any': object.clone
	  });

	  clone.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return clone;
	}

	exports.name = 'clone';
	exports.factory = factory;


/***/ },
/* 249 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/utils/filter.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(/*! ../../utils/array */ 34).size;

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  
	  /**
	   * Filter the items in an array or one dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.filter(x, test)
	   *
	   * Examples:
	   *
	   *    function isPositive (x) {
	   *      return x > 0;
	   *    }
	   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]
	   *
	   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/); // returns ["23", "100", "55"]
	   *
	   * See also:
	   *
	   *    forEach, map, sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
	   * @param {Function | RegExp} test
	   *        A function or regular expression to test items.
	   *        When `test` is a function, it must return a boolean.
	   *        All entries for which `test` returns true are returned.
	   * @return {Matrix | Array} Returns the filtered matrix.
	   */
	  var filter = typed('filter', {
	    'Array, function': _filterCallback,

	    'Array, RegExp': _filterRegExp,

	    'Matrix, function': function (x, test) {
	      return matrix(_filterCallback(x.toArray(), test));
	    },

	    'Matrix, RegExp': function (x, test) {
	      return matrix(_filterRegExp(x.toArray(), test));
	    }
	  });

	  filter.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return filter;
	}

	/**
	 * Filter values in a callback given a callback function
	 * @param {Array} x
	 * @param {Function} callback
	 * @return {Array} Returns the filtered array
	 * @private
	 */
	function _filterCallback (x, callback) {
	  if (size(x).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }

	  return x.filter(function (entry) {
	    return callback(entry);
	  });
	}

	/**
	 * Filter values in a callback given a regular expression
	 * @param {Array} x
	 * @param {Function} regexp
	 * @return {Array} Returns the filtered array
	 * @private
	 */
	function _filterRegExp (x, regexp) {
	  if (size(x).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }

	  return x.filter(function (entry) {
	    return regexp.test(entry);
	  });
	}

	exports.name = 'filter';
	exports.factory = factory;


/***/ },
/* 250 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/utils/format.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var string = __webpack_require__(/*! ../../utils/string */ 36);

	function factory (type, config, load, typed) {
	  /**
	   * Format a value of any type into a string.
	   *
	   * Syntax:
	   *
	   *    math.format(value)
	   *    math.format(value, options)
	   *    math.format(value, precision)
	   *    math.format(value, fn)
	   *
	   * Where:
	   *
	   *  - `value: *`
	   *    The value to be formatted
	   *  - `options: Object`
	   *    An object with formatting options. Available options:
	   *    - `notation: string`
	   *      Number notation. Choose from:
	   *      - 'fixed'
	   *        Always use regular number notation.
	   *        For example '123.40' and '14000000'
	   *      - 'exponential'
	   *        Always use exponential notation.
	   *        For example '1.234e+2' and '1.4e+7'
	   *      - 'auto' (default)
	   *        Regular number notation for numbers having an absolute value between
	   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
	   *        Lower bound is included, upper bound is excluded.
	   *        For example '123.4' and '1.4e7'.
	   *    - `precision: number`
	   *      A number between 0 and 16 to round the digits of the number. In case
	   *      of notations 'exponential' and 'auto', `precision` defines the total
	   *      number of significant digits returned and is undefined by default.
	   *      In case of notation 'fixed', `precision` defines the number of
	   *      significant digits after the decimal point, and is 0 by default.
	   *    - `exponential: Object`
	   *      An object containing two parameters, {number} lower and {number} upper,
	   *      used by notation 'auto' to determine when to return exponential
	   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only
	   *      applicable for notation `auto`.
	   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
	   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
	   *      configured, and will output `0.(3)` when 'decimal' is configured.
	   * - `fn: Function`
	   *   A custom formatting function. Can be used to override the built-in notations.
	   *   Function `fn` is called with `value` as parameter and must return a string.
	   *   Is useful for example to format all values inside a matrix in a particular way.
	   *
	   * Examples:
	   *
	   *    math.format(6.4);                                        // returns '6.4'
	   *    math.format(1240000);                                    // returns '1.24e6'
	   *    math.format(1/3);                                        // returns '0.3333333333333333'
	   *    math.format(1/3, 3);                                     // returns '0.333'
	   *    math.format(21385, 2);                                   // returns '21000'
	   *    math.format(12.071, {notation: 'fixed'});                // returns '12'
	   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'
	   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'
	   *
	   * See also:
	   *
	   *    print
	   *
	   * @param {*} value                               Value to be stringified
	   * @param {Object | Function | number} [options]  Formatting options
	   * @return {string} The formatted value
	   */
	  var format = typed('format', {
	    'any': string.format,
	    'any, Object | function | number': string.format
	  });

	  format.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return format;
	}

	exports.name = 'format';
	exports.factory = factory;


/***/ },
/* 251 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/function/utils/isNumeric.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);
	var number = __webpack_require__(/*! ../../utils/number */ 24);

	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is an numeric value.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNumeric(x)
	   *
	   * Examples:
	   *
	   *    math.isNumeric(2);                     // returns true
	   *    math.isNumeric(0);                     // returns true
	   *    math.isNumeric(math.bignumber(500));   // returns true
	   *    math.isNumeric(math.fraction(4));      // returns true
	   *    math.isNumeric(math.complex('2 - 4i'); // returns false
	   *    math.isNumeric('3');                   // returns false
	   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    isZero, isPositive, isNegative, isInteger
	   *
	   * @param {*} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
	   *                    `Fraction`, or `boolean`. Returns false for other types.
	   *                    Throws an error in case of unknown types.
	   */
	  var isNumeric = typed('isNumeric', {
	    'number | BigNumber | Fraction | boolean': function () {
	      return true;
	    },

	    'Complex | Unit | string': function () {
	      return false;
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, isNumeric);
	    }
	  });

	  return isNumeric;
	}

	exports.name = 'isNumeric';
	exports.factory = factory;


/***/ },
/* 252 */
/*!********************************************!*\
  !*** ./~/mathjs/lib/function/utils/map.js ***!
  \********************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {
	  /**
	   * Create a new matrix or array with the results of the callback function executed on
	   * each entry of the matrix/array.
	   *
	   * Syntax:
	   *
	   *    math.map(x, callback)
	   *
	   * Examples:
	   *
	   *    math.map([1, 2, 3], function(value) {
	   *      return value * value;
	   *    });  // returns [1, 4, 9]
	   *
	   * See also:
	   *
	   *    filter, forEach, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the matrix being traversed.
	   * @return {Matrix | array}     Transformed map of x
	   */
	  var map = typed('map', {
	    'Array, function': _map,

	    'Matrix, function': function (x, callback) {
	      return x.map(callback);
	    }
	  });

	  map.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return map;
	}

	/**
	 * Map for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @return {Array}
	 * @private
	 */
	function _map (array, callback) {
	  var recurse = function (value, index) {
	    if (Array.isArray(value)) {
	      return value.map(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i));
	      });
	    }
	    else {
	      return callback(value, index, array);
	    }
	  };

	  return recurse(array, []);
	}

	exports.name = 'map';
	exports.factory = factory;


/***/ },
/* 253 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/function/utils/print.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isString = __webpack_require__(/*! ../../utils/string */ 36).isString;
	var format = __webpack_require__(/*! ../../utils/string */ 36).format;

	function factory (type, config, load, typed) {
	  /**
	   * Interpolate values into a string template.
	   *
	   * Syntax:
	   *
	   *     math.print(template, values)
	   *     math.print(template, values, precision)
	   *
	   * Example usage:
	   *
	   *     // the following outputs: 'Lucy is 5 years old'
	   *     math.print('Lucy is $age years old', {age: 5});
	   *
	   *     // the following outputs: 'The value of pi is 3.141592654'
	   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);
	   *
	   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
	   *     math.print('Hello $user.name! The date is $date', {
	   *       user: {
	   *         name: 'Mary',
	   *       },
	   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
	   *     });
	   *
	   * See also:
	   *
	   *     format
	   *
	   * @param {string} template     A string containing variable placeholders.
	   * @param {Object} values       An object containing variables which will
	   *                              be filled in in the template.
	   * @param {number} [precision]  Number of digits to format numbers.
	   *                              If not provided, the value will not be rounded.
	   * @return {string} Interpolated string
	   */
	  var print = typed ('print', {
	    'string, Object': _print,
	    'string, Object, number': _print
	  });

	  print.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return print;
	}

	/**
	 * Interpolate values into a string template.
	 * @param {string} template
	 * @param {Object} values
	 * @param {number} [precision]
	 * @returns {string} Interpolated string
	 * @private
	 */
	function _print(template, values, precision) {
	  return template.replace(/\$([\w\.]+)/g, function (original, key) {
	        var keys = key.split('.');
	        var value = values[keys.shift()];
	        while (keys.length && value !== undefined) {
	          var k = keys.shift();
	          value = k ? value[k] : value + '.';
	        }

	        if (value !== undefined) {
	          if (!isString(value)) {
	            return format(value, precision);
	          }
	          else {
	            return value;
	          }
	        }

	        return original;
	      }
	  );
	}

	exports.name = 'print';
	exports.factory = factory;


/***/ },
/* 254 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/function/utils/sort.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var size = __webpack_require__(/*! ../../utils/array */ 34).size;

	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));
	  var asc = load(__webpack_require__(/*! ../relational/compare */ 186));
	  var desc = function (a, b) {
	    return -asc(a, b);
	  };

	  /**
	   * Sort the items in a matrix.
	   *
	   * Syntax:
	   *
	   *    math.sort(x)
	   *    math.sort(x, compare)
	   *
	   * Examples:
	   *
	   *    math.sort([5, 10, 1]); // returns [1, 5, 10]
	   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length;
	   *    }
	   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']
	   *
	   * See also:
	   *
	   *    filter, forEach, map
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Function | 'asc' | 'desc'} [compare='asc']
	   *        An optional _comparator function. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {Matrix | Array} Returns the sorted matrix.
	   */
	  var sort = typed('sort', {
	    'Array': function (x) {
	      _arrayIsVector(x);
	      return x.sort(asc);
	    },

	    'Matrix': function (x) {
	      _matrixIsVector(x);
	      return matrix(x.toArray().sort(asc), x.storage());
	    },

	    'Array, function': function (x, _comparator) {
	      _arrayIsVector(x);
	      return x.sort(_comparator);
	    },

	    'Matrix, function': function (x, _comparator) {
	      _matrixIsVector(x);
	      return matrix(x.toArray().sort(_comparator), x.storage());
	    },

	    'Array, string': function (x, order) {
	      _arrayIsVector(x);
	      return x.sort(_comparator(order));
	    },

	    'Matrix, string': function (x, order) {
	      _matrixIsVector(x);
	      return matrix(x.toArray().sort(_comparator(order)), x.storage());
	    }
	  });

	  sort.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  /**
	   * Get the comparator for given order ('asc' or 'desc')
	   * @param {'asc' | 'desc'} order
	   * @return {Function} Returns a _comparator function
	   */
	  function _comparator (order) {
	    if (order === 'asc') {
	      return asc;
	    }
	    else if (order === 'desc') {
	      return desc;
	    }
	    else {
	      throw new Error('String "asc" or "desc" expected');
	    }
	  }

	  /**
	   * Validate whether an array is one dimensional
	   * Throws an error when this is not the case
	   * @param {Array} array
	   * @private
	   */
	  function _arrayIsVector (array) {
	    if (size(array).length !== 1) {
	      throw new Error('One dimensional array expected');
	    }
	  }

	  /**
	   * Validate whether a matrix is one dimensional
	   * Throws an error when this is not the case
	   * @param {Matrix} matrix
	   * @private
	   */
	  function _matrixIsVector (matrix) {
	    if (matrix.size().length !== 1) {
	      throw new Error('One dimensional matrix expected');
	    }
	  }

	  return sort;
	}

	exports.name = 'sort';
	exports.factory = factory;


/***/ },
/* 255 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/function/utils/typeof.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var types = __webpack_require__(/*! ../../utils/types */ 35);

	function factory (type, config, load, typed) {
	  /**
	   * Determine the type of a variable.
	   *
	   * Function `typeof` recognizes the following types of objects:
	   *
	   * Object                 | Returns       | Example
	   * ---------------------- | ------------- | ------------------------------------------
	   * null                   | `'null'`      | `math.typeof(null)`
	   * number                 | `'number'`    | `math.typeof(3.5)`
	   * boolean                | `'boolean'`   | `math.typeof (true)`
	   * string                 | `'string'`    | `math.typeof ('hello world')`
	   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`
	   * Date                   | `'Date'`      | `math.typeof (new Date())`
	   * Function               | `'Function'`  | `math.typeof (function () {})`
	   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`
	   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`
	   * undefined              | `'undefined'` | `math.typeof(undefined)`
	   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`
	   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`
	   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`
	   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`
	   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`
	   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`
	   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`
	   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`
	   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`
	   *
	   * Syntax:
	   *
	   *    math.typeof(x)
	   *
	   * Examples:
	   *
	   *    math.typeof(3.5);                     // returns 'number'
	   *    math.typeof(math.complex('2 - 4i'));  // returns 'Complex'
	   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'
	   *    math.typeof('hello world');           // returns 'string'
	   *
	   * @param {*} x     The variable for which to test the type.
	   * @return {string} Returns the name of the type. Primitive types are lower case,
	   *                  non-primitive types are upper-camel-case.
	   *                  For example 'number', 'string', 'Array', 'Date'.
	   */
	  var _typeof = typed('_typeof', {
	    'any': function (x) {
	      // JavaScript types
	      var t = types.type(x);

	      // math.js types
	      if (t === 'Object') {
	        if (x.isBigNumber === true) return 'BigNumber';
	        if (x.isComplex === true)   return 'Complex';
	        if (x.isFraction === true)  return 'Fraction';
	        if (x.isMatrix === true)    return 'Matrix';
	        if (x.isUnit === true)      return 'Unit';
	        if (x.isIndex === true)     return 'Index';
	        if (x.isRange === true)     return 'Range';
	        if (x.isChain === true)     return 'Chain';
	        if (x.isHelp === true)      return 'Help';
	      }

	      return t;
	    }
	  });

	  _typeof.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return _typeof;
	}

	exports.name = 'typeof';
	exports.factory = factory;


/***/ },
/* 256 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/function/utils/forEach.js ***!
  \************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {
	  /**
	   * Iterate over all elements of a matrix/array, and executes the given callback function.
	   *
	   * Syntax:
	   *
	   *    math.forEach(x, callback)
	   *
	   * Examples:
	   *
	   *    math.forEach([1, 2, 3], function(value) {
	   *      console.log(value);
	   *    });
	   *    // outputs 1, 2, 3
	   *
	   * See also:
	   *
	   *    filter, map, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix/array being traversed.
	   */
	  var forEach = typed('forEach', {
	    'Array, function': _forEach,

	    'Matrix, function': function (x, callback) {
	      return x.forEach(callback);
	    }
	  });

	  forEach.toTex = '\\mathrm{${name}}\\left(${args}\\right)';

	  return forEach;
	}

	/**
	 * forEach for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @private
	 */
	function _forEach (array, callback) {
	  var recurse = function (value, index) {
	    if (Array.isArray(value)) {
	      value.forEach(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        recurse(child, index.concat(i));
	      });
	    }
	    else {
	      callback(value, index, array);
	    }
	  };
	  recurse(array, []);
	}

	exports.name = 'forEach';
	exports.factory = factory;


/***/ },
/* 257 */
/*!************************************!*\
  !*** ./~/mathjs/lib/type/index.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./bignumber */ 269),
	  __webpack_require__(/*! ./boolean */ 273),
	  __webpack_require__(/*! ./chain */ 274),
	  __webpack_require__(/*! ./complex */ 277),
	  __webpack_require__(/*! ./fraction */ 281),
	  __webpack_require__(/*! ./matrix */ 258),
	  __webpack_require__(/*! ./number */ 287),
	  __webpack_require__(/*! ./resultset */ 288),
	  __webpack_require__(/*! ./string */ 290),
	  __webpack_require__(/*! ./unit */ 291)
	];


/***/ },
/* 258 */
/*!*******************************************!*\
  !*** ./~/mathjs/lib/type/matrix/index.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  // types
	  __webpack_require__(/*! ./Matrix */ 259),
	  __webpack_require__(/*! ./DenseMatrix */ 260),
	  __webpack_require__(/*! ./SparseMatrix */ 261),
	  __webpack_require__(/*! ./Spa */ 262),
	  __webpack_require__(/*! ./FibonacciHeap */ 263),
	  __webpack_require__(/*! ./ImmutableDenseMatrix */ 264),
	  __webpack_require__(/*! ./MatrixIndex */ 265),
	  __webpack_require__(/*! ./Range */ 266),

	  // construction functions
	  __webpack_require__(/*! ./function/index */ 267),
	  __webpack_require__(/*! ./function/matrix */ 39),
	  __webpack_require__(/*! ./function/sparse */ 268)
	];


/***/ },
/* 259 */
/*!********************************************!*\
  !*** ./~/mathjs/lib/type/matrix/Matrix.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../utils/index */ 52);

	var string = util.string;

	var isString = string.isString;

	function factory (type, config, load, typed) {
	  /**
	   * @constructor Matrix
	   *
	   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
	   * array. A matrix can be constructed as:
	   *     var matrix = math.matrix(data)
	   *
	   * Matrix contains the functions to resize, get and set values, get the size,
	   * clone the matrix and to convert the matrix to a vector, array, or scalar.
	   * Furthermore, one can iterate over the matrix using map and forEach.
	   * The internal Array of the Matrix can be accessed using the function valueOf.
	   *
	   * Example usage:
	   *     var matrix = math.matrix([[1, 2], [3, 4]]);
	   *     matix.size();              // [2, 2]
	   *     matrix.resize([3, 2], 5);
	   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]
	   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
	   *
	   */
	  function Matrix() {
	    if (!(this instanceof Matrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Matrix.prototype.type = 'Matrix';
	  Matrix.prototype.isMatrix = true;

	  /**
	   * Get the Matrix storage constructor for the given format.
	   *
	   * @param {string} format       The Matrix storage format.
	   *
	   * @return {Function}           The Matrix storage constructor.
	   */
	  Matrix.storage = function (format) {
	    // check storage format is a string
	    if (!isString(format)) {
	      throw new TypeError('format must be a string value');
	    }

	    // get storage format constructor
	    var constructor = Matrix._storage[format];
	    if (!constructor) {
	      throw new SyntaxError('Unsupported matrix storage format: ' + format);
	    }

	    // return storage constructor
	    return constructor;
	  };

	  // a map with all constructors for all storage types
	  Matrix._storage = {};

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     var format = matrix.storage()                   // retrieve storage format
	   *
	   * @return {string}           The storage format.
	   */
	  Matrix.prototype.storage = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke storage on a Matrix interface');
	  };
	  
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     var format = matrix.datatype()                   // retrieve matrix datatype
	   *
	   * @return {string}           The datatype.
	   */
	  Matrix.prototype.datatype = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke datatype on a Matrix interface');
	  };

	  /**
	   * Create a new Matrix With the type of the current matrix instance
	   * @param {Array | Object} data
	   * @param {string} [datatype]
	   */
	  Matrix.prototype.create = function (data, datatype) {
	    throw new Error('Cannot invoke create on a Matrix interface');
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  Matrix.prototype.subset = function (index, replacement, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke subset on a Matrix interface');
	  };

	  /**
	   * Get a single element from the matrix.
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  Matrix.prototype.get = function (index) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke get on a Matrix interface');
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {Matrix} self
	   */
	  Matrix.prototype.set = function (index, value, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke set on a Matrix interface');
	  };

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when 
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  Matrix.prototype.resize = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke resize on a Matrix interface');
	  };

	  /**
	   * Create a clone of the matrix
	   * @return {Matrix} clone
	   */
	  Matrix.prototype.clone = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke clone on a Matrix interface');
	  };

	  /**
	   * Retrieve the size of the matrix.
	   * @returns {number[]} size
	   */
	  Matrix.prototype.size = function() {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke size on a Matrix interface');
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {Matrix} matrix
	   */
	  Matrix.prototype.map = function (callback, skipZeros) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke map on a Matrix interface');
	  };

	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  Matrix.prototype.forEach = function (callback) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke forEach on a Matrix interface');
	  };

	  /**
	   * Create an Array with a copy of the data of the Matrix
	   * @returns {Array} array
	   */
	  Matrix.prototype.toArray = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toArray on a Matrix interface');
	  };

	  /**
	   * Get the primitive value of the Matrix: a multidimensional array
	   * @returns {Array} array
	   */
	  Matrix.prototype.valueOf = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke valueOf on a Matrix interface');
	  };

	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  Matrix.prototype.format = function (options) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke format on a Matrix interface');
	  };

	  /**
	   * Get a string representation of the matrix
	   * @returns {string} str
	   */
	  Matrix.prototype.toString = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toString on a Matrix interface');
	  };
	   
	  // exports
	  return Matrix;
	}

	exports.name = 'Matrix';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 260 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/DenseMatrix.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../utils/index */ 52);
	var DimensionError = __webpack_require__(/*! ../../error/DimensionError */ 38);

	var string = util.string;
	var array = util.array;
	var object = util.object;
	var number = util.number;

	var isArray = Array.isArray;
	var isNumber = number.isNumber;
	var isInteger = number.isInteger;
	var isString = string.isString;

	var validateIndex = array.validateIndex;

	function factory (type, config, load, typed) {
	  var Matrix = load(__webpack_require__(/*! ./Matrix */ 259)); // force loading Matrix (do not use via type.Matrix)

	  function DenseMatrix(data, datatype) {
	    if (!(this instanceof DenseMatrix))
	      throw new SyntaxError('Constructor must be called with the new operator');
	    if (datatype && !isString(datatype))
	      throw new Error('Invalid datatype: ' + datatype);

	    if (data && data.isMatrix === true) {
	      // check data is a DenseMatrix
	      if (data.type === 'DenseMatrix') {
	        // clone data & size
	        this._data = object.clone(data._data);
	        this._size = object.clone(data._size);
	        this._datatype = datatype || data._datatype;
	      }
	      else {
	        // build data from existing matrix
	        this._data = data.toArray();
	        this._size = data.size();
	        this._datatype = datatype || data._datatype;
	      }
	    }
	    else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    }
	    else if (isArray(data)) {
	      // replace nested Matrices with Arrays
	      this._data = preprocess(data);
	      // get the dimensions of the array
	      this._size = array.size(this._data);
	      // verify the dimensions of the array, TODO: compute size while processing array
	      array.validate(this._data, this._size);
	      // data type unknown
	      this._datatype = datatype;
	    }
	    else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
	    }
	    else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	    }
	  }
	  
	  DenseMatrix.prototype = new Matrix();

	  /**
	   * Attach type information
	   */
	  DenseMatrix.prototype.type = 'DenseMatrix';
	  DenseMatrix.prototype.isDenseMatrix = true;

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     var format = matrix.storage()                   // retrieve storage format
	   *
	   * @return {string}           The storage format.
	   */
	  DenseMatrix.prototype.storage = function () {
	    return 'dense';
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     var format = matrix.datatype()                   // retrieve matrix datatype
	   *
	   * @return {string}           The datatype.
	   */
	  DenseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };

	  /**
	   * Create a new DenseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  DenseMatrix.prototype.create = function (data, datatype) {
	    return new DenseMatrix(data, datatype);
	  };

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | DenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    switch (arguments.length) {
	      case 1:
	        return _get(this, index);

	        // intentional fall through
	      case 2:
	      case 3:
	        return _set(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };
	  
	  /**
	   * Get a single element from the matrix.
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  DenseMatrix.prototype.get = function (index) {
	    if (!isArray(index))
	      throw new TypeError('Array expected');
	    if (index.length != this._size.length)
	      throw new DimensionError(index.length, this._size.length);

	    // check index
	    for (var x = 0; x < index.length; x++)
	      validateIndex(index[x], this._size[x]);

	    var data = this._data;
	    for (var i = 0, ii = index.length; i < ii; i++) {
	      var index_i = index[i];
	      validateIndex(index_i, data.length);
	      data = data[index_i];
	    }

	    return object.clone(data);
	  };
	  
	  /**
	   * Replace a single element in the matrix.
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {DenseMatrix} self
	   */
	  DenseMatrix.prototype.set = function (index, value, defaultValue) {
	    if (!isArray(index))
	      throw new TypeError('Array expected');
	    if (index.length < this._size.length)
	      throw new DimensionError(index.length, this._size.length, '<');

	    var i, ii, index_i;

	    // enlarge matrix when needed
	    var size = index.map(function (i) {
	      return i + 1;
	    });
	    _fit(this, size, defaultValue);

	    // traverse over the dimensions
	    var data = this._data;
	    for (i = 0, ii = index.length - 1; i < ii; i++) {
	      index_i = index[i];
	      validateIndex(index_i, data.length);
	      data = data[index_i];
	    }

	    // set new value
	    index_i = index[index.length - 1];
	    validateIndex(index_i, data.length);
	    data[index_i] = value;

	    return this;
	  };
	  
	  /**
	   * Get a submatrix of this matrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index   Zero-based index
	   * @private
	   */
	  function _get (matrix, index) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = index.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(index.min());
	    }
	    else {
	      // validate dimensions
	      var size = index.size();
	      if (size.length != matrix._size.length) {
	        throw new DimensionError(size.length, matrix._size.length);
	      }

	      // validate if any of the ranges in the index is out of range
	      var min = index.min();
	      var max = index.max();
	      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
	        validateIndex(min[i], matrix._size[i]);
	        validateIndex(max[i], matrix._size[i]);
	      }

	      // retrieve submatrix
	      // TODO: more efficient when creating an empty matrix and setting _data and _size manually
	      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
	    }
	  }
	  
	  /**
	   * Recursively get a submatrix of a multi dimensional matrix.
	   * Index is not checked for correct number or length of dimensions.
	   * @param {Array} data
	   * @param {Index} index
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim    Current dimension
	   * @return {Array} submatrix
	   * @private
	   */
	  function _getSubmatrix (data, index, dims, dim) {
	    var last = (dim == dims - 1);
	    var range = index.dimension(dim);

	    if (last) {
	      return range.map(function (i) {
	        return data[i];
	      }).valueOf();
	    }
	    else {
	      return range.map(function (i) {
	        var child = data[i];
	        return _getSubmatrix(child, index, dims, dim + 1);
	      }).valueOf();
	    }
	  }
	  
	  /**
	   * Replace a submatrix in this matrix
	   * Indexes are zero-based.
	   * @param {DenseMatrix} matrix
	   * @param {Index} index
	   * @param {DenseMatrix | Array | *} submatrix
	   * @param {*} defaultValue          Default value, filled in on new entries when
	   *                                  the matrix is resized.
	   * @return {DenseMatrix} matrix
	   * @private
	   */
	  function _set (matrix, index, submatrix, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    // get index size and check whether the index contains a single value
	    var iSize = index.size(),
	        isScalar = index.isScalar();

	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize;
	    if (submatrix && submatrix.isMatrix === true) {
	      sSize = submatrix.size();
	      submatrix = submatrix.valueOf();
	    }
	    else {
	      sSize = array.size(submatrix);
	    }

	    if (isScalar) {
	      // set a scalar

	      // check whether submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }

	      matrix.set(index.min(), submatrix, defaultValue);
	    }
	    else {
	      // set a submatrix

	      // validate dimensions
	      if (iSize.length < matrix._size.length) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      }

	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }

	        // unsqueeze both outer and inner dimensions
	        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
	      }

	      // check whether the size of the submatrix matches the index size
	      if (!object.deepEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      }

	      // enlarge matrix when needed
	      var size = index.max().map(function (i) {
	        return i + 1;
	      });
	      _fit(matrix, size, defaultValue);

	      // insert the sub matrix
	      var dims = iSize.length,
	          dim = 0;
	      _setSubmatrix (matrix._data, index, submatrix, dims, dim);
	    }

	    return matrix;
	  }
	  
	  /**
	   * Replace a submatrix of a multi dimensional matrix.
	   * @param {Array} data
	   * @param {Index} index
	   * @param {Array} submatrix
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim
	   * @private
	   */
	  function _setSubmatrix (data, index, submatrix, dims, dim) {
	    var last = (dim == dims - 1),
	        range = index.dimension(dim);

	    if (last) {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        data[dataIndex] = submatrix[subIndex[0]];
	      });
	    }
	    else {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
	      });
	    }
	  }
	  
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isArray(size))
	      throw new TypeError('Array expected');

	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, size, defaultValue);
	  };
	  
	  var _resize = function (matrix, size, defaultValue) {
	    // check size
	    if (size.length === 0) {
	      // first value in matrix
	      var v = matrix._data;
	      // go deep
	      while (isArray(v)) {
	        v = v[0];
	      }
	      return object.clone(v);
	    }
	    // resize matrix
	    matrix._size = object.clone(size);
	    matrix._data = array.resize(matrix._data, matrix._size, defaultValue);
	    // return matrix
	    return matrix;
	  };
	  
	  /**
	   * Enlarge the matrix when it is smaller than given size.
	   * If the matrix is larger or equal sized, nothing is done.
	   * @param {DenseMatrix} matrix           The matrix to be resized
	   * @param {number[]} size
	   * @param {*} defaultValue          Default value, filled in on new entries.
	   * @private
	   */
	  function _fit(matrix, size, defaultValue) {
	    var newSize = object.clone(matrix._size),
	        changed = false;

	    // add dimensions when needed
	    while (newSize.length < size.length) {
	      newSize.push(0);
	      changed = true;
	    }

	    // enlarge size when needed
	    for (var i = 0, ii = size.length; i < ii; i++) {
	      if (size[i] > newSize[i]) {
	        newSize[i] = size[i];
	        changed = true;
	      }
	    }

	    if (changed) {
	      // resize only when size is changed
	      _resize(matrix, newSize, defaultValue);
	    }
	  }
	  
	  /**
	   * Create a clone of the matrix
	   * @return {DenseMatrix} clone
	   */
	  DenseMatrix.prototype.clone = function () {
	    var m = new DenseMatrix({
	      data: object.clone(this._data),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	  
	  /**
	   * Retrieve the size of the matrix.
	   * @returns {number[]} size
	   */
	  DenseMatrix.prototype.size = function() {
	    return this._size;
	  };
	  
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   *
	   * @return {DenseMatrix} matrix
	   */
	  DenseMatrix.prototype.map = function (callback) {
	    // matrix instance
	    var me = this;
	    var recurse = function (value, index) {
	      if (isArray(value)) {
	        return value.map(function (child, i) {
	          return recurse(child, index.concat(i));
	        });
	      }
	      else {
	        return callback(value, index, me);
	      }
	    };
	    // return dense format
	    return new DenseMatrix({
	      data: recurse(this._data, []),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	  };
	  
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  DenseMatrix.prototype.forEach = function (callback) {
	    // matrix instance
	    var me = this;
	    var recurse = function (value, index) {
	      if (isArray(value)) {
	        value.forEach(function (child, i) {
	          recurse(child, index.concat(i));
	        });
	      }
	      else {
	        callback(value, index, me);
	      }
	    };
	    recurse(this._data, []);
	  };
	  
	  /**
	   * Create an Array with a copy of the data of the DenseMatrix
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.toArray = function () {
	    return object.clone(this._data);
	  };
	  
	  /**
	   * Get the primitive value of the DenseMatrix: a multidimensional array
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.valueOf = function () {
	    return this._data;
	  };
	  
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.format = function (options) {
	    return string.format(this._data, options);
	  };
	  
	  /**
	   * Get a string representation of the matrix
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.toString = function () {
	    return string.format(this._data);
	  };
	  
	  /**
	   * Get a JSON representation of the matrix
	   * @returns {Object}
	   */
	  DenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'DenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };
	  
	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Array}                      The array vector with the diagonal values.
	   */
	  DenseMatrix.prototype.diagonal = function(k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k.isBigNumber === true)
	        k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError ('The parameter k must be an integer number');
	      }
	    }
	    else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];

	    // number diagonal values
	    var n = Math.min(rows - kSub, columns -  kSuper);
	    
	    // x is a matrix get diagonal from matrix
	    var data = [];
	    
	    // loop rows
	    for (var i = 0; i < n; i++) {
	      data[i] = object.clone(this._data[i + kSub][i + kSuper]);
	    }

	    // create DenseMatrix
	    return new DenseMatrix({
	      data: data,
	      size: [n],
	      datatype: this._datatype
	    });
	  };
	  
	  /**
	   * Create a diagonal matrix.
	   *
	   * @param {Array} size                   The matrix size.
	   * @param {number, Array} value          The values for the diagonal.
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.
	   * @param {number} [defaultValue]        The default value for non-diagonal
	   *
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size))
	      throw new TypeError('Array expected, size parameter');
	    if (size.length !== 2)
	      throw new Error('Only two dimensions matrix are supported');

	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (s && s.isBigNumber === true) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      } 
	      return s;
	    });

	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k && k.isBigNumber === true)
	        k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError ('The parameter k must be an integer number');
	      }
	    }
	    else {
	      // default value
	      k = 0;
	    }
	    
	    if (defaultValue && isString(datatype)) {
	      // convert defaultValue to the same datatype
	      defaultValue = typed.convert(defaultValue, datatype);
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;
	    
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];

	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns -  kSuper);

	    // value extraction function
	    var _value;

	    // check value
	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function (i) {
	        // return value @ i
	        return value[i];
	      };      
	    }
	    else if (value && value.isMatrix === true) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function (i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    }
	    else {
	      // define function
	      _value = function () {
	        // return value
	        return value;
	      };
	    }
	    
	    // discover default value if needed
	    if (!defaultValue) {
	      // check first value in array
	      defaultValue = (_value(0) && _value(0).isBigNumber === true) ? new type.BigNumber(0) : 0;
	    }

	    // empty array
	    var data = [];

	    // check we need to resize array
	    if (size.length > 0) {
	      // resize array
	      data = array.resize(data, size, defaultValue);
	      // fill diagonal
	      for (var d = 0; d < n; d++) {
	        data[d + kSub][d + kSuper] = _value(d);
	      }
	    }
	    
	    // create DenseMatrix
	    return new DenseMatrix({
	      data: data,
	      size: [rows, columns]
	    });
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.fromJSON = function (json) {
	    return new DenseMatrix(json);
	  };
	  
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  DenseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]);

	    // swap rows
	    DenseMatrix._swapRows(i, j, this._data);
	    // return current instance
	    return this;
	  };

	  /**
	   * Swap rows i and j in Dense Matrix data structure.
	   *
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   */
	  DenseMatrix._swapRows = function (i, j, data) {
	    // swap values i <-> j
	    var vi = data[i];
	    data[i] = data[j];
	    data[j] = vi;
	  };
	   
	  /**
	   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
	   * Matrices. Replaces all nested Matrices with Arrays
	   * @param {Array} data
	   * @return {Array} data
	   */
	  function preprocess(data) {
	    for (var i = 0, ii = data.length; i < ii; i++) {
	      var elem = data[i];
	      if (isArray(elem)) {
	        data[i] = preprocess(elem);
	      }
	      else if (elem && elem.isMatrix === true) {
	        data[i] = preprocess(elem.valueOf());
	      }
	    }

	    return data;
	  }

	  // register this type in the base class Matrix
	  type.Matrix._storage.dense = DenseMatrix;
	  type.Matrix._storage['default'] = DenseMatrix;

	  // exports
	  return DenseMatrix;
	}

	exports.name = 'DenseMatrix';
	exports.path = 'type';
	exports.factory = factory;
	exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage

/***/ },
/* 261 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/SparseMatrix.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../utils/index */ 52);
	var DimensionError = __webpack_require__(/*! ../../error/DimensionError */ 38);

	var array = util.array;
	var object = util.object;
	var string = util.string;
	var number = util.number;

	var isArray = Array.isArray;
	var isNumber = number.isNumber;
	var isInteger = number.isInteger;
	var isString = string.isString;

	var validateIndex = array.validateIndex;

	function factory (type, config, load, typed) {
	  var Matrix = load(__webpack_require__(/*! ./Matrix */ 259)); // force loading Matrix (do not use via type.Matrix)
	  var equalScalar = load(__webpack_require__(/*! ../../function/relational/equalScalar */ 49));

	  /**
	   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
	   * for sparse matrices.
	   */
	  function SparseMatrix(data, datatype) {
	    if (!(this instanceof SparseMatrix))
	      throw new SyntaxError('Constructor must be called with the new operator');
	    if (datatype && !isString(datatype))
	      throw new Error('Invalid datatype: ' + datatype);
	    
	    if (data && data.isMatrix === true) {
	      // create from matrix
	      _createFromMatrix(this, data, datatype);
	    }
	    else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
	      // initialize fields
	      this._values = data.values;
	      this._index = data.index;
	      this._ptr = data.ptr;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    }
	    else if (isArray(data)) {
	      // create from array
	      _createFromArray(this, data, datatype);
	    }
	    else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
	    }
	    else {
	      // nothing provided
	      this._values = [];
	      this._index = [];
	      this._ptr = [0];
	      this._size = [0];
	      this._datatype = datatype;
	    }
	  }
	  
	  var _createFromMatrix = function (matrix, source, datatype) {
	    // check matrix type
	    if (source.type === 'SparseMatrix') {
	      // clone arrays
	      matrix._values = source._values ? object.clone(source._values) : undefined;
	      matrix._index = object.clone(source._index);
	      matrix._ptr = object.clone(source._ptr);
	      matrix._size = object.clone(source._size);
	      matrix._datatype = datatype || source._datatype;
	    }
	    else {
	      // build from matrix data
	      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
	    }
	  };
	  
	  var _createFromArray = function (matrix, data, datatype) {
	    // initialize fields
	    matrix._values = [];
	    matrix._index = [];
	    matrix._ptr = [];
	    matrix._datatype = datatype;
	    // discover rows & columns, do not use math.size() to avoid looping array twice
	    var rows = data.length;
	    var columns = 0;
	    
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    
	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }

	    // check we have rows (empty array)
	    if (rows > 0) {
	      // column index
	      var j = 0;
	      do {
	        // store pointer to values index
	        matrix._ptr.push(matrix._index.length);
	        // loop rows
	        for (var i = 0; i < rows; i++) {
	          // current row
	          var row = data[i];
	          // check row is an array
	          if (isArray(row)) {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < row.length)
	              columns = row.length;
	            // check row has column
	            if (j < row.length) {
	              // value
	              var v = row[j];
	              // check value != 0
	              if (!eq(v, zero)) {
	                // store value
	                matrix._values.push(v);
	                // index
	                matrix._index.push(i);
	              }
	            }
	          }
	          else {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < 1)
	              columns = 1;
	            // check value != 0 (row is a scalar)
	            if (!eq(row, zero)) {
	              // store value
	              matrix._values.push(row);
	              // index
	              matrix._index.push(i);
	            }
	          }
	        }
	        // increment index
	        j++;      
	      }
	      while (j < columns);
	    }
	    // store number of values in ptr
	    matrix._ptr.push(matrix._index.length);
	    // size
	    matrix._size = [rows, columns];
	  };
	  
	  SparseMatrix.prototype = new Matrix();

	  /**
	   * Attach type information
	   */
	  SparseMatrix.prototype.type = 'SparseMatrix';
	  SparseMatrix.prototype.isSparseMatrix = true;

	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     var format = matrix.storage()                   // retrieve storage format
	   *
	   * @return {string}           The storage format.
	   */
	  SparseMatrix.prototype.storage = function () {
	    return 'sparse';
	  };

	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     var format = matrix.datatype()                   // retrieve matrix datatype
	   *
	   * @return {string}           The datatype.
	   */
	  SparseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };

	  /**
	   * Create a new SparseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  SparseMatrix.prototype.create = function (data, datatype) {
	    return new SparseMatrix(data, datatype);
	  };

	  /**
	   * Get the matrix density.
	   *
	   * Usage:
	   *     var density = matrix.density()                   // retrieve matrix density
	   *
	   * @return {number}           The matrix density.
	   */
	  SparseMatrix.prototype.density = function () {
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // calculate density
	    return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;
	  };
	  
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | Maytrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {	
		// check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke subset on a Pattern only matrix');

	    // check arguments
	    switch (arguments.length) {
	      case 1:
	        return _getsubset(this, index);

	        // intentional fall through
	      case 2:
	      case 3:
	        return _setsubset(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };
	  
	  var _getsubset = function (matrix, idx) {
	    // check idx
	    if (!idx || idx.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = idx.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(idx.min());
	    }
	    // validate dimensions
	    var size = idx.size();
	    if (size.length != matrix._size.length) {
	      throw new DimensionError(size.length, matrix._size.length);
	    }

	    // vars
	    var i, ii, k, kk;
	    
	    // validate if any of the ranges in the index is out of range
	    var min = idx.min();
	    var max = idx.max();
	    for (i = 0, ii = matrix._size.length; i < ii; i++) {
	      validateIndex(min[i], matrix._size[i]);
	      validateIndex(max[i], matrix._size[i]);
	    }
	    
	    // matrix arrays
	    var mvalues = matrix._values;
	    var mindex = matrix._index;
	    var mptr = matrix._ptr;
	        
	    // rows & columns dimensions for result matrix
	    var rows = idx.dimension(0);
	    var columns = idx.dimension(1);
	    
	    // workspace & permutation vector
	    var w = [];
	    var pv = [];
	    
	    // loop rows in resulting matrix
	    rows.forEach(function (i, r) {
	      // update permutation vector
	      pv[i] = r[0];  
	      // mark i in workspace
	      w[i] = true;
	    });

	    // result matrix arrays
	    var values = mvalues ? [] : undefined;
	    var index = [];
	    var ptr = [];
	        
	    // loop columns in result matrix
	    columns.forEach(function (j) {
	      // update ptr
	      ptr.push(index.length);
	      // loop values in column j
	      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
	        // row
	        i = mindex[k];
	        // check row is in result matrix
	        if (w[i] === true) {
	          // push index
	          index.push(pv[i]);
	          // check we need to process values
	          if (values)
	            values.push(mvalues[k]);
	        }
	      }
	    });
	    // update ptr
	    ptr.push(index.length);
	    
	    // return matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: size,
	      datatype: matrix._datatype
	    });
	  };
	  
	  var _setsubset = function (matrix, index, submatrix, defaultValue) {
	    // check index
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }
	    
	    // get index size and check whether the index contains a single value
	    var iSize = index.size(),
	        isScalar = index.isScalar();
	    
	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize;
	    if (submatrix && submatrix.isMatrix === true) {
	      // submatrix size
	      sSize = submatrix.size();
	      // use array representation
	      submatrix = submatrix.toArray();
	    }
	    else {
	      // get submatrix size (array, scalar)
	      sSize = array.size(submatrix);
	    }
	    
	    // check index is a scalar
	    if (isScalar) {
	      // verify submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }
	      // set value
	      matrix.set(index.min(), submatrix, defaultValue);
	    }
	    else {
	      // validate dimensions, index size must be one or two dimensions
	      if (iSize.length !== 1 && iSize.length !== 2) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      }
	      
	      // check submatrix and index have the same dimensions
	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }
	        // unsqueeze both outer and inner dimensions
	        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
	      }
	      
	      // check whether the size of the submatrix matches the index size
	      if (!object.deepEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      }
	      
	      // offsets
	      var x0 = index.min()[0];
	      var y0 = index.min()[1];      
	      
	      // submatrix rows and columns
	      var m = sSize[0];
	      var n = sSize[1];

	      // loop submatrix
	      for (var x = 0; x < m; x++) {
	        // loop columns
	        for (var y = 0; y < n; y++) {
	          // value at i, j
	          var v = submatrix[x][y];
	          // invoke set (zero value will remove entry from matrix)
	          matrix.set([x + x0, y + y0], v, defaultValue);
	        }
	      }
	    }
	    return matrix;
	  };

	  /**
	   * Get a single element from the matrix.
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  SparseMatrix.prototype.get = function (index) {
	    if (!isArray(index))
	      throw new TypeError('Array expected');
	    if (index.length != this._size.length)
	      throw new DimensionError(index.length, this._size.length);

	    // check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke get on a Pattern only matrix');

	    // row and column
	    var i = index[0];
	    var j = index[1];

	    // check i, j are valid
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[1]);

	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i)
	      return object.clone(this._values[k]);

	    return 0;
	  };
	  
	  /**
	   * Replace a single element in the matrix.
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be set to zero.
	   * @return {SparseMatrix} self
	   */
	  SparseMatrix.prototype.set = function (index, v, defaultValue) {
	    if (!isArray(index))
	      throw new TypeError('Array expected');
	    if (index.length != this._size.length)
	      throw new DimensionError(index.length, this._size.length);

	    // check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke set on a Pattern only matrix');
	      
	    // row and column
	    var i = index[0];
	    var j = index[1];

	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    if (isString(this._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, this._datatype);
	    }

	    // check we need to resize matrix
	    if (i > rows - 1 || j > columns - 1) {
	      // resize matrix
	      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
	      // update rows & columns
	      rows = this._size[0];
	      columns = this._size[1];
	    }

	    // check i, j are valid
	    validateIndex(i, rows);
	    validateIndex(j, columns);

	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      // check value != 0
	      if (!eq(v, zero)) {
	        // update value
	        this._values[k] = v;
	      }
	      else {
	        // remove value from matrix
	        _remove(k, j, this._values, this._index, this._ptr);
	      }
	    }
	    else {
	      // insert value @ (i, j)
	      _insert(k, i, j, v, this._values, this._index, this._ptr);
	    }

	    return this;
	  };
	  
	  var _getValueIndex = function(i, top, bottom, index) {
	    // check row is on the bottom side
	    if (bottom - top === 0 || i > index[bottom - 1])
	      return bottom;
	    // loop until we find row index
	    while (top < bottom) {
	      // point in the middle (fast integer division)
	      var p = ~~((top + bottom) / 2);
	      // row @ p
	      var r = index[p];
	      // check we have to look on the top side, bottom side or we found the row
	      if (i < r)
	        bottom = p;
	      else if (i > r)
	        top = p + 1;
	      else
	        return p;
	    }
	    return top;
	  };

	  var _remove = function (k, j, values, index, ptr) {
	    // remove value @ k
	    values.splice(k, 1);
	    index.splice(k, 1);
	    // update pointers
	    for (var x = j + 1; x < ptr.length; x++)
	      ptr[x]--;
	  };

	  var _insert = function (k, i, j, v, values, index, ptr) {
	    // insert value
	    values.splice(k, 0, v);
	    // update row for k
	    index.splice(k, 0, i);
	    // update column pointers
	    for (var x = j + 1; x < ptr.length; x++)
	      ptr[x]++;
	  };
	  
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when 
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {    
	    // validate arguments
	    if (!isArray(size))
	      throw new TypeError('Array expected');
	    if (size.length !== 2)
	      throw new Error('Only two dimensions matrix are supported');

	    // check sizes
	    size.forEach(function (value) {
	      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' +
	                            '(size: ' + string.format(size) + ')');
	      }
	    });
	    
	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, size[0], size[1], defaultValue);
	  };
	  
	  var _resize = function (matrix, rows, columns, defaultValue) {
	    // value to insert at the time of growing matrix
	    var value = defaultValue || 0;
	    
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	      // convert value to the same datatype
	      value = typed.convert(value, matrix._datatype);
	    }
	    
	    // should we insert the value?
	    var ins = !eq(value, zero);

	    // old columns and rows
	    var r = matrix._size[0];
	    var c = matrix._size[1];

	    var i, j, k;

	    // check we need to increase columns
	    if (columns > c) {
	      // loop new columns
	      for (j = c; j < columns; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._values.length;
	        // check we need to insert matrix._values
	        if (ins) {
	          // loop rows
	          for (i = 0; i < r; i++) {
	            // add new matrix._values
	            matrix._values.push(value);
	            // update matrix._index
	            matrix._index.push(i);
	          }
	        }        
	      }
	      // store number of matrix._values in matrix._ptr
	      matrix._ptr[columns] = matrix._values.length;
	    }
	    else if (columns < c) {
	      // truncate matrix._ptr
	      matrix._ptr.splice(columns + 1, c - columns);
	      // truncate matrix._values and matrix._index
	      matrix._values.splice(matrix._ptr[columns], matrix._values.length);
	      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
	    }
	    // update columns
	    c = columns;

	    // check we need to increase rows
	    if (rows > r) {
	      // check we have to insert values
	      if (ins) {
	        // inserts
	        var n = 0;
	        // loop columns
	        for (j = 0; j < c; j++) {
	          // update matrix._ptr for current column
	          matrix._ptr[j] = matrix._ptr[j] + n;
	          // where to insert matrix._values
	          k = matrix._ptr[j + 1] + n;
	          // pointer
	          var p = 0;
	          // loop new rows, initialize pointer
	          for (i = r; i < rows; i++, p++) {
	            // add value
	            matrix._values.splice(k + p, 0, value);
	            // update matrix._index
	            matrix._index.splice(k + p, 0, i);
	            // increment inserts
	            n++;
	          }
	        }
	        // store number of matrix._values in matrix._ptr
	        matrix._ptr[c] = matrix._values.length;
	      }
	    }
	    else if (rows < r) {
	      // deletes
	      var d = 0;
	      // loop columns
	      for (j = 0; j < c; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._ptr[j] - d;
	        // where matrix._values start for next column
	        var k0 = matrix._ptr[j];
	        var k1 = matrix._ptr[j + 1] - d;
	        // loop matrix._index
	        for (k = k0; k < k1; k++) {
	          // row
	          i = matrix._index[k];
	          // check we need to delete value and matrix._index
	          if (i > rows - 1) {
	            // remove value
	            matrix._values.splice(k, 1);
	            // remove item from matrix._index
	            matrix._index.splice(k, 1);
	            // increase deletes
	            d++;
	          }
	        }
	      }
	      // update matrix._ptr for current column
	      matrix._ptr[j] = matrix._values.length;
	    }
	    // update matrix._size
	    matrix._size[0] = rows;
	    matrix._size[1] = columns;
	    // return matrix
	    return matrix;
	  };
	  
	  /**
	   * Create a clone of the matrix
	   * @return {SparseMatrix} clone
	   */
	  SparseMatrix.prototype.clone = function () {
	    var m = new SparseMatrix({
	      values: this._values ? object.clone(this._values) : undefined,
	      index: object.clone(this._index),
	      ptr: object.clone(this._ptr),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	  
	  /**
	   * Retrieve the size of the matrix.
	   * @returns {number[]} size
	   */
	  SparseMatrix.prototype.size = function() {
	    return object.clone(this._size);
	  };
	  
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {SparseMatrix} matrix
	   */
	  SparseMatrix.prototype.map = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke map on a Pattern only matrix');
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // invoke callback
	    var invoke = function (v, i, j) {
	      // invoke callback
	      return callback(v, [i, j], me);
	    };
	    // invoke _map
	    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
	  };

	  /**
	   * Create a new matrix with the results of the callback function executed on the interval
	   * [minRow..maxRow, minColumn..maxColumn].
	   */
	  var _map = function (matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
	    // result arrays
	    var values = [];
	    var index = [];
	    var ptr = [];
	    
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	    }
	    
	    // invoke callback
	    var invoke = function (v, x, y) {
	      // invoke callback
	      v = callback(v, x, y);
	      // check value != 0
	      if (!eq(v, zero)) {
	        // store value
	        values.push(v);
	        // index
	        index.push(x);
	      }
	    };
	    // loop columns
	    for (var j = minColumn; j <= maxColumn; j++) {
	      // store pointer to values index
	      ptr.push(values.length);
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = matrix._ptr[j];
	      var k1 = matrix._ptr[j + 1];
	      // row pointer
	      var p = minRow;
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = matrix._index[k];
	        // check i is in range
	        if (i >= minRow && i <= maxRow) {
	          // zero values
	          if (!skipZeros) {
	           for (var x = p; x < i; x++)
	             invoke(0, x - minRow, j - minColumn);
	          }
	          // value @ k
	          invoke(matrix._values[k], i - minRow, j - minColumn);
	        }
	        // update pointer
	        p = i + 1;
	      }
	      // zero values
	      if (!skipZeros) {
	        for (var y = p; y <= maxRow; y++)
	          invoke(0, y - minRow, j - minColumn);
	      }
	    }
	    // store number of values in ptr
	    ptr.push(values.length);
	    // return sparse matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
	    });
	  };
	  
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   */
	  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke forEach on a Pattern only matrix');
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // column pointer
	      var p = 0;
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        // check we need to process zeros
	        if (!skipZeros) {
	          // zero values
	          for (var x = p; x < i; x++)
	            callback(0, [x, j], me);
	        }
	        // value @ k
	        callback(this._values[k], [i, j], me);
	        // update pointer
	        p = i + 1;
	      }
	      // check we need to process zeros
	      if (!skipZeros) {
	        // zero values
	        for (var y = p; y < rows; y++)
	          callback(0, [y, j], me);
	      }
	    }
	  };
	  
	  /**
	   * Create an Array with a copy of the data of the SparseMatrix
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.toArray = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, true);
	  };

	  /**
	   * Get the primitive value of the SparseMatrix: a two dimensions array
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.valueOf = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, false);
	  };
	  
	  var _toArray = function (values, index, ptr, size, copy) {    
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];
	    // result
	    var a = [];
	    // vars
	    var i, j;
	    // initialize array
	    for (i = 0; i < rows; i++) {
	      a[i] = [];
	      for (j = 0; j < columns; j++)
	        a[i][j] = 0;
	    }

	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        i = index[k];
	        // set value (use one for pattern matrix)
	        a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;
	      }
	    }
	    return a;
	  };
	  
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.format = function (options) {
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // density
	    var density = this.density();
	    // rows & columns
	    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\n';
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        // append value
	        str += '\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');
	      }
	    }
	    return str;
	  };
	  
	  /**
	   * Get a string representation of the matrix
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.toString = function () {
	    return string.format(this.toArray());
	  };
	  
	  /**
	   * Get a JSON representation of the matrix
	   * @returns {Object}
	   */
	  SparseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'SparseMatrix',
	      values: this._values,
	      index: this._index,
	      ptr: this._ptr,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Matrix}                     The matrix vector with the diagonal values.
	   */
	  SparseMatrix.prototype.diagonal = function(k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k.isBigNumber === true)
	        k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError ('The parameter k must be an integer number');
	      }
	    }
	    else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;
	    
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    
	    // number diagonal values
	    var n = Math.min(rows - kSub, columns -  kSuper);
	    
	    // diagonal arrays
	    var values = [];
	    var index = [];
	    var ptr = [];
	    // initial ptr value
	    ptr[0] = 0;
	    // loop columns
	    for (var j = kSuper; j < columns && values.length < n; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop x within [k0, k1[
	      for (var x = k0; x < k1; x++) {
	        // row index
	        var i = this._index[x];
	        // check row
	        if (i === j - kSuper + kSub) {
	          // value on this column
	          values.push(object.clone(this._values[x]));
	          // store row
	          index[values.length - 1] = i - kSub;
	          // exit loop
	          break;
	        }
	      }
	    }
	    // close ptr
	    ptr.push(values.length);
	    // return matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [n, 1]
	    });
	  };
	  
	  /**
	   * Generate a matrix from a JSON object
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
	   *                       where mathjs is optional
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.fromJSON = function (json) {
	    return new SparseMatrix(json);
	  };

	  /**
	   * Create a diagonal matrix.
	   *
	   * @param {Array} size                       The matrix size.
	   * @param {number | Array | Matrix } value   The values for the diagonal.
	   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
	   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
	   *
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size))
	      throw new TypeError('Array expected, size parameter');
	    if (size.length !== 2)
	      throw new Error('Only two dimensions matrix are supported');
	    
	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (s && s.isBigNumber === true) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      } 
	      return s;
	    });
	    
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k.isBigNumber === true)
	        k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError ('The parameter k must be an integer number');
	      }
	    }
	    else {
	      // default value
	      k = 0;
	    }

	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;

	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }
	    
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;
	    
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];
	    
	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns -  kSuper);
	    
	    // value extraction function
	    var _value;
	      
	    // check value
	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function (i) {
	        // return value @ i
	        return value[i];
	      };
	    }
	    else if (value && value.isMatrix === true) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function (i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    }
	    else {
	      // define function
	      _value = function () {
	        // return value
	        return value;
	      };
	    }
	    
	    // create arrays
	    var values = [];
	    var index = [];
	    var ptr = [];
	    
	    // loop items
	    for (var j = 0; j < columns; j++) {
	      // number of rows with value
	      ptr.push(values.length);
	      // diagonal index
	      var i = j - kSuper;      
	      // check we need to set diagonal value
	      if (i >= 0 && i < n) {
	        // get value @ i
	        var v = _value(i);
	        // check for zero
	        if (!eq(v, zero)) {
	          // column
	          index.push(i + kSub);
	          // add value
	          values.push(v);
	        }
	      }
	    }
	    // last value should be number of values
	    ptr.push(values.length);
	    // create SparseMatrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [rows, columns]
	    });
	  };
	  
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  SparseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]);
	    
	    // swap rows
	    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
	    // return current instance
	    return this;
	  };
	  
	  /**
	   * Loop rows with data in column j.
	   *
	   * @param {number} j            Column
	   * @param {Array} values        Matrix values
	   * @param {Array} index         Matrix row indeces
	   * @param {Array} ptr           Matrix column pointers
	   * @param {Function} callback   Callback function invoked for every row in column j
	   */
	  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
	    // indeces for column j
	    var k0 = ptr[j];
	    var k1 = ptr[j + 1];
	    // loop
	    for (var k = k0; k < k1; k++) {
	      // invoke callback
	      callback(index[k], values[k]);
	    }
	  };
	  
	  /**
	   * Swap rows x and y in Sparse Matrix data structures.
	   *
	   * @param {number} x         Matrix row index 1
	   * @param {number} y         Matrix row index 2
	   * @param {number} columns   Number of columns in matrix
	   * @param {Array} values     Matrix values
	   * @param {Array} index      Matrix row indeces
	   * @param {Array} ptr        Matrix column pointers
	   */
	  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // find value index @ x
	      var kx = _getValueIndex(x, k0, k1, index);
	      // find value index @ x
	      var ky = _getValueIndex(y, k0, k1, index);
	      // check both rows exist in matrix
	      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
	        // swap values (check for pattern matrix)
	        if (values) {
	          var v = values[kx];
	          values[kx] = values[ky];
	          values[ky] = v;
	        }
	        // next column
	        continue;
	      }
	      // check x row exist & no y row
	      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
	        // value @ x (check for pattern matrix)
	        var vx = values ? values[kx] : undefined;
	        // insert value @ y
	        index.splice(ky, 0, y);
	        if (values)
	          values.splice(ky, 0, vx);        
	        // remove value @ x (adjust array index if needed)
	        index.splice(ky <= kx ? kx + 1 : kx, 1);
	        if (values)
	          values.splice(ky <= kx ? kx + 1 : kx, 1);
	        // next column
	        continue;
	      }
	      // check y row exist & no x row
	      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
	        // value @ y (check for pattern matrix)
	        var vy = values ? values[ky] : undefined;
	        // insert value @ x
	        index.splice(kx, 0, x);
	        if (values)
	          values.splice(kx, 0, vy);
	        // remove value @ y (adjust array index if needed)
	        index.splice(kx <= ky ? ky + 1 : ky, 1);
	        if (values)
	          values.splice(kx <= ky ? ky + 1 : ky, 1);
	      }
	    }
	  };

	  // register this type in the base class Matrix
	  type.Matrix._storage.sparse = SparseMatrix;

	  return SparseMatrix;
	}

	exports.name = 'SparseMatrix';
	exports.path = 'type';
	exports.factory = factory;
	exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage


/***/ },
/* 262 */
/*!*****************************************!*\
  !*** ./~/mathjs/lib/type/matrix/Spa.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load) {
	  
	  var add = load(__webpack_require__(/*! ../../function/arithmetic/add */ 60));
	  var equalScalar = load(__webpack_require__(/*! ../../function/relational/equalScalar */ 49));
	  
	  /**
	   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array 
	   * of the vector elements and an ordered list of non-zero elements.
	   */
	  function Spa() {
	    if (!(this instanceof Spa))
	      throw new SyntaxError('Constructor must be called with the new operator');
	    
	    // allocate vector, TODO use typed arrays
	    this._values = [];
	    this._heap = new type.FibonacciHeap();
	  }

	  /**
	   * Attach type information
	   */
	  Spa.prototype.type = 'Spa';
	  Spa.prototype.isSpa = true;

	  /**
	   * Set the value for index i.
	   *
	   * @param {number} i                       The index
	   * @param {number | BigNumber | Complex}   The value at index i
	   */
	  Spa.prototype.set = function (i, v) {
	    // check we have a value @ i
	    if (!this._values[i]) {
	      // insert in heap
	      var node = this._heap.insert(i, v);
	      // set the value @ i
	      this._values[i] = node;
	    }
	    else {
	      // update the value @ i
	      this._values[i].value = v;
	    }
	  };
	  
	  Spa.prototype.get = function (i) {
	    var node = this._values[i];
	    if (node)
	      return node.value;
	    return 0;
	  };
	  
	  Spa.prototype.accumulate = function (i, v) {
	    // node @ i
	    var node = this._values[i];
	    if (!node) {
	      // insert in heap
	      node = this._heap.insert(i, v);
	      // initialize value
	      this._values[i] = node;
	    }
	    else {
	      // accumulate value
	      node.value = add(node.value, v);
	    }
	  };
	  
	  Spa.prototype.forEach = function (from, to, callback) {
	    // references
	    var heap = this._heap;
	    var values = this._values;
	    // nodes
	    var nodes = [];
	    // node with minimum key, save it
	    var node = heap.extractMinimum();
	    if (node)
	      nodes.push(node);
	    // extract nodes from heap (ordered)
	    while (node && node.key <= to) {
	      // check it is in range
	      if (node.key >= from) {
	        // check value is not zero
	        if (!equalScalar(node.value, 0)) {
	          // invoke callback
	          callback(node.key, node.value, this);
	        }
	      }
	      // extract next node, save it
	      node = heap.extractMinimum();
	      if (node)
	        nodes.push(node);
	    }
	    // reinsert all nodes in heap
	    for (var i = 0; i < nodes.length; i++) {
	      // current node
	      var n = nodes[i];
	      // insert node in heap
	      node = heap.insert(n.key, n.value);
	      // update values
	      values[node.key] = node;
	    }
	  };
	  
	  Spa.prototype.swap = function (i, j) {
	    // node @ i and j
	    var nodei = this._values[i];
	    var nodej = this._values[j];
	    // check we need to insert indeces
	    if (!nodei && nodej) {
	      // insert in heap
	      nodei = this._heap.insert(i, nodej.value);
	      // remove from heap
	      this._heap.remove(nodej);
	      // set values
	      this._values[i] = nodei;
	      this._values[j] = undefined;
	    }
	    else if (nodei && !nodej) {
	      // insert in heap
	      nodej = this._heap.insert(j, nodei.value);
	      // remove from heap
	      this._heap.remove(nodei);
	      // set values
	      this._values[j] = nodej;
	      this._values[i] = undefined;
	    }
	    else if (nodei && nodej) {
	      // swap values
	      var v = nodei.value;
	      nodei.value = nodej.value;
	      nodej.value = v;
	    }
	  };
	  
	  return Spa;
	}

	exports.name = 'Spa';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 263 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/FibonacciHeap.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  
	  var smaller = load(__webpack_require__(/*! ../../function/relational/smaller */ 129));
	  var larger = load(__webpack_require__(/*! ../../function/relational/larger */ 80));
	  
	  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
	  
	  function FibonacciHeap() {
	    if (!(this instanceof FibonacciHeap))
	      throw new SyntaxError('Constructor must be called with the new operator');

	    // initialize fields
	    this._minimum = null;
	    this._size = 0;
	  }

	  /**
	   * Attach type information
	   */
	  FibonacciHeap.prototype.type = 'FibonacciHeap';
	  FibonacciHeap.prototype.isFibonacciHeap = true;

	  /**
	   * Inserts a new data element into the heap. No heap consolidation is
	   * performed at this time, the new node is simply inserted into the root
	   * list of this heap. Running time: O(1) actual.
	   */
	  FibonacciHeap.prototype.insert = function (key, value) {
	    // create node
	    var node = {
	      key: key,
	      value: value,
	      degree: 0
	    };
	    // check we have a node in the minimum
	    if (this._minimum) {
	      // minimum node
	      var minimum = this._minimum;
	      // update left & right of node
	      node.left = minimum;
	      node.right = minimum.right;
	      minimum.right = node;
	      node.right.left = node;
	      // update minimum node in heap if needed
	      if (smaller(key, minimum.key)) {
	        // node has a smaller key, use it as minimum
	        this._minimum = node;
	      }
	    }
	    else {
	      // set left & right
	      node.left = node;
	      node.right = node;
	      // this is the first node
	      this._minimum = node;
	    }
	    // increment number of nodes in heap
	    this._size++;
	    // return node
	    return node;
	  };

	  /**
	   * Returns the number of nodes in heap. Running time: O(1) actual.
	   */
	  FibonacciHeap.prototype.size = function () {
	    return this._size;
	  };

	  /**
	   * Removes all elements from this heap.
	   */
	  FibonacciHeap.prototype.clear = function () {
	    this._minimum = null;
	    this._size = 0;
	  };

	  /**
	   * Returns true if the heap is empty, otherwise false.
	   */
	  FibonacciHeap.prototype.isEmpty = function () {
	    return !!this._minimum;
	  };
	  
	  /**
	   * Extracts the node with minimum key from heap. Amortized running 
	   * time: O(log n).
	   */
	  FibonacciHeap.prototype.extractMinimum = function () {
	    // node to remove
	    var node = this._minimum;
	    // check we have a minimum
	    if (node === null)
	      return node;
	    // current minimum
	    var minimum = this._minimum;
	    // get number of children
	    var numberOfChildren = node.degree;
	    // pointer to the first child
	    var x = node.child;
	    // for each child of node do...
	    while (numberOfChildren > 0) {
	      // store node in right side
	      var tempRight = x.right;
	      // remove x from child list
	      x.left.right = x.right;
	      x.right.left = x.left;
	      // add x to root list of heap
	      x.left = minimum;
	      x.right = minimum.right;
	      minimum.right = x;
	      x.right.left = x;
	      // set Parent[x] to null
	      x.parent = null;
	      x = tempRight;
	      numberOfChildren--;
	    }
	    // remove node from root list of heap
	    node.left.right = node.right;
	    node.right.left = node.left;
	    // update minimum
	    if (node == node.right) {
	      // empty
	      minimum = null;
	    }
	    else {
	      // update minimum
	      minimum = node.right;
	      // we need to update the pointer to the root with minimum key
	      minimum = _findMinimumNode(minimum, this._size);
	    }
	    // decrement size of heap
	    this._size--;
	    // update minimum
	    this._minimum = minimum;
	    // return node
	    return node;
	  };
	  
	  /**
	   * Removes a node from the heap given the reference to the node. The trees
	   * in the heap will be consolidated, if necessary. This operation may fail
	   * to remove the correct element if there are nodes with key value -Infinity.
	   * Running time: O(log n) amortized.
	   */
	  FibonacciHeap.prototype.remove = function (node) {
	    // decrease key value
	    this._minimum = _decreaseKey(this._minimum, node, null);
	    // remove the smallest
	    this.extractMinimum();
	  };
	  
	  /**
	   * Decreases the key value for a heap node, given the new value to take on.
	   * The structure of the heap may be changed and will not be consolidated. 
	   * Running time: O(1) amortized.
	   */
	  var _decreaseKey = function (minimum, node, key) {
	    // set node key
	    node.key = key;
	    // get parent node
	    var parent = node.parent;
	    if (parent && smaller(node.key, parent.key)) {
	      // remove node from parent
	      _cut(minimum, node, parent);
	      // remove all nodes from parent to the root parent
	      _cascadingCut(minimum, parent);
	    }
	    // update minimum node if needed
	    if (smaller(node.key, minimum.key))
	      minimum = node;
	    // return minimum
	    return minimum;
	  };
	  
	  /**
	   * The reverse of the link operation: removes node from the child list of parent.
	   * This method assumes that min is non-null. Running time: O(1).
	   */
	  var _cut = function (minimum, node, parent) {
	    // remove node from parent children and decrement Degree[parent]
	    node.left.right = node.right;
	    node.right.left = node.left;
	    parent.degree--;
	    // reset y.child if necessary
	    if (parent.child == node)
	      parent.child = node.right;
	    // remove child if degree is 0
	    if (parent.degree === 0)
	      parent.child = null;
	    // add node to root list of heap
	    node.left = minimum;
	    node.right = minimum.right;
	    minimum.right = node;
	    node.right.left = node;
	    // set parent[node] to null
	    node.parent = null;
	    // set mark[node] to false
	    node.mark = false;
	  };
	  
	  /**
	   * Performs a cascading cut operation. This cuts node from its parent and then
	   * does the same for its parent, and so on up the tree.
	   * Running time: O(log n); O(1) excluding the recursion.
	   */
	  var _cascadingCut= function (minimum, node) {
	    // store parent node
	    var parent = node.parent;
	    // if there's a parent...
	    if (!parent)
	      return;
	    // if node is unmarked, set it marked
	    if (!node.mark) {
	      node.mark = true;
	    }
	    else {
	      // it's marked, cut it from parent
	      _cut(minimum, node, parent);
	      // cut its parent as well
	      _cascadingCut(parent);
	    }
	  };
	  
	  /**
	   * Make the first node a child of the second one. Running time: O(1) actual.
	   */
	  var _linkNodes = function (node, parent) {
	    // remove node from root list of heap
	    node.left.right = node.right;
	    node.right.left = node.left;
	    // make node a Child of parent
	    node.parent = parent;
	    if (!parent.child) {
	      parent.child = node;
	      node.right = node;
	      node.left = node;
	    }
	    else {
	      node.left = parent.child;
	      node.right = parent.child.right;
	      parent.child.right = node;
	      node.right.left = node;
	    }
	    // increase degree[parent]
	    parent.degree++;
	    // set mark[node] false
	    node.mark = false;
	  };
	  
	  var _findMinimumNode = function (minimum, size) {
	    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
	    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;
	    // create list with initial capacity
	    var array = new Array(arraySize);
	    // find the number of root nodes.
	    var numRoots = 0;
	    var x = minimum;
	    if (x) {
	      numRoots++;
	      x = x.right;
	      while (x !== minimum) {
	        numRoots++;
	        x = x.right;
	      }
	    }
	    // vars
	    var y;
	    // For each node in root list do...
	    while (numRoots > 0) {
	      // access this node's degree..
	      var d = x.degree;
	      // get next node
	      var next = x.right;
	      // check if there is a node already in array with the same degree
	      while (true) {
	        // get node with the same degree is any
	        y = array[d];
	        if (!y)
	          break;
	        // make one node with the same degree a child of the other, do this based on the key value.
	        if (larger(x.key, y.key)) {
	          var temp = y;
	          y = x;
	          x = temp;
	        }
	        // make y a child of x
	        _linkNodes(y, x);
	        // we have handled this degree, go to next one.
	        array[d] = null;
	        d++;
	      }
	      // save this node for later when we might encounter another of the same degree.
	      array[d] = x;
	      // move forward through list.
	      x = next;
	      numRoots--;
	    }
	    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].
	    minimum = null;
	    // loop nodes in array
	    for (var i = 0; i < arraySize; i++) {
	      // get current node
	      y = array[i];
	      if (!y)
	        continue;
	      // check if we have a linked list
	      if (minimum) {
	        // First remove node from root list.
	        y.left.right = y.right;
	        y.right.left = y.left;
	        // now add to root list, again.
	        y.left = minimum;
	        y.right = minimum.right;
	        minimum.right = y;
	        y.right.left = y;
	        // check if this is a new min.
	        if (smaller(y.key, minimum.key))
	          minimum = y;
	      }
	      else
	        minimum = y;
	    }
	    return minimum;
	  };
	  
	  return FibonacciHeap;
	}

	exports.name = 'FibonacciHeap';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 264 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/ImmutableDenseMatrix.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(/*! ../../utils/index */ 52);

	var string = util.string;
	var object = util.object;

	var isArray = Array.isArray;
	var isString = string.isString;

	function factory (type, config, load) {

	  var DenseMatrix = load(__webpack_require__(/*! ./DenseMatrix */ 260));

	  var smaller = load(__webpack_require__(/*! ../../function/relational/smaller */ 129));

	  function ImmutableDenseMatrix(data, datatype) {
	    if (!(this instanceof ImmutableDenseMatrix))
	      throw new SyntaxError('Constructor must be called with the new operator');
	    if (datatype && !isString(datatype))
	      throw new Error('Invalid datatype: ' + datatype);

	    if ((data && data.isMatrix === true) || isArray(data)) {
	      // use DenseMatrix implementation
	      var matrix = new DenseMatrix(data, datatype);
	      // internal structures
	      this._data = matrix._data;
	      this._size = matrix._size;
	      this._datatype = matrix._datatype;
	      this._min = null;
	      this._max = null;
	    }
	    else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = data.datatype;
	      this._min = typeof data.min !== 'undefined' ? data.min : null;
	      this._max = typeof data.max !== 'undefined' ? data.max : null;
	    }
	    else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
	    }
	    else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	      this._min = null;
	      this._max = null;
	    }
	  }

	  ImmutableDenseMatrix.prototype = new DenseMatrix();

	  /**
	   * Attach type information
	   */
	  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
	  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;

	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | ImmutableDenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  ImmutableDenseMatrix.prototype.subset = function (index) {
	    switch (arguments.length) {
	      case 1:
	        // use base implementation
	        var m = DenseMatrix.prototype.subset.call(this, index);
	        // check result is a matrix
	        if (m.isMatrix) {
	          // return immutable matrix
	          return new ImmutableDenseMatrix({
	            data: m._data,
	            size: m._size,
	            datatype: m._datatype
	          });
	        }
	        return m;
	        
	        // intentional fall through
	      case 2:
	      case 3:
	        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  /**
	   * Replace a single element in the matrix.
	   * @param {Number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {ImmutableDenseMatrix} self
	   */
	  ImmutableDenseMatrix.prototype.set = function () {
	    throw new Error('Cannot invoke set on an Immutable Matrix instance');
	  };

	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {Number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  ImmutableDenseMatrix.prototype.resize = function () {
	    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
	  };

	  /**
	   * Create a clone of the matrix
	   * @return {ImmutableDenseMatrix} clone
	   */
	  ImmutableDenseMatrix.prototype.clone = function () {
	    var m = new ImmutableDenseMatrix({
	      data: object.clone(this._data),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };

	  /**
	   * Get a JSON representation of the matrix
	   * @returns {Object}
	   */
	  ImmutableDenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'ImmutableDenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };

	  /**
	   * Generate a matrix from a JSON object
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {ImmutableDenseMatrix}
	   */
	  ImmutableDenseMatrix.fromJSON = function (json) {
	    return new ImmutableDenseMatrix(json);
	  };

	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @param {Number} i       Matrix row index 1
	   * @param {Number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  ImmutableDenseMatrix.prototype.swapRows = function () {
	    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
	  };

	  /**
	   * Calculate the minimum value in the set
	   * @return {Number | undefined} min
	   */
	  ImmutableDenseMatrix.prototype.min = function () {
	    // check min has been calculated before
	    if (this._min === null) {
	      // minimum
	      var m = null;
	      // compute min
	      this.forEach(function (v) {
	        if (m === null || smaller(v, m))
	          m = v;
	      });
	      this._min = m !== null ? m : undefined;
	    }
	    return this._min;
	  };

	  /**
	   * Calculate the maximum value in the set
	   * @return {Number | undefined} max
	   */
	  ImmutableDenseMatrix.prototype.max = function () {
	    // check max has been calculated before
	    if (this._max === null) {
	      // maximum
	      var m = null;
	      // compute max
	      this.forEach(function (v) {
	        if (m === null || smaller(m, v))
	          m = v;
	      });
	      this._max = m !== null ? m : undefined;
	    }
	    return this._max;
	  };

	  // exports
	  return ImmutableDenseMatrix;
	}

	exports.name = 'ImmutableDenseMatrix';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 265 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/MatrixIndex.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clone = __webpack_require__(/*! ../../utils/object */ 21).clone;
	var isInteger = __webpack_require__(/*! ../../utils/number */ 24).isInteger;

	function factory (type) {
	  
	  /**
	   * @Constructor Index
	   * Create an index. An Index can store ranges and sets for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Usage:
	   *     var index = new Index(range1, range2, matrix1, array1, ...);
	   *
	   * Where each parameter can be any of:
	   *     A number
	   *     An instance of Range
	   *     An Array with the Set values
	   *     A Matrix with the Set values
	   *
	   * The parameters start, end, and step must be integer numbers.
	   *
	   * @param {...*} ranges
	   */
	  function Index(ranges) {
	    if (!(this instanceof Index)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this._dimensions = [];
	    this._isScalar = true;

	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];

	      if (arg && (arg.isRange === true)) {
	        this._dimensions.push(arg);
	        this._isScalar = false;
	      }
	      else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
	        // create matrix
	        var m = _createImmutableMatrix(arg.valueOf());
	        this._dimensions.push(m);
	        // size
	        var size = m.size();
	        // scalar
	        this._isScalar = size.length === 1 && size[0] === 1;        
	      }
	      else if (typeof arg === 'number') {
	        this._dimensions.push(_createImmutableMatrix([arg]));
	      }
	      // TODO: implement support for wildcard '*'
	      else {
	        throw new TypeError('Dimension must be an Array, Matrix, Number or Range');
	      }
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Index.prototype.type = 'Index';
	  Index.prototype.isIndex = true;

	  function _createImmutableMatrix(arg) {
	    // loop array elements
	    for (var i = 0, l = arg.length; i < l; i++) {
	      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {
	        throw new TypeError('Index parameters must be positive integer numbers');
	      }
	    }
	    // create matrix
	    return new type.ImmutableDenseMatrix(arg);
	  }

	  /**
	   * Create a clone of the index
	   * @return {Index} clone
	   */
	  Index.prototype.clone = function () {
	    var index = new Index();
	    index._dimensions = clone(this._dimensions);
	    index._isScalar = this._isScalar;
	    return index;
	  };

	  /**
	   * Create an index from an array with ranges/numbers
	   * @param {Array.<Array | number>} ranges
	   * @return {Index} index
	   * @private
	   */
	  Index.create = function (ranges) {
	    var index = new Index();
	    Index.apply(index, ranges);
	    return index;
	  };

	  /**
	   * Retrieve the size of the index, the number of elements for each dimension.
	   * @returns {number[]} size
	   */
	  Index.prototype.size = function () {
	    var size = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var d = this._dimensions[i];
	      size[i] = d.size()[0];
	    }

	    return size;
	  };

	  /**
	   * Get the maximum value for each of the indexes ranges.
	   * @returns {number[]} max
	   */
	  Index.prototype.max = function () {
	    var values = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = range.max();
	    }

	    return values;
	  };

	  /**
	   * Get the minimum value for each of the indexes ranges.
	   * @returns {number[]} min
	   */
	  Index.prototype.min = function () {
	    var values = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = range.min();
	    }

	    return values;
	  };

	  /**
	   * Loop over each of the ranges of the index
	   * @param {Function} callback   Called for each range with a Range as first
	   *                              argument, the dimension as second, and the
	   *                              index object as third.
	   */
	  Index.prototype.forEach = function (callback) {
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      callback(this._dimensions[i], i, this);
	    }
	  };

	  /**
	   * Retrieve the dimension for the given index
	   * @param {Number} dim                  Number of the dimension
	   * @returns {Range | null} range
	   */
	  Index.prototype.dimension = function (dim) {
	    return this._dimensions[dim] || null;
	  };

	  /**
	   * Test whether this index contains only a single value.
	   *
	   * This is the case when the index is created with only scalar values as ranges,
	   * not for ranges resolving into a single value.
	   * @return {boolean} isScalar
	   */
	  Index.prototype.isScalar = function () {
	    return this._isScalar;
	  };

	  /**
	   * Expand the Index into an array.
	   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
	   * @returns {Array} array
	   */
	  Index.prototype.toArray = function () {
	    var array = [];
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      array.push(this._dimensions[i].toArray());
	    }
	    return array;
	  };

	  /**
	   * Get the primitive value of the Index, a two dimensional array.
	   * Equivalent to Index.toArray().
	   * @returns {Array} array
	   */
	  Index.prototype.valueOf = Index.prototype.toArray;

	  /**
	   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
	   * @returns {String} str
	   */
	  Index.prototype.toString = function () {
	    var strings = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      strings.push(this._dimensions[i].toString());
	    }

	    return '[' + strings.join(', ') + ']';
	  };

	  /**
	   * Get a JSON representation of the Index
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   */
	  Index.prototype.toJSON = function () {
	    return {
	      mathjs: 'Index',
	      dimensions: this._dimensions
	    };
	  };

	  /**
	   * Instantiate an Index from a JSON object
	   * @param {Object} json A JSON object structured as:
	   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   * @return {Index}
	   */
	  Index.fromJSON = function (json) {
	    return Index.create(json.dimensions);
	  };

	  return Index;
	}

	exports.name = 'Index';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 266 */
/*!*******************************************!*\
  !*** ./~/mathjs/lib/type/matrix/Range.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var number = __webpack_require__(/*! ../../utils/number */ 24);

	function factory (type, config, load, typed) {
	  /**
	   * @constructor Range
	   * Create a range. A range has a start, step, and end, and contains functions
	   * to iterate over the range.
	   *
	   * A range can be constructed as:
	   *     var range = new Range(start, end);
	   *     var range = new Range(start, end, step);
	   *
	   * To get the result of the range:
	   *     range.forEach(function (x) {
	   *         console.log(x);
	   *     });
	   *     range.map(function (x) {
	   *         return math.sin(x);
	   *     });
	   *     range.toArray();
	   *
	   * Example usage:
	   *     var c = new Range(2, 6);         // 2:1:5
	   *     c.toArray();                     // [2, 3, 4, 5]
	   *     var d = new Range(2, -3, -1);    // 2:-1:-2
	   *     d.toArray();                     // [2, 1, 0, -1, -2]
	   *
	   * @param {number} start  included lower bound
	   * @param {number} end    excluded upper bound
	   * @param {number} [step] step size, default value is 1
	   */
	  function Range(start, end, step) {
	    if (!(this instanceof Range)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (start != null) {
	      if (start.isBigNumber === true)
	        start = start.toNumber();
	      else if (typeof start !== 'number')
	        throw new TypeError('Parameter start must be a number');
	    }
	    if (end != null) {
	      if (end.isBigNumber === true)
	        end = end.toNumber();
	      else if (typeof end !== 'number')
	        throw new TypeError('Parameter end must be a number');
	    }
	    if (step != null) {
	      if (step.isBigNumber === true)
	        step = step.toNumber();
	      else if (typeof step !== 'number')
	        throw new TypeError('Parameter step must be a number');
	    }

	    this.start = (start != null) ? parseFloat(start) : 0;
	    this.end   = (end != null)   ? parseFloat(end)   : 0;
	    this.step  = (step != null)  ? parseFloat(step)  : 1;
	  }

	  /**
	   * Attach type information
	   */
	  Range.prototype.type = 'Range';
	  Range.prototype.isRange = true;

	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @param {string} str
	   * @return {Range | null} range
	   */
	  Range.parse = function (str) {
	    if (typeof str !== 'string') {
	      return null;
	    }

	    var args = str.split(':');
	    var nums = args.map(function (arg) {
	      return parseFloat(arg);
	    });

	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });
	    if (invalid) {
	      return null;
	    }

	    switch (nums.length) {
	      case 2:
	        return new Range(nums[0], nums[1]);
	      case 3:
	        return new Range(nums[0], nums[2], nums[1]);
	      default:
	        return null;
	    }
	  };

	  /**
	   * Create a clone of the range
	   * @return {Range} clone
	   */
	  Range.prototype.clone = function () {
	    return new Range(this.start, this.end, this.step);
	  };

	  /**
	   * Retrieve the size of the range.
	   * Returns an array containing one number, the number of elements in the range.
	   * @returns {number[]} size
	   */
	  Range.prototype.size = function () {
	    var len = 0,
	        start = this.start,
	        step = this.step,
	        end = this.end,
	        diff = end - start;

	    if (number.sign(step) == number.sign(diff)) {
	      len = Math.ceil((diff) / step);
	    }
	    else if (diff == 0) {
	      len = 0;
	    }

	    if (isNaN(len)) {
	      len = 0;
	    }
	    return [len];
	  };

	  /**
	   * Calculate the minimum value in the range
	   * @return {number | undefined} min
	   */
	  Range.prototype.min = function () {
	    var size = this.size()[0];

	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start;
	      }
	      else {
	        // negative step
	        return this.start + (size - 1) * this.step;
	      }
	    }
	    else {
	      return undefined;
	    }
	  };

	  /**
	   * Calculate the maximum value in the range
	   * @return {number | undefined} max
	   */
	  Range.prototype.max = function () {
	    var size = this.size()[0];

	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start + (size - 1) * this.step;
	      }
	      else {
	        // negative step
	        return this.start;
	      }
	    }
	    else {
	      return undefined;
	    }
	  };


	  /**
	   * Execute a callback function for each value in the range.
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Range being traversed.
	   */
	  Range.prototype.forEach = function (callback) {
	    var x = this.start;
	    var step = this.step;
	    var end = this.end;
	    var i = 0;

	    if (step > 0) {
	      while (x < end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    }
	    else if (step < 0) {
	      while (x > end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    }
	  };

	  /**
	   * Execute a callback function for each value in the Range, and return the
	   * results as an array
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @returns {Array} array
	   */
	  Range.prototype.map = function (callback) {
	    var array = [];
	    this.forEach(function (value, index, obj) {
	      array[index[0]] = callback(value, index, obj);
	    });
	    return array;
	  };

	  /**
	   * Create an Array with a copy of the Ranges data
	   * @returns {Array} array
	   */
	  Range.prototype.toArray = function () {
	    var array = [];
	    this.forEach(function (value, index) {
	      array[index[0]] = value;
	    });
	    return array;
	  };

	  /**
	   * Get the primitive value of the Range, a one dimensional array
	   * @returns {Array} array
	   */
	  Range.prototype.valueOf = function () {
	    // TODO: implement a caching mechanism for range.valueOf()
	    return this.toArray();
	  };

	  /**
	   * Get a string representation of the range, with optional formatting options.
	   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
	   * @param {Object | number | function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  Range.prototype.format = function (options) {
	    var str = number.format(this.start, options);

	    if (this.step != 1) {
	      str += ':' + number.format(this.step, options);
	    }
	    str += ':' + number.format(this.end, options);
	    return str;
	  };

	  /**
	   * Get a string representation of the range.
	   * @returns {string}
	   */
	  Range.prototype.toString = function () {
	    return this.format();
	  };

	  /**
	   * Get a JSON representation of the range
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   */
	  Range.prototype.toJSON = function () {
	    return {
	      mathjs: 'Range',
	      start: this.start,
	      end: this.end,
	      step: this.step
	    };
	  };

	  /**
	   * Instantiate a Range from a JSON object
	   * @param {Object} json A JSON object structured as:
	   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   * @return {Range}
	   */
	  Range.fromJSON = function (json) {
	    return new Range(json.start, json.end, json.step);
	  };

	  return Range;
	}

	exports.name = 'Range';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 267 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/function/index.js ***!
  \****************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {
	  /**
	   * Create an index. An Index can store ranges having start, step, and end
	   * for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Syntax:
	   *
	   *     math.index(range1, range2, ...)
	   *
	   * Where each range can be any of:
	   *
	   * - A number
	   * - An instance of `Range`
	   * - A one-dimensional Array or a Matrix with numbers
	   *
	   * Indexes must be zero-based, integer numbers.
	   *
	   * Examples:
	   *
	   *    var math = math.js
	   *
	   *    var b = [1, 2, 3, 4, 5];
	   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]
	   *
	   *    var a = math.matrix([[1, 2], [3, 4]]);
	   *    a.subset(math.index(0, 1));             // returns 2
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, matrix, number, string, unit
	   *
	   * @param {...*} ranges   Zero or more ranges or numbers.
	   * @return {Index}        Returns the created index
	   */
	  return typed('index', {
	    '...number | BigNumber | Range | Array | Matrix': function (args) {
	      var ranges = args.map(function (arg) {
	        if (arg && arg.isBigNumber === true) {
	          return arg.toNumber(); // convert BigNumber to Number
	        }
	        else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
	          return arg.map(function (elem) {
	            // convert BigNumber to Number
	            return (elem && elem.isBigNumber === true) ? elem.toNumber() : elem;
	          });
	        }
	        else {
	          return arg;
	        }
	      });

	      var res = new type.Index();
	      type.Index.apply(res, ranges);
	      return res;
	    }
	  });
	}

	exports.name = 'index';
	exports.factory = factory;


/***/ },
/* 268 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/type/matrix/function/sparse.js ***!
  \*****************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {

	  var SparseMatrix = type.SparseMatrix;

	  /**
	   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   *
	   * Syntax:
	   *
	   *    math.sparse()               // creates an empty sparse matrix.
	   *    math.sparse(data)           // creates a sparse matrix with initial data.
	   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
	   *
	   * Examples:
	   *
	   *    var m = math.sparse([[1, 2], [3, 4]]);
	   *    m.size();                        // Array [2, 2]
	   *    m.resize([3, 2], 5);
	   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, matrix
	   *
	   * @param {Array | Matrix} [data]    A two dimensional array
	   *
	   * @return {Matrix} The created matrix
	   */
	  var sparse = typed('sparse', {
	    '': function () {
	      return new SparseMatrix([]);
	    },
	    
	    'string': function (datatype) {
	      return new SparseMatrix([], datatype);
	    },

	    'Array | Matrix': function (data) {
	      return new SparseMatrix(data);
	    },
	    
	    'Array | Matrix, string': function (data, datatype) {
	      return new SparseMatrix(data, datatype);
	    }
	  });

	  sparse.toTex = {
	    0: '\\begin{bsparse}\\end{bsparse}',
	    1: '\\left(${args[0]}\\right)'
	  };

	  return sparse;
	}

	exports.name = 'sparse';
	exports.factory = factory;


/***/ },
/* 269 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/type/bignumber/index.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(/*! ./BigNumber */ 270),

	  // construction function
	  __webpack_require__(/*! ./function/bignumber */ 272)
	];


/***/ },
/* 270 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/type/bignumber/BigNumber.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	var Decimal = __webpack_require__(/*! decimal.js */ 271);
	var digits = __webpack_require__(/*! ../../utils/number */ 24).digits;

	function factory (type, config, load, typed, math) {
	  var BigNumber = Decimal.constructor(config);

	  /**
	   * Attach type information
	   */
	  BigNumber.prototype.type = 'BigNumber';
	  BigNumber.prototype.isBigNumber = true;

	  /**
	   * Get a JSON representation of a BigNumber containing
	   * type information
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
	   */
	  BigNumber.prototype.toJSON = function () {
	    return {
	      mathjs: 'BigNumber',
	      value: this.toString()
	    };
	  };

	  /**
	   * Instantiate a BigNumber from a JSON object
	   * @param {Object} json  a JSON object structured as:
	   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
	   * @return {BigNumber}
	   */
	  BigNumber.fromJSON = function (json) {
	    return new BigNumber(json.value);
	  };

	  // listen for changed in the configuration, automatically apply changed precision
	  math.on('config', function (curr, prev) {
	    if (curr.precision !== prev.precision) {
	      BigNumber.config({ precision: curr.precision });
	    }
	  });

	  return BigNumber;
	}

	exports.name = 'BigNumber';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace

/***/ },
/* 271 */
/*!******************************************!*\
  !*** ./~/mathjs/~/decimal.js/decimal.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! decimal.js v4.0.2 https://github.com/MikeMcl/decimal.js/LICENCE */
	;(function (global) {
	    'use strict';


	    /*
	     *  decimal.js v4.0.2
	     *  An arbitrary-precision Decimal type for JavaScript.
	     *  https://github.com/MikeMcl/decimal.js
	     *  Copyright (c) 2014 Michael Mclaughlin <M8ch88l@gmail.com>
	     *  MIT Expat Licence
	     */


	    var convertBase, decimal, noConflict,
	        crypto = global['crypto'],
	        external = true,
	        id = 0,
	        mathfloor = Math.floor,
	        mathpow = Math.pow,
	        outOfRange,
	        toString = Object.prototype.toString,
	        BASE = 1e7,
	        LOGBASE = 7,
	        NUMERALS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
	        P = {},

	        /*
	         The maximum exponent magnitude.
	         The limit on the value of toExpNeg, toExpPos, minE and maxE.
	         */
	        EXP_LIMIT = 9e15,                      // 0 to 9e15

	        /*
	         The limit on the value of precision, and on the argument to toDecimalPlaces,
	         toExponential, toFixed, toFormat, toPrecision and toSignificantDigits.
	         */
	        MAX_DIGITS = 1E9,                      // 0 to 1e+9

	        /*
	         To decide whether or not to calculate x.pow(integer y) using the 'exponentiation by
	         squaring' algorithm or by exp(y*ln(x)), the number of significant digits of x is multiplied
	         by y. If this number is less than INT_POW_LIMIT then the former algorithm is used.
	         */
	        INT_POW_LIMIT = 3000,                  // 0 to 5000

	        // The natural logarithm of 10 (1025 digits).
	        LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058';


	    // Decimal prototype methods


	    /*
	     * Return a new Decimal whose value is the absolute value of this Decimal.
	     *
	     */
	    P['absoluteValue'] = P['abs'] = function () {
	        var x = new this['constructor'](this);

	        if ( x['s'] < 0 ) {
	            x['s'] = 1;
	        }

	        return rnd(x);
	    };


	    /*
	     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in
	     * the direction of positive Infinity.
	     *
	     */
	    P['ceil'] = function () {

	        return rnd( new this['constructor'](this), this['e'] + 1, 2 );
	    };


	    /*
	     * Return
	     *   1    if the value of this Decimal is greater than the value of Decimal(y, b),
	     *  -1    if the value of this Decimal is less than the value of Decimal(y, b),
	     *   0    if they have the same value,
	     *  null  if the value of either Decimal is NaN.
	     *
	     */
	    P['comparedTo'] = P['cmp'] = function ( y, b ) {
	        var a,
	            x = this,
	            xc = x['c'],
	            yc = ( id = -id, y = new x['constructor']( y, b ), y['c'] ),
	            i = x['s'],
	            j = y['s'],
	            k = x['e'],
	            l = y['e'];

	        // Either NaN?
	        if ( !i || !j ) {
	            return null;
	        }

	        a = xc && !xc[0];
	        b = yc && !yc[0];

	        // Either zero?
	        if ( a || b ) {
	            return a ? b ? 0 : -j : i;
	        }

	        // Signs differ?
	        if ( i != j ) {
	            return i;
	        }

	        a = i < 0;

	        // Either Infinity?
	        if ( !xc || !yc ) {
	            return k == l ? 0 : !xc ^ a ? 1 : -1;
	        }

	        // Compare exponents.
	        if ( k != l ) {
	            return k > l ^ a ? 1 : -1;
	        }

	        // Compare digit by digit.
	        for ( i = -1,
	              j = ( k = xc.length ) < ( l = yc.length ) ? k : l;
	              ++i < j; ) {

	            if ( xc[i] != yc[i] ) {
	                return xc[i] > yc[i] ^ a ? 1 : -1;
	            }
	        }

	        // Compare lengths.
	        return k == l ? 0 : k > l ^ a ? 1 : -1;
	    };


	    /*
	     * Return the number of decimal places of the value of this Decimal.
	     *
	     */
	     P['decimalPlaces'] = P['dp'] = function () {
	        var c, v,
	            n = null;

	        if ( c = this['c'] ) {
	            n = ( ( v = c.length - 1 ) - mathfloor( this['e'] / LOGBASE ) ) * LOGBASE;

	            if ( v = c[v] ) {

	                // Subtract the number of trailing zeros of the last number.
	                for ( ; v % 10 == 0; v /= 10, n-- );
	            }

	            if ( n < 0 ) {
	                n = 0;
	            }
	        }

	        return n;
	    };


	    /*
	     *  n / 0 = I
	     *  n / N = N
	     *  n / I = 0
	     *  0 / n = 0
	     *  0 / 0 = N
	     *  0 / N = N
	     *  0 / I = 0
	     *  N / n = N
	     *  N / 0 = N
	     *  N / N = N
	     *  N / I = N
	     *  I / n = I
	     *  I / 0 = I
	     *  I / N = N
	     *  I / I = N
	     *
	     * Return a new Decimal whose value is the value of this Decimal divided by Decimal(y, b),
	     * rounded to precision significant digits using rounding mode rounding.
	     *
	     */
	    P['dividedBy'] = P['div'] = function ( y, b ) {
	        id = 2;

	        return div( this, new this['constructor']( y, b ) );
	    };


	    /*
	     * Return a new Decimal whose value is the integer part of dividing the value of this Decimal by
	     * the value of Decimal(y, b), rounded to precision significant digits using rounding mode
	     * rounding.
	     *
	     */
	    P['dividedToIntegerBy'] = P['divToInt'] = function ( y, b ) {
	        var x = this,
	            Decimal = x['constructor'];
	        id = 18;

	        return rnd(
	          div( x, new Decimal( y, b ), 0, 1, 1 ), Decimal['precision'], Decimal['rounding']
	        );
	    };


	    /*
	     * Return true if the value of this Decimal is equal to the value of Decimal(n, b), otherwise
	     * return false.
	     *
	     */
	    P['equals'] = P['eq'] = function ( n, b ) {
	        id = 3;

	        return this['cmp']( n, b ) === 0;
	    };


	    /*
	     * Return a new Decimal whose value is the exponential of the value of this Decimal, i.e. the
	     * base e raised to the power the value of this Decimal, rounded to precision significant digits
	     * using rounding mode rounding.
	     *
	     */
	    P['exponential'] = P['exp'] = function () {

	        return exp(this);
	    };


	    /*
	     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in
	     * the direction of negative Infinity.
	     *
	     */
	    P['floor'] = function () {

	        return rnd( new this['constructor'](this), this['e'] + 1, 3 );
	    };


	    /*
	     * Return true if the value of this Decimal is greater than the value of Decimal(n, b), otherwise
	     * return false.
	     *
	     */
	    P['greaterThan'] = P['gt'] = function ( n, b ) {
	        id = 4;

	        return this['cmp']( n, b ) > 0;
	    };


	    /*
	     * Return true if the value of this Decimal is greater than or equal to the value of
	     * Decimal(n, b), otherwise return false.
	     *
	     */
	    P['greaterThanOrEqualTo'] = P['gte'] = function ( n, b ) {
	        id = 5;
	        b = this['cmp']( n, b );

	        return b == 1 || b === 0;
	    };


	    /*
	     * Return true if the value of this Decimal is a finite number, otherwise return false.
	     *
	     */
	    P['isFinite'] = function () {

	        return !!this['c'];
	    };


	    /*
	     * Return true if the value of this Decimal is an integer, otherwise return false.
	     *
	     */
	    P['isInteger'] = P['isInt'] = function () {

	        return !!this['c'] && mathfloor( this['e'] / LOGBASE ) > this['c'].length - 2;
	    };


	    /*
	     * Return true if the value of this Decimal is NaN, otherwise return false.
	     *
	     */
	    P['isNaN'] = function () {

	        return !this['s'];
	    };


	    /*
	     * Return true if the value of this Decimal is negative, otherwise return false.
	     *
	     */
	    P['isNegative'] = P['isNeg'] = function () {

	        return this['s'] < 0;
	    };


	    /*
	     * Return true if the value of this Decimal is 0 or -0, otherwise return false.
	     *
	     */
	    P['isZero'] = function () {

	        return !!this['c'] && this['c'][0] == 0;
	    };


	    /*
	     * Return true if the value of this Decimal is less than Decimal(n, b), otherwise return false.
	     *
	     */
	    P['lessThan'] = P['lt'] = function ( n, b ) {
	        id = 6;

	        return this['cmp']( n, b ) < 0;
	    };


	    /*
	     * Return true if the value of this Decimal is less than or equal to Decimal(n, b), otherwise
	     * return false.
	     *
	     */
	    P['lessThanOrEqualTo'] = P['lte'] = function ( n, b ) {
	        id = 7;
	        b = this['cmp']( n, b );

	        return b == -1 || b === 0;
	    };


	    /*
	     * Return the logarithm of the value of this Decimal to the specified base, rounded
	     * to precision significant digits using rounding mode rounding.
	     *
	     * If no base is specified, return log[10](arg).
	     *
	     * log[base](arg) = ln(arg) / ln(base)
	     *
	     * The result will always be correctly rounded if the base of the log is 2 or 10, and
	     * 'almost always' if not:
	     *
	     * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
	     * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
	     * between the result and the correctly rounded result will be one ulp (unit in the last place).
	     *
	     * log[-b](a)       = NaN
	     * log[0](a)        = NaN
	     * log[1](a)        = NaN
	     * log[NaN](a)      = NaN
	     * log[Infinity](a) = NaN
	     * log[b](0)        = -Infinity
	     * log[b](-0)       = -Infinity
	     * log[b](-a)       = NaN
	     * log[b](1)        = 0
	     * log[b](Infinity) = Infinity
	     * log[b](NaN)      = NaN
	     *
	     * [base] {number|string|Decimal} The base of the logarithm.
	     * [b] {number} The base of base.
	     *
	     */
	    P['logarithm'] = P['log'] = function ( base, b ) {
	        var base10, c, denom, i, inf, num, sd, sd10, r,
	            arg = this,
	            Decimal = arg['constructor'],
	            pr = Decimal['precision'],
	            rm = Decimal['rounding'],
	            guard = 5;

	        // Default base is 10.
	        if ( base == null ) {
	            base = new Decimal(10);
	            base10 = true;
	        } else {
	            id = 15;
	            base = new Decimal( base, b );
	            c = base['c'];

	            // If base < 0 or +-Infinity/NaN or 0 or 1.
	            if ( base['s'] < 0 || !c || !c[0] || !base['e'] && c[0] == 1 && c.length == 1 ) {

	                return new Decimal(NaN);
	            }
	            base10 = base['eq'](10);
	        }
	        c = arg['c'];

	        // If arg < 0 or +-Infinity/NaN or 0 or 1.
	        if ( arg['s'] < 0 || !c || !c[0] || !arg['e'] && c[0] == 1 && c.length == 1 ) {

	            return new Decimal( c && !c[0] ? -1 / 0 : arg['s'] != 1 ? NaN : c ? 0 : 1 / 0 );
	        }

	        /*
	          The result will have an infinite decimal expansion if base is 10 and arg is not an
	          integer power of 10...
	         */
	        inf = base10 && ( i = c[0], c.length > 1 || i != 1 && i != 10 &&
	          i != 1e2 && i != 1e3 && i != 1e4 && i != 1e5 && i != 1e6 );
	            /*
	            // or if base last digit's evenness is not the same as arg last digit's evenness...
	            // (FAILS when e.g. base.c[0] = 10 and c[0] = 1)
	            || ( base['c'][ base['c'].length - 1 ] & 1 ) != ( c[ c.length - 1 ] & 1 )
	              // or if base is 2 and there is more than one 1 in arg in base 2.
	              // (SLOWS the method down significantly)
	              || base['eq'](2) && arg.toString(2).replace( /[^1]+/g, '' ) != '1';
	             */

	        external = false;
	        sd = pr + guard;
	        sd10 = sd + 10;

	        num = ln( arg, sd );

	        if (base10) {

	            if ( sd10 > LN10.length ) {
	                ifExceptionsThrow( Decimal, 1, sd10, 'log' );
	            }
	            denom = new Decimal( LN10.slice( 0, sd10 ) );
	        } else {
	            denom = ln( base, sd );
	        }

	        // The result will have 5 rounding digits.
	        r = div( num, denom, sd, 1 );

	        /*
	         If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
	         calculate 10 further digits.

	         If the result is known to have an infinite decimal expansion, repeat this until it is
	         clear that the result is above or below the boundary. Otherwise, if after calculating
	         the 10 further digits, the last 14 are nines, round up and assume the result is exact.
	         Also assume the result is exact if the last 14 are zero.

	         Example of a result that will be incorrectly rounded:
	         log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
	         The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7,
	         but it will be given as 2.6 as there are 15 zeros immediately after the requested
	         decimal place, so the exact result would be assumed to be 2.6, which rounded using
	         ROUND_CEIL to 1 decimal place is still 2.6.
	         */
	        if ( checkRoundingDigits( r['c'], i = pr, rm ) ) {

	            do {
	                sd += 10;
	                num = ln( arg, sd );

	                if (base10) {
	                    sd10 = sd + 10;

	                    if ( sd10 > LN10.length ) {
	                        ifExceptionsThrow( Decimal, 1, sd10, 'log' );
	                    }
	                    denom = new Decimal( LN10.slice( 0, sd10 ) );
	                } else {
	                    denom = ln( base, sd );
	                }

	                r = div( num, denom, sd, 1 );

	                if ( !inf ) {

	                    // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
	                    if ( +coefficientToString( r['c'] ).slice( i + 1, i + 15 ) + 1 == 1e14 ) {
	                        r = rnd( r, pr + 1, 0 );
	                    }

	                    break;
	                }
	            } while ( checkRoundingDigits( r['c'], i += 10, rm ) );
	        }
	        external = true;

	        return rnd( r, pr, rm );
	    };


	    /*
	     *  n - 0 = n
	     *  n - N = N
	     *  n - I = -I
	     *  0 - n = -n
	     *  0 - 0 = 0
	     *  0 - N = N
	     *  0 - I = -I
	     *  N - n = N
	     *  N - 0 = N
	     *  N - N = N
	     *  N - I = N
	     *  I - n = I
	     *  I - 0 = I
	     *  I - N = N
	     *  I - I = N
	     *
	     * Return a new Decimal whose value is the value of this Decimal minus Decimal(y, b), rounded
	     * to precision significant digits using rounding mode rounding.
	     *
	     */
	    P['minus'] = function ( y, b ) {
	        var t, i, j, xLTy,
	            x = this,
	            Decimal = x['constructor'],
	            a = x['s'];

	        id = 8;
	        y = new Decimal( y, b );
	        b = y['s'];

	        // Either NaN?
	        if ( !a || !b ) {

	            return new Decimal(NaN);
	        }

	        // Signs differ?
	        if ( a != b ) {
	            y['s'] = -b;

	            return x['plus'](y);
	        }

	        var xc = x['c'],
	            yc = y['c'],
	            e = mathfloor( y['e'] / LOGBASE ),
	            k = mathfloor( x['e'] / LOGBASE ),
	            pr = Decimal['precision'],
	            rm = Decimal['rounding'];

	        if ( !k || !e ) {

	            // Either Infinity?
	            if ( !xc || !yc ) {

	                return xc ? ( y['s'] = -b, y ) : new Decimal( yc ? x : NaN );
	            }

	            // Either zero?
	            if ( !xc[0] || !yc[0] ) {

	                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                x = yc[0] ? ( y['s'] = -b, y ) : new Decimal( xc[0] ? x :

	                  // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	                  rm == 3 ? -0 : 0 );

	                return external ? rnd( x, pr, rm ) : x;
	            }
	        }

	        xc = xc.slice();
	        i = xc.length;

	        // Determine which is the bigger number. Prepend zeros to equalise exponents.
	        if ( a = k - e ) {

	            if ( xLTy = a < 0 ) {
	                a = -a;
	                t = xc;
	                i = yc.length;
	            } else {
	                e = k;
	                t = yc;
	            }

	            if ( ( k = Math.ceil( pr / LOGBASE ) ) > i ) {
	                i = k;
	            }

	            /*
	             Numbers with massively different exponents would result in a massive number of
	             zeros needing to be prepended, but this can be avoided while still ensuring correct
	             rounding by limiting the number of zeros to max( pr, i ) + 2, where pr is precision and
	             i is the length of the coefficient of whichever is greater, x or y.
	             */
	            if ( a > ( i += 2 ) ) {
	                a = i;
	                t.length = 1;
	            }

	            t.reverse();
	            for ( b = a; b--; t.push(0) );
	            t.reverse();
	        } else {
	            // Exponents equal. Check digits.

	            if ( xLTy = i < ( j = yc.length ) ) {
	                j = i;
	            }

	            for ( a = b = 0; b < j; b++ ) {

	                if ( xc[b] != yc[b] ) {
	                    xLTy = xc[b] < yc[b];

	                    break;
	                }
	            }
	        }

	        // x < y? Point xc to the array of the bigger number.
	        if ( xLTy ) {
	            t = xc, xc = yc, yc = t;
	            y['s'] = -y['s'];
	        }

	        /*
	         Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
	         needs to start at yc length.
	         */
	        if ( ( b = -( ( j = xc.length ) - yc.length ) ) > 0 ) {

	            for ( ; b--; xc[j++] = 0 );
	        }

	        // Subtract yc from xc.
	        for ( k = BASE - 1, b = yc.length; b > a; ) {

	            if ( xc[--b] < yc[b] ) {

	                for ( i = b; i && !xc[--i]; xc[i] = k );
	                --xc[i];
	                xc[b] += BASE;
	            }
	            xc[b] -= yc[b];
	        }

	        // Remove trailing zeros.
	        for ( ; xc[--j] == 0; xc.pop() );

	        // Remove leading zeros and adjust exponent accordingly.
	        for ( ; xc[0] == 0; xc.shift(), --e );

	        if ( !xc[0] ) {

	            // Zero.
	            xc = [ e = 0 ];

	            // Following IEEE 754 (2008) 6.3, n - n = -0 when rounding towards -Infinity.
	            y['s'] = rm == 3 ? -1 : 1;
	        }

	        y['c'] = xc;

	        // Get the number of digits of xc[0].
	        for ( a = 1, b = xc[0]; b >= 10; b /= 10, a++ );
	        y['e'] = a + e * LOGBASE - 1;

	        return external ? rnd( y, pr, rm ) : y;
	    };


	    /*
	     *   n % 0 =  N
	     *   n % N =  N
	     *   n % I =  n
	     *   0 % n =  0
	     *  -0 % n = -0
	     *   0 % 0 =  N
	     *   0 % N =  N
	     *   0 % I =  0
	     *   N % n =  N
	     *   N % 0 =  N
	     *   N % N =  N
	     *   N % I =  N
	     *   I % n =  N
	     *   I % 0 =  N
	     *   I % N =  N
	     *   I % I =  N
	     *
	     * Return a new Decimal whose value is the value of this Decimal modulo Decimal(y, b), rounded
	     * to precision significant digits using rounding mode rounding.
	     *
	     * The result depends on the modulo mode.
	     *
	     */
	    P['modulo'] = P['mod'] = function ( y, b ) {
	        var n, q,
	            x = this,
	            Decimal = x['constructor'],
	            m = Decimal['modulo'];

	        id = 9;
	        y = new Decimal( y, b );
	        b = y['s'];
	        n = !x['c'] || !b || y['c'] && !y['c'][0];

	        /*
	         Return NaN if x is Infinity or NaN, or y is NaN or zero, else return x if y is Infinity
	         or x is zero.
	         */
	        if ( n || !y['c'] || x['c'] && !x['c'][0] ) {

	            return n
	              ? new Decimal(NaN)
	              : rnd( new Decimal(x), Decimal['precision'], Decimal['rounding'] );
	        }

	        external = false;

	        if ( m == 9 ) {

	            // Euclidian division: q = sign(y) * floor(x / abs(y))
	            // r = x - qy    where  0 <= r < abs(y)
	            y['s'] = 1;
	            q = div( x, y, 0, 3, 1 );
	            y['s'] = b;
	            q['s'] *= b;
	        } else {
	            q = div( x, y, 0, m, 1 );
	        }

	        q = q['times'](y);
	        external = true;

	        return x['minus'](q);
	    };


	    /*
	     * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
	     * rounded to precision significant digits using rounding mode rounding.
	     *
	     */
	    P['naturalLogarithm'] = P['ln'] = function () {

	        return ln(this);
	    };


	    /*
	     * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if
	     * multiplied by -1.
	     *
	     */
	    P['negated'] = P['neg'] = function () {
	        var x = new this['constructor'](this);
	        x['s'] = -x['s'] || null;

	        return rnd(x);
	    };


	    /*
	     *  n + 0 = n
	     *  n + N = N
	     *  n + I = I
	     *  0 + n = n
	     *  0 + 0 = 0
	     *  0 + N = N
	     *  0 + I = I
	     *  N + n = N
	     *  N + 0 = N
	     *  N + N = N
	     *  N + I = N
	     *  I + n = I
	     *  I + 0 = I
	     *  I + N = N
	     *  I + I = I
	     *
	     * Return a new Decimal whose value is the value of this Decimal plus Decimal(y, b), rounded
	     * to precision significant digits using rounding mode rounding.
	     *
	     */
	    P['plus'] = function ( y, b ) {
	        var t,
	            x = this,
	            Decimal = x['constructor'],
	            a = x['s'];

	        id = 10;
	        y = new Decimal( y, b );
	        b = y['s'];

	        // Either NaN?
	        if ( !a || !b ) {

	            return new Decimal(NaN);
	        }

	        // Signs differ?
	        if ( a != b ) {
	            y['s'] = -b;

	            return x['minus'](y);
	        }

	        var xc = x['c'],
	            yc = y['c'],
	            e = mathfloor( y['e'] / LOGBASE ),
	            k = mathfloor( x['e'] / LOGBASE ),
	            pr = Decimal['precision'],
	            rm = Decimal['rounding'];

	        if ( !k || !e ) {

	            // Either Infinity?
	            if ( !xc || !yc ) {

	                // Return +-Infinity.
	                return new Decimal( a / 0 );
	            }

	            // Either zero?
	            if ( !xc[0] || !yc[0] ) {

	                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                x = yc[0] ? y : new Decimal( xc[0] ? x : a * 0 );

	                return external ? rnd( x, pr, rm ) : x;
	            }
	        }

	        xc = xc.slice();

	        // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
	        if ( a = k - e ) {

	            if ( a < 0 ) {
	                a = -a;
	                t = xc;
	                b = yc.length;
	            } else {
	                e = k;
	                t = yc;
	                b = xc.length;
	            }

	            if ( ( k = Math.ceil( pr / LOGBASE ) ) > b ) {
	                b = k;
	            }

	            // Limit number of zeros prepended to max( pr, b ) + 1.
	            if ( a > ++b ) {
	                a = b;
	                t.length = 1;
	            }

	            for ( t.reverse(); a--; t.push(0) );
	            t.reverse();
	        }

	        // Point xc to the longer array.
	        if ( xc.length - yc.length < 0 ) {
	            t = yc, yc = xc, xc = t;
	        }

	        // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
	        for ( a = yc.length, b = 0, k = BASE; a; xc[a] %= k ) {
	            b = ( xc[--a] = xc[a] + yc[a] + b ) / k | 0;
	        }

	        if (b) {
	            xc.unshift(b);
	            ++e;
	        }

	        // Remove trailing zeros.
	        for ( a = xc.length; xc[--a] == 0; xc.pop() );

	        // No need to check for zero, as +x + +y != 0 && -x + -y != 0

	        y['c'] = xc;

	        // Get the number of digits of xc[0].
	        for ( a = 1, b = xc[0]; b >= 10; b /= 10, a++ );
	        y['e'] = a + e * LOGBASE - 1;

	        return external ? rnd( y, pr, rm ) : y;
	    };


	    /*
	     * Return the number of significant digits of this Decimal.
	     *
	     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	     *
	     */
	    P['precision'] = P['sd'] = function (z) {
	        var n = null,
	            x = this;

	        if ( z != n && z !== !!z && z !== 1 && z !== 0 ) {

	            // 'precision() argument not a boolean or binary digit: {z}'
	            ifExceptionsThrow( x['constructor'], 'argument', z, 'precision', 1 );
	        }

	        if ( x['c'] ) {
	            n = getCoeffLength( x['c'] );

	            if ( z && x['e'] + 1 > n ) {
	                n = x['e'] + 1;
	            }
	        }

	        return n;
	    };


	    /*
	     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
	     * rounding mode rounding.
	     *
	     */
	    P['round'] = function () {
	        var x = this,
	            Decimal = x['constructor'];

	        return rnd( new Decimal(x), x['e'] + 1, Decimal['rounding'] );
	    };


	    /*
	     *  sqrt(-n) =  N
	     *  sqrt( N) =  N
	     *  sqrt(-I) =  N
	     *  sqrt( I) =  I
	     *  sqrt( 0) =  0
	     *  sqrt(-0) = -0
	     *
	     * Return a new Decimal whose value is the square root of this Decimal, rounded to precision
	     * significant digits using rounding mode rounding.
	     *
	     */
	    P['squareRoot'] = P['sqrt'] = function () {
	        var m, n, sd, r, rep, t,
	            x = this,
	            c = x['c'],
	            s = x['s'],
	            e = x['e'],
	            Decimal = x['constructor'],
	            half = new Decimal(0.5);

	        // Negative/NaN/Infinity/zero?
	        if ( s !== 1 || !c || !c[0] ) {

	            return new Decimal( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
	        }

	        external = false;

	        // Initial estimate.
	        s = Math.sqrt( +x );

	        /*
	         Math.sqrt underflow/overflow?
	         Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	         */
	        if ( s == 0 || s == 1 / 0 ) {
	            n = coefficientToString(c);

	            if ( ( n.length + e ) % 2 == 0 ) {
	                n += '0';
	            }

	            s = Math.sqrt(n);
	            e = mathfloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

	            if ( s == 1 / 0 ) {
	                n = '1e' + e;
	            } else {
	                n = s.toExponential();
	                n = n.slice( 0, n.indexOf('e') + 1 ) + e;
	            }

	            r = new Decimal(n);
	        } else {
	            r = new Decimal( s.toString() );
	        }

	        sd = ( e = Decimal['precision'] ) + 3;

	        // Newton-Raphson iteration.
	        for ( ; ; ) {
	            t = r;
	            r = half['times']( t['plus']( div( x, t, sd + 2, 1 ) ) );

	            if ( coefficientToString( t['c'] ).slice( 0, sd ) ===
	                ( n = coefficientToString( r['c'] ) ).slice( 0, sd ) ) {
	                n = n.slice( sd - 3, sd + 1 );

	                /*
	                 The 4th rounding digit may be in error by -1 so if the 4 rounding digits are
	                 9999 or 4999 (i.e. approaching a rounding boundary) continue the iteration.
	                 */
	                if ( n == '9999' || !rep && n == '4999' ) {

	                    /*
	                     On the first iteration only, check to see if rounding up gives the exact result
	                     as the nines may infinitely repeat.
	                     */
	                    if ( !rep ) {
	                        rnd( t, e + 1, 0 );

	                        if ( t['times'](t)['eq'](x) ) {
	                            r = t;

	                            break;
	                        }
	                    }
	                    sd += 4;
	                    rep = 1;
	                } else {

	                    /*
	                     If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	                     If not, then there are further digits and m will be truthy.
	                     */
	                    if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

	                        // Truncate to the first rounding digit.
	                        rnd( r, e + 1, 1 );
	                        m = !r['times'](r)['eq'](x);
	                    }

	                    break;
	                }
	            }
	        }
	        external = true;

	        return rnd( r, e, Decimal['rounding'], m );
	    };


	    /*
	     *  n * 0 = 0
	     *  n * N = N
	     *  n * I = I
	     *  0 * n = 0
	     *  0 * 0 = 0
	     *  0 * N = N
	     *  0 * I = N
	     *  N * n = N
	     *  N * 0 = N
	     *  N * N = N
	     *  N * I = N
	     *  I * n = I
	     *  I * 0 = N
	     *  I * N = N
	     *  I * I = I
	     *
	     * Return a new Decimal whose value is this Decimal times Decimal(y), rounded to precision
	     * significant digits using rounding mode rounding.
	     *
	     */
	    P['times'] = function ( y, b ) {
	        var c, e,
	            x = this,
	            Decimal = x['constructor'],
	            xc = x['c'],
	            yc = ( id = 11, y = new Decimal( y, b ), y['c'] ),
	            i = mathfloor( x['e'] / LOGBASE ),
	            j = mathfloor( y['e'] / LOGBASE ),
	            a = x['s'];

	        b = y['s'];

	        y['s'] = a == b ? 1 : -1;

	        // Either NaN/Infinity/0?
	        if ( !i && ( !xc || !xc[0] ) || !j && ( !yc || !yc[0] ) ) {

	            // Either NaN?
	            return new Decimal( !a || !b ||

	              // x is 0 and y is Infinity  or y is 0 and x is Infinity?
	              xc && !xc[0] && !yc || yc && !yc[0] && !xc

	                // Return NaN.
	                ? NaN

	                // Either Infinity?
	                : !xc || !yc

	                  // Return +-Infinity.
	                  ? y['s'] / 0

	                  // x or y is 0. Return +-0.
	                  : y['s'] * 0 );
	        }

	        e = i + j;
	        a = xc.length;
	        b = yc.length;

	        if ( a < b ) {

	            // Swap.
	            c = xc, xc = yc, yc = c;
	            j = a, a = b, b = j;
	        }

	        for ( j = a + b, c = []; j--; c.push(0) );

	        // Multiply!
	        for ( i = b - 1; i > -1; i-- ) {
	            b = 0;

	            for ( j = a + i; j > i; ) {
	                  b = c[j] + yc[i] * xc[j - i - 1] + b;
	                  c[j--] = b % BASE | 0;
	                  b = b / BASE | 0;
	            }
	            c[j] = ( c[j] + b ) % BASE | 0;
	        }

	        if (b) {
	            ++e;
	        } else if ( !c[0] ) {

	            // Remove leading zero.
	            c.shift();
	        }

	        // Remove trailing zeros.
	        for ( j = c.length; !c[--j]; c.pop() );
	        y['c'] = c;

	        // Get the number of digits of c[0].
	        for ( a = 1, b = c[0]; b >= 10; b /= 10, a++ );
	        y['e'] = a + e * LOGBASE - 1;

	        return external ? rnd( y, Decimal['precision'], Decimal['rounding'] ) : y;
	    };


	    /*
	     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of dp
	     * decimal places using rounding mode rm or rounding if rm is omitted.
	     *
	     * If dp is omitted, return a new Decimal whose value is the value of this Decimal.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * 'toDP() dp out of range: {dp}'
	     * 'toDP() dp not an integer: {dp}'
	     * 'toDP() rounding mode not an integer: {rm}'
	     * 'toDP() rounding mode out of range: {rm}'
	     *
	     */
	    P['toDecimalPlaces'] = P['toDP'] = function ( dp, rm ) {
	        var x = this;
	        x = new x['constructor'](x);

	        return dp == null || !checkArg( x, dp, 'toDP' )
	          ? x
	          : rnd( x, ( dp | 0 ) + x['e'] + 1, checkRM( x, rm, 'toDP' ) );
	    };


	    /*
	     * Return a string representing the value of this Decimal in exponential notation rounded to dp
	     * fixed decimal places using rounding mode rounding.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * errors true: Throw if dp and rm are not undefined, null or integers in range.
	     * errors false: Ignore dp and rm if not numbers or not in range, and truncate non-integers.
	     *
	     * 'toExponential() dp not an integer: {dp}'
	     * 'toExponential() dp out of range: {dp}'
	     * 'toExponential() rounding mode not an integer: {rm}'
	     * 'toExponential() rounding mode out of range: {rm}'
	     *
	     */
	    P['toExponential'] = function ( dp, rm ) {
	        var x = this;

	        return x['c']
	          ? format( x, dp != null && checkArg( x, dp, 'toExponential' ) ? dp | 0 : null,
	            dp != null && checkRM( x, rm, 'toExponential' ), 1 )
	          : x.toString();
	    };


	    /*
	     * Return a string representing the value of this Decimal in normal (fixed-point) notation to
	     * dp fixed decimal places and rounded using rounding mode rm or rounding if rm is omitted.
	     *
	     * Note: as with JS numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * errors true: Throw if dp and rm are not undefined, null or integers in range.
	     * errors false: Ignore dp and rm if not numbers or not in range, and truncate non-integers.
	     *
	     * 'toFixed() dp not an integer: {dp}'
	     * 'toFixed() dp out of range: {dp}'
	     * 'toFixed() rounding mode not an integer: {rm}'
	     * 'toFixed() rounding mode out of range: {rm}'
	     *
	     */
	    P['toFixed'] = function ( dp, rm ) {
	        var str,
	            x = this,
	            Decimal = x['constructor'],
	            neg = Decimal['toExpNeg'],
	            pos = Decimal['toExpPos'];

	        if ( dp != null ) {
	            dp = checkArg( x, dp, str = 'toFixed' ) ? x['e'] + ( dp | 0 ) : null;
	            rm = checkRM( x, rm, str );
	        }

	        // Prevent toString returning exponential notation;
	        Decimal['toExpNeg'] = -( Decimal['toExpPos'] = 1 / 0 );

	        if ( dp == null || !x['c'] ) {
	            str = x.toString();
	        } else {
	            str = format( x, dp, rm );

	            // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
	            // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	            if ( x['s'] < 0 && x['c'] ) {

	                // As e.g. (-0).toFixed(3), will wrongly be returned as -0.000 from toString.
	                if ( !x['c'][0] ) {
	                    str = str.replace( '-', '' );

	                // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
	                } else if ( str.indexOf('-') < 0 ) {
	                    str = '-' + str;
	                }
	            }
	        }
	        Decimal['toExpNeg'] = neg;
	        Decimal['toExpPos'] = pos;

	        return str;
	    };


	    /*
	     * Return a string representing the value of this Decimal in fixed-point notation to dp decimal
	     * places, rounded using rounding mode rm or Decimal.rounding if rm is omitted, and formatted
	     * according to the following properties of the Decimal.format object.
	     *
	     *  Decimal.format = {
	     *      decimalSeparator : '.',
	     *      groupSeparator : ',',
	     *      groupSize : 3,
	     *      secondaryGroupSize : 0,
	     *      fractionGroupSeparator : '\xA0',    // non-breaking space
	     *      fractionGroupSize : 0
	     *  };
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive
	     *
	     * (If dp or rm are invalid the error message will give the offending method call as toFixed.)
	     *
	     */
	    P['toFormat'] = function( dp, rm ) {
	        var x = this;

	        if ( !x['c'] ) {
	            return x.toString();
	        }

	        var i,
	            isNeg = x['s'] < 0,
	            f = x['constructor']['format'],
	            groupSeparator = f['groupSeparator'],
	            g1 = +f['groupSize'],
	            g2 = +f['secondaryGroupSize'],
	            arr = x.toFixed( dp, rm ).split('.'),
	            intPart = arr[0],
	            fractionPart = arr[1],
	            intDigits = isNeg ? intPart.slice(1) : intPart,
	            len = intDigits.length;

	        if (g2) {
	            len -= ( i = g1, g1 = g2, g2 = i );
	        }

	        if ( g1 > 0 && len > 0 ) {
	            i = len % g1 || g1;
	            intPart = intDigits.substr( 0, i );

	            for ( ; i < len; i += g1 ) {
	                intPart += groupSeparator + intDigits.substr( i, g1 );
	            }

	            if ( g2 > 0 ) {
	                intPart += groupSeparator + intDigits.slice(i);
	            }

	            if (isNeg) {
	                intPart = '-' + intPart;
	            }
	        }

	        return fractionPart
	          ? intPart + f['decimalSeparator'] + ( ( g2 = +f['fractionGroupSize'] )
	            ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
	              '$&' + f['fractionGroupSeparator'] )
	            : fractionPart )
	          : intPart;
	    };


	    /*
	     * Return a string array representing the value of this Decimal as a simple fraction with an
	     * integer numerator and an integer denominator.
	     *
	     * The denominator will be a positive non-zero value less than or equal to the specified
	     * maximum denominator. If a maximum denominator is not specified, the denominator will be
	     * the lowest value necessary to represent the number exactly.
	     *
	     * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
	     *
	     */
	    P['toFraction'] = function (maxD) {
	        var d0, d2, e, frac, n, n0, p, q,
	            x = this,
	            Decimal = x['constructor'],
	            n1 = d0 = new Decimal( Decimal['ONE'] ),
	            d1 = n0 = new Decimal(0),
	            xc = x['c'],
	            d = new Decimal(d1);

	        // NaN, Infinity.
	        if ( !xc ) {

	            return x.toString();
	        }

	        e = d['e'] = getCoeffLength(xc) - x['e'] - 1;
	        d['c'][0] = mathpow( 10, ( p = e % LOGBASE ) < 0 ? LOGBASE + p : p );

	        // If maxD is undefined or null...
	        if ( maxD == null ||

	             // or NaN...
	             ( !( id = 12, n = new Decimal(maxD) )['s'] ||

	               // or less than 1, or Infinity...
	               ( outOfRange = n['cmp'](n1) < 0 || !n['c'] ) ||

	                 // or not an integer...
	                 ( Decimal['errors'] && mathfloor( n['e'] / LOGBASE ) < n['c'].length - 1 ) ) &&

	                   // 'toFraction() max denominator not an integer: {maxD}'
	                   // 'toFraction() max denominator out of range: {maxD}'
	                   !ifExceptionsThrow( Decimal, 'max denominator', maxD, 'toFraction', 0 ) ||

	                     // or greater than the maximum denominator needed to specify the value exactly.
	                     ( maxD = n )['cmp'](d) > 0 ) {

	            // d is 10**e, n1 is 1.
	            maxD = e > 0 ? d : n1;
	        }

	        external = false;
	        n = new Decimal( coefficientToString(xc) );
	        p = Decimal['precision'];
	        Decimal['precision'] = e = xc.length * LOGBASE * 2;

	        for ( ; ; )  {
	            q = div( n, d, 0, 1, 1 );
	            d2 = d0['plus']( q['times'](d1) );

	            if ( d2['cmp'](maxD) == 1 ) {

	                break;
	            }
	            d0 = d1;
	            d1 = d2;

	            n1 = n0['plus']( q['times']( d2 = n1 ) );
	            n0 = d2;

	            d = n['minus']( q['times']( d2 = d ) );
	            n = d2;
	        }

	        d2 = div( maxD['minus'](d0), d1, 0, 1, 1 );
	        n0 = n0['plus']( d2['times'](n1) );
	        d0 = d0['plus']( d2['times'](d1) );
	        n0['s'] = n1['s'] = x['s'];

	        // Determine which fraction is closer to x, n0/d0 or n1/d1?
	        frac = div( n1, d1, e, 1 )['minus'](x)['abs']()['cmp'](
	               div( n0, d0, e, 1 )['minus'](x)['abs']() ) < 1
	          ? [ n1 + '', d1 + '' ]
	          : [ n0 + '', d0 + '' ];

	        external = true;
	        Decimal['precision'] = p;

	        return frac;
	    };


	    /*
	     * Returns a new Decimal whose value is the nearest multiple of the magnitude of n to the value
	     * of this Decimal.
	     *
	     * If the value of this Decimal is equidistant from two multiples of n, the rounding mode rm,
	     * or rounding if rm is omitted or is null or undefined, determines the direction of the
	     * nearest multiple.
	     *
	     * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0
	     * (ROUND_UP), and so on.
	     *
	     * The return value will always have the same sign as this Decimal, unless either this Decimal
	     * or n is NaN, in which case the return value will be also be NaN.
	     *
	     * The return value is not rounded to precision significant digits.
	     *
	     * n {number|string|Decimal} The magnitude to round to a multiple of.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * 'toNearest() rounding mode not an integer: {rm}'
	     * 'toNearest() rounding mode out of range: {rm}'
	     *
	     */
	    P['toNearest'] = function ( n, rm ) {
	        var x = this,
	            Decimal = x['constructor'];

	        x = new Decimal(x);

	        if ( n == null ) {
	            n = new Decimal( Decimal['ONE'] );
	            rm = Decimal['rounding'];
	        } else {
	            id = 17;
	            n = new Decimal(n);
	            rm = checkRM( x, rm, 'toNearest' );
	        }

	        // If n is finite...
	        if ( n['c'] ) {

	           // If x is finite...
	            if ( x['c'] ) {

	                if ( n['c'][0] ) {
	                    external = false;
	                    x = div( x, n, 0, rm < 4 ? [4, 5, 7, 8][rm] : rm, 1 )['times'](n);
	                    external = true;
	                    rnd(x);
	                } else {
	                    x['c'] = [ x['e'] = 0 ];
	                }
	            }

	        // n is NaN or +-Infinity. If x is not NaN...
	        } else if ( x['s'] ) {

	            // If n is +-Infinity...
	            if ( n['s'] ) {
	                n['s'] = x['s'];
	            }
	            x = n;
	        }

	        return x;
	    };


	    /*
	     * Return the value of this Decimal converted to a number primitive.
	     *
	     */
	    P['toNumber'] = function () {
	        var x = this;

	        // Ensure zero has correct sign.
	        return +x || ( x['s'] ? 0 * x['s'] : NaN );
	    };


	    /*
	     * Return a new Decimal whose value is the value of this Decimal raised to the power
	     * Decimal(y, b), rounded to precision significant digits using rounding mode rounding.
	     *
	     * ECMAScript compliant.
	     *
	     *   x is any value, including NaN.
	     *   n is any number, including �Infinity unless stated.
	     *
	     *   pow( x, NaN )                           = NaN
	     *   pow( x, �0 )                            = 1

	     *   pow( NaN, nonzero )                     = NaN
	     *   pow( abs(n) > 1, +Infinity )            = +Infinity
	     *   pow( abs(n) > 1, -Infinity )            = +0
	     *   pow( abs(n) == 1, �Infinity )           = NaN
	     *   pow( abs(n) < 1, +Infinity )            = +0
	     *   pow( abs(n) < 1, -Infinity )            = +Infinity
	     *   pow( +Infinity, n > 0 )                 = +Infinity
	     *   pow( +Infinity, n < 0 )                 = +0
	     *   pow( -Infinity, odd integer > 0 )       = -Infinity
	     *   pow( -Infinity, even integer > 0 )      = +Infinity
	     *   pow( -Infinity, odd integer < 0 )       = -0
	     *   pow( -Infinity, even integer < 0 )      = +0
	     *   pow( +0, n > 0 )                        = +0
	     *   pow( +0, n < 0 )                        = +Infinity
	     *   pow( -0, odd integer > 0 )              = -0
	     *   pow( -0, even integer > 0 )             = +0
	     *   pow( -0, odd integer < 0 )              = -Infinity
	     *   pow( -0, even integer < 0 )             = +Infinity
	     *   pow( finite n < 0, finite non-integer ) = NaN
	     *
	     * For non-integer and larger exponents pow(x, y) is calculated using
	     *
	     *   x^y = exp(y*ln(x))
	     *
	     * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
	     * probability of an incorrectly rounded result
	     * P( [49]9{14} | [50]0{14} ) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
	     * i.e. 1 in 250,000,000,000,000
	     *
	     * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
	     *
	     * y {number|string|Decimal} The power to which to raise this Decimal.
	     * [b] {number} The base of y.
	     *
	     */
	    P['toPower'] = P['pow'] = function ( y, b ) {
	        var a, e, n, r,
	            x = this,
	            Decimal = x['constructor'],
	            s = x['s'],
	            yN = +( id = 13, y = new Decimal( y, b ) ),
	            i = yN < 0 ? -yN : yN,
	            pr = Decimal['precision'],
	            rm = Decimal['rounding'];

	        // Handle +-Infinity, NaN and +-0.
	        if ( !x['c'] || !y['c'] || ( n = !x['c'][0] ) || !y['c'][0] ) {

	            // valueOf -0 is 0, so check for 0 then multiply it by the sign.
	            return new Decimal( mathpow( n ? s * 0 : +x, yN ) );
	        }

	        x = new Decimal(x);
	        a = x['c'].length;

	        // if x == 1
	        if ( !x['e'] && x['c'][0] == x['s'] && a == 1 ) {

	            return x;
	        }

	        b = y['c'].length - 1;

	        // if y == 1
	        if ( !y['e'] && y['c'][0] == y['s'] && !b ) {
	            r = rnd( x, pr, rm );
	        } else {
	            e = mathfloor( y['e'] / LOGBASE );
	            n = e >= b;

	            // If y is not an integer and x is negative, return NaN.
	            if ( !n && s < 0 ) {
	                r = new Decimal(NaN);
	            } else {

	                /*
	                 If the approximate number of significant digits of x multiplied by abs(y) is less
	                 than INT_POW_LIMIT use the 'exponentiation by squaring' algorithm.
	                 */
	                if ( n && a * LOGBASE * i < INT_POW_LIMIT ) {
	                    r = intPow( Decimal, x, i );

	                    if ( y['s'] < 0 ) {

	                        return Decimal['ONE']['div'](r);
	                    }
	                } else {

	                    // Result is negative if x is negative and the last digit of integer y is odd.
	                    s = s < 0 && y['c'][ Math.max( e, b ) ] & 1 ? -1 : 1;

	                    b = mathpow( +x, yN );

	                    /*
	                     Estimate result exponent.
	                     x^y = 10^e,  where e = y * log10(x)
	                     log10(x) = log10(x_significand) + x_exponent
	                     log10(x_significand) = ln(x_significand) / ln(10)
	                     */
	                    e = b == 0 || !isFinite(b)
	                      ? mathfloor( yN * ( Math.log( '0.' + coefficientToString( x['c'] ) ) /
	                        Math.LN10 + x['e'] + 1 ) )
	                      : new Decimal( b + '' )['e'];

	                    // Estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e:-1

	                    // Overflow/underflow?
	                    if ( e > Decimal['maxE'] + 1 || e < Decimal['minE'] - 1 ) {

	                        return new Decimal( e > 0 ? s / 0 : 0 );
	                    }

	                    external = false;
	                    Decimal['rounding'] = x['s'] = 1;

	                    /*
	                     Estimate extra digits needed from ln(x) to ensure five correct rounding digits
	                     in result (i was unnecessary before max exponent was extended?).
	                     Example of failure before i was introduced: (precision: 10),
	                     new Decimal(2.32456).pow('2087987436534566.46411')
	                     should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
	                     */
	                    i = Math.min( 12, ( e + '' ).length );

	                    // r = x^y = exp(y*ln(x))
	                    r = exp( y['times']( ln( x, pr + i ) ), pr );

	                    // Truncate to the required precision plus five rounding digits.
	                    r = rnd( r, pr + 5, 1 );

	                    /*
	                     If the rounding digits are [49]9999 or [50]0000 increase the precision by 10
	                     and recalculate the result.
	                     */
	                    if ( checkRoundingDigits( r['c'], pr, rm ) ) {
	                        e = pr + 10;

	                        // Truncate to the increased precision plus five rounding digits.
	                        r = rnd( exp( y['times']( ln( x, e + i ) ), e ), e + 5, 1 );

	                        /*
	                          Check for 14 nines from the 2nd rounding digit (the first rounding digit
	                          may be 4 or 9).
	                         */
	                        if ( +coefficientToString( r['c'] ).slice( pr + 1, pr + 15 ) + 1 == 1e14 ) {
	                            r = rnd( r, pr + 1, 0 );
	                        }
	                    }

	                    r['s'] = s;
	                    external = true;
	                    Decimal['rounding'] = rm;
	                }

	                r = rnd( r, pr, rm );
	            }
	        }

	        return r;
	    };


	    /*
	     * Return a string representing the value of this Decimal rounded to sd significant digits
	     * using rounding mode rounding.
	     *
	     * Return exponential notation if sd is less than the number of digits necessary to represent
	     * the integer part of the value in normal notation.
	     *
	     * sd {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * errors true: Throw if sd and rm are not undefined, null or integers in range.
	     * errors false: Ignore sd and rm if not numbers or not in range, and truncate non-integers.
	     *
	     * 'toPrecision() sd not an integer: {sd}'
	     * 'toPrecision() sd out of range: {sd}'
	     * 'toPrecision() rounding mode not an integer: {rm}'
	     * 'toPrecision() rounding mode out of range: {rm}'
	     *
	     */
	    P['toPrecision'] = function ( sd, rm ) {
	        var x = this;

	        return sd != null && checkArg( x, sd, 'toPrecision', 1 ) && x['c']
	          ? format( x, --sd | 0, checkRM( x, rm, 'toPrecision' ), 2 )
	          : x.toString();
	    };


	    /*
	     * Return a new Decimal whose value is this Decimal rounded to a maximum of d significant
	     * digits using rounding mode rm, or to precision and rounding respectively if omitted.
	     *
	     * [d] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * 'toSD() digits out of range: {d}'
	     * 'toSD() digits not an integer: {d}'
	     * 'toSD() rounding mode not an integer: {rm}'
	     * 'toSD() rounding mode out of range: {rm}'
	     *
	     */
	    P['toSignificantDigits'] = P['toSD'] = function ( d, rm ) {
	        var x = this,
	            Decimal = x['constructor'];

	        x = new Decimal(x);

	        return d == null || !checkArg( x, d, 'toSD', 1 )
	          ? rnd( x, Decimal['precision'], Decimal['rounding'] )
	          : rnd( x, d | 0, checkRM( x, rm, 'toSD' ) );
	    };


	    /*
	     * Return a string representing the value of this Decimal in base b, or base 10 if b is
	     * omitted. If a base is specified, including base 10, round to precision significant digits
	     * using rounding mode rounding.
	     *
	     * Return exponential notation if a base is not specified, and this Decimal has a positive
	     * exponent equal to or greater than toExpPos, or a negative exponent equal to or less than
	     * toExpNeg.
	     *
	     * [b] {number} Base. Integer, 2 to 64 inclusive.
	     *
	     */
	     P['toString'] = function (b) {
	        var u, str, strL,
	            x = this,
	            Decimal = x['constructor'],
	            xe = x['e'];

	        // Infinity or NaN?
	        if ( xe === null ) {
	            str = x['s'] ? 'Infinity' : 'NaN';

	        // Exponential format?
	        } else if ( b === u && ( xe <= Decimal['toExpNeg'] || xe >= Decimal['toExpPos'] ) ) {

	            return format( x, null, Decimal['rounding'], 1 );
	        } else {
	            str = coefficientToString( x['c'] );

	            // Negative exponent?
	            if ( xe < 0 ) {

	                // Prepend zeros.
	                for ( ; ++xe; str = '0' + str );
	                str = '0.' + str;

	            // Positive exponent?
	            } else if ( strL = str.length, xe > 0 ) {

	                if ( ++xe > strL ) {

	                    // Append zeros.
	                    for ( xe -= strL; xe-- ; str += '0' );

	                } else if ( xe < strL ) {
	                    str = str.slice( 0, xe ) + '.' + str.slice(xe);
	                }

	            // Exponent zero.
	            } else {
	                u = str.charAt(0);

	                if ( strL > 1 ) {
	                    str = u + '.' + str.slice(1);

	                // Avoid '-0'
	                } else if ( u == '0' ) {

	                    return u;
	                }
	            }

	            if ( b != null ) {

	                if ( !( outOfRange = !( b >= 2 && b < 65 ) ) &&
	                  ( b == (b | 0) || !Decimal['errors'] ) ) {
	                    str = convertBase( Decimal, str, b | 0, 10, x['s'] );

	                    // Avoid '-0'
	                    if ( str == '0' ) {

	                        return str;
	                    }
	                } else {

	                    // 'toString() base not an integer: {b}'
	                    // 'toString() base out of range: {b}'
	                    ifExceptionsThrow( Decimal, 'base', b, 'toString', 0 );
	                }
	            }
	        }

	        return x['s'] < 0 ? '-' + str : str;
	    };


	    /*
	     * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
	     *
	     */
	    P['truncated'] = P['trunc'] = function () {

	        return rnd( new this['constructor'](this), this['e'] + 1, 1 );
	    };


	    /*
	     * Return as toString, but do not accept a base argument.
	     *
	     * Ensures that JSON.stringify() uses toString for serialization.
	     *
	     */
	    P['valueOf'] = P['toJSON'] = function () {

	        return this.toString();
	    };


	    /*
	    // Add aliases to match BigDecimal method names.
	    P['add'] = P['plus'];
	    P['subtract'] = P['minus'];
	    P['multiply'] = P['times'];
	    P['divide'] = P['div'];
	    P['remainder'] = P['mod'];
	    P['compareTo'] = P['cmp'];
	    P['negate'] = P['neg'];
	     */


	    // Private functions for Decimal.prototype methods.


	    /*
	     *  coefficientToString
	     *  checkRoundingDigits
	     *  checkRM
	     *  checkArg
	     *  convertBase
	     *  div
	     *  exp
	     *  format
	     *  getCoeffLength
	     *  ifExceptionsThrow
	     *  intPow
	     *  ln
	     *  rnd
	     */


	    function coefficientToString(a) {
	        var s, z,
	            i = 1,
	            j = a.length,
	            r = a[0] + '';

	        for ( ; i < j; i++ ) {
	            s = a[i] + '';

	            for ( z = LOGBASE - s.length; z--; ) {
	                s = '0' + s;
	            }

	            r += s;
	        }

	        // '0'
	        for ( j = r.length; r.charCodeAt(--j) === 48; );

	        return r.slice( 0, j + 1 || 1 );
	    }


	    /*
	     * Check 5 rounding digits if repeating is null, 4 otherwise.
	     * repeating == null if caller is log or pow,
	     * repeating != null if caller is ln or exp.
	     *
	     *
	     // Previous, much simpler implementation when coefficient was base 10.
	     function checkRoundingDigits( c, i, rm, repeating ) {
	         return ( !repeating && rm > 3 && c[i] == 4 ||
	           ( repeating || rm < 4 ) && c[i] == 9 ) && c[i + 1] == 9 && c[i + 2] == 9 &&
	             c[i + 3] == 9 && ( repeating != null || c[i + 4] == 9 ) ||
	               repeating == null && ( c[i] == 5 || !c[i] ) && !c[i + 1] && !c[i + 2] &&
	                 !c[i + 3] && !c[i + 4];
	     }
	     */
	    function checkRoundingDigits( c, i, rm, repeating ) {
	        var ci, k, n, r, rd;

	        // Get the length of the first element of the array c.
	        for ( k = 1, n = c[0]; n >= 10; n /= 10, k++ );

	        n = i - k;

	        // Is the rounding digit in the first element of c?
	        if ( n < 0 ) {
	            n += LOGBASE;
	            ci = 0;
	        } else {
	            ci = Math.ceil( ( n + 1 ) / LOGBASE );
	            n %= LOGBASE;
	        }

	        k = mathpow( 10, LOGBASE - n );
	        rd = c[ci] % k | 0;

	        if ( repeating == null ) {

	            if ( n < 3 ) {

	                if ( n == 0 ) {
	                    rd = rd / 100 | 0;
	                } else if ( n == 1 ) {
	                    rd = rd / 10 | 0;
	                }

	                r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
	            } else {
	                r = ( rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2 ) &&
	                    ( c[ci + 1] / k / 100 | 0 ) == mathpow( 10, n - 2 ) - 1 ||
	                        ( rd == k / 2 || rd == 0 ) && ( c[ci + 1] / k / 100 | 0 ) == 0;
	            }
	        } else {

	            if ( n < 4 ) {

	                if ( n == 0 ) {
	                    rd = rd / 1000 | 0;
	                } else if ( n == 1 ) {
	                    rd = rd / 100 | 0;
	                } else if ( n == 2 ) {
	                    rd = rd / 10 | 0;
	                }

	                r = ( repeating || rm < 4 ) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
	            } else {
	                r = ( ( repeating || rm < 4 ) && rd + 1 == k ||
	                ( !repeating && rm > 3 ) && rd + 1 == k / 2 ) &&
	                    ( c[ci + 1] / k / 1000 | 0 ) == mathpow( 10, n - 3 ) - 1;
	            }
	        }

	        return r;
	    }


	    /*
	     * Check and return rounding mode. If rm is invalid, return rounding mode rounding.
	     */
	    function checkRM( x, rm, method ) {
	        var Decimal = x['constructor'];

	        return rm == null || ( ( outOfRange = rm < 0 || rm > 8 ) ||
	          rm !== 0 && ( Decimal['errors'] ? parseInt : parseFloat )(rm) != rm ) &&
	            !ifExceptionsThrow( Decimal, 'rounding mode', rm, method, 0 )
	              ? Decimal['rounding'] : rm | 0;
	    }


	    /*
	     * Check that argument n is in range, return true or false.
	     */
	    function checkArg( x, n, method, min ) {
	        var Decimal = x['constructor'];

	        return !( outOfRange = n < ( min || 0 ) || n >= MAX_DIGITS + 1 ) &&

	          /*
	           * Include 'n === 0' because Opera has 'parseFloat(-0) == -0' as false
	           * despite having 'parseFloat(-0) === -0 && parseFloat('-0') === -0 && 0 == -0' as true.
	           */
	          ( n === 0 || ( Decimal['errors'] ? parseInt : parseFloat )(n) == n ) ||
	            ifExceptionsThrow( Decimal, 'argument', n, method, 0 );
	    }


	    /*
	     * Convert a numeric string of baseIn to a numeric string of baseOut.
	     */
	    convertBase = (function () {

	        /*
	         * Convert string of baseIn to an array of numbers of baseOut.
	         * Eg. convertBase('255', 10, 16) returns [15, 15].
	         * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	         */
	        function toBaseOut( str, baseIn, baseOut ) {
	            var j,
	                arr = [0],
	                arrL,
	                i = 0,
	                strL = str.length;

	            for ( ; i < strL; ) {
	                for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
	                arr[ j = 0 ] += NUMERALS.indexOf( str.charAt( i++ ) );

	                for ( ; j < arr.length; j++ ) {

	                    if ( arr[j] > baseOut - 1 ) {

	                        if ( arr[j + 1] == null ) {
	                            arr[j + 1] = 0;
	                        }
	                        arr[j + 1] += arr[j] / baseOut | 0;
	                        arr[j] %= baseOut;
	                    }
	                }
	            }

	            return arr.reverse();
	        }

	        return function ( Decimal, str, baseOut, baseIn, sign ) {
	            var e, j, r, x, xc, y,
	                i = str.indexOf( '.' ),
	                pr = Decimal['precision'],
	                rm = Decimal['rounding'];

	            if ( baseIn < 37 ) {
	                str = str.toLowerCase();
	            }

	            // Non-integer.
	            if ( i >= 0 ) {
	                str = str.replace( '.', '' );
	                y = new Decimal(baseIn);
	                x = intPow( Decimal, y, str.length - i );

	                /*
	                 Convert str as if an integer, then divide the result by its base raised to a power
	                 such that the fraction part will be restored.
	                 Use toFixed to avoid possible exponential notation.
	                 */
	                y['c'] = toBaseOut( x.toFixed(), 10, baseOut );
	                y['e'] = y['c'].length;
	            }

	            // Convert the number as integer.
	            xc = toBaseOut( str, baseIn, baseOut );
	            e = j = xc.length;

	            // Remove trailing zeros.
	            for ( ; xc[--j] == 0; xc.pop() );

	            if ( !xc[0] ) {

	                return '0';
	            }

	            if ( i < 0 ) {
	                e--;
	            } else {
	                x['c'] = xc;
	                x['e'] = e;

	                // sign is needed for correct rounding.
	                x['s'] = sign;
	                x = div( x, y, pr, rm, 0, baseOut );
	                xc = x['c'];
	                r = x['r'];
	                e = x['e'];
	            }

	            // The rounding digit, i.e. the digit after the digit that may be rounded up.
	            i = xc[pr];
	            j = baseOut / 2;
	            r = r || xc[pr + 1] != null;

	            if ( rm < 4
	              ? ( i != null || r ) && ( rm == 0 || rm == ( x['s'] < 0 ? 3 : 2 ) )
	              : i > j || i == j && ( rm == 4 || r || rm == 6 && xc[pr - 1] & 1 ||
	                rm == ( x['s'] < 0 ? 8 : 7 ) ) ) {

	                xc.length = pr;

	                // Rounding up may mean the previous digit has to be rounded up and so on.
	                for ( --baseOut; ++xc[--pr] > baseOut; ) {
	                    xc[pr] = 0;

	                    if ( !pr ) {
	                        ++e;
	                        xc.unshift(1);
	                    }
	                }
	            } else {
	                xc.length = pr;
	            }

	            // Determine trailing zeros.
	            for ( j = xc.length; !xc[--j]; );

	            // E.g. [4, 11, 15] becomes 4bf.
	            for ( i = 0, str = ''; i <= j; str += NUMERALS.charAt( xc[i++] ) );

	            // Negative exponent?
	            if ( e < 0 ) {

	                // Prepend zeros.
	                for ( ; ++e; str = '0' + str );

	                str = '0.' + str;

	            // Positive exponent?
	            } else {
	                i = str.length;

	                if ( ++e > i ) {

	                    // Append zeros.
	                    for ( e -= i; e-- ; str += '0' );

	                } else if ( e < i ) {
	                    str = str.slice( 0, e ) + '.' + str.slice(e);
	                }
	            }

	            // No negative numbers: the caller will add the sign.
	            return str;
	        };
	    })();


	    /*
	     * Perform division in the specified base. Called by div and convertBase.
	     */
	    var div = ( function () {

	        // Assumes non-zero x and k, and hence non-zero result.
	        function multiplyInteger( x, k, base ) {
	            var temp,
	                carry = 0,
	                i = x.length;

	            for ( x = x.slice(); i--; ) {
	                temp = x[i] * k + carry;
	                x[i] = temp % base | 0;
	                carry = temp / base | 0;
	            }

	            if (carry) {
	                x.unshift(carry);
	            }

	            return x;
	        }

	        function compare( a, b, aL, bL ) {
	            var i, cmp;

	            if ( aL != bL ) {
	                cmp = aL > bL ? 1 : -1;
	            } else {

	                for ( i = cmp = 0; i < aL; i++ ) {

	                    if ( a[i] != b[i] ) {
	                        cmp = a[i] > b[i] ? 1 : -1;

	                        break;
	                    }
	                }
	            }

	            return cmp;
	        }

	        function subtract( a, b, aL, base ) {
	            var i = 0;

	            // Subtract b from a.
	            for ( ; aL--; ) {
	                a[aL] -= i;
	                i = a[aL] < b[aL] ? 1 : 0;
	                a[aL] = i * base + a[aL] - b[aL];
	            }

	            // Remove leading zeros.
	            for ( ; !a[0] && a.length > 1; a.shift() );
	        }

	        // x: dividend, y: divisor.
	        return function ( x, y, pr, rm, dp, base ) {
	            var cmp, e, i, logbase, more, n, prod, prodL, q, qc, rem, remL, rem0, t, xi, xL, yc0,
	                yL, yz,
	                Decimal = x['constructor'],
	                s = x['s'] == y['s'] ? 1 : -1,
	                xc = x['c'],
	                yc = y['c'];

	            // Either NaN, Infinity or 0?
	            if ( !xc || !xc[0] || !yc || !yc[0] ) {

	                return new Decimal(

	                  // Return NaN if either NaN, or both Infinity or 0.
	                  !x['s'] || !y['s'] || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

	                    // Return +-0 if x is 0 or y is +-Infinity, or return +-Infinity as y is 0.
	                    xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	                );
	            }

	            if (base) {
	                logbase = 1;
	                e = x['e'] - y['e'];
	            } else {
	                base = BASE;
	                logbase = LOGBASE;
	                e = mathfloor( x['e'] / logbase ) - mathfloor( y['e'] / logbase );
	            }

	            yL = yc.length;
	            xL = xc.length;
	            q = new Decimal(s);
	            qc = q['c'] = [];

	            // Result exponent may be one less then the current value of e.
	            // The coefficients of the Decimals from convertBase may have trailing zeros.
	            for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );

	            if ( yc[i] > ( xc[i] || 0 ) ) {
	                e--;
	            }

	            if ( pr == null ) {
	                s = pr = Decimal['precision'];
	                rm = Decimal['rounding'];
	            } else if (dp) {
	                s = pr + ( x['e'] - y['e'] ) + 1;
	            } else {
	                s = pr;
	            }

	            if ( s < 0 ) {
	                qc.push(1);
	                more = true;
	            } else {

	                // Convert base 10 decimal places to base 1e7 decimal places.
	                s = s / logbase + 2 | 0;
	                i = 0;

	                // divisor < 1e7
	                if ( yL == 1 ) {
	                    n = 0;
	                    yc = yc[0];
	                    s++;

	                    // 'n' is the carry.
	                    for ( ; ( i < xL || n ) && s--; i++ ) {
	                        t = n * base + ( xc[i] || 0 );
	                        qc[i] = t / yc | 0;
	                        n = t % yc | 0;
	                    }

	                    more = n || i < xL;

	                // divisor >= 1e7
	                } else {

	                    // Normalise xc and yc so highest order digit of yc is >= base/2
	                    n = base / ( yc[0] + 1 ) | 0;

	                    if ( n > 1 ) {
	                        yc = multiplyInteger( yc, n, base );
	                        xc = multiplyInteger( xc, n, base );
	                        yL = yc.length;
	                        xL = xc.length;
	                    }

	                    xi = yL;
	                    rem = xc.slice( 0, yL );
	                    remL = rem.length;

	                    // Add zeros to make remainder as long as divisor.
	                    for ( ; remL < yL; rem[remL++] = 0 );

	                    yz = yc.slice();
	                    yz.unshift(0);
	                    yc0 = yc[0];

	                    if ( yc[1] >= base / 2 ) {
	                        yc0++;
	                    }

	                    do {
	                        n = 0;

	                        // Compare divisor and remainder.
	                        cmp = compare( yc, rem, yL, remL );

	                        // If divisor < remainder.
	                        if ( cmp < 0 ) {

	                            // Calculate trial digit, n.
	                            rem0 = rem[0];

	                            if ( yL != remL ) {
	                                rem0 = rem0 * base + ( rem[1] || 0 );
	                            }

	                            // n will be how many times the divisor goes into the current remainder.
	                            n = rem0 / yc0 | 0;

	                            /*
	                              Algorithm:
	                              1. product = divisor * trial digit (n)
	                              2. if product > remainder: product -= divisor, n--
	                              3. remainder -= product
	                              4. if product was < remainder at 2:
	                                5. compare new remainder and divisor
	                                6. If remainder > divisor: remainder -= divisor, n++
	                            */

	                            if ( n > 1 ) {

	                                if ( n >= base ) {
	                                    n = base - 1;
	                                }

	                                // product = divisor * trial digit.
	                                prod = multiplyInteger( yc, n, base );
	                                prodL = prod.length;
	                                remL = rem.length;

	                                // Compare product and remainder.
	                                cmp = compare( prod, rem, prodL, remL );

	                                // product > remainder.
	                                if ( cmp == 1 ) {
	                                    n--;

	                                    // Subtract divisor from product.
	                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );
	                                }
	                            } else {

	                                // cmp is -1.
	                                // If n is 0, there is no need to compare yc and rem again below, so change cmp to 1 to avoid it.
	                                // If n is 1 there IS a need to compare yc and rem again below.
	                                if ( n == 0 ) {
	                                    cmp = n = 1;
	                                }
	                                prod = yc.slice();
	                            }
	                            prodL = prod.length;

	                            if ( prodL < remL ) {
	                                prod.unshift(0);
	                            }

	                            // Subtract product from remainder.
	                            subtract( rem, prod, remL, base );

	                            // If product was < previous remainder.
	                            if ( cmp == -1 ) {
	                                remL = rem.length;

	                                // Compare divisor and new remainder.
	                                cmp = compare( yc, rem, yL, remL );

	                                // If divisor < new remainder, subtract divisor from remainder.
	                                if ( cmp < 1 ) {
	                                    n++;

	                                    // Subtract divisor from remainder.
	                                    subtract( rem, yL < remL ? yz : yc, remL, base );
	                                }
	                            }

	                            remL = rem.length;

	                        } else if ( cmp === 0 ) {
	                            n++;
	                            rem = [0];
	                        }    // if cmp === 1, n will be 0

	                        // Add the next digit, n, to the result array.
	                        qc[i++] = n;

	                        // Update the remainder.
	                        if ( cmp && rem[0] ) {
	                            rem[remL++] = xc[xi] || 0;
	                        } else {
	                            rem = [ xc[xi] ];
	                            remL = 1;
	                        }

	                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );

	                    more = rem[0] != null;
	                }

	                // Leading zero?
	                if ( !qc[0] ) {
	                    qc.shift();
	                }
	            }

	            // If div is being used for base conversion.
	            if ( logbase == 1 ) {
	                q['e'] = e;
	                q['r'] = +more;
	            } else {

	                // To calculate q.e, first get the number of digits of qc[0].
	                for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
	                q['e'] = i + e * logbase - 1;

	                rnd( q, dp ? pr + q['e'] + 1 : pr, rm, more );
	            }

	            return q;
	        };
	    })();


	    /*
	     * Taylor/Maclaurin series.
	     *
	     * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
	     *
	     * Argument reduction:
	     *   Repeat x = x / 32, k += 5, until |x| < 0.1
	     *   exp(x) = exp(x / 2^k)^(2^k)
	     *
	     * Previously, the argument was initially reduced by
	     * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
	     * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
	     * found to be slower than just dividing repeatedly by 32 as above.
	     *
	     * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
	     * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
	     * ( Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324 )
	     *
	     *  exp(Infinity)  = Infinity
	     *  exp(-Infinity) = 0
	     *  exp(NaN)       = NaN
	     *  exp(+-0)       = 1
	     *
	     *  exp(x) is non-terminating for any finite, non-zero x.
	     *
	     *  The result will always be correctly rounded.
	     *
	     */
	    function exp( x, pr ) {
	        var denom, guard, j, pow, sd, sum, t,
	            rep = 0,
	            i = 0,
	            k = 0,
	            Decimal = x['constructor'],
	            one = Decimal['ONE'],
	            rm = Decimal['rounding'],
	            precision = Decimal['precision'];

	        // 0/NaN/Infinity?
	        if ( !x['c'] || !x['c'][0] || x['e'] > 17 ) {

	            return new Decimal( x['c']
	              ? !x['c'][0] ? one : x['s'] < 0 ? 0 : 1 / 0
	              : x['s'] ? x['s'] < 0 ? 0 : x : NaN );
	        }

	        if ( pr == null ) {

	            /*
	             Estimate result exponent.
	             e^x = 10^j, where j = x * log10(e) and
	             log10(e) = ln(e) / ln(10) = 1 / ln(10),
	             so j = x / ln(10)
	            j = mathfloor( x / Math.LN10 );

	            // Overflow/underflow? Estimate may be +-1 of true value.
	            if ( j > Decimal['maxE'] + 1 || j < Decimal['minE'] - 1 ) {

	                return new Decimal( j > 0 ? 1 / 0 : 0 );
	            }
	             */

	            external = false;
	            sd = precision;
	        } else {
	            sd = pr;
	        }

	        t = new Decimal(0.03125);

	        // while abs(x) >= 0.1
	        while ( x['e'] > -2 ) {

	            // x = x / 2^5
	            x = x['times'](t);
	            k += 5;
	        }

	        /*
	         Use 2 * log10(2^k) + 5 to estimate the increase in precision necessary to ensure the first
	         4 rounding digits are correct.
	         */
	        guard = Math.log( mathpow( 2, k ) ) / Math.LN10 * 2 + 5 | 0;
	        sd += guard;

	        denom = pow = sum = new Decimal(one);
	        Decimal['precision'] = sd;

	        for ( ; ; ) {
	            pow = rnd( pow['times'](x), sd, 1 );
	            denom = denom['times'](++i);
	            t = sum['plus']( div( pow, denom, sd, 1 ) );

	            if ( coefficientToString( t['c'] ).slice( 0, sd ) ===
	                 coefficientToString( sum['c'] ).slice( 0, sd ) ) {
	                j = k;

	                while ( j-- ) {
	                    sum = rnd( sum['times'](sum), sd, 1 );
	                }

	                /*
	                 Check to see if the first 4 rounding digits are [49]999.
	                 If so, repeat the summation with a higher precision, otherwise
	                 E.g. with precision: 18, rounding: 1
	                 exp(18.404272462595034083567793919843761) = 98372560.1229999999
	                                           when it should be 98372560.123

	                 sd - guard is the index of first rounding digit.
	                 */
	                if ( pr == null ) {

	                    if ( rep < 3 && checkRoundingDigits( sum['c'], sd - guard, rm, rep ) ) {
	                        Decimal['precision'] = sd += 10;
	                        denom = pow = t = new Decimal(one);
	                        i = 0;
	                        rep++;
	                    } else {

	                        return rnd( sum, Decimal['precision'] = precision, rm, external = true );
	                    }
	                } else {
	                    Decimal['precision'] = precision;

	                    return sum;
	                }
	            }
	            sum = t;
	        }
	    }


	    /*
	     * Return a string representing the value of Decimal n in normal or exponential notation
	     * rounded to the specified decimal places or significant digits.
	     * Called by toString, toExponential (k is 1), toFixed, and toPrecision (k is 2).
	     * i is the index (with the value in normal notation) of the digit that may be rounded up.
	     * j is the rounding mode, then the number of digits required including fraction-part trailing
	     * zeros.
	     */
	    function format( n, i, j, k ) {
	        var s, z,
	            Decimal = n['constructor'],
	            e = ( n = new Decimal(n) )['e'];

	        // i == null when toExponential(no arg), or toString() when x >= toExpPos etc.
	        if ( i == null ) {
	            j = 0;
	        } else {
	            rnd( n, ++i, j );

	            // If toFixed, n['e'] may have changed if the value was rounded up.
	            j = k ? i : i + n['e'] - e;
	        }

	        e = n['e'];
	        s = coefficientToString( n['c'] );

	        /*
	         toPrecision returns exponential notation if the number of significant digits specified
	         is less than the number of digits necessary to represent the integer part of the value
	         in normal notation.
	         */

	        // Exponential notation.
	        if ( k == 1 || k == 2 && ( i <= e || e <= Decimal['toExpNeg'] ) ) {

	            // Append zeros?
	            for ( ; s.length < j; s += '0' );

	            if ( s.length > 1 ) {
	                s = s.charAt(0) + '.' + s.slice(1);
	            }

	            s += ( e < 0 ? 'e' : 'e+' ) + e;

	        // Normal notation.
	        } else {
	            k = s.length;

	            // Negative exponent?
	            if ( e < 0 ) {
	                z = j - k;

	                // Prepend zeros.
	                for ( ; ++e; s = '0' + s );
	                s = '0.' + s;

	            // Positive exponent?
	            } else {

	                if ( ++e > k ) {
	                    z = j - e;

	                    // Append zeros.
	                    for ( e -= k; e-- ; s += '0' );

	                    if ( z > 0 ) {
	                        s += '.';
	                    }

	                } else {
	                    z = j - k;

	                    if ( e < k ) {
	                        s = s.slice( 0, e ) + '.' + s.slice(e);
	                    } else if ( z > 0 ) {
	                        s += '.';
	                    }
	                }
	            }

	            // Append more zeros?
	            if ( z > 0 ) {

	                for ( ; z--; s += '0' );
	            }
	        }

	        return n['s'] < 0 && n['c'][0] ? '-' + s : s;
	    }


	    function getCoeffLength(c) {
	        var v = c.length - 1,
	            n = v * LOGBASE + 1;

	        if ( v = c[v] ) {

	            // Subtract the number of trailing zeros of the last number.
	            for ( ; v % 10 == 0; v /= 10, n-- );

	            // Add the number of digits of the first number.
	            for ( v = c[0]; v >= 10; v /= 10, n++ );
	        }

	        return n;
	    }


	    /*
	     * Assemble error messages. Throw Decimal Errors.
	     */
	    function ifExceptionsThrow( Decimal, message, arg, method, more ) {

	        if ( Decimal['errors'] ) {
	            var error = new Error( ( method || [
	              'new Decimal', 'cmp', 'div', 'eq', 'gt', 'gte', 'lt', 'lte', 'minus', 'mod',
	              'plus', 'times', 'toFraction', 'pow', 'random', 'log', 'sqrt', 'toNearest', 'divToInt'
	              ][ id ? id < 0 ? -id : id : 1 / id < 0 ? 1 : 0 ] ) + '() ' + ( [
	              'number type has more than 15 significant digits', 'LN10 out of digits' ][message]
	              || message + ( [ outOfRange ? ' out of range' : ' not an integer',
	              ' not a boolean or binary digit' ][more] || '' ) ) + ': ' + arg
	            );
	            error['name'] = 'Decimal Error';
	            outOfRange = id = 0;

	            throw error;
	        }
	    }


	    /*
	     * Use 'exponentiation by squaring' for small integers. Called by convertBase and pow.
	     */
	    function intPow( Decimal, x, i ) {
	        var r = new Decimal( Decimal['ONE'] );

	        for ( external = false; ; ) {

	            if ( i & 1 ) {
	                r = r['times'](x);
	            }
	            i >>= 1;

	            if ( !i ) {

	                break;
	            }
	            x = x['times'](x);
	        }
	        external = true;

	        return r;
	    }


	    /*
	     *  ln(-n)        = NaN
	     *  ln(0)         = -Infinity
	     *  ln(-0)        = -Infinity
	     *  ln(1)         = 0
	     *  ln(Infinity)  = Infinity
	     *  ln(-Infinity) = NaN
	     *  ln(NaN)       = NaN
	     *
	     *  ln(n) (n != 1) is non-terminating.
	     *
	     */
	    function ln( y, pr ) {
	        var c, c0, denom, e, num, rep, sd, sum, t, x1, x2,
	            n = 1,
	            guard = 10,
	            x = y,
	            xc = x['c'],
	            Decimal = x['constructor'],
	            one = Decimal['ONE'],
	            rm = Decimal['rounding'],
	            precision = Decimal['precision'];

	        // x < 0 or +-Infinity/NaN or 0 or 1.
	        if ( x['s'] < 0 || !xc || !xc[0] || !x['e'] && xc[0] == 1 && xc.length == 1 ) {

	            return new Decimal( xc && !xc[0] ? -1 / 0 : x['s'] != 1 ? NaN : xc ? 0 : x );
	        }

	        if ( pr == null ) {
	            external = false;
	            sd = precision;
	        } else {
	            sd = pr;
	        }

	        Decimal['precision'] = sd += guard;

	        c = coefficientToString(xc);
	        c0 = c.charAt(0);

	        if ( Math.abs( e = x['e'] ) < 1.5e15 ) {

	            /*
	             Argument reduction.
	             The series converges faster the closer the argument is to 1, so using
	             ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
	             multiply the argument by itself until the leading digits of the significand are 7, 8,
	             9, 10, 11, 12 or 13, recording the number of multiplications so the sum of the series
	             can later be divided by this number, then separate out the power of 10 using
	             ln(a*10^b) = ln(a) + b*ln(10).
	             */

	            // max n is 21 ( gives 0.9, 1.0 or 1.1 ) ( 9e15 / 21 = 4.2e14 ).
	            //while ( c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1 ) {
	            // max n is 6 ( gives 0.7 - 1.3 )
	            while ( c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3 ) {
	                x = x['times'](y);
	                c = coefficientToString( x['c'] );
	                c0 = c.charAt(0);
	                n++;
	            }

	            e = x['e'];

	            if ( c0 > 1 ) {
	                x = new Decimal( '0.' + c );
	                e++;
	            } else {
	                x = new Decimal( c0 + '.' + c.slice(1) );
	            }
	        } else {

	            /*
	             The argument reduction method above may result in overflow if the argument y is a
	             massive number with exponent >= 1500000000000000 ( 9e15 / 6 = 1.5e15 ), so instead
	             recall this function using ln(x*10^e) = ln(x) + e*ln(10).
	             */
	            x = new Decimal( c0 + '.' + c.slice(1) );

	            if ( sd + 2 > LN10.length ) {
	                ifExceptionsThrow( Decimal, 1, sd + 2, 'ln' );
	            }

	            x = ln( x, sd - guard )['plus'](
	                new Decimal( LN10.slice( 0, sd + 2 ) )['times']( e + '' )
	            );

	            Decimal['precision'] = precision;

	            return pr == null ? rnd( x, precision, rm, external = true ) : x;
	        }

	        // x1 is x reduced to a value near 1.
	        x1 = x;

	        /*
	         Taylor series.
	         ln(y) = ln( (1 + x)/(1 - x) ) = 2( x + x^3/3 + x^5/5 + x^7/7 + ... )
	         where
	         x = (y - 1)/(y + 1)              ( |x| < 1 )
	         */
	        sum = num = x = div( x['minus'](one), x['plus'](one), sd, 1 );
	        x2 = rnd( x['times'](x), sd, 1 );
	        denom = 3;

	        for ( ; ; ) {
	            num = rnd( num['times'](x2), sd, 1 );
	            t = sum['plus']( div( num, new Decimal(denom), sd, 1 ) );

	            if ( coefficientToString( t['c'] ).slice( 0, sd ) ===
	                 coefficientToString( sum['c'] ).slice( 0, sd ) ) {
	                sum = sum['times'](2);

	                /*
	                 Reverse the argument reduction. Check that e is not 0 because, as well as
	                 preventing an unnecessary calculation, -0 + 0 = +0 and to ensure correct
	                 rounding later -0 needs to stay -0.
	                 */
	                if ( e !== 0 ) {

	                    if ( sd + 2 > LN10.length ) {
	                        ifExceptionsThrow( Decimal, 1, sd + 2, 'ln' );
	                    }

	                    sum = sum['plus'](
	                        new Decimal( LN10.slice( 0, sd + 2 ) )['times']( e + '' )
	                    );
	                }

	                sum = div( sum, new Decimal(n), sd, 1 );

	                /*
	                 Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
	                 been repeated previously) and the first 4 rounding digits 9999?

	                 If so, restart the summation with a higher precision, otherwise
	                 e.g. with precision: 12, rounding: 1
	                 ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.

	                 sd - guard is the index of first rounding digit.
	                 */
	                if ( pr == null ) {

	                    if ( checkRoundingDigits( sum['c'], sd - guard, rm, rep ) ) {
	                        Decimal['precision'] = sd += guard;
	                        t = num = x = div( x1['minus'](one), x1['plus'](one), sd, 1 );
	                        x2 = rnd( x['times'](x), sd, 1 );
	                        denom = rep = 1;
	                    } else {

	                        return rnd( sum, Decimal['precision'] = precision, rm, external = true );
	                    }
	                } else {
	                    Decimal['precision'] = precision;

	                    return sum;
	                }
	            }

	            sum = t;
	            denom += 2;
	        }
	    }


	    /*
	     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	     */
	     function rnd( x, sd, rm, r ) {
	        var digits, i, j, k, n, rd, xc, xci,
	            Decimal = x['constructor'];

	        // Don't round if sd is null or undefined.
	        out: if ( sd != null ) {

	            // Infinity/NaN.
	            if ( !( xc = x['c'] ) ) {

	                return x;
	            }

	            /*
	             rd, the rounding digit, i.e. the digit after the digit that may be rounded up,
	             n, a base 1e7 number, the element of xc containing rd,
	             xci, the index of n within xc,
	             digits, the number of digits of n,
	             i, what would be the index of rd within n if all the numbers were 7 digits long (i.e. they had leading zeros)
	             j, if > 0, the actual index of rd within n (if < 0, rd is a leading zero),
	             nLeadingZeros, the number of leading zeros n would have if it were 7 digits long.
	             */

	            // Get the length of the first element of the coefficient array xc.
	            for ( digits = 1, k = xc[0]; k >= 10; k /= 10, digits++ );

	            i = sd - digits;

	            // Is the rounding digit in the first element of xc?
	            if ( i < 0 ) {
	                i += LOGBASE;
	                j = sd;
	                n = xc[ xci = 0 ];

	                // Get the rounding digit at index j of n.
	                rd = n / mathpow( 10, digits - j - 1 ) % 10 | 0;
	            } else {
	                xci = Math.ceil( ( i + 1 ) / LOGBASE );

	                if ( xci >= xc.length ) {

	                    if (r) {

	                        // Needed by exp, ln and sqrt.
	                        for ( ; xc.length <= xci; xc.push(0) );

	                        n = rd = 0;
	                        digits = 1;
	                        i %= LOGBASE;
	                        j = i - LOGBASE + 1;
	                    } else {

	                      break out;
	                    }
	                } else {
	                    n = k = xc[xci];

	                    // Get the number of digits of n.
	                    for ( digits = 1; k >= 10; k /= 10, digits++ );

	                    // Get the index of rd within n.
	                    i %= LOGBASE;

	                    // Get the index of rd within n, adjusted for leading zeros.
	                    // The number of leading zeros of n is given by LOGBASE - digits.
	                    j = i - LOGBASE + digits;

	                    // Get the rounding digit at index j of n.
	                    // Floor using Math.floor instead of | 0 as rd may be outside int range.
	                    rd = j < 0 ? 0 : mathfloor( n / mathpow( 10, digits - j - 1 ) % 10 );
	                }
	            }

	            r = r || sd < 0 ||
	              // Are there any non-zero digits after the rounding digit?
	              xc[xci + 1] != null || ( j < 0 ? n : n % mathpow( 10, digits - j - 1 ) );

	            /*
	             The expression  n % mathpow( 10, digits - j - 1 )  returns all the digits of n to the
	             right of the digit at (left-to-right) index j,
	             e.g. if n is 908714 and j is 2, the expression will give 714.
	             */

	            r = rm < 4
	              ? ( rd || r ) && ( rm == 0 || rm == ( x['s'] < 0 ? 3 : 2 ) )
	              : rd > 5 || rd == 5 && ( rm == 4 || r ||
	                // Check whether the digit to the left of the rounding digit is odd.
	                rm == 6 && ( ( i > 0 ? j > 0 ? n / mathpow( 10, digits - j ) : 0 : xc[xci - 1] ) % 10 ) & 1 ||
	                  rm == ( x['s'] < 0 ? 8 : 7 ) );

	            if ( sd < 1 || !xc[0] ) {
	                xc.length = 0;

	                if (r) {

	                    // Convert sd to decimal places.
	                    sd -= x['e'] + 1;

	                    // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	                    xc[0] = mathpow( 10, sd % LOGBASE );
	                    x['e'] = -sd || 0;
	                } else {

	                    // Zero.
	                    xc[0] = x['e'] = 0;
	                }

	                return x;
	            }

	            // Remove excess digits.

	            if ( i == 0 ) {
	                xc.length = xci;
	                k = 1;
	                xci--;
	            } else {
	                xc.length = xci + 1;
	                k = mathpow( 10, LOGBASE - i );

	                // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	                // j > 0 means i > number of leading zeros of n.
	                xc[xci] = j > 0 ? ( n / mathpow( 10, digits - j ) % mathpow( 10, j ) | 0 ) * k : 0;
	            }

	            // Round up?
	            if (r) {

	                for ( ; ; ) {

	                    // Is the digit to be rounded up in the first element of xc?
	                    if ( xci == 0 ) {

	                        // i will be the length of xc[0] before k is added.
	                        for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );

	                        j = xc[0] += k;

	                        for ( k = 1; j >= 10; j /= 10, k++ );

	                        // if i != k the length has increased.
	                        if ( i != k ) {
	                            x['e']++;

	                            if ( xc[0] == BASE ) {
	                                xc[0] = 1;
	                            }
	                        }

	                        break;
	                    } else {
	                        xc[xci] += k;

	                        if ( xc[xci] != BASE ) {

	                            break;
	                        }

	                        xc[xci--] = 0;
	                        k = 1;
	                    }
	                }
	            }

	            // Remove trailing zeros.
	            for ( i = xc.length; xc[--i] === 0; xc.pop() );
	        }

	        if (external) {

	            // Overflow?
	            if ( x['e'] > Decimal['maxE'] ) {

	                // Infinity.
	                x['c'] = x['e'] = null;

	            // Underflow?
	            } else if ( x['e'] < Decimal['minE'] ) {

	                // Zero.
	                x['c'] = [ x['e'] = 0 ];
	            }
	        }

	        return x;
	    }


	    decimal = (function () {


	        // Private functions used by static Decimal methods.


	        /*
	         *  The following emulations or wrappers of Math object functions are currently
	         *  commented-out and not in the public API.
	         *
	         *  abs
	         *  acos
	         *  asin
	         *  atan
	         *  atan2
	         *  ceil
	         *  cos
	         *  floor
	         *  round
	         *  sin
	         *  tan
	         *  trunc
	         */


	        /*
	         * Return a new Decimal whose value is the absolute value of n.
	         *
	         * n {number|string|Decimal}
	         *
	        function abs(n) { return new this(n)['abs']() }
	         */


	        /*
	         * Return a new Decimal whose value is the arccosine in radians of n.
	         *
	         * n {number|string|Decimal}
	         *
	        function acos(n) { return new this( Math.acos(n) + '' ) }
	         */


	        /*
	         * Return a new Decimal whose value is the arcsine in radians of n.
	         *
	         * n {number|string|Decimal}
	         *
	        function asin(n) { return new this( Math.asin(n) + '' ) }
	         */


	        /*
	         * Return a new Decimal whose value is the arctangent in radians of n.
	         *
	         * n {number|string|Decimal}
	         *
	        function atan(n) { return new this( Math.atan(n) + '' ) }
	         */


	        /*
	         * Return a new Decimal whose value is the arctangent in radians of y/x in the range
	         * -PI to PI (inclusive).
	         *
	         * y {number|string|Decimal} The y-coordinate.
	         * x {number|string|Decimal} The x-coordinate.
	         *
	        function atan2( y, x ) { return new this( Math.atan2( y, x ) + '' ) }
	         */


	        /*
	         * Return a new Decimal whose value is n round to an integer using ROUND_CEIL.
	         *
	         * n {number|string|Decimal}
	         *
	        function ceil(n) { return new this(n)['ceil']() }
	         */


	        /*
	         * Configure global settings for a Decimal constructor.
	         *
	         * obj is an object with any of the following properties,
	         *
	         *   precision  {number}
	         *   rounding   {number}
	         *   toExpNeg   {number}
	         *   toExpPos   {number}
	         *   minE       {number}
	         *   maxE       {number}
	         *   errors     {boolean|number}
	         *   crypto     {boolean|number}
	         *   modulo     {number}
	         *
	         *   format     {object}     See Decimal.prototype.toFormat
	         *      decimalSeparator       {string}
	         *      groupSeparator         {string}
	         *      groupSize              {number}
	         *      secondaryGroupSize     {number}
	         *      fractionGroupSeparator {string}
	         *      fractionGroupSize      {number}
	         *
	         *   A format object will replace the existing Decimal.format object without any property
	         *   checking.
	         *
	         * E.g.
	         *   Decimal.config({ precision: 20, rounding: 4 })
	         *
	         */
	        function config(obj) {
	            var p, u, v,
	                Decimal = this,
	                c = 'config',
	                parse = Decimal['errors'] ? parseInt : parseFloat;

	            if ( obj == u || typeof obj != 'object' &&
	              // 'config() object expected: {obj}'
	              !ifExceptionsThrow( Decimal, 'object expected', obj, c ) ) {

	                return Decimal;
	            }

	            // precision {number} Integer, 1 to MAX_DIGITS inclusive.
	            if ( ( v = obj[ p = 'precision' ] ) != u ) {

	                if ( !( outOfRange = v < 1 || v > MAX_DIGITS ) && parse(v) == v ) {
	                    Decimal[p] = v | 0;
	                } else {

	                    // 'config() precision not an integer: {v}'
	                    // 'config() precision out of range: {v}'
	                    ifExceptionsThrow( Decimal, p, v, c, 0 );
	                }
	            }

	            // rounding {number} Integer, 0 to 8 inclusive.
	            if ( ( v = obj[ p = 'rounding' ] ) != u ) {

	                if ( !( outOfRange = v < 0 || v > 8 ) && parse(v) == v ) {
	                    Decimal[p] = v | 0;
	                } else {

	                    // 'config() rounding not an integer: {v}'
	                    // 'config() rounding out of range: {v}'
	                    ifExceptionsThrow( Decimal, p, v, c, 0 );
	                }
	            }

	            // toExpNeg {number} Integer, -EXP_LIMIT to 0 inclusive.
	            if ( ( v = obj[ p = 'toExpNeg' ] ) != u ) {

	                if ( !( outOfRange = v < -EXP_LIMIT || v > 0 ) && parse(v) == v ) {
	                    Decimal[p] = mathfloor(v);
	                } else {

	                    // 'config() toExpNeg not an integer: {v}'
	                    // 'config() toExpNeg out of range: {v}'
	                    ifExceptionsThrow( Decimal, p, v, c, 0 );
	                }
	            }

	            // toExpPos {number} Integer, 0 to EXP_LIMIT inclusive.
	            if ( ( v = obj[ p = 'toExpPos' ] ) != u ) {

	                if ( !( outOfRange = v < 0 || v > EXP_LIMIT ) && parse(v) == v ) {
	                    Decimal[p] = mathfloor(v);
	                } else {

	                    // 'config() toExpPos not an integer: {v}'
	                    // 'config() toExpPos out of range: {v}'
	                    ifExceptionsThrow( Decimal, p, v, c, 0 );
	                }
	            }

	             // minE {number} Integer, -EXP_LIMIT to 0 inclusive.
	            if ( ( v = obj[ p = 'minE' ] ) != u ) {

	                if ( !( outOfRange = v < -EXP_LIMIT || v > 0 ) && parse(v) == v ) {
	                    Decimal[p] = mathfloor(v);
	                } else {

	                    // 'config() minE not an integer: {v}'
	                    // 'config() minE out of range: {v}'
	                    ifExceptionsThrow( Decimal, p, v, c, 0 );
	                }
	            }

	            // maxE {number} Integer, 0 to EXP_LIMIT inclusive.
	            if ( ( v = obj[ p = 'maxE' ] ) != u ) {

	                if ( !( outOfRange = v < 0 || v > EXP_LIMIT ) && parse(v) == v ) {
	                    Decimal[p] = mathfloor(v);
	                } else {

	                    // 'config() maxE not an integer: {v}'
	                    // 'config() maxE out of range: {v}'
	                    ifExceptionsThrow( Decimal, p, v, c, 0 );
	                }
	            }

	            // errors {boolean|number} true, false, 1 or 0.
	            if ( ( v = obj[ p = 'errors' ] ) != u ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    outOfRange = id = 0;
	                    Decimal[p] = !!v;
	                } else {

	                    // 'config() errors not a boolean or binary digit: {v}'
	                    ifExceptionsThrow( Decimal, p, v, c, 1 );
	                }
	            }

	            // crypto {boolean|number} true, false, 1 or 0.
	            if ( ( v = obj[ p = 'crypto' ] ) != u ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    Decimal[p] = !!( v && crypto && typeof crypto == 'object' );
	                } else {

	                    // 'config() crypto not a boolean or binary digit: {v}'
	                    ifExceptionsThrow( Decimal, p, v, c, 1 );
	                }
	            }

	            // modulo {number} Integer, 0 to 9 inclusive.
	            if ( ( v = obj[ p = 'modulo' ] ) != u ) {

	                if ( !( outOfRange = v < 0 || v > 9 ) && parse(v) == v ) {
	                    Decimal[p] = v | 0;
	                } else {

	                    // 'config() modulo not an integer: {v}'
	                    // 'config() modulo out of range: {v}'
	                    ifExceptionsThrow( Decimal, p, v, c, 0 );
	                }
	            }

	            // format {object}
	            if ( ( obj = obj[ p = 'format' ] ) != u ) {

	                if ( typeof obj == 'object' ) {
	                    Decimal[p] = obj;
	                } else {

	                    // 'config() format object expected: {obj}'
	                    ifExceptionsThrow( Decimal, 'format object expected', obj, c );
	                }
	            }

	            return Decimal;
	        }


	        /*
	         * Return a new Decimal whose value is the cosine of n.
	         *
	         * n {number|string|Decimal} A number given in radians.
	         *
	        function cos(n) { return new this( Math.cos(n) + '' ) }
	         */


	        /*
	         * Return a new Decimal whose value is the exponential of n,
	         *
	         * n {number|string|Decimal} The power to which to raise the base of the natural log.
	         *
	         */
	        function exp(n) { return new this(n)['exp'](); }


	        /*
	         * Return a new Decimal whose value is n round to an integer using ROUND_FLOOR.
	         *
	         * n {number|string|Decimal}
	         *
	        function floor(n) { return new this(n)['floor']() }
	         */


	        /*
	         * Return a new Decimal whose value is the natural logarithm of n.
	         *
	         * n {number|string|Decimal}
	         *
	         */
	        function ln(n) { return new this(n)['ln'](); }


	        /*
	         * Return a new Decimal whose value is the log of x to the base y, or to base 10 if no
	         * base is specified.
	         *
	         * log[y](x)
	         *
	         * x {number|string|Decimal} The argument of the logarithm.
	         * y {number|string|Decimal} The base of the logarithm.
	         *
	         */
	        function log( x, y ) { return new this(x)['log'](y); }


	        /*
	         * Handle max and min. ltgt is 'lt' or 'gt'.
	         */
	        function maxOrMin( Decimal, args, ltgt ) {
	            var m, n,
	                i = 0;

	            if ( toString.call( args[0] ) == '[object Array]' ) {
	                args = args[0];
	            }

	            m = new Decimal( args[0] );

	            for ( ; ++i < args.length; ) {
	                n = new Decimal( args[i] );

	                if ( !n['s'] ) {
	                    m = n;

	                    break;
	                } else if ( m[ltgt](n) ) {
	                    m = n;
	                }
	            }

	            return m;
	        }


	        /*
	         * Return a new Decimal whose value is the maximum of the arguments.
	         *
	         * arguments {number|string|Decimal}
	         *
	         */
	        function max() { return maxOrMin( this, arguments, 'lt' ); }


	        /*
	         * Return a new Decimal whose value is the minimum of the arguments.
	         *
	         * arguments {number|string|Decimal}
	         *
	         */
	        function min() { return maxOrMin( this, arguments, 'gt' ); }


	        /*
	         * Parse the value of a new Decimal from a number or string.
	         */
	        var parseDecimal = (function () {
	            var isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
	                trim = String.prototype.trim ||
	                  function () { return this.replace(/^\s+|\s+$/g, ''); };

	            return function ( Decimal, x, n, b ) {
	                var d, e, i, isNum, orig, valid;

	                if ( typeof n != 'string' ) {

	                    // If n is a number, check if minus zero.
	                    n = ( isNum = typeof n == 'number' || toString.call(n) == '[object Number]' ) &&
	                        n === 0 && 1 / n < 0 ? '-0' : n + '';
	                }
	                orig = n;

	                if ( b == null && isValid.test(n) ) {

	                    // Determine sign.
	                    x['s'] = n.charCodeAt(0) === 45 ? ( n = n.slice(1), -1 ) : 1;

	                // Either n is not a valid Decimal or a base has been specified.
	                } else {

	                    /*
	                     Enable exponential notation to be used with base 10 argument.
	                     Ensure return value is rounded to precision as with other bases.
	                     */
	                    if ( b == 10 ) {

	                        return rnd( new Decimal(n), Decimal['precision'], Decimal['rounding'] );
	                    }

	                    n = trim.call(n).replace( /^\+(?!-)/, '' );

	                    x['s'] = n.charCodeAt(0) === 45 ? ( n = n.replace( /^-(?!-)/, '' ), -1 ) : 1;

	                    if ( b != null ) {

	                        if ( ( b == (b | 0) || !Decimal['errors'] ) &&
	                          !( outOfRange = !( b >= 2 && b < 65 ) ) ) {
	                            d = '[' + NUMERALS.slice( 0, b = b | 0 ) + ']+';

	                           // Remove the `.` from e.g. '1.', and replace e.g. '.1' with '0.1'.
	                            n = n.replace( /\.$/, '' ).replace( /^\./, '0.' );

	                            // Any number in exponential form will fail due to the e+/-.
	                            if ( valid = new RegExp(
	                              '^' + d + '(?:\\.' + d + ')?$', b < 37 ? 'i' : '' ).test(n) ) {

	                                if (isNum) {

	                                    if ( n.replace( /^0\.0*|\./, '' ).length > 15 ) {

	                                        // '{method} number type has more than 15 significant digits: {n}'
	                                        ifExceptionsThrow( Decimal, 0, orig );
	                                    }

	                                    // Prevent later check for length on converted number.
	                                    isNum = !isNum;
	                                }
	                                n = convertBase( Decimal, n, 10, b, x['s'] );

	                            } else if ( n != 'Infinity' && n != 'NaN' ) {

	                                // '{method} not a base {b} number: {n}'
	                                ifExceptionsThrow( Decimal, 'not a base ' + b + ' number', orig );
	                                n = 'NaN';
	                            }
	                        } else {

	                            // '{method} base not an integer: {b}'
	                            // '{method} base out of range: {b}'
	                            ifExceptionsThrow( Decimal, 'base', b, 0, 0 );

	                            // Ignore base.
	                            valid = isValid.test(n);
	                        }
	                    } else {
	                        valid = isValid.test(n);
	                    }

	                    if ( !valid ) {

	                        // Infinity/NaN
	                        x['c'] = x['e'] = null;

	                        // NaN
	                        if ( n != 'Infinity' ) {

	                            // No exception on NaN.
	                            if ( n != 'NaN' ) {

	                                // '{method} not a number: {n}'
	                                ifExceptionsThrow( Decimal, 'not a number', orig );
	                            }
	                            x['s'] = null;
	                        }
	                        id = 0;

	                        return x;
	                    }
	                }

	                // Decimal point?
	                if ( ( e = n.indexOf('.') ) > -1 ) {
	                    n = n.replace( '.', '' );
	                }

	                // Exponential form?
	                if ( ( i = n.search(/e/i) ) > 0 ) {

	                    // Determine exponent.
	                    if ( e < 0 ) {
	                        e = i;
	                    }
	                    e += +n.slice( i + 1 );
	                    n = n.substring( 0, i );

	                } else if ( e < 0 ) {

	                    // Integer.
	                    e = n.length;
	                }

	                // Determine leading zeros.
	                for ( i = 0; n.charCodeAt(i) === 48; i++ );

	                // Determine trailing zeros.
	                for ( b = n.length; n.charCodeAt(--b) === 48; );

	                n = n.slice( i, b + 1 );

	                if (n) {
	                    b = n.length;

	                    // Disallow numbers with over 15 significant digits if number type.
	                    if ( isNum && b > 15 ) {

	                        // '{method} number type has more than 15 significant digits: {n}'
	                        ifExceptionsThrow( Decimal, 0, orig );
	                    }

	                    x['e'] = e = e - i - 1;
	                    x['c'] = [];

	                    // Transform base

	                    // e is the base 10 exponent.
	                    // i is where to slice n to get the first element of the coefficient array.
	                    i = ( e + 1 ) % LOGBASE;

	                    if ( e < 0 ) {
	                        i += LOGBASE;
	                    }

	                    // b is n.length.
	                    if ( i < b ) {

	                        if (i) {
	                            x['c'].push( +n.slice( 0, i ) );
	                        }

	                        for ( b -= LOGBASE; i < b; ) {
	                            x['c'].push( +n.slice( i, i += LOGBASE ) );
	                        }

	                        n = n.slice(i);
	                        i = LOGBASE - n.length;
	                    } else {
	                        i -= b;
	                    }

	                    for ( ; i--; n += '0' );

	                    x['c'].push( +n );

	                    if (external) {

	                        // Overflow?
	                        if ( x['e'] > Decimal['maxE'] ) {

	                            // Infinity.
	                            x['c'] = x['e'] = null;

	                        // Underflow?
	                        } else if ( x['e'] < Decimal['minE'] ) {

	                            // Zero.
	                            x['c'] = [ x['e'] = 0 ];
	                        }
	                    }
	                } else {

	                    // Zero.
	                    x['c'] = [ x['e'] = 0 ];
	                }
	                id = 0;

	                return x;
	            };
	        })();


	        /*
	         * Return a new Decimal whose value is x raised to the power y.
	         *
	         * x {number|string|Decimal} The base.
	         * y {number|string|Decimal} The exponent.
	         *
	         */
	        function pow( x, y ) { return new this(x)['pow'](y); }


	        /*
	         * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and
	         * with dp, or Decimal.precision if dp is omitted, decimal places (or less if trailing
	         * zeros are produced).
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	         *
	         */
	        function random(dp) {
	            var a, n, v,
	                i = 0,
	                r = [],
	                Decimal = this,
	                rand = new Decimal( Decimal['ONE'] );

	            if ( dp == null || !checkArg( rand, dp, 'random' ) ) {
	                dp = Decimal['precision'];
	            } else {
	                dp |= 0;
	            }

	            n = Math.ceil( dp / LOGBASE );

	            if ( Decimal['crypto'] ) {

	                // Browsers supporting crypto.getRandomValues.
	                if ( crypto && crypto['getRandomValues'] ) {

	                    a = crypto['getRandomValues']( new Uint32Array(n) );

	                    for ( ; i < n; ) {
	                        v = a[i];

	                        // 0 <= v < 4294967296
	                        // Probability that v >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
	                        if ( v >= 4.29e9 ) {

	                            a[i] = crypto['getRandomValues']( new Uint32Array(1) )[0];
	                        } else {

	                            // 0 <= v <= 4289999999
	                            // 0 <= ( v % 1e7 ) <= 9999999
	                            r[i++] = v % 1e7;
	                        }
	                    }

	                // Node.js supporting crypto.randomBytes.
	                } else if ( crypto && crypto['randomBytes'] ) {

	                    // buffer
	                    a = crypto['randomBytes']( n *= 4 );

	                    for ( ; i < n; ) {

	                        // 0 <= v < 2147483648
	                        v = a[i] + ( a[i + 1] << 8 ) + ( a[i + 2] << 16 ) +
	                            ( ( a[i + 3] & 0x7f ) << 24 );

	                        // Probability that v >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
	                        if ( v >= 2.14e9 ) {
	                            crypto['randomBytes'](4).copy( a, i );
	                        } else {

	                            // 0 <= v <= 2139999999
	                            // 0 <= ( v % 1e7 ) <= 9999999
	                            r.push( v % 1e7 );
	                            i += 4;
	                        }
	                    }
	                    i = n / 4;

	                } else {
	                    ifExceptionsThrow( Decimal, 'crypto unavailable', crypto, 'random' );
	                }
	            }

	            // Use Math.random: either Decimal.crypto is false or crypto is unavailable and errors is false.
	            if (!i) {

	                for ( ; i < n; ) {
	                    r[i++] = Math.random() * 1e7 | 0;
	                }
	            }

	            n = r[--i];
	            dp %= LOGBASE;

	            // Convert trailing digits to zeros according to dp.
	            if ( n && dp ) {
	                v = mathpow( 10, LOGBASE - dp );
	                r[i] = ( n / v | 0 ) * v;
	            }

	            // Remove trailing elements which are zero.
	            for ( ; r[i] === 0; i-- ) {
	                r.pop();
	            }

	            // Zero?
	            if ( i < 0 ) {
	                r = [ n = 0 ];
	            } else {
	                n = -1;

	                // Remove leading elements which are zero and adjust exponent accordingly.
	                for ( ; r[0] === 0; ) {
	                    r.shift();
	                    n -= LOGBASE;
	                }

	                // Count the digits of the first element of r to determine leading zeros.
	                for ( i = 1, v = r[0]; v >= 10; ) {
	                    v /= 10;
	                    i++;
	                }

	                // Adjust the exponent for leading zeros of the first element of r.
	                if ( i < LOGBASE ) {
	                    n -= LOGBASE - i;
	                }
	            }

	            rand['e'] = n;
	            rand['c'] = r;

	            return rand;
	        }


	        /*
	         * Return a new Decimal whose value is n round to an integer using rounding mode rounding.
	         *
	         * To emulate Math.round, set rounding to 7 (ROUND_HALF_CEIL).
	         *
	         * n {number|string|Decimal}
	         *
	        function round(n) {
	            var x = new this(n);

	            return rnd( x, x['e'] + 1, this['rounding'] );
	        }
	         */


	        /*
	         * Return a new Decimal whose value is the sine of n.
	         *
	         * n {number|string|Decimal} A number given in radians.
	         *
	        function sin(n) { return new this( Math.sin(n) + '' ) }
	         */


	        /*
	         * Return a new Decimal whose value is the square root of n.
	         *
	         * n {number|string|Decimal}
	         *
	         */
	        function sqrt(n) { return new this(n)['sqrt'](); }


	        /*
	         * Return a new Decimal whose value is the tangent of n.
	         *
	         * n {number|string|Decimal} A number given in radians.
	         *
	        function tan(n) { return new this( Math.tan(n) + '' ) }
	         */


	        /*
	         * Return a new Decimal whose value is n truncated to an integer.
	         *
	         * n {number|string|Decimal}
	         *
	        function trunc(n) { return new this(n)['trunc']() }
	         */


	        /*
	         * Create and return a Decimal constructor.
	         *
	         */
	        function decimalFactory(obj) {

	            /*
	             * The Decimal constructor and exported function.
	             * Create and return a new instance of a Decimal object.
	             *
	             * n {number|string|Decimal} A numeric value.
	             * [b] {number} The base of n. Integer, 2 to 64 inclusive.
	             *
	             */
	            function Decimal( n, b ) {
	                var x = this;

	                // Constructor called without new.
	                if ( !( x instanceof Decimal ) ) {
	                    ifExceptionsThrow( Decimal, 'Decimal called without new', n );

	                    return new Decimal( n, b );
	                }

	                // Retain a reference to this Decimal constructor, and shadow
	                // Decimal.prototype.constructor which points to Object.
	                x['constructor'] = Decimal;

	                // Duplicate.
	                if ( n instanceof Decimal ) {

	                    if ( b == null ) {
	                        id = 0;
	                        x['s'] = n['s'];
	                        x['e'] = n['e'];
	                        x['c'] = ( n = n['c'] ) ? n.slice() : n;

	                        return x;
	                    } else if ( b == 10 ) {

	                        return rnd( new Decimal(n), Decimal['precision'], Decimal['rounding'] );
	                    } else {
	                        n += '';
	                    }
	                }

	                return parseDecimal( Decimal, x, n, b );
	            }


	            /* ************************ CONSTRUCTOR DEFAULT PROPERTIES ************************** */

	            /*
	             These default values must be integers within the stated ranges (inclusive).
	             Most of these values can be changed during run-time using Decimal.config.
	             */

	            /*
	             The maximum number of significant digits of the result of a calculation or base
	             conversion.
	             E.g.  Decimal.config({ precision: 20 })
	             */
	            Decimal['precision'] = 20;                        // 1 to MAX_DIGITS

	            /*
	             The rounding mode used when rounding to precision.

	             ROUND_UP         0 Away from zero.
	             ROUND_DOWN       1 Towards zero.
	             ROUND_CEIL       2 Towards +Infinity.
	             ROUND_FLOOR      3 Towards -Infinity.
	             ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	             ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	             ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	             ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	             ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.

	             E.g.
	             Decimal.rounding = 4;
	             Decimal.rounding = Decimal.ROUND_HALF_UP;
	             */
	            Decimal['rounding'] = 4;                          // 0 to 8

	            /*
	             The modulo mode used when calculating the modulus: a mod n.
	             The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	             The remainder (r) is calculated as: r = a - n * q.

	             UP         0 The remainder is positive if the dividend is negative, else is negative.
	             DOWN       1 The remainder has the same sign as the dividend.
	                          This modulo mode is commonly known as "truncated division" and matches
	                          as closely as possible, the behaviour of JS remainder operator (a % n).
	             FLOOR      3 The remainder has the same sign as the divisor (Python %).
	             HALF_EVEN  6 This modulo mode implements the IEEE 754 remainder function.
	             EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	                          The remainder is always positive.

	             The above modes - truncated division, floored division, Euclidian division and IEEE 754
	             remainder - are commonly used for the modulus operation. Although any other of the
	             rounding modes can be used, they may not give useful results.
	             */
	            Decimal['modulo'] = 1;                            // 0 to 9

	            // The exponent value at and beneath which toString returns exponential notation.
	            // Number type: -7
	            Decimal['toExpNeg'] = -7;                         // 0 to -EXP_LIMIT

	            // The exponent value at and above which toString returns exponential notation.
	            // Number type: 21
	            Decimal['toExpPos'] = 21;                         // 0 to EXP_LIMIT

	            // The minimum exponent value, beneath which underflow to zero occurs.
	            // Number type: -324  (5e-324)
	            Decimal['minE'] = -EXP_LIMIT;                     // -1 to -EXP_LIMIT

	            // The maximum exponent value, above which overflow to Infinity occurs.
	            // Number type:  308  (1.7976931348623157e+308)
	            Decimal['maxE'] = EXP_LIMIT;                      // 1 to EXP_LIMIT

	            // Whether Decimal Errors are ever thrown.
	            Decimal['errors'] = true;                         // true/false

	            // Whether to use cryptographically-secure random number generation, if available.
	            Decimal['crypto'] = false;                        // true/false

	            // Format specification for the Decimal.prototype.toFormat method
	            Decimal.format = {
	                decimalSeparator: '.',
	                groupSeparator: ',',
	                groupSize: 3,
	                secondaryGroupSize: 0,
	                fractionGroupSeparator: '\xA0',              // non-breaking space
	                fractionGroupSize: 0
	            };


	            /* ********************** END OF CONSTRUCTOR DEFAULT PROPERTIES ********************* */


	            Decimal.prototype = P;

	            Decimal['ONE'] = new Decimal(1);

	            /*
	            // Pi to 80 s.d.
	            Decimal['PI'] = new Decimal(
	                '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089'
	            );
	             */

	            Decimal['ROUND_UP'] = 0;
	            Decimal['ROUND_DOWN'] = 1;
	            Decimal['ROUND_CEIL'] = 2;
	            Decimal['ROUND_FLOOR'] = 3;
	            Decimal['ROUND_HALF_UP'] = 4;
	            Decimal['ROUND_HALF_DOWN'] = 5;
	            Decimal['ROUND_HALF_EVEN'] = 6;
	            Decimal['ROUND_HALF_CEIL'] = 7;
	            Decimal['ROUND_HALF_FLOOR'] = 8;

	            // modulo mode
	            Decimal['EUCLID'] = 9;

	            //Decimal['abs'] = abs;
	            //Decimal['acos'] = acos;
	            //Decimal['asin'] = asin;
	            //Decimal['atan'] = atan;
	            //Decimal['atan2'] = atan2;
	            //Decimal['ceil'] = ceil;
	            //Decimal['cos'] = cos;
	            //Decimal['floor'] = floor;
	            //Decimal['round'] = round;
	            //Decimal['sin'] = sin;
	            //Decimal['tan'] = tan;
	            //Decimal['trunc'] = trunc;

	            Decimal['config'] = config;
	            Decimal['constructor'] = decimalFactory;
	            Decimal['exp'] = exp;
	            Decimal['ln'] = ln;
	            Decimal['log'] = log;
	            Decimal['max'] = max;
	            Decimal['min'] = min;
	            Decimal['pow'] = pow;
	            Decimal['sqrt'] = sqrt;
	            Decimal['random'] = random;

	            if ( obj != null ) {
	                Decimal['config'](obj);
	            }

	            return Decimal;
	        }

	        return decimalFactory();
	    })();


	    // Export.


	    // AMD.
	    if ( true ) {

	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return decimal;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	    // Node and other environments that support module.exports.
	    } else if ( typeof module != 'undefined' && module.exports ) {
	        module.exports = decimal;

	        if ( !crypto ) {

	            try {
	                crypto = require('crypto');
	            } catch (e) {}
	        }

	    // Browser.
	    } else {
	        noConflict = global['Decimal'];

	        decimal['noConflict'] = function () {
	            global['Decimal'] = noConflict;

	            return decimal;
	        };

	        global['Decimal'] = decimal;
	    }
	})(this);


/***/ },
/* 272 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/type/bignumber/function/bignumber.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Create a BigNumber, which can store numbers with arbitrary precision.
	   * When a matrix is provided, all elements will be converted to BigNumber.
	   *
	   * Syntax:
	   *
	   *    math.bignumber(x)
	   *
	   * Examples:
	   *
	   *    0.1 + 0.2;                                  // returns number 0.30000000000000004
	   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3
	   *
	   *
	   *    7.2e500;                                    // returns number Infinity
	   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500
	   *
	   * See also:
	   *
	   *    boolean, complex, index, matrix, string, unit
	   *
	   * @param {number | string | Array | Matrix | boolean | null} [value]  Value for the big number,
	   *                                                    0 by default.
	   * @returns {BigNumber} The created bignumber
	   */
	  var bignumber = typed('bignumber', {
	    '': function () {
	      return new type.BigNumber(0);
	    },

	    'number': function (x) {
	      // convert to string to prevent errors in case of >15 digits
	      return new type.BigNumber(x + '');
	    },

	    'string': function (x) {
	      return new type.BigNumber(x);
	    },

	    'BigNumber': function (x) {
	      // we assume a BigNumber is immutable
	      return x;
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, bignumber);
	    }
	  });

	  bignumber.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)'
	  };

	  return bignumber;
	}

	exports.name = 'bignumber';
	exports.factory = factory;


/***/ },
/* 273 */
/*!**************************************!*\
  !*** ./~/mathjs/lib/type/boolean.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ./../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Create a boolean or convert a string or number to a boolean.
	   * In case of a number, `true` is returned for non-zero numbers, and `false` in
	   * case of zero.
	   * Strings can be `'true'` or `'false'`, or can contain a number.
	   * When value is a matrix, all elements will be converted to boolean.
	   *
	   * Syntax:
	   *
	   *    math.boolean(x)
	   *
	   * Examples:
	   *
	   *    math.boolean(0);     // returns false
	   *    math.boolean(1);     // returns true
	   *    math.boolean(-3);     // returns true
	   *    math.boolean('true');     // returns true
	   *    math.boolean('false');     // returns false
	   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]
	   *
	   * See also:
	   *
	   *    bignumber, complex, index, matrix, string, unit
	   *
	   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
	   * @return {boolean | Array | Matrix} The boolean value
	   */
	  var bool = typed('bool', {
	    '': function () {
	      return false;
	    },

	    'boolean': function (x) {
	      return x;
	    },

	    'number': function (x) {
	      return !!x;
	    },

	    'BigNumber': function (x) {
	      return !x.isZero();
	    },

	    'string': function (x) {
	      // try case insensitive
	      var lcase = x.toLowerCase();
	      if (lcase === 'true') {
	        return true;
	      }
	      else if (lcase === 'false') {
	        return false;
	      }

	      // test whether value is a valid number
	      var num = Number(x);
	      if (x != '' && !isNaN(num)) {
	        return !!num;
	      }

	      throw new Error('Cannot convert "' + x + '" to a boolean');
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, bool);
	    }
	  });

	  return bool;
	}

	exports.name = 'boolean';
	exports.factory = factory;


/***/ },
/* 274 */
/*!******************************************!*\
  !*** ./~/mathjs/lib/type/chain/index.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(/*! ./Chain */ 275),

	  // construction function
	  __webpack_require__(/*! ./function/chain */ 276)
	];


/***/ },
/* 275 */
/*!******************************************!*\
  !*** ./~/mathjs/lib/type/chain/Chain.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var format = __webpack_require__(/*! ../../utils/string */ 36).format;
	var lazy = __webpack_require__(/*! ../../utils/object */ 21).lazy;

	function factory (type, config, load, typed, math) {
	  /**
	   * @constructor Chain
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing chain.done(), which will return
	   * the final value.
	   *
	   * The Chain has a number of special functions:
	   * - done()             Finalize the chained operation and return the
	   *                      chain's value.
	   * - valueOf()          The same as done()
	   * - toString()         Returns a string representation of the chain's value.
	   *
	   * @param {*} [value]
	   */
	  function Chain (value) {
	    if (!(this instanceof Chain)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (value && value.isChain) {
	      this.value = value.value;
	    }
	    else {
	      this.value = value;
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Chain.prototype.type = 'Chain';
	  Chain.prototype.isChain = true;

	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method valueOf()
	   * @returns {*} value
	   */
	  Chain.prototype.done = function () {
	    return this.value;
	  };

	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method done()
	   * @returns {*} value
	   */
	  Chain.prototype.valueOf = function () {
	    return this.value;
	  };

	  /**
	   * Get a string representation of the value in the chain
	   * @returns {string}
	   */
	  Chain.prototype.toString = function () {
	    return format(this.value);
	  };

	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {Function} fn      The function to be proxied
	   *                           If fn is no function, it is silently ignored.
	   * @private
	   */
	  function createProxy(name, fn) {
	    if (typeof fn === 'function') {
	      Chain.prototype[name] = chainify(fn);
	    }
	  }

	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {function} resolver   The function resolving with the
	   *                              function to be proxied
	   * @private
	   */
	  function createLazyProxy(name, resolver) {
	    lazy(Chain.prototype, name, function outerResolver() {
	      var fn = resolver();
	      if (typeof fn === 'function') {
	        return chainify(fn);
	      }

	      return undefined; // if not a function, ignore
	    });
	  }

	  /**
	   * Make a function chainable
	   * @param {function} fn
	   * @return {Function} chain function
	   * @private
	   */
	  function chainify (fn) {
	    return function () {
	      var args = [this.value];  // `this` will be the context of a Chain instance
	      for (var i = 0; i < arguments.length; i++) {
	        args[i + 1] = arguments[i];
	      }

	      return new Chain(fn.apply(fn, args));
	    }
	  }

	  /**
	   * Create a proxy for a single method, or an object with multiple methods.
	   * Example usage:
	   *
	   *   Chain.createProxy('add', function add (x, y) {...});
	   *   Chain.createProxy({
	   *     add:      function add (x, y) {...},
	   *     subtract: function subtract (x, y) {...}
	   *   }
	   *
	   * @param {string | Object} arg0   A name (string), or an object with
	   *                                 functions
	   * @param {*} [arg1]               A function, when arg0 is a name
	   */
	  Chain.createProxy = function (arg0, arg1) {
	    if (typeof arg0 === 'string') {
	      // createProxy(name, value)
	      createProxy(arg0, arg1);
	    }
	    else {
	      // createProxy(values)
	      for (var prop in arg0) {
	        if (arg0.hasOwnProperty(prop)) {
	          createProxy(prop, arg0[prop]);
	        }
	      }
	    }
	  };

	  // create proxy for everything that is in math.js
	  Chain.createProxy(math);

	  // register on the import event, automatically add a proxy for every imported function.
	  math.on('import', function (name, resolver, path) {
	    if (path === undefined) {
	      // an imported function (not a data type or something special)
	      createLazyProxy(name, resolver);
	    }
	  });

	  return Chain;
	}

	exports.name = 'Chain';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true;  // require providing the math namespace as 5th argument
	exports.lazy = false; // we need to register a listener on the import events, so no lazy loading


/***/ },
/* 276 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/type/chain/function/chain.js ***!
  \***************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {
	  /**
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing `chain.done()`, which returns
	   * the final value.
	   *
	   * The chain has a number of special functions:
	   *
	   * - `done()`     Finalize the chain and return the chain's value.
	   * - `valueOf()`  The same as `done()`
	   * - `toString()` Executes `math.format()` onto the chain's value, returning
	   *                a string representation of the value.
	   *
	   * Syntax:
	   *
	   *    math.chain(value)
	   *
	   * Examples:
	   *
	   *     math.chain(3)
	   *         .add(4)
	   *         .subtract(2)
	   *         .done();     // 5
	   *
	   *     math.chain( [[1, 2], [3, 4]] )
	   *         .subset(math.index(0, 0), 8)
	   *         .multiply(3)
	   *         .done();     // [[24, 6], [9, 12]]
	   *
	   * @param {*} [value]   A value of any type on which to start a chained operation.
	   * @return {math.type.Chain} The created chain
	   */
	  return typed('chain', {
	    '': function() {
	      return new type.Chain();
	    },

	    'any': function(value) {
	      return new type.Chain(value);
	    }
	  });
	}

	exports.name = 'chain';
	exports.factory = factory;


/***/ },
/* 277 */
/*!********************************************!*\
  !*** ./~/mathjs/lib/type/complex/index.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(/*! ./Complex */ 278),

	  // construction function
	  __webpack_require__(/*! ./function/complex */ 280)
	];


/***/ },
/* 278 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/type/complex/Complex.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isNumber = __webpack_require__(/*! ../../utils/number */ 24).isNumber;
	var format = __webpack_require__(/*! ../../utils/number */ 24).format;

	function factory (type, config, load, typed) {
	  // TODO: remove dependency on Unit, not good for modularization
	  var Unit = load(__webpack_require__(/*! ./../unit/Unit */ 279));

	  /**
	   * @constructor Complex
	   *
	   * A complex value can be constructed in the following ways:
	   *     var a = new Complex();
	   *     var b = new Complex(re, im);
	   *     var c = Complex.parse(str);
	   *
	   * Example usage:
	   *     var a = new Complex(3, -4);      // 3 - 4i
	   *     a.re = 5;                        // a = 5 - 4i
	   *     var i = a.im;                    // -4;
	   *     var b = Complex.parse('2 + 6i'); // 2 + 6i
	   *     var c = new Complex();           // 0 + 0i
	   *     var d = math.add(a, b);          // 5 + 2i
	   *
	   * @param {number} re       The real part of the complex value
	   * @param {number} [im]     The imaginary part of the complex value
	   */
	  function Complex(re, im) {
	    if (!(this instanceof Complex)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    switch (arguments.length) {
	      case 0:
	        this.re = 0;
	        this.im = 0;
	        break;

	      case 1:
	        var arg = arguments[0];
	        if (typeof arg === 'object') {
	          if ('re' in arg && 'im' in arg) {
	            var construct = new Complex(arg.re, arg.im); // pass on input validation
	            this.re = construct.re;
	            this.im = construct.im;
	            break;
	          } else if ('r' in arg && 'phi' in arg) {
	            var construct = Complex.fromPolar(arg.r, arg.phi);
	            this.re = construct.re;
	            this.im = construct.im;
	            break;
	          }
	        }
	        throw new SyntaxError('Object with the re and im or r and phi properties expected.');

	      case 2:
	        if (!isNumber(re) || !isNumber(im)) {
	          throw new TypeError('Two numbers expected in Complex constructor');
	        }
	        this.re = re;
	        this.im = im;
	        break;

	      default:
	        throw new SyntaxError('One, two or three arguments expected in Complex constructor');
	    }
	  }

	  /**
	   * Attach type information
	   */
	  Complex.prototype.isComplex = true;
	  Complex.prototype.type = 'Complex';

	  // private variables and functions for the parser
	  var text, index, c;

	  function skipWhitespace() {
	    while (c == ' ' || c == '\t') {
	      next();
	    }
	  }

	  function isDigitDot(c) {
	    return ((c >= '0' && c <= '9') || c == '.');
	  }

	  function isDigit(c) {
	    return ((c >= '0' && c <= '9'));
	  }

	  function next() {
	    index++;
	    c = text.charAt(index);
	  }

	  function revert(oldIndex) {
	    index = oldIndex;
	    c = text.charAt(index);
	  }

	  function parseNumber() {
	    var number = '';
	    var oldIndex;
	    oldIndex = index;

	    if (c == '+') {
	      next();
	    }
	    else if (c == '-') {
	      number += c;
	      next();
	    }

	    if (!isDigitDot(c)) {
	      // a + or - must be followed by a digit
	      revert(oldIndex);
	      return null;
	    }

	    // get number, can have a single dot
	    if (c == '.') {
	      number += c;
	      next();
	      if (!isDigit(c)) {
	        // this is no legal number, it is just a dot
	        revert(oldIndex);
	        return null;
	      }
	    }
	    else {
	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	      if (c == '.') {
	        number += c;
	        next();
	      }
	    }
	    while (isDigit(c)) {
	      number += c;
	      next();
	    }

	    // check for exponential notation like "2.3e-4" or "1.23e50"
	    if (c == 'E' || c == 'e') {
	      number += c;
	      next();

	      if (c == '+' || c == '-') {
	        number += c;
	        next();
	      }

	      // Scientific notation MUST be followed by an exponent
	      if (!isDigit(c)) {
	        // this is no legal number, exponent is missing.
	        revert(oldIndex);
	        return null;
	      }

	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	    }

	    return number;
	  }

	  function parseComplex() {
	    // check for 'i', '-i', '+i'
	    var cnext = text.charAt(index + 1);
	    if (c == 'I' || c == 'i') {
	      next();
	      return '1';
	    }
	    else if ((c == '+' || c == '-') && (cnext == 'I' || cnext == 'i')) {
	      var number = (c == '+') ? '1' : '-1';
	      next();
	      next();
	      return number;
	    }

	    return null;
	  }

	  /**
	   * Parse a complex number from a string. For example Complex.parse("2 + 3i")
	   * will return a Complex value where re = 2, im = 3.
	   * Returns null if provided string does not contain a valid complex number.
	   * @param {string} str
	   * @returns {Complex | null} complex
	   */
	  Complex.parse = function (str) {
	    text = str;
	    index = -1;
	    c = '';

	    if (typeof text !== 'string') {
	      return null;
	    }

	    next();
	    skipWhitespace();
	    var first = parseNumber();
	    if (first) {
	      if (c == 'I' || c == 'i') {
	        // pure imaginary number
	        next();
	        skipWhitespace();
	        if (c) {
	          // garbage at the end. not good.
	          return null;
	        }

	        return new Complex(0, Number(first));
	      }
	      else {
	        // complex and real part
	        skipWhitespace();
	        var separator = c;
	        if (separator != '+' && separator != '-') {
	          // pure real number
	          skipWhitespace();
	          if (c) {
	            // garbage at the end. not good.
	            return null;
	          }

	          return new Complex(Number(first), 0);
	        }
	        else {
	          // complex and real part
	          next();
	          skipWhitespace();
	          var second = parseNumber();
	          if (second) {
	            if (c != 'I' && c != 'i') {
	              // 'i' missing at the end of the complex number
	              return null;
	            }
	            next();
	          }
	          else {
	            second = parseComplex();
	            if (!second) {
	              // imaginary number missing after separator
	              return null;
	            }
	          }

	          if (separator == '-') {
	            if (second[0] == '-') {
	              second = '+' + second.substring(1);
	            }
	            else {
	              second = '-' + second;
	            }
	          }

	          next();
	          skipWhitespace();
	          if (c) {
	            // garbage at the end. not good.
	            return null;
	          }

	          return new Complex(Number(first), Number(second));
	        }
	      }
	    }
	    else {
	      // check for 'i', '-i', '+i'
	      first = parseComplex();
	      if (first) {
	        skipWhitespace();
	        if (c) {
	          // garbage at the end. not good.
	          return null;
	        }

	        return new Complex(0, Number(first));
	      }
	    }

	    return null;
	  };

	  /**
	   * Create a complex number from polar coordinates
	   *
	   * Usage:
	   *
	   *     Complex.fromPolar(r: number, phi: number) : Complex
	   *     Complex.fromPolar({r: number, phi: number}) : Complex
	   *
	   * @param {*} args...
	   * @return {Complex}
	   */
	  Complex.fromPolar = function (args) {
	    switch (arguments.length) {
	      case 1:
	        var arg = arguments[0];
	        if (typeof arg === 'object') {
	          return Complex.fromPolar(arg.r, arg.phi);
	        }
	        throw new TypeError('Input has to be an object with r and phi keys.');

	      case 2:
	        var r = arguments[0],
	            phi = arguments[1];
	        if (isNumber(r)) {
	          if (phi && phi.isUnit && phi.hasBase(Unit.BASE_UNITS.ANGLE)) {
	            // convert unit to a number in radians
	            phi = phi.toNumber('rad');
	          }

	          if (isNumber(phi)) {
	            return new Complex(r * Math.cos(phi), r * Math.sin(phi));
	          }

	          throw new TypeError('Phi is not a number nor an angle unit.');
	        } else {
	          throw new TypeError('Radius r is not a number.');
	        }

	      default:
	        throw new SyntaxError('Wrong number of arguments in function fromPolar');
	    }
	  };

	  /*
	   * Return the value of the complex number in polar notation
	   * The angle phi will be set in the interval of [-pi, pi].
	   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
	   */
	  Complex.prototype.toPolar = function () {
	    return {
	      r: Math.sqrt(this.re * this.re + this.im * this.im),
	      phi: Math.atan2(this.im, this.re)
	    };
	  };

	  /**
	   * Create a copy of the complex value
	   * @return {Complex} clone
	   */
	  Complex.prototype.clone = function () {
	    return new Complex(this.re, this.im);
	  };

	  /**
	   * Test whether this complex number equals an other complex value.
	   * Two complex numbers are equal when both their real and imaginary parts
	   * are equal.
	   * @param {Complex} other
	   * @return {boolean} isEqual
	   */
	  Complex.prototype.equals = function (other) {
	    return (this.re === other.re) && (this.im === other.im);
	  };

	  /**
	   * Get a string representation of the complex number,
	   * with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string} str
	   */
	  Complex.prototype.format = function (options) {
	    var str = '';
	    var im = this.im;
	    var re = this.re;
	    var strRe = format(this.re, options);
	    var strIm = format(this.im, options);

	    // round either re or im when smaller than the configured precision
	    var precision = isNumber(options) ? options : options ? options.precision : null;
	    if (precision !== null) {
	      var epsilon = Math.pow(10, -precision);
	      if (Math.abs(re / im) < epsilon) {
	        re = 0;
	      }
	      if (Math.abs(im / re) < epsilon) {
	        im = 0;
	      }
	    }

	    if (im == 0) {
	      // real value
	      str = strRe;
	    }
	    else if (re == 0) {
	      // purely complex value
	      if (im == 1) {
	        str = 'i';
	      }
	      else if (im == -1) {
	        str = '-i';
	      }
	      else {
	        str = strIm + 'i';
	      }
	    }
	    else {
	      // complex value
	      if (im > 0) {
	        if (im == 1) {
	          str = strRe + ' + i';
	        }
	        else {
	          str = strRe + ' + ' + strIm + 'i';
	        }
	      }
	      else {
	        if (im == -1) {
	          str = strRe + ' - i';
	        }
	        else {
	          str = strRe + ' - ' + strIm.substring(1) + 'i';
	        }
	      }
	    }

	    return str;
	  };

	  /**
	   * Get a string representation of the complex number.
	   * @return {string} str
	   */
	  Complex.prototype.toString = function () {
	    return this.format();
	  };

	  /**
	   * Get a JSON representation of the complex number
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
	   */
	  Complex.prototype.toJSON = function () {
	    return {
	      mathjs: 'Complex',
	      re: this.re,
	      im: this.im
	    };
	  };

	  /**
	   * Create a Complex number from a JSON object
	   * @param {Object} json  A JSON Object structured as
	   *                       {"mathjs": "Complex", "re": 2, "im": 3}
	   *                       All properties are optional, default values
	   *                       for `re` and `im` are 0.
	   * @return {Complex} Returns a new Complex number
	   */
	  Complex.fromJSON = function (json) {
	    return new Complex(json);
	  };

	  /**
	   * Returns a string representation of the complex number.
	   * @return {string} str
	   */
	  Complex.prototype.valueOf = Complex.prototype.toString;

	  return Complex;
	}

	exports.name = 'Complex';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 279 */
/*!****************************************!*\
  !*** ./~/mathjs/lib/type/unit/Unit.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var format = __webpack_require__(/*! ../../utils/number */ 24).format;
	var endsWith = __webpack_require__(/*! ../../utils/string */ 36).endsWith;

	function factory (type, config, load, typed) {
	  /**
	   * @constructor Unit
	   *
	   * A unit can be constructed in the following ways:
	   *     var a = new Unit(value, name);
	   *     var b = new Unit(null, name);
	   *     var c = Unit.parse(str);
	   *
	   * Example usage:
	   *     var a = new Unit(5, 'cm');               // 50 mm
	   *     var b = Unit.parse('23 kg');             // 23 kg
	   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m
	   *
	   * @param {number} [value]  A value like 5.2
	   * @param {string} [name]   A unit name like "cm" or "inch". Can include a prefix
	   */
	  function Unit(value, name) {
	    if (!(this instanceof Unit)) {
	      throw new Error('Constructor must be called with the new operator');
	    }

	    if (value != undefined && typeof value !== 'number') {
	      throw new TypeError('First parameter in Unit constructor must be a number');
	    }
	    if (name != undefined && (typeof name !== 'string' || name == '')) {
	      throw new TypeError('Second parameter in Unit constructor must be a string');
	    }

	    if (name != undefined) {
	      // find the unit and prefix from the string
	      var res = _findUnit(name);
	      if (!res) {
	        throw new SyntaxError('Unknown unit "' + name + '"');
	      }
	      this.unit = res.unit;
	      this.prefix = res.prefix;
	    }
	    else {
	      this.unit = UNIT_NONE;
	      this.prefix = PREFIX_NONE;  // link to a list with supported prefixes
	    }

	    this.value = (value != undefined) ? this._normalize(value) : null;
	    this.fixPrefix = false; // if true, function format will not search for the
	                            // best prefix but leave it as initially provided.
	                            // fixPrefix is set true by the method Unit.to
	  }

	  /**
	   * Attach type information
	   */
	  Unit.prototype.type = 'Unit';
	  Unit.prototype.isUnit = true;

	  // private variables and functions for the Unit parser
	  var text, index, c;

	  function skipWhitespace() {
	    while (c == ' ' || c == '\t') {
	      next();
	    }
	  }

	  function isDigitDot(c) {
	    return ((c >= '0' && c <= '9') || c == '.');
	  }

	  function isDigit(c) {
	    return ((c >= '0' && c <= '9'));
	  }

	  function next() {
	    index++;
	    c = text.charAt(index);
	  }

	  function revert(oldIndex) {
	    index = oldIndex;
	    c = text.charAt(index);
	  }

	  function parseNumber() {
	    var number = '';
	    var oldIndex;
	    oldIndex = index;

	    if (c == '+') {
	      next();
	    }
	    else if (c == '-') {
	      number += c;
	      next();
	    }

	    if (!isDigitDot(c)) {
	      // a + or - must be followed by a digit
	      revert(oldIndex);
	      return null;
	    }

	    // get number, can have a single dot
	    if (c == '.') {
	      number += c;
	      next();
	      if (!isDigit(c)) {
	        // this is no legal number, it is just a dot
	        revert(oldIndex);
	        return null;
	      }
	    }
	    else {
	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	      if (c == '.') {
	        number += c;
	        next();
	      }
	    }
	    while (isDigit(c)) {
	      number += c;
	      next();
	    }

	    // check for exponential notation like "2.3e-4" or "1.23e50"
	    if (c == 'E' || c == 'e') {
	      number += c;
	      next();

	      if (c == '+' || c == '-') {
	        number += c;
	        next();
	      }

	      // Scientific notation MUST be followed by an exponent
	      if (!isDigit(c)) {
	        // this is no legal number, exponent is missing.
	        revert(oldIndex);
	        return null;
	      }

	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	    }

	    return number;
	  }

	  function parseUnit() {
	    var unitName = '';

	    skipWhitespace();
	    while (c && c != ' ' && c != '\t') {
	      unitName += c;
	      next();
	    }

	    return unitName || null;
	  }

	  /**
	   * Parse a string into a unit. Returns null if the provided string does not
	   * contain a valid unit.
	   * @param {string} str        A string like "5.2 inch", "4e2 kg"
	   * @return {Unit | null} unit
	   */
	  Unit.parse = function (str) {
	    text = str;
	    index = -1;
	    c = '';

	    if (typeof text !== 'string') {
	      return null;
	    }

	    next();
	    skipWhitespace();
	    var value = parseNumber();
	    var name;
	    if (value) {
	      name = parseUnit();

	      next();
	      skipWhitespace();
	      if (c) {
	        // garbage at the end. not good.
	        return null;
	      }

	      if (value && name) {
	        try {
	          // constructor will throw an error when unit is not found
	          return new Unit(Number(value), name);
	        }
	        catch (err) {
	        }
	      }
	    }
	    else {
	      name = parseUnit();

	      next();
	      skipWhitespace();
	      if (c) {
	        // garbage at the end. not good.
	        return null;
	      }

	      if (name) {
	        try {
	          // constructor will throw an error when unit is not found
	          return new Unit(null, name);
	        }
	        catch (err) {
	        }
	      }
	    }

	    return null;
	  };

	  /**
	   * create a copy of this unit
	   * @return {Unit} clone
	   */
	  Unit.prototype.clone = function () {
	    var clone = new Unit();

	    for (var p in this) {
	      if (this.hasOwnProperty(p)) {
	        clone[p] = this[p];
	      }
	    }

	    return clone;
	  };

	  /**
	   * Normalize a value, based on its currently set unit
	   * @param {number} value
	   * @return {number} normalized value
	   * @private
	   */
	  Unit.prototype._normalize = function (value) {
	    return (value + this.unit.offset) * this.unit.value * this.prefix.value;
	  };

	  /**
	   * Denormalize a value, based on its currently set unit
	   * @param {number} value
	   * @param {number} [prefixValue]    Optional prefix value to be used
	   * @return {number} denormalized value
	   * @private
	   */
	  Unit.prototype._denormalize = function (value, prefixValue) {
	    if (prefixValue == undefined) {
	      return value / this.unit.value / this.prefix.value - this.unit.offset;
	    }
	    else {
	      return value / this.unit.value / prefixValue - this.unit.offset;
	    }
	  };

	  /**
	   * Find a unit from a string
	   * @param {string} str              A string like 'cm' or 'inch'
	   * @returns {Object | null} result  When found, an object with fields unit and
	   *                                  prefix is returned. Else, null is returned.
	   * @private
	   */
	  function _findUnit(str) {
	    for (var name in UNITS) {
	      if (UNITS.hasOwnProperty(name)) {
	        if (endsWith(str, name)) {
	          var unit = UNITS[name];
	          var prefixLen = (str.length - name.length);
	          var prefixName = str.substring(0, prefixLen);
	          var prefix = unit.prefixes[prefixName];
	          if (prefix !== undefined) {
	            // store unit, prefix, and value
	            return {
	              unit: unit,
	              prefix: prefix
	            };
	          }
	        }
	      }
	    }

	    return null;
	  }

	  /**
	   * Test if the given expression is a unit.
	   * The unit can have a prefix but cannot have a value.
	   * @param {string} name   A string to be tested whether it is a value less unit.
	   *                        The unit can have prefix, like "cm"
	   * @return {boolean}      true if the given string is a unit
	   */
	  Unit.isValuelessUnit = function (name) {
	    return (_findUnit(name) != null);
	  };

	  /**
	   * check if this unit has given base unit
	   * @param {BASE_UNITS | undefined} base
	   */
	  Unit.prototype.hasBase = function (base) {
	    return (this.unit.base === base);
	  };

	  /**
	   * Check if this unit has a base equal to another base
	   * @param {Unit} other
	   * @return {boolean} true if equal base
	   */
	  Unit.prototype.equalBase = function (other) {
	    return (this.unit.base === other.unit.base);
	  };

	  /**
	   * Check if this unit equals another unit
	   * @param {Unit} other
	   * @return {boolean} true if both units are equal
	   */
	  Unit.prototype.equals = function (other) {
	    return (this.equalBase(other) && this.value == other.value);
	  };

	  /**
	   * Create a clone of this unit with a representation
	   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
	   * @returns {Unit} unit having fixed, specified unit
	   */
	  Unit.prototype.to = function (valuelessUnit) {
	    var other;
	    var value = this.value == null ? this._normalize(1) : this.value;
	    if (typeof valuelessUnit === 'string') {
	      other = new Unit(null, valuelessUnit);

	      if (!this.equalBase(other)) {
	        throw new Error('Units do not match');
	      }

	      other.value = value;
	      other.fixPrefix = true;
	      return other;
	    }
	    else if (valuelessUnit && valuelessUnit.isUnit) {
	      if (!this.equalBase(valuelessUnit)) {
	        throw new Error('Units do not match');
	      }
	      if (valuelessUnit.value !== null) {
	        throw new Error('Cannot convert to a unit with a value');
	      }

	      other = valuelessUnit.clone();
	      other.value = value;
	      other.fixPrefix = true;
	      return other;
	    }
	    else {
	      throw new Error('String or Unit expected as parameter');
	    }
	  };

	  /**
	   * Return the value of the unit when represented with given valueless unit
	   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
	   * @return {number} value
	   */
	  Unit.prototype.toNumber = function (valuelessUnit) {
	    var other = this.to(valuelessUnit);
	    return other._denormalize(other.value, other.prefix.value);
	  };


	  /**
	   * Get a string representation of the unit.
	   * @return {string}
	   */
	  Unit.prototype.toString = function () {
	    return this.format();
	  };

	  /**
	   * Get a JSON representation of the unit
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   */
	  Unit.prototype.toJSON = function () {
	    return {
	      mathjs: 'Unit',
	      value: this._denormalize(this.value),
	      unit: this.prefix.name + this.unit.name,
	      fixPrefix: this.fixPrefix
	    };
	  };

	  /**
	   * Instantiate a Unit from a JSON object
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   * @return {Unit}
	   */
	  Unit.fromJSON = function (json) {
	    var unit = new Unit(json.value, json.unit);
	    unit.fixPrefix = json.fixPrefix || false;
	    return unit;
	  };

	  /**
	   * Returns the string representation of the unit.
	   * @return {string}
	   */
	  Unit.prototype.valueOf = Unit.prototype.toString;

	  /**
	   * Get a string representation of the Unit, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string}
	   */
	  Unit.prototype.format = function (options) {
	    var value,
	        str;

	    if (this.value !== null && !this.fixPrefix) {
	      var bestPrefix = this._bestPrefix();
	      value = this._denormalize(this.value, bestPrefix.value);
	      str = format(value, options) + ' ';
	      str += bestPrefix.name + this.unit.name;
	    }
	    else {
	      value = this._denormalize(this.value);
	      str = (this.value !== null) ? (format(value, options) + ' ') : '';
	      str += this.prefix.name + this.unit.name;
	    }

	    return str;
	  };

	  /**
	   * Calculate the best prefix using current value.
	   * @returns {Object} prefix
	   * @private
	   */
	  Unit.prototype._bestPrefix = function () {
	    // find the best prefix value (resulting in the value of which
	    // the absolute value of the log10 is closest to zero,
	    // though with a little offset of 1.2 for nicer values: you get a
	    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
	    var absValue = Math.abs(this.value / this.unit.value);
	    var bestPrefix = PREFIX_NONE;
	    var bestDiff = Math.abs(
	        Math.log(absValue / bestPrefix.value) / Math.LN10 - 1.2);

	    var prefixes = this.unit.prefixes;
	    for (var p in prefixes) {
	      if (prefixes.hasOwnProperty(p)) {
	        var prefix = prefixes[p];
	        if (prefix.scientific) {
	          var diff = Math.abs(
	              Math.log(absValue / prefix.value) / Math.LN10 - 1.2);

	          if (diff < bestDiff) {
	            bestPrefix = prefix;
	            bestDiff = diff;
	          }
	        }
	      }
	    }

	    return bestPrefix;
	  };

	  var PREFIXES = {
	    NONE: {
	      '': {name: '', value: 1, scientific: true}
	    },
	    SHORT: {
	      '': {name: '', value: 1, scientific: true},

	      'da': {name: 'da', value: 1e1, scientific: false},
	      'h': {name: 'h', value: 1e2, scientific: false},
	      'k': {name: 'k', value: 1e3, scientific: true},
	      'M': {name: 'M', value: 1e6, scientific: true},
	      'G': {name: 'G', value: 1e9, scientific: true},
	      'T': {name: 'T', value: 1e12, scientific: true},
	      'P': {name: 'P', value: 1e15, scientific: true},
	      'E': {name: 'E', value: 1e18, scientific: true},
	      'Z': {name: 'Z', value: 1e21, scientific: true},
	      'Y': {name: 'Y', value: 1e24, scientific: true},

	      'd': {name: 'd', value: 1e-1, scientific: false},
	      'c': {name: 'c', value: 1e-2, scientific: false},
	      'm': {name: 'm', value: 1e-3, scientific: true},
	      'u': {name: 'u', value: 1e-6, scientific: true},
	      'n': {name: 'n', value: 1e-9, scientific: true},
	      'p': {name: 'p', value: 1e-12, scientific: true},
	      'f': {name: 'f', value: 1e-15, scientific: true},
	      'a': {name: 'a', value: 1e-18, scientific: true},
	      'z': {name: 'z', value: 1e-21, scientific: true},
	      'y': {name: 'y', value: 1e-24, scientific: true}
	    },
	    LONG: {
	      '': {name: '', value: 1, scientific: true},

	      'deca': {name: 'deca', value: 1e1, scientific: false},
	      'hecto': {name: 'hecto', value: 1e2, scientific: false},
	      'kilo': {name: 'kilo', value: 1e3, scientific: true},
	      'mega': {name: 'mega', value: 1e6, scientific: true},
	      'giga': {name: 'giga', value: 1e9, scientific: true},
	      'tera': {name: 'tera', value: 1e12, scientific: true},
	      'peta': {name: 'peta', value: 1e15, scientific: true},
	      'exa': {name: 'exa', value: 1e18, scientific: true},
	      'zetta': {name: 'zetta', value: 1e21, scientific: true},
	      'yotta': {name: 'yotta', value: 1e24, scientific: true},

	      'deci': {name: 'deci', value: 1e-1, scientific: false},
	      'centi': {name: 'centi', value: 1e-2, scientific: false},
	      'milli': {name: 'milli', value: 1e-3, scientific: true},
	      'micro': {name: 'micro', value: 1e-6, scientific: true},
	      'nano': {name: 'nano', value: 1e-9, scientific: true},
	      'pico': {name: 'pico', value: 1e-12, scientific: true},
	      'femto': {name: 'femto', value: 1e-15, scientific: true},
	      'atto': {name: 'atto', value: 1e-18, scientific: true},
	      'zepto': {name: 'zepto', value: 1e-21, scientific: true},
	      'yocto': {name: 'yocto', value: 1e-24, scientific: true}
	    },
	    SQUARED: {
	      '': {name: '', value: 1, scientific: true},

	      'da': {name: 'da', value: 1e2, scientific: false},
	      'h': {name: 'h', value: 1e4, scientific: false},
	      'k': {name: 'k', value: 1e6, scientific: true},
	      'M': {name: 'M', value: 1e12, scientific: true},
	      'G': {name: 'G', value: 1e18, scientific: true},
	      'T': {name: 'T', value: 1e24, scientific: true},
	      'P': {name: 'P', value: 1e30, scientific: true},
	      'E': {name: 'E', value: 1e36, scientific: true},
	      'Z': {name: 'Z', value: 1e42, scientific: true},
	      'Y': {name: 'Y', value: 1e48, scientific: true},

	      'd': {name: 'd', value: 1e-2, scientific: false},
	      'c': {name: 'c', value: 1e-4, scientific: false},
	      'm': {name: 'm', value: 1e-6, scientific: true},
	      'u': {name: 'u', value: 1e-12, scientific: true},
	      'n': {name: 'n', value: 1e-18, scientific: true},
	      'p': {name: 'p', value: 1e-24, scientific: true},
	      'f': {name: 'f', value: 1e-30, scientific: true},
	      'a': {name: 'a', value: 1e-36, scientific: true},
	      'z': {name: 'z', value: 1e-42, scientific: true},
	      'y': {name: 'y', value: 1e-42, scientific: true}
	    },
	    CUBIC: {
	      '': {name: '', value: 1, scientific: true},

	      'da': {name: 'da', value: 1e3, scientific: false},
	      'h': {name: 'h', value: 1e6, scientific: false},
	      'k': {name: 'k', value: 1e9, scientific: true},
	      'M': {name: 'M', value: 1e18, scientific: true},
	      'G': {name: 'G', value: 1e27, scientific: true},
	      'T': {name: 'T', value: 1e36, scientific: true},
	      'P': {name: 'P', value: 1e45, scientific: true},
	      'E': {name: 'E', value: 1e54, scientific: true},
	      'Z': {name: 'Z', value: 1e63, scientific: true},
	      'Y': {name: 'Y', value: 1e72, scientific: true},

	      'd': {name: 'd', value: 1e-3, scientific: false},
	      'c': {name: 'c', value: 1e-6, scientific: false},
	      'm': {name: 'm', value: 1e-9, scientific: true},
	      'u': {name: 'u', value: 1e-18, scientific: true},
	      'n': {name: 'n', value: 1e-27, scientific: true},
	      'p': {name: 'p', value: 1e-36, scientific: true},
	      'f': {name: 'f', value: 1e-45, scientific: true},
	      'a': {name: 'a', value: 1e-54, scientific: true},
	      'z': {name: 'z', value: 1e-63, scientific: true},
	      'y': {name: 'y', value: 1e-72, scientific: true}
	    },
	    BINARY_SHORT: {
	      '': {name: '', value: 1, scientific: true},
	      'k': {name: 'k', value: 1e3, scientific: true},
	      'M': {name: 'M', value: 1e6, scientific: true},
	      'G': {name: 'G', value: 1e9, scientific: true},
	      'T': {name: 'T', value: 1e12, scientific: true},
	      'P': {name: 'P', value: 1e15, scientific: true},
	      'E': {name: 'E', value: 1e18, scientific: true},
	      'Z': {name: 'Z', value: 1e21, scientific: true},
	      'Y': {name: 'Y', value: 1e24, scientific: true},

	      'Ki': {name: 'Ki', value: 1024, scientific: true},
	      'Mi': {name: 'Mi', value: Math.pow(1024, 2), scientific: true},
	      'Gi': {name: 'Gi', value: Math.pow(1024, 3), scientific: true},
	      'Ti': {name: 'Ti', value: Math.pow(1024, 4), scientific: true},
	      'Pi': {name: 'Pi', value: Math.pow(1024, 5), scientific: true},
	      'Ei': {name: 'Ei', value: Math.pow(1024, 6), scientific: true},
	      'Zi': {name: 'Zi', value: Math.pow(1024, 7), scientific: true},
	      'Yi': {name: 'Yi', value: Math.pow(1024, 8), scientific: true}
	    },
	    BINARY_LONG: {
	      '': {name: '', value: 1, scientific: true},
	      'kilo': {name: 'kilo', value: 1e3, scientific: true},
	      'mega': {name: 'mega', value: 1e6, scientific: true},
	      'giga': {name: 'giga', value: 1e9, scientific: true},
	      'tera': {name: 'tera', value: 1e12, scientific: true},
	      'peta': {name: 'peta', value: 1e15, scientific: true},
	      'exa': {name: 'exa', value: 1e18, scientific: true},
	      'zetta': {name: 'zetta', value: 1e21, scientific: true},
	      'yotta': {name: 'yotta', value: 1e24, scientific: true},

	      'kibi': {name: 'kibi', value: 1024, scientific: true},
	      'mebi': {name: 'mebi', value: Math.pow(1024, 2), scientific: true},
	      'gibi': {name: 'gibi', value: Math.pow(1024, 3), scientific: true},
	      'tebi': {name: 'tebi', value: Math.pow(1024, 4), scientific: true},
	      'pebi': {name: 'pebi', value: Math.pow(1024, 5), scientific: true},
	      'exi': {name: 'exi', value: Math.pow(1024, 6), scientific: true},
	      'zebi': {name: 'zebi', value: Math.pow(1024, 7), scientific: true},
	      'yobi': {name: 'yobi', value: Math.pow(1024, 8), scientific: true}
	    }
	  };

	  var PREFIX_NONE = {name: '', value: 1, scientific: true};

	  var BASE_UNITS = {
	    NONE: {},

	    LENGTH: {},               // meter
	    MASS: {},                 // kilogram
	    TIME: {},                 // second
	    CURRENT: {},              // ampere
	    TEMPERATURE: {},          // kelvin
	    LUMINOUS_INTENSITY: {},   // candela
	    AMOUNT_OF_SUBSTANCE: {},  // mole

	    FORCE: {},                // Newton
	    SURFACE: {},              // m2
	    VOLUME: {},               // m3
	    ANGLE: {},                // rad
	    BIT: {}                   // bit (digital)
	  };

	  var BASE_UNIT_NONE = {};

	  var UNIT_NONE = {name: '', base: BASE_UNIT_NONE, value: 1, offset: 0};

	  var UNITS = {
	    // length
	    meter: {
	      name: 'meter',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    inch: {
	      name: 'inch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    foot: {
	      name: 'foot',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yard: {
	      name: 'yard',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mile: {
	      name: 'mile',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    link: {
	      name: 'link',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rod: {
	      name: 'rod',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.029210,
	      offset: 0
	    },
	    chain: {
	      name: 'chain',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    angstrom: {
	      name: 'angstrom',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1e-10,
	      offset: 0
	    },

	    m: {
	      name: 'm',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    'in': {
	      name: 'in',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    ft: {
	      name: 'ft',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yd: {
	      name: 'yd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mi: {
	      name: 'mi',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    li: {
	      name: 'li',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rd: {
	      name: 'rd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.029210,
	      offset: 0
	    },
	    ch: {
	      name: 'ch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    mil: {
	      name: 'mil',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000254,
	      offset: 0
	    }, // 1/1000 inch

	    // Surface
	    m2: {
	      name: 'm2',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.SQUARED,
	      value: 1,
	      offset: 0
	    },
	    sqin: {
	      name: 'sqin',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.00064516,
	      offset: 0
	    }, // 645.16 mm2
	    sqft: {
	      name: 'sqft',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.09290304,
	      offset: 0
	    }, // 0.09290304 m2
	    sqyd: {
	      name: 'sqyd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.83612736,
	      offset: 0
	    }, // 0.83612736 m2
	    sqmi: {
	      name: 'sqmi',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 2589988.110336,
	      offset: 0
	    }, // 2.589988110336 km2
	    sqrd: {
	      name: 'sqrd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 25.29295,
	      offset: 0
	    }, // 25.29295 m2
	    sqch: {
	      name: 'sqch',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 404.6873,
	      offset: 0
	    }, // 404.6873 m2
	    sqmil: {
	      name: 'sqmil',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 6.4516e-10,
	      offset: 0
	    }, // 6.4516 * 10^-10 m2

	    // Volume
	    m3: {
	      name: 'm3',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.CUBIC,
	      value: 1,
	      offset: 0
	    },
	    L: {
	      name: 'L',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    }, // litre
	    l: {
	      name: 'l',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    }, // litre
	    litre: {
	      name: 'litre',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },
	    cuin: {
	      name: 'cuin',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1.6387064e-5,
	      offset: 0
	    }, // 1.6387064e-5 m3
	    cuft: {
	      name: 'cuft',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.028316846592,
	      offset: 0
	    }, // 28.316 846 592 L
	    cuyd: {
	      name: 'cuyd',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.764554857984,
	      offset: 0
	    }, // 764.554 857 984 L
	    teaspoon: {
	      name: 'teaspoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000005,
	      offset: 0
	    }, // 5 mL
	    tablespoon: {
	      name: 'tablespoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000015,
	      offset: 0
	    }, // 15 mL
	    //{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
	    drop: {
	      name: 'drop',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    },  // 0.05 mL = 5e-8 m3
	    gtt: {
	      name: 'gtt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    },  // 0.05 mL = 5e-8 m3

	    // Liquid volume
	    minim: {
	      name: 'minim',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00000006161152,
	      offset: 0
	    }, // 0.06161152 mL
	    fluiddram: {
	      name: 'fluiddram',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    },  // 3.696691 mL
	    fluidounce: {
	      name: 'fluidounce',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    }, // 29.57353 mL
	    gill: {
	      name: 'gill',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    }, // 118.2941 mL
	    cc: {
	      name: 'cc',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1e-6,
	      offset: 0
	    }, // 1e-6 L
	    cup: {
	      name: 'cup',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    }, // 236.5882 mL
	    pint: {
	      name: 'pint',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    }, // 473.1765 mL
	    quart: {
	      name: 'quart',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    }, // 946.3529 mL
	    gallon: {
	      name: 'gallon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    }, // 3.785412 L
	    beerbarrel: {
	      name: 'beerbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    }, // 117.3478 L
	    oilbarrel: {
	      name: 'oilbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    }, // 158.9873 L
	    hogshead: {
	      name: 'hogshead',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.2384810,
	      offset: 0
	    }, // 238.4810 L

	    //{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
	    fldr: {
	      name: 'fldr',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    },  // 3.696691 mL
	    floz: {
	      name: 'floz',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    }, // 29.57353 mL
	    gi: {
	      name: 'gi',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    }, // 118.2941 mL
	    cp: {
	      name: 'cp',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    }, // 236.5882 mL
	    pt: {
	      name: 'pt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    }, // 473.1765 mL
	    qt: {
	      name: 'qt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    }, // 946.3529 mL
	    gal: {
	      name: 'gal',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    }, // 3.785412 L
	    bbl: {
	      name: 'bbl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    }, // 117.3478 L
	    obl: {
	      name: 'obl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    }, // 158.9873 L
	    //{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?

	    // Mass
	    g: {
	      name: 'g',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    },
	    gram: {
	      name: 'gram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },

	    ton: {
	      name: 'ton',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 907.18474,
	      offset: 0
	    },
	    tonne: {
	      name: 'tonne',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 1000,
	      offset: 0
	    },

	    grain: {
	      name: 'grain',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dram: {
	      name: 'dram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    ounce: {
	      name: 'ounce',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    poundmass: {
	      name: 'poundmass',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    hundredweight: {
	      name: 'hundredweight',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },
	    stick: {
	      name: 'stick',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 115e-3,
	      offset: 0
	    },
	    stone: {
	      name: 'stone',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 6350,
	      offset: 0
	    },

	    gr: {
	      name: 'gr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dr: {
	      name: 'dr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    oz: {
	      name: 'oz',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    lbm: {
	      name: 'lbm',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    cwt: {
	      name: 'cwt',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },

	    // Time
	    s: {
	      name: 's',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    min: {
	      name: 'min',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    h: {
	      name: 'h',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    second: {
	      name: 'second',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    sec: {
	      name: 'sec',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    minute: {
	      name: 'minute',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    hour: {
	      name: 'hour',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    day: {
	      name: 'day',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 86400,
	      offset: 0
	    },

	    // Angle
	    rad: {
	      name: 'rad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
	    deg: {
	      name: 'deg',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: 0.017453292519943295769236907684888,
	      offset: 0
	    },
	    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
	    grad: {
	      name: 'grad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: 0.015707963267948966192313216916399,
	      offset: 0
	    },
	    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
	    cycle: {
	      name: 'cycle',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: 6.2831853071795864769252867665793,
	      offset: 0
	    },

	    // Electric current
	    A: {
	      name: 'A',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    ampere: {
	      name: 'ampere',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },

	    // Temperature
	    // K(C) = °C + 273.15
	    // K(F) = (°F + 459.67) / 1.8
	    // K(R) = °R / 1.8
	    K: {
	      name: 'K',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    degC: {
	      name: 'degC',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    degF: {
	      name: 'degF',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    degR: {
	      name: 'degR',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },
	    kelvin: {
	      name: 'kelvin',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    celsius: {
	      name: 'celsius',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    fahrenheit: {
	      name: 'fahrenheit',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    rankine: {
	      name: 'rankine',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },

	    // amount of substance
	    mol: {
	      name: 'mol',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    mole: {
	      name: 'mole',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },

	    // luminous intensity
	    cd: {
	      name: 'cd',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    candela: {
	      name: 'candela',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    // TODO: units STERADIAN
	    //{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
	    //{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},

	    // Force
	    N: {
	      name: 'N',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    newton: {
	      name: 'newton',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    lbf: {
	      name: 'lbf',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },
	    poundforce: {
	      name: 'poundforce',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },

	    // Binary
	    b: {
	      name: 'b',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 1,
	      offset: 0
	    },
	    bits: {
	      name: 'bits',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 1,
	      offset: 0
	    },
	    B: {
	      name: 'B',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 8,
	      offset: 0
	    },
	    bytes: {
	      name: 'bytes',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 8,
	      offset: 0
	    }
	  };

	  // plurals
	  var PLURALS = {
	    meters: 'meter',
	    inches: 'inch',
	    feet: 'foot',
	    yards: 'yard',
	    miles: 'mile',
	    links: 'link',
	    rods: 'rod',
	    chains: 'chain',
	    angstroms: 'angstrom',

	    litres: 'litre',
	    teaspoons: 'teaspoon',
	    tablespoons: 'tablespoon',
	    minims: 'minim',
	    fluiddrams: 'fluiddram',
	    fluidounces: 'fluidounce',
	    gills: 'gill',
	    cups: 'cup',
	    pints: 'pint',
	    quarts: 'quart',
	    gallons: 'gallon',
	    beerbarrels: 'beerbarrel',
	    oilbarrels: 'oilbarrel',
	    hogsheads: 'hogshead',
	    gtts: 'gtt',

	    grams: 'gram',
	    tons: 'ton',
	    tonnes: 'tonne',
	    grains: 'grain',
	    drams: 'dram',
	    ounces: 'ounce',
	    poundmasses: 'poundmass',
	    hundredweights: 'hundredweight',
	    sticks: 'stick',

	    seconds: 'second',
	    minutes: 'minute',
	    hours: 'hour',
	    days: 'day',

	    radians: 'rad',
	    degrees: 'deg',
	    gradients: 'grad',
	    cycles: 'cycle',

	    amperes: 'ampere',
	    moles: 'mole'
	  };

	  for (var name in PLURALS) {
	    /* istanbul ignore next (we cannot really test next statement) */
	    if (PLURALS.hasOwnProperty(name)) {
	      var unit = UNITS[PLURALS[name]];
	      var plural = Object.create(unit);
	      plural.name = name;
	      UNITS[name] = plural;
	    }
	  }

	  // aliases
	  UNITS.lt = UNITS.l;
	  UNITS.liter = UNITS.litre;
	  UNITS.liters = UNITS.litres;
	  UNITS.lb = UNITS.lbm;
	  UNITS.lbs = UNITS.lbm;

	  Unit.PREFIXES = PREFIXES;
	  Unit.BASE_UNITS = BASE_UNITS;
	  Unit.UNITS = UNITS;

	  return Unit;
	}

	exports.name = 'Unit';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 280 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/type/complex/function/complex.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(/*! ../../../utils/latex */ 42);

	  /**
	   * Create a complex value or convert a value to a complex value.
	   *
	   * Syntax:
	   *
	   *     math.complex()                           // creates a complex value with zero
	   *                                              // as real and imaginary part.
	   *     math.complex(re : number, im : string)   // creates a complex value with provided
	   *                                              // values for real and imaginary part.
	   *     math.complex(re : number)                // creates a complex value with provided
	   *                                              // real value and zero imaginary part.
	   *     math.complex(complex : Complex)          // clones the provided complex value.
	   *     math.complex(arg : string)               // parses a string into a complex value.
	   *     math.complex(array : Array)              // converts the elements of the array
	   *                                              // or matrix element wise into a
	   *                                              // complex value.
	   *     math.complex({re: number, im: number})   // creates a complex value with provided
	   *                                              // values for real an imaginary part.
	   *     math.complex({r: number, phi: number})   // creates a complex value with provided
	   *                                              // polar coordinates
	   *
	   * Examples:
	   *
	   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i
	   *    a.re = 5;                        // a = Complex 5 - 4i
	   *    var i = a.im;                    // Number -4;
	   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i
	   *    var c = math.complex();          // Complex 0 + 0i
	   *    var d = math.add(a, b);          // Complex 5 + 2i
	   *
	   * See also:
	   *
	   *    bignumber, boolean, index, matrix, number, string, unit
	   *
	   * @param {* | Array | Matrix} [args]
	   *            Arguments specifying the real and imaginary part of the complex number
	   * @return {Complex | Array | Matrix} Returns a complex value
	   */
	  var complex = typed('complex', {
	    '': function () {
	      return new type.Complex(0, 0);
	    },

	    'number': function (x) {
	      return new type.Complex(x, 0);
	    },

	    'number, number': function (re, im) {
	      return new type.Complex(re, im);
	    },

	    // TODO: this signature should be redundant
	    'BigNumber, BigNumber': function (re, im) {
	      return new type.Complex(re.toNumber(), im.toNumber());
	    },

	    'Complex': function (x) {
	      return x.clone();
	    },

	    'string': function (x) {
	      var c = type.Complex.parse(x);
	      if (c) {
	        return c;
	      }

	      throw new SyntaxError('String "' + x + '" is no valid complex number');
	    },

	    'Object': function (x) {
	      if('re' in x && 'im' in x) {
	        return new type.Complex(x.re, x.im);
	      }

	      if ('r' in x && 'phi' in x) {
	        return type.Complex.fromPolar(x.r, x.phi);
	      }

	      throw new Error('Expected object with either properties re and im, or properties r and phi.');
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, complex);
	    }
	  });

	  complex.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)+'
	      + latex.symbols['i'] + '\\cdot\\left(${args[1]}\\right)\\right)',
	  };

	  return complex;
	}

	exports.name = 'complex';
	exports.factory = factory;


/***/ },
/* 281 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/type/fraction/index.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(/*! ./Fraction */ 282),

	  // construction function
	  __webpack_require__(/*! ./function/fraction */ 286)
	];


/***/ },
/* 282 */
/*!************************************************!*\
  !*** ./~/mathjs/lib/type/fraction/Fraction.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	var Fraction = __webpack_require__(/*! fraction.js */ 283);

	/**
	 * Attach type information
	 */
	Fraction.prototype.type = 'Fraction';
	Fraction.prototype.isFraction = true;

	/**
	 * Get a JSON representation of a Fraction containing type information
	 * @returns {Object} Returns a JSON object structured as:
	 *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 */
	Fraction.prototype.toJSON = function () {
	  return {
	    mathjs: 'Fraction',
	    n: this.s * this.n,
	    d: this.d
	  };
	};

	/**
	 * Instantiate a Fraction from a JSON object
	 * @param {Object} json  a JSON object structured as:
	 *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 * @return {BigNumber}
	 */
	Fraction.fromJSON = function (json) {
	  return new Fraction(json);
	};


	function factory (type, config, load, typed) {
	  return Fraction;
	}

	exports.name = 'Fraction';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 283 */
/*!********************************************!*\
  !*** ./~/mathjs/~/fraction.js/fraction.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**
	 * @license Fraction.js v2.5.0 01/06/2015
	 * http://www.xarg.org/2014/03/precise-calculations-in-javascript/
	 *
	 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/


	/**
	 *
	 * This class offers the possebility to calculate fractions.
	 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
	 *
	 * Array/Object form
	 * [ 0 => <nominator>, 1 => <denominator> ]
	 * [ n => <nominator>, d => <denominator> ]
	 *
	 * Integer form
	 * - Single integer value
	 *
	 * Double form
	 * - Single double value
	 *
	 * String form
	 * 123.456 - a simple double
	 * 123/456 - A string fraction
	 * 123.'456' - a double with repeating decimal places
	 * 123.(456) - synonym
	 * 123.45'6' - a double with repeating last place
	 * 123.45(6) - synonym
	 *
	 * Example:
	 *
	 * var f = new Fraction("9.4'31'");
	 * f.mul([-4, 3]).div(4.9);
	 *
	 */

	(function(root) {

	    "use strict";

	    // Parsed data to avoid calling "new" all the time
	    var P = {
	        'n': 0,
	        'd': 0,
	        's': 0
	    };

	    function assign(n, s) {

	        if (isNaN(n = parseInt(n, 10))) {
	            parser_exit();
	        }
	        return n * s;
	    }

	    function parser_exit() {
	        throw "Invalid Param";
	    }

	    var parse = function(p1, p2) {

	        var n = 0, d = 1, s = 1;
	        var v = 0, w = 0, x = 0, y = 1, z = 1;
	        
	        var A = 0, B = 1;
	        var C = 1, D = 1;
	        
	        var N = 10000000;
	        var M;
	        
	        if (p1 === undefined || p1 === null) {
	            /* void */
	        } else if (p2 !== undefined) {
	            n = p1;
	            d = p2;
	            s = n * d;
	        } else
	            switch (typeof p1) {

	                case "object":
	                {
	                    if ('d' in p1 && 'n' in p1) {
	                        n = p1['n'];
	                        d = p1['d'];
	                        if ('s' in p1)
	                            n*= p1['s'];
	                    } else if (0 in p1) {
	                        n = p1[0];
	                        if (1 in p1)
	                            d = p1[1];
	                    } else {
	                        parser_exit();
	                    }
	                    s = n * d;
	                    break;
	                }
	                case "number":
	                {
	                    if (p1 < 0) {
	                        s = p1;
	                        p1 = -p1;
	                    }

	                    if (p1 % 1 === 0) {
	                        n = p1;
	                    } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

	                        if (p1 >= 1) {
	                            z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
	                            p1/= z;
	                        }

	                        // Using Farey Sequences
	                        // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

	                        while (B <= N && D <= N) {
	                            M = (A + C) / (B + D);
	                            
	                            if (p1 === M) {
	                                if (B + D <= N) {
	                                    n = A + C;
	                                    d = B + D;
	                                } else if (D > B) {
	                                    n = C;
	                                    d = D;
	                                } else {
	                                    n = A;
	                                    d = B;
	                                }
	                                break;
	                                
	                            } else {

	                                if (p1 > M) {
	                                    A+= C;
	                                    B+= D;
	                                } else {
	                                    C+= A;
	                                    D+= B;
	                                }

	                                if (B > N) {
	                                    n = C;
	                                    d = D;
	                                } else {
	                                    n = A;
	                                    d = B;
	                                }
	                            }
	                        }
	                        n*= z;
	                    }
	                    break;
	                }
	                case "string":
	                {
	                    B = p1.match(/\d+|./g);
	                    
	                    if (B[A] === '-') {// Check for minus sign at the beginning
	                        s = -1;
	                        A++;
	                    } else if (B[A] === '+') {// Check for plus sign at the beginning
	                        A++;
	                    }

	                    if (B.length === A + 1) { // Check if it's just a simple number "1234"
	                        w = assign(B[A++], s);
	                    } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

	                        if (B[A] !== '.') { // Handle 0.5 and .5
	                            v = assign(B[A++], s);
	                        }
	                        A++;
	                        
	                        // Check for decimal places
	                        if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
	                            w = assign(B[A], s);
	                            y = Math.pow(10, B[A].length);
	                            A++;
	                        }

	                        // Check for repeating places
	                        if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
	                            x = assign(B[A + 1], s);
	                            z = Math.pow(10, B[A + 1].length) - 1;
	                            A+= 3;
	                        }

	                    } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
	                        w = assign(B[A], s);
	                        y = assign(B[A + 2], 1);
	                        A+= 3;
	                    } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
	                        v = assign(B[A], s);
	                        w = assign(B[A + 2], s);
	                        y = assign(B[A + 4], 1);
	                        A+= 5;
	                    }

	                    if (B.length <= A) { // Check for more tokens on the stack
	                        s = /* void */
	                                n = x + z * (v * y + w);
	                        d = y * z;
	                        break;
	                    }

	                    /* Fall through on error */
	                }
	                default:
	                    parser_exit();
	            }

	        if (!d) {
	            throw "DIV/0";
	        }

	        P['s'] = s < 0 ? -1 : 1;
	        P['n'] = Math.abs(n);
	        P['d'] = Math.abs(d);
	    };
	    
	    var modpow = function(b, e, m) {

	        for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {

	            if (e & 1) {
	                r = (r * b) % m;
	            }
	        }
	        return r;
	    };
	    
	    var cycleLen = function(n, d) {

	        if (d % 2 === 0) {
	            return cycleLen(n, d / 2);
	        }

	        if (d % 5 === 0) {
	            return cycleLen(n, d / 5);
	        }

	        for (var t = 1; t < 2000; t++) { // If you expect numbers longer then 2k chars repeating, increase the 2000
	            // Solve 10^t == 1 (mod d) for d != 0 (mod 2, 5)
	            // http://mathworld.wolfram.com/FullReptendPrime.html
	            if (1 === modpow(10, t, d)) {
	                return t;
	            }
	        }
	        return 0;
	    };
	    
	    var cycleStart = function(n, d, len) {

	        for (var s = 0; s < 300; s++) { // s < ~log10(Number.MAX_VALUE)
	            // Solve 10^s == 10^(s+t) (mod d)
	            if (modpow(10, s, d) === modpow(10, s + len, d))
	                return s;
	        }
	        return 0;
	    };
	    
	    var gcd = function(a, b) {
	        var t;
	        while (b) {
	            t = a;
	            a = b;
	            b = t % b;
	        }
	        return a;
	    };
	    
	    /**
	     * Module constructor
	     *
	     * @constructor
	     * @param {number|Fraction} a
	     * @param {number=} b
	     */
	    function Fraction(a, b) {

	        if (!(this instanceof Fraction)) {
	            return new Fraction(a, b);
	        }

	        parse(a, b);
	        
	        if (Fraction['REDUCE']) {
	            a = gcd(P['d'], P['n']); // Abuse a
	        } else {
	            a = 1;
	        }

	        this['s'] = P['s'];
	        this['n'] = P['n'] / a;
	        this['d'] = P['d'] / a;
	    }

	    Fraction.prototype['s'] = 1;
	    Fraction.prototype['n'] = 0;
	    Fraction.prototype['d'] = 1;
	    
	    /**
	     * Boolean global variable to be able to disable automatic reduction of the fraction
	     * 
	     */
	    Fraction['REDUCE'] = 1;
	    
	    /**
	     * Calculates the absolute value
	     *
	     * Ex: new Fraction(-4).abs() => 4
	     **/
	    Fraction.prototype['abs'] = function() {

	        return new Fraction(this['n'], this['d']);
	    };
	    
	    /**
	     * Inverts the sign of the current fraction
	     *
	     * Ex: new Fraction(-4).neg() => 4
	     **/
	    Fraction.prototype['neg'] = function() {

	        return new Fraction(-this['s'] * this['n'], this['d']);
	    };
	    
	    /**
	     * Adds two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
	     **/
	    Fraction.prototype['add'] = function(a, b) {

	        parse(a, b);
	        
	        return new Fraction(
	                this['s'] * this['n'] * P['d'] + P['s'] * this['d'] * P['n'],
	                this['d'] * P['d']
	                );
	    };
	    
	    /**
	     * Subtracts two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
	     **/
	    Fraction.prototype['sub'] = function(a, b) {

	        parse(a, b);
	        
	        return new Fraction(
	                this['s'] * this['n'] * P['d'] - P['s'] * this['d'] * P['n'],
	                this['d'] * P['d']
	                );
	    };
	    
	    /**
	     * Multiplies two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
	     **/
	    Fraction.prototype['mul'] = function(a, b) {

	        parse(a, b);
	        
	        return new Fraction(
	                this['s'] * P['s'] * this['n'] * P['n'],
	                this['d'] * P['d']
	                );
	    };
	    
	    /**
	     * Divides two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").inverse().div(3)
	     **/
	    Fraction.prototype['div'] = function(a, b) {

	        parse(a, b);
	        
	        return new Fraction(
	                this['s'] * P['s'] * this['n'] * P['d'],
	                this['d'] * P['n']
	                );
	    };
	    
	    /**
	     * Clones the actual object
	     *
	     * Ex: new Fraction("-17.(345)").clone()
	     **/
	    Fraction.prototype['clone'] = function() {
	        return new Fraction(this);
	    };
	    
	    /**
	     * Calculates the modulo of two rational numbers - a more precise fmod
	     *
	     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
	     **/
	    Fraction.prototype['mod'] = function(a, b) {

	        if (a === undefined) {
	            return new Fraction(this['s'] * this['n'] % this['d'], 1);
	        }

	        parse(a, b);
	        
	        if (0 === (P['n'] * this['d'])) {
	            Fraction(0, 0); // Throw div/0
	        }

	        /*
	         * First silly attempt, kinda slow
	         *
	         return that['sub']({
	         'n': num['n'] * Math.floor((this.n / this.d) / (num.n / num.d)),
	         'd': num['d'],
	         's': this['s']
	         });*/

	        /*
	         * New attempt: a1 / b1 = a2 / b2 * q + r
	         * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
	         * => (b2 * a1 % a2 * b1) / (b1 * b2)
	         */
	        return new Fraction(
	                (this['s'] * P['d'] * this['n']) % (P['n'] * this['d']),
	                P['d'] * this['d']
	                );
	    };
	    
	    /**
	     * Calculates the fractional gcd of two rational numbers
	     *
	     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
	     */
	    Fraction.prototype['gcd'] = function(a, b) {

	        parse(a, b);
	        
	        return new Fraction(gcd(P['n'], this['n']), P['d'] * this['d'] / gcd(P['d'], this['d']));
	    };
	    
	    /**
	     * Calculates the ceil of a rational number
	     *
	     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
	     **/
	    Fraction.prototype['ceil'] = function() {

	        return new Fraction(Math.ceil(this['s'] * this['n'] / this['d']), 1);
	    };
	    
	    /**
	     * Calculates the floor of a rational number
	     *
	     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
	     **/
	    Fraction.prototype['floor'] = function() {

	        return new Fraction(Math.floor(this['s'] * this['n'] / this['d']), 1);
	    };
	    
	    /**
	     * Rounds a rational numbers
	     *
	     * Ex: new Fraction('4.(3)').round() => (4 / 1)
	     **/
	    Fraction.prototype['round'] = function() {

	        return new Fraction(Math.round(this['s'] * this['n'] / this['d']), 1);
	    };
	    
	    /**
	     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
	     *
	     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
	     **/
	    Fraction.prototype['inverse'] = function() {

	        return new Fraction(this['s'] * this['d'], this['n']);
	    };
	    
	    /**
	     * Calculates the fraction to some integer exponent
	     *
	     * Ex: new Fraction(-1,2).pow(-3) => -8
	     */
	    Fraction.prototype['pow'] = function(m) {

	        var d = this['d'];
	        var n = this['n'];
	        
	        if (m < 0) {
	            this['d'] = Math.pow(n, -m);
	            this['n'] = Math.pow(d, -m);
	        } else {
	            this['d'] = Math.pow(d, m);
	            this['n'] = Math.pow(n, m);
	        }

	        if (0 === (m % 2)) {
	            this['s'] = 1;
	        }
	        return this;
	    };
	    
	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    Fraction.prototype['equals'] = function(a, b) {

	        parse(a, b);
	        
	        return this['s'] * this['n'] * P['d'] === P['s'] * P['n'] * this['d']; // Same as compare() === 0
	    };
	    
	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    Fraction.prototype['compare'] = function(a, b) {

	        parse(a, b);
	        
	        var t = (this['s'] * this['n'] * P['d'] - P['s'] * P['n'] * this['d']);
	        
	        return (0 < t) - (t < 0);
	    };
	    
	    /**
	     * Check if two rational numbers are divisible
	     *
	     * Ex: new Fraction(19.6).divisible(1.5);
	     */
	    Fraction.prototype['divisible'] = function(a, b) {

	        parse(a, b);
	        
	        return !!(P['n'] * this['d']) && !((this['n'] * P['d']) % (P['n'] * this['d']));
	    };
	    
	    /**
	     * Returns a decimal representation of the fraction
	     *
	     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
	     **/
	    Fraction.prototype['valueOf'] = function() {

	        return this['s'] * this['n'] / this['d'];
	    };
	    
	    /**
	     * Returns a string-fraction representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
	     **/
	    Fraction.prototype['toFraction'] = function() {

	        var whole, str = "";
	        
	        var n = this['n'];
	        var d = this['d'];
	        
	        if (this['s'] < 0) {
	            str+= '-';
	        }

	        if (d === 1) {
	            str+= n;
	        } else {
	            whole = Math.floor(n / d);
	            
	            if (whole > 0) {
	                str+= whole;
	                str+= " ";
	                n = n % d;
	            }

	            str+= n;
	            str+= '/';
	            str+= d;
	        }
	        return str;
	    };
	    
	    /**
	     * Returns a latex representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
	     **/
	    Fraction.prototype['toLatex'] = function() {

	        var whole, str = "";
	        
	        var n = this['n'];
	        var d = this['d'];
	        
	        if (this['s'] < 0) {
	            str+= '-';
	        }

	        if (d === 1) {
	            str+= n;
	        } else {
	            whole = Math.floor(n / d);
	            
	            if (whole > 0) {
	                str+= whole;
	                n = n % d;
	            }

	            str+= "\\frac{";
	            str+= n;
	            str+= '}{';
	            str+= d;
	            str+= '}';
	        }
	        return str;
	    };
	    
	    /**
	     * Creates a string representation of a fraction with all digits
	     *
	     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
	     **/
	    Fraction.prototype['toString'] = function() {

	        var g;
	        var N = this['n'];
	        var D = this['d'];

	        if (!Fraction['REDUCE']) {
	            g = gcd(N, D);

	            N/= g;
	            D/= g;
	        }

	        var p = String(N).split(""); // Numerator chars
	        var t = 0; // Tmp var

	        var ret = [~this['s'] ? "" : "-", "", ""]; // Return array, [0] is zero sign, [1] before comma, [2] after
	        var zeros = ""; // Collection variable for zeros

	        var cycLen = cycleLen(N, D); // Cycle length
	        var cycOff = cycleStart(N, D, cycLen); // Cycle start

	        var j = -1;
	        var n = 1; // str index

	        // rough estimate to fill zeros
	        var length = 10 + cycLen + cycOff + p.length; // 10 = decimal places when no repitation

	        for (var i = 0; i < length; i++, t*= 10) {

	            if (i < p.length) {
	                t+= Number(p[i]);
	            } else {
	                n = 2;
	                j++; // Start now => after comma
	            }

	            if (cycLen > 0) { // If we have a repeating part
	                if (j === cycOff) {
	                    ret[n]+= zeros + "(";
	                    zeros = "";
	                } else if (j === cycLen + cycOff) {
	                    ret[n]+= zeros + ")";
	                    break;
	                }
	            }

	            if (t >= D) {
	                ret[n]+= zeros + ((t / D) | 0); // Flush zeros, Add current digit
	                zeros = "";
	                t = t % D;
	            } else if (n > 1) { // Add zeros to the zero buffer
	                zeros+= "0";
	            } else if (ret[n]) { // If before comma, add zero only if already something was added
	                ret[n]+= "0";
	            }
	        }

	        // If it's empty, it's a leading zero only
	        ret[0]+= ret[1] || "0";

	        // If there is something after the comma, add the comma sign
	        if (ret[2]) {
	            return ret[0] + "." + ret[2];
	        }
	        return ret[0];
	    };

	    if ("function" === 'function' && __webpack_require__(/*! !webpack amd define */ 285)['amd']) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return Fraction;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (true) {
	        module['exports'] = Fraction;
	    } else {
	        root['Fraction'] = Fraction;
	    }

	})(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/buildin/module.js */ 284)(module)))

/***/ },
/* 284 */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 285 */
/*!***************************************!*\
  !*** (webpack)/buildin/amd-define.js ***!
  \***************************************/
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 286 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/type/fraction/function/fraction.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Create a fraction convert a value to a fraction.
	   *
	   * Syntax:
	   *     math.fraction(numerator, denominator)
	   *     math.fraction({n: numerator, d: denominator})
	   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
	   *                                                   into fractions
	   *
	   * Examples:
	   *
	   *     math.fraction(1, 3);
	   *     math.fraction('2/3');
	   *     math.fraction({n: 2, d: 3});
	   *     math.fraction([0.2, 0.25, 1.25]);
	   *
	   * See also:
	   *
	   *    bignumber, number, string, unit
	   *
	   * @param {number | string | Array | Matrix} [args]
	   *            Arguments specifying the numerator and denominator of
	   *            the fraction
	   * @return {fraction | Array | Matrix} Returns a fraction
	   */
	  var fraction = typed('fraction', {
	    'number': function (x) {
	      if (!isFinite(x) || isNaN(x)) {
	        throw new Error(x + ' cannot be represented as a fraction');
	      }

	      return new type.Fraction(x);
	    },

	    'string': function (x) {
	      return new type.Fraction(x);
	    },

	    'number, number': function (numerator, denominator) {
	      return new type.Fraction(numerator, denominator);
	    },

	    'Fraction': function (x) {
	      return x; // fractions are immutable
	    },

	    'Object': function (x) {
	      return new type.Fraction(x);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, fraction);
	    }
	  });

	  return fraction;
	}

	exports.name = 'fraction';
	exports.factory = factory;


/***/ },
/* 287 */
/*!*************************************!*\
  !*** ./~/mathjs/lib/type/number.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ./../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Create a number or convert a string, boolean, or unit to a number.
	   * When value is a matrix, all elements will be converted to number.
	   *
	   * Syntax:
	   *
	   *    math.number(value)
	   *    math.number(unit, valuelessUnit)
	   *
	   * Examples:
	   *
	   *    math.number(2);                         // returns number 2
	   *    math.number('7.2');                     // returns number 7.2
	   *    math.number(true);                      // returns number 1
	   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]
	   *    math.number(math.unit('52cm'), 'm');    // returns 0.52
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, string, unit
	   *
	   * @param {string | number | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
	   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
	   * @return {number | Array | Matrix} The created number
	   */
	  var number = typed('number', {
	    '': function () {
	      return 0;
	    },

	    'number': function (x) {
	      return x;
	    },

	    'string': function (x) {
	      var num = Number(x);
	      if (isNaN(num)) {
	        throw new SyntaxError('String "' + x + '" is no valid number');
	      }
	      return num;
	    },

	    'BigNumber': function (x) {
	      return x.toNumber();
	    },

	    'Unit': function (x) {
	      throw new Error('Second argument with valueless unit expected');
	    },

	    'Unit, string | Unit': function (unit, valuelessUnit) {
	      return unit.toNumber(valuelessUnit);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, number);
	    }
	  });

	  number.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
	  };

	  return number;
	}

	exports.name = 'number';
	exports.factory = factory;


/***/ },
/* 288 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/type/resultset/index.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(/*! ./ResultSet */ 289)
	];


/***/ },
/* 289 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/type/resultset/ResultSet.js ***!
  \**************************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {
	  /**
	   * A ResultSet contains a list or results
	   * @param {Array} entries
	   * @constructor
	   */
	  function ResultSet(entries) {
	    if (!(this instanceof ResultSet)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.entries = entries || [];
	  }

	  /**
	   * Attach type information
	   */
	  ResultSet.prototype.type = 'ResultSet';
	  ResultSet.prototype.isResultSet = true;

	  /**
	   * Returns the array with results hold by this ResultSet
	   * @returns {Array} entries
	   */
	  ResultSet.prototype.valueOf = function () {
	    return this.entries;
	  };

	  /**
	   * Returns the stringified results of the ResultSet
	   * @returns {string} string
	   */
	  ResultSet.prototype.toString = function () {
	    return '[' + this.entries.join(', ') + ']';
	  };

	  /**
	   * Get a JSON representation of the ResultSet
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "ResultSet", "entries": [...]}`
	   */
	  ResultSet.prototype.toJSON = function () {
	    return {
	      mathjs: 'ResultSet',
	      entries: this.entries
	    };
	  };

	  /**
	   * Instantiate a ResultSet from a JSON object
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "ResultSet", "entries": [...]}`
	   * @return {ResultSet}
	   */
	  ResultSet.fromJSON = function (json) {
	    return new ResultSet(json.entries);
	  };

	  return ResultSet;
	}

	exports.name = 'ResultSet';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 290 */
/*!*************************************!*\
  !*** ./~/mathjs/lib/type/string.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ./../utils/collection/deepMap */ 45);
	var number = __webpack_require__(/*! ../utils/number */ 24);

	function factory (type, config, load, typed) {
	  /**
	   * Create a string or convert any object into a string.
	   * Elements of Arrays and Matrices are processed element wise.
	   *
	   * Syntax:
	   *
	   *    math.string(value)
	   *
	   * Examples:
	   *
	   *    math.string(4.2);               // returns string '4.2'
	   *    math.string(math.complex(3, 2); // returns string '3 + 2i'
	   *
	   *    var u = math.unit(5, 'km');
	   *    math.string(u.to('m'));         // returns string '5000 m'
	   *
	   *    math.string([true, false]);     // returns ['true', 'false']
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, unit
	   *
	   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
	   * @return {string | Array | Matrix} The created string
	   */
	  var string = typed('string', {
	    '': function () {
	      return '';
	    },

	    'number': number.format,

	    'null': function (x) {
	      return 'null';
	    },

	    'boolean': function (x) {
	      return x + '';
	    },

	    'string': function (x) {
	      return x;
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, string);
	    },

	    'any': function (x) {
	      return String(x);
	    }
	  });

	  string.toTex = {
	    0: '\\mathtt{""}',
	    1: '\\mathrm{string}\\left(${args[0]}\\right)'
	  };

	  return string;
	}

	exports.name = 'string';
	exports.factory = factory;


/***/ },
/* 291 */
/*!*****************************************!*\
  !*** ./~/mathjs/lib/type/unit/index.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(/*! ./Unit */ 279),

	  // construction function
	  __webpack_require__(/*! ./function/unit */ 292)
	];


/***/ },
/* 292 */
/*!*************************************************!*\
  !*** ./~/mathjs/lib/type/unit/function/unit.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  /**
	   * Create a unit. Depending on the passed arguments, the function
	   * will create and return a new math.type.Unit object.
	   * When a matrix is provided, all elements will be converted to units.
	   *
	   * Syntax:
	   *
	   *     math.unit(unit : string)
	   *     math.unit(value : number, unit : string)
	   *
	   * Examples:
	   *
	   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm
	   *    var b = math.unit('23 kg');    // returns Unit 23 kg
	   *    a.to('m');                     // returns Unit 0.05 m
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, string
	   *
	   * @param {* | Array | Matrix} args   A number and unit.
	   * @return {Unit | Array | Matrix}    The created unit
	   */

	  var unit = typed('unit', {
	    'Unit': function (x) {
	      return x.clone();
	    },

	    'string': function (x) {
	      if (type.Unit.isValuelessUnit(x)) {
	        return new type.Unit(null, x); // a pure unit
	      }

	      var u = type.Unit.parse(x);        // a unit with value, like '5cm'
	      if (u) {
	        return u;
	      }

	      throw new SyntaxError('String "' + x + '" is no valid unit');
	    },

	    'number, string': function (value, unit) {
	      return new type.Unit(value, unit);
	    },

	    'BigNumber, string': function (value, unit) {
	      return new type.Unit(value.toNumber(), unit);
	    },

	    'Array | Matrix': function (x) {
	      return deepMap(x, unit);
	    }
	  });

	  unit.toTex = {
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
	  };

	  return unit;
	}

	exports.name = 'unit';
	exports.factory = factory;


/***/ },
/* 293 */
/*!***********************************!*\
  !*** ./~/mathjs/lib/constants.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object = __webpack_require__(/*! ./utils/object */ 21);
	var bigConstants = __webpack_require__(/*! ./utils/bignumber/constants */ 156);

	function factory (type, config, load, typed, math) {
	  // listen for changed in the configuration, automatically reload
	  // constants when needed
	  math.on('config', function (curr, prev) {
	    if (curr.number !== prev.number) {
	      factory(type, config, load, typed, math);
	    }
	  });

	  math['true']     = true;
	  math['false']    = false;
	  math['null']     = null;
	  math['uninitialized'] = __webpack_require__(/*! ./utils/array */ 34).UNINITIALIZED;

	  if (config.number === 'bignumber') {
	    math['Infinity'] = new type.BigNumber(Infinity);
	    math['NaN']      = new type.BigNumber(NaN);

	    object.lazy(math, 'pi',  function () {return bigConstants.pi(type.BigNumber)});
	    object.lazy(math, 'tau', function () {return bigConstants.tau(type.BigNumber)});
	    object.lazy(math, 'e',   function () {return bigConstants.e(type.BigNumber)});
	    object.lazy(math, 'phi', function () {return bigConstants.phi(type.BigNumber)}); // golden ratio, (1+sqrt(5))/2

	    // uppercase constants (for compatibility with built-in Math)
	    object.lazy(math, 'E',       function () {return math.e;});
	    object.lazy(math, 'LN2',     function () {return new type.BigNumber(2).ln();});
	    object.lazy(math, 'LN10',    function () {return new type.BigNumber(10).ln()});
	    object.lazy(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});
	    object.lazy(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln())});
	    object.lazy(math, 'PI',      function () {return math.pi});
	    object.lazy(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt()});
	    object.lazy(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt()});
	  }
	  else {
	    math['Infinity'] = Infinity;
	    math['NaN']      = NaN;

	    math.pi  = Math.PI;
	    math.tau = Math.PI * 2;
	    math.e   = Math.E;
	    math.phi = 1.61803398874989484820458683436563811772030917980576286213545; // golden ratio, (1+sqrt(5))/2

	    // uppercase constants (for compatibility with built-in Math)
	    math.E           = math.e;
	    math.LN2         = Math.LN2;
	    math.LN10        = Math.LN10;
	    math.LOG2E       = Math.LOG2E;
	    math.LOG10E      = Math.LOG10E;
	    math.PI          = math.pi;
	    math.SQRT1_2     = Math.SQRT1_2;
	    math.SQRT2       = Math.SQRT2;
	  }

	  // complex i
	  math.i = new type.Complex(0, 1);

	  // meta information
	  math.version = __webpack_require__(/*! ./version */ 294);
	}

	exports.factory = factory;
	exports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed
	exports.math = true;   // request access to the math namespace

/***/ },
/* 294 */
/*!*********************************!*\
  !*** ./~/mathjs/lib/version.js ***!
  \*********************************/
/***/ function(module, exports) {

	module.exports = '2.0.1';
	// Note: This file is automatically generated when building math.js.
	// Changes made in this file will be overwritten.


/***/ },
/* 295 */
/*!******************************************!*\
  !*** ./~/mathjs/lib/expression/index.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./docs */ 296),
	  __webpack_require__(/*! ./function */ 460),
	  __webpack_require__(/*! ./node */ 484),
	  __webpack_require__(/*! ./transform */ 485),

	  __webpack_require__(/*! ./Help */ 497),
	  __webpack_require__(/*! ./parse */ 462),
	  __webpack_require__(/*! ./Parser */ 483)
	];


/***/ },
/* 296 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/expression/docs/index.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	function factory (type, config, load, typed) {
	  var docs = {};


	  // functions for types
	  docs.bignumber = __webpack_require__(/*! ./type/bignumber */ 297);
	  docs['boolean'] = __webpack_require__(/*! ./type/boolean */ 298);
	  docs.complex = __webpack_require__(/*! ./type/complex */ 299);
	  docs.fraction = __webpack_require__(/*! ./type/fraction */ 300);
	  docs.index = __webpack_require__(/*! ./type/index */ 301);
	  docs.matrix = __webpack_require__(/*! ./type/matrix */ 302);
	  docs.number = __webpack_require__(/*! ./type/number */ 303);
	  docs.sparse = __webpack_require__(/*! ./type/sparse */ 304);
	  docs.string = __webpack_require__(/*! ./type/string */ 305);
	  docs.unit = __webpack_require__(/*! ./type/unit */ 306);

	// constants
	  docs.e = __webpack_require__(/*! ./constants/e */ 307);
	  docs.E = __webpack_require__(/*! ./constants/e */ 307);
	  docs['false'] = __webpack_require__(/*! ./constants/false */ 308);
	  docs.i = __webpack_require__(/*! ./constants/i */ 309);
	  docs['Infinity'] = __webpack_require__(/*! ./constants/Infinity */ 310);
	  docs.LN2 = __webpack_require__(/*! ./constants/LN2 */ 311);
	  docs.LN10 = __webpack_require__(/*! ./constants/LN10 */ 312);
	  docs.LOG2E = __webpack_require__(/*! ./constants/LOG2E */ 313);
	  docs.LOG10E = __webpack_require__(/*! ./constants/LOG10E */ 314);
	  docs.NaN = __webpack_require__(/*! ./constants/NaN */ 315);
	  docs['null'] = __webpack_require__(/*! ./constants/null */ 316);
	  docs.pi = __webpack_require__(/*! ./constants/pi */ 317);
	  docs.PI = __webpack_require__(/*! ./constants/pi */ 317);
	  docs.phi = __webpack_require__(/*! ./constants/phi */ 318);
	  docs.SQRT1_2 = __webpack_require__(/*! ./constants/SQRT1_2 */ 319);
	  docs.SQRT2 = __webpack_require__(/*! ./constants/SQRT2 */ 320);
	  docs.tau = __webpack_require__(/*! ./constants/tau */ 321);
	  docs['true'] = __webpack_require__(/*! ./constants/true */ 322);
	  docs.version = __webpack_require__(/*! ./constants/version */ 323);

	// functions - algebra
	  docs.lsolve = __webpack_require__(/*! ./function/algebra/lsolve */ 324);
	  docs.lup = __webpack_require__(/*! ./function/algebra/lup */ 325);
	  docs.lusolve = __webpack_require__(/*! ./function/algebra/lusolve */ 326);
	  docs.slu = __webpack_require__(/*! ./function/algebra/slu */ 327);
	  docs.usolve = __webpack_require__(/*! ./function/algebra/usolve */ 328);

	// functions - arithmetic
	  docs.abs = __webpack_require__(/*! ./function/arithmetic/abs */ 329);
	  docs.add = __webpack_require__(/*! ./function/arithmetic/add */ 330);
	  docs.ceil = __webpack_require__(/*! ./function/arithmetic/ceil */ 331);
	  docs.cube = __webpack_require__(/*! ./function/arithmetic/cube */ 332);
	  docs.divide = __webpack_require__(/*! ./function/arithmetic/divide */ 333);
	  docs.dotDivide = __webpack_require__(/*! ./function/arithmetic/dotDivide */ 334);
	  docs.dotMultiply = __webpack_require__(/*! ./function/arithmetic/dotMultiply */ 335);
	  docs.dotPow = __webpack_require__(/*! ./function/arithmetic/dotPow */ 336);
	  docs.exp = __webpack_require__(/*! ./function/arithmetic/exp */ 337);
	  docs.fix = __webpack_require__(/*! ./function/arithmetic/fix */ 338);
	  docs.floor = __webpack_require__(/*! ./function/arithmetic/floor */ 339);
	  docs.gcd = __webpack_require__(/*! ./function/arithmetic/gcd */ 340);
	  docs.lcm = __webpack_require__(/*! ./function/arithmetic/lcm */ 341);
	  docs.log = __webpack_require__(/*! ./function/arithmetic/log */ 342);
	  docs.log10 = __webpack_require__(/*! ./function/arithmetic/log10 */ 343);
	  docs.mod = __webpack_require__(/*! ./function/arithmetic/mod */ 344);
	  docs.multiply = __webpack_require__(/*! ./function/arithmetic/multiply */ 345);
	  docs.norm = __webpack_require__(/*! ./function/arithmetic/norm */ 346);
	  docs.nthRoot = __webpack_require__(/*! ./function/arithmetic/nthRoot */ 347);
	  docs.pow = __webpack_require__(/*! ./function/arithmetic/pow */ 348);
	  docs.round = __webpack_require__(/*! ./function/arithmetic/round */ 349);
	  docs.sign = __webpack_require__(/*! ./function/arithmetic/sign */ 350);
	  docs.sqrt = __webpack_require__(/*! ./function/arithmetic/sqrt */ 351);
	  docs.square = __webpack_require__(/*! ./function/arithmetic/square */ 352);
	  docs.subtract = __webpack_require__(/*! ./function/arithmetic/subtract */ 353);
	  docs.unaryMinus = __webpack_require__(/*! ./function/arithmetic/unaryMinus */ 354);
	  docs.unaryPlus = __webpack_require__(/*! ./function/arithmetic/unaryPlus */ 355);
	  docs.xgcd = __webpack_require__(/*! ./function/arithmetic/xgcd */ 356);

	// functions - bitwise
	  docs.bitAnd = __webpack_require__(/*! ./function/bitwise/bitAnd */ 357);
	  docs.bitNot = __webpack_require__(/*! ./function/bitwise/bitNot */ 358);
	  docs.bitOr = __webpack_require__(/*! ./function/bitwise/bitOr */ 359);
	  docs.bitXor = __webpack_require__(/*! ./function/bitwise/bitXor */ 360);
	  docs.leftShift = __webpack_require__(/*! ./function/bitwise/leftShift */ 361);
	  docs.rightArithShift = __webpack_require__(/*! ./function/bitwise/rightArithShift */ 362);
	  docs.rightLogShift = __webpack_require__(/*! ./function/bitwise/rightLogShift */ 363);

	// functions - combinatorics
	  docs.bellNumbers = __webpack_require__(/*! ./function/combinatorics/bellNumbers */ 364);
	  docs.composition = __webpack_require__(/*! ./function/combinatorics/composition */ 365);
	  docs.stirlingS2 = __webpack_require__(/*! ./function/combinatorics/stirlingS2 */ 366);

	// functions - complex
	  docs.arg = __webpack_require__(/*! ./function/complex/arg */ 367);
	  docs.conj = __webpack_require__(/*! ./function/complex/conj */ 368);
	  docs.re = __webpack_require__(/*! ./function/complex/re */ 369);
	  docs.im = __webpack_require__(/*! ./function/complex/im */ 370);

	// functions - expression
	  docs['eval'] =  __webpack_require__(/*! ./function/expression/eval */ 371);
	  docs.help =  __webpack_require__(/*! ./function/expression/help */ 372);

	// functions - geometry
	  docs.intersect = __webpack_require__(/*! ./function/geometry/intersect */ 373);

	// functions - logical
	  docs['and'] = __webpack_require__(/*! ./function/logical/and */ 374);
	  docs['not'] = __webpack_require__(/*! ./function/logical/not */ 375);
	  docs['or'] = __webpack_require__(/*! ./function/logical/or */ 376);
	  docs['xor'] = __webpack_require__(/*! ./function/logical/xor */ 377);

	// functions - matrix
	  docs['concat'] = __webpack_require__(/*! ./function/matrix/concat */ 378);
	  docs.cross = __webpack_require__(/*! ./function/matrix/cross */ 379);
	  docs.det = __webpack_require__(/*! ./function/matrix/det */ 380);
	  docs.diag = __webpack_require__(/*! ./function/matrix/diag */ 381);
	  docs.dot = __webpack_require__(/*! ./function/matrix/dot */ 382);
	  docs.eye = __webpack_require__(/*! ./function/matrix/eye */ 383);
	  docs.flatten = __webpack_require__(/*! ./function/matrix/flatten */ 384);
	  docs.inv = __webpack_require__(/*! ./function/matrix/inv */ 385);
	  docs.ones = __webpack_require__(/*! ./function/matrix/ones */ 386);
	  docs.range = __webpack_require__(/*! ./function/matrix/range */ 387);
	  docs.resize = __webpack_require__(/*! ./function/matrix/resize */ 388);
	  docs.size = __webpack_require__(/*! ./function/matrix/size */ 389);
	  docs.squeeze = __webpack_require__(/*! ./function/matrix/squeeze */ 390);
	  docs.subset = __webpack_require__(/*! ./function/matrix/subset */ 391);
	  docs.trace = __webpack_require__(/*! ./function/matrix/trace */ 392);
	  docs.transpose = __webpack_require__(/*! ./function/matrix/transpose */ 393);
	  docs.zeros = __webpack_require__(/*! ./function/matrix/zeros */ 394);

	// functions - probability
	  docs.combinations = __webpack_require__(/*! ./function/probability/combinations */ 395);
	//docs.distribution = require('./function/probability/distribution');
	  docs.factorial = __webpack_require__(/*! ./function/probability/factorial */ 396);
	  docs.gamma = __webpack_require__(/*! ./function/probability/gamma */ 397);
	  docs.multinomial = __webpack_require__(/*! ./function/probability/multinomial */ 398);
	  docs.permutations = __webpack_require__(/*! ./function/probability/permutations */ 399);
	  docs.pickRandom = __webpack_require__(/*! ./function/probability/pickRandom */ 400);
	  docs.random = __webpack_require__(/*! ./function/probability/random */ 401);
	  docs.randomInt = __webpack_require__(/*! ./function/probability/randomInt */ 402);

	// functions - relational
	  docs.compare = __webpack_require__(/*! ./function/relational/compare */ 403);
	  docs.deepEqual = __webpack_require__(/*! ./function/relational/deepEqual */ 404);
	  docs['equal'] = __webpack_require__(/*! ./function/relational/equal */ 405);
	  docs.larger = __webpack_require__(/*! ./function/relational/larger */ 406);
	  docs.largerEq = __webpack_require__(/*! ./function/relational/largerEq */ 407);
	  docs.smaller = __webpack_require__(/*! ./function/relational/smaller */ 408);
	  docs.smallerEq = __webpack_require__(/*! ./function/relational/smallerEq */ 409);
	  docs.unequal = __webpack_require__(/*! ./function/relational/unequal */ 410);

	// functions - statistics
	  docs.max = __webpack_require__(/*! ./function/statistics/max */ 411);
	  docs.mean = __webpack_require__(/*! ./function/statistics/mean */ 412);
	  docs.median = __webpack_require__(/*! ./function/statistics/median */ 413);
	  docs.min = __webpack_require__(/*! ./function/statistics/min */ 414);
	  docs.prod = __webpack_require__(/*! ./function/statistics/prod */ 415);
	  docs.quantileSeq = __webpack_require__(/*! ./function/statistics/quantileSeq */ 416);
	  docs.std = __webpack_require__(/*! ./function/statistics/std */ 417);
	  docs.sum = __webpack_require__(/*! ./function/statistics/sum */ 418);
	  docs['var'] = __webpack_require__(/*! ./function/statistics/var */ 419);

	// functions - trigonometry
	  docs.acos = __webpack_require__(/*! ./function/trigonometry/acos */ 420);
	  docs.acosh = __webpack_require__(/*! ./function/trigonometry/acosh */ 421);
	  docs.acot = __webpack_require__(/*! ./function/trigonometry/acot */ 422);
	  docs.acoth = __webpack_require__(/*! ./function/trigonometry/acoth */ 423);
	  docs.acsc = __webpack_require__(/*! ./function/trigonometry/acsc */ 424);
	  docs.acsch = __webpack_require__(/*! ./function/trigonometry/acsch */ 425);
	  docs.asec = __webpack_require__(/*! ./function/trigonometry/asec */ 426);
	  docs.asech = __webpack_require__(/*! ./function/trigonometry/asech */ 427);
	  docs.asin = __webpack_require__(/*! ./function/trigonometry/asin */ 428);
	  docs.asinh = __webpack_require__(/*! ./function/trigonometry/asinh */ 429);
	  docs.atan = __webpack_require__(/*! ./function/trigonometry/atan */ 430);
	  docs.atanh = __webpack_require__(/*! ./function/trigonometry/atanh */ 431);
	  docs.atan2 = __webpack_require__(/*! ./function/trigonometry/atan2 */ 432);
	  docs.cos = __webpack_require__(/*! ./function/trigonometry/cos */ 433);
	  docs.cosh = __webpack_require__(/*! ./function/trigonometry/cosh */ 434);
	  docs.cot = __webpack_require__(/*! ./function/trigonometry/cot */ 435);
	  docs.coth = __webpack_require__(/*! ./function/trigonometry/coth */ 436);
	  docs.csc = __webpack_require__(/*! ./function/trigonometry/csc */ 437);
	  docs.csch = __webpack_require__(/*! ./function/trigonometry/csch */ 438);
	  docs.sec = __webpack_require__(/*! ./function/trigonometry/sec */ 439);
	  docs.sech = __webpack_require__(/*! ./function/trigonometry/sech */ 440);
	  docs.sin = __webpack_require__(/*! ./function/trigonometry/sin */ 441);
	  docs.sinh = __webpack_require__(/*! ./function/trigonometry/sinh */ 442);
	  docs.tan = __webpack_require__(/*! ./function/trigonometry/tan */ 443);
	  docs.tanh = __webpack_require__(/*! ./function/trigonometry/tanh */ 444);

	// functions - units
	  docs.to = __webpack_require__(/*! ./function/units/to */ 445);

	// functions - utils
	  docs.clone =  __webpack_require__(/*! ./function/utils/clone */ 446);
	  docs.map =  __webpack_require__(/*! ./function/utils/map */ 447);
	  docs.partitionSelect =  __webpack_require__(/*! ./function/utils/partitionSelect */ 448);
	  docs.filter =  __webpack_require__(/*! ./function/utils/filter */ 449);
	  docs.forEach =  __webpack_require__(/*! ./function/utils/forEach */ 450);
	  docs.format =  __webpack_require__(/*! ./function/utils/format */ 451);
	  docs.isInteger =  __webpack_require__(/*! ./function/utils/isInteger */ 452);
	  docs.isNegative =  __webpack_require__(/*! ./function/utils/isNegative */ 453);
	  docs.isNumeric =  __webpack_require__(/*! ./function/utils/isNumeric */ 454);
	  docs.isPositive =  __webpack_require__(/*! ./function/utils/isPositive */ 455);
	  docs.isZero =  __webpack_require__(/*! ./function/utils/isZero */ 456);
	// docs.print =  require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.
	  docs['import'] =  __webpack_require__(/*! ./function/utils/import */ 457);
	  docs.sort =  __webpack_require__(/*! ./function/utils/sort */ 458);
	  docs['typeof'] =  __webpack_require__(/*! ./function/utils/typeof */ 459);
	  
	  return docs;
	}

	exports.name = 'docs';
	exports.path = 'expression';
	exports.factory = factory;


/***/ },
/* 297 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/bignumber.js ***!
  \********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'bignumber',
	  'category': 'Type',
	  'syntax': [
	    'bignumber(x)'
	  ],
	  'description':
	      'Create a big number from a number or string.',
	  'examples': [
	    '0.1 + 0.2',
	    'bignumber(0.1) + bignumber(0.2)',
	    'bignumber("7.2")',
	    'bignumber("7.2e500")',
	    'bignumber([0.1, 0.2, 0.3])'
	  ],
	  'seealso': [
	    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
	  ]
	};


/***/ },
/* 298 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/boolean.js ***!
  \******************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'boolean',
	  'category': 'Type',
	  'syntax': [
	    'x',
	    'boolean(x)'
	  ],
	  'description':
	      'Convert a string or number into a boolean.',
	  'examples': [
	    'boolean(0)',
	    'boolean(1)',
	    'boolean(3)',
	    'boolean("true")',
	    'boolean("false")',
	    'boolean([1, 0, 1, 1])'
	  ],
	  'seealso': [
	    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'
	  ]
	};


/***/ },
/* 299 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/complex.js ***!
  \******************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'complex',
	  'category': 'Type',
	  'syntax': [
	    'complex()',
	    'complex(re, im)',
	    'complex(string)'
	  ],
	  'description':
	      'Create a complex number.',
	  'examples': [
	    'complex()',
	    'complex(2, 3)',
	    'complex("7 - 2i")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'
	  ]
	};


/***/ },
/* 300 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/fraction.js ***!
  \*******************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'fraction',
	  'category': 'Type',
	  'syntax': [
	    'fraction(num)',
	    'fraction(num,den)'
	  ],
	  'description':
	    'Create a fraction from a number or from a numerator and denominator.',
	  'examples': [
	    'fraction(0.125)',
	    'fraction(1, 3) + fraction(2, 5)'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'
	  ]
	};


/***/ },
/* 301 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/index.js ***!
  \****************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'index',
	  'category': 'Type',
	  'syntax': [
	    '[start]',
	    '[start:end]',
	    '[start:step:end]',
	    '[start1, start 2, ...]',
	    '[start1:end1, start2:end2, ...]',
	    '[start1:step1:end1, start2:step2:end2, ...]'
	  ],
	  'description':
	      'Create an index to get or replace a subset of a matrix',
	  'examples': [
	    '[]',
	    '[1, 2, 3]',
	    'A = [1, 2, 3; 4, 5, 6]',
	    'A[1, :]',
	    'A[1, 2] = 50',
	    'A[0:2, 0:2] = ones(2, 2)'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'
	  ]
	};


/***/ },
/* 302 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/matrix.js ***!
  \*****************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'matrix',
	  'category': 'Type',
	  'syntax': [
	    '[]',
	    '[a1, b1, ...; a2, b2, ...]',
	    'matrix()',
	    'matrix("dense")',
	    'matrix([...])'
	  ],
	  'description':
	      'Create a matrix.',
	  'examples': [
	    '[]',
	    '[1, 2, 3]',
	    '[1, 2, 3; 4, 5, 6]',
	    'matrix()',
	    'matrix([3, 4])',
	    'matrix([3, 4; 5, 6], "sparse")',
	    'matrix([3, 4; 5, 6], "sparse", "number")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'
	  ]
	};


/***/ },
/* 303 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/number.js ***!
  \*****************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'number',
	  'category': 'Type',
	  'syntax': [
	    'x',
	    'number(x)'
	  ],
	  'description':
	      'Create a number or convert a string or boolean into a number.',
	  'examples': [
	    '2',
	    '2e3',
	    '4.05',
	    'number(2)',
	    'number("7.2")',
	    'number(true)',
	    'number([true, false, true, true])',
	    'number("52cm", "m")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
	  ]
	};


/***/ },
/* 304 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/sparse.js ***!
  \*****************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'sparse',
	  'category': 'Type',
	  'syntax': [
	    'sparse()',
	    'sparse([a1, b1, ...; a1, b2, ...])',
	    'sparse([a1, b1, ...; a1, b2, ...], "number")'
	  ],
	  'description':
	  'Create a sparse matrix.',
	  'examples': [
	    'sparse()',
	    'sparse([3, 4; 5, 6])',
	    'sparse([3, 0; 5, 0], "number")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'
	  ]
	};


/***/ },
/* 305 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/string.js ***!
  \*****************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'string',
	  'category': 'Type',
	  'syntax': [
	    '"text"',
	    'string(x)'
	  ],
	  'description':
	      'Create a string or convert a value to a string',
	  'examples': [
	    '"Hello World!"',
	    'string(4.2)',
	    'string(3 + 2i)'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'
	  ]
	};


/***/ },
/* 306 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/type/unit.js ***!
  \***************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'unit',
	  'category': 'Type',
	  'syntax': [
	    'value unit',
	    'unit(value, unit)',
	    'unit(string)'
	  ],
	  'description':
	      'Create a unit.',
	  'examples': [
	    '5.5 mm',
	    '3 inch',
	    'unit(7.1, "kilogram")',
	    'unit("23 deg")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'
	  ]
	};


/***/ },
/* 307 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/e.js ***!
  \*****************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'e',
	  'category': 'Constants',
	  'syntax': [
	    'e'
	  ],
	  'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
	  'examples': [
	    'e',
	    'e ^ 2',
	    'exp(2)',
	    'log(e)'
	  ],
	  'seealso': ['exp']
	};


/***/ },
/* 308 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/false.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'false',
	  'category': 'Constants',
	  'syntax': [
	    'false'
	  ],
	  'description': 'Boolean value false',
	  'examples': [
	    'false'
	  ],
	  'seealso': ['true']
	};


/***/ },
/* 309 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/i.js ***!
  \*****************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'i',
	  'category': 'Constants',
	  'syntax': [
	    'i'
	  ],
	  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
	  'examples': [
	    'i',
	    'i * i',
	    'sqrt(-1)'
	  ],
	  'seealso': []
	};


/***/ },
/* 310 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/Infinity.js ***!
  \************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'Infinity',
	  'category': 'Constants',
	  'syntax': [
	    'Infinity'
	  ],
	  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
	  'examples': [
	    'Infinity',
	    '1 / 0'
	  ],
	  'seealso': []
	};


/***/ },
/* 311 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/LN2.js ***!
  \*******************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'LN2',
	  'category': 'Constants',
	  'syntax': [
	    'LN2'
	  ],
	  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
	  'examples': [
	    'LN2',
	    'log(2)'
	  ],
	  'seealso': []
	};


/***/ },
/* 312 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/LN10.js ***!
  \********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'LN10',
	  'category': 'Constants',
	  'syntax': [
	    'LN10'
	  ],
	  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
	  'examples': [
	    'LN10',
	    'log(10)'
	  ],
	  'seealso': []
	};


/***/ },
/* 313 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/LOG2E.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'LOG2E',
	  'category': 'Constants',
	  'syntax': [
	    'LOG2E'
	  ],
	  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
	  'examples': [
	    'LOG2E',
	    'log(e, 2)'
	  ],
	  'seealso': []
	};


/***/ },
/* 314 */
/*!**********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/LOG10E.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'LOG10E',
	  'category': 'Constants',
	  'syntax': [
	    'LOG10E'
	  ],
	  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
	  'examples': [
	    'LOG10E',
	    'log(e, 10)'
	  ],
	  'seealso': []
	};


/***/ },
/* 315 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/NaN.js ***!
  \*******************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'NaN',
	  'category': 'Constants',
	  'syntax': [
	    'NaN'
	  ],
	  'description': 'Not a number',
	  'examples': [
	    'NaN',
	    '0 / 0'
	  ],
	  'seealso': []
	};


/***/ },
/* 316 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/null.js ***!
  \********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'null',
	  'category': 'Constants',
	  'syntax': [
	    'null'
	  ],
	  'description': 'Value null',
	  'examples': [
	    'null'
	  ],
	  'seealso': ['true', 'false']
	};


/***/ },
/* 317 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/pi.js ***!
  \******************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'pi',
	  'category': 'Constants',
	  'syntax': [
	    'pi'
	  ],
	  'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
	  'examples': [
	    'pi',
	    'sin(pi/2)'
	  ],
	  'seealso': ['tau']
	};


/***/ },
/* 318 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/phi.js ***!
  \*******************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'phi',
	  'category': 'Constants',
	  'syntax': [
	    'phi'
	  ],
	  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
	  'examples': [
	    'tau'
	  ],
	  'seealso': []
	};


/***/ },
/* 319 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/SQRT1_2.js ***!
  \***********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'SQRT1_2',
	  'category': 'Constants',
	  'syntax': [
	    'SQRT1_2'
	  ],
	  'description': 'Returns the square root of 1/2, approximately equal to 0.707',
	  'examples': [
	    'SQRT1_2',
	    'sqrt(1/2)'
	  ],
	  'seealso': []
	};


/***/ },
/* 320 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/SQRT2.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'SQRT2',
	  'category': 'Constants',
	  'syntax': [
	    'SQRT2'
	  ],
	  'description': 'Returns the square root of 2, approximately equal to 1.414',
	  'examples': [
	    'SQRT2',
	    'sqrt(2)'
	  ],
	  'seealso': []
	};


/***/ },
/* 321 */
/*!*******************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/tau.js ***!
  \*******************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'tau',
	  'category': 'Constants',
	  'syntax': [
	    'tau'
	  ],
	  'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
	  'examples': [
	    'tau',
	    '2 * pi'
	  ],
	  'seealso': ['pi']
	};


/***/ },
/* 322 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/true.js ***!
  \********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'true',
	  'category': 'Constants',
	  'syntax': [
	    'true'
	  ],
	  'description': 'Boolean value true',
	  'examples': [
	    'true'
	  ],
	  'seealso': ['false']
	};


/***/ },
/* 323 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/constants/version.js ***!
  \***********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'version',
	  'category': 'Constants',
	  'syntax': [
	    'version'
	  ],
	  'description': 'A string with the version number of math.js',
	  'examples': [
	    'version'
	  ],
	  'seealso': []
	};


/***/ },
/* 324 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/algebra/lsolve.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'lsolve',
	  'category': 'Algebra',
	  'syntax': [
	    'x=lsolve(L, b)'
	  ],
	  'description':
	  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
	  'examples': [
	    'a = [-2, 3; 2, 1]',
	    'b = [11, 9]',
	    'x = lsolve(a, b)'
	  ],
	  'seealso': [
	    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'
	  ]
	};


/***/ },
/* 325 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/algebra/lup.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'lup',
	  'category': 'Algebra',
	  'syntax': [
	    'lup(m)'
	  ],
	  'description':
	  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
	  'examples': [
	    'lup([[2, 1], [1, 4]])',
	    'lup(matrix([[2, 1], [1, 4]]))',
	    'lup(sparse([[2, 1], [1, 4]]))',
	  ],
	  'seealso': [
	    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu'
	  ]
	};


/***/ },
/* 326 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/algebra/lusolve.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'lusolve',
	  'category': 'Algebra',
	  'syntax': [
	    'x=lusolve(A, b)',
	    'x=lusolve(lu, b)'
	  ],
	  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
	  'examples': [
	    'a = [-2, 3; 2, 1]',
	    'b = [11, 9]',
	    'x = lusolve(a, b)'
	  ],
	  'seealso': [
	    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'
	  ]
	};


/***/ },
/* 327 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/algebra/slu.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'slu',
	  'category': 'Algebra',
	  'syntax': [
	    'slu(A, order, threshold)'
	  ],
	  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
	  'examples': [
	    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'
	  ],
	  'seealso': [
	    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup'
	  ]
	};


/***/ },
/* 328 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/algebra/usolve.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'usolve',
	  'category': 'Algebra',
	  'syntax': [
	    'x=usolve(U, b)'
	  ],
	  'description':
	  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
	  'examples': [
	    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])',
	  ],
	  'seealso': [
	    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'
	  ]
	};


/***/ },
/* 329 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/abs.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'abs',
	  'category': 'Arithmetic',
	  'syntax': [
	    'abs(x)'
	  ],
	  'description': 'Compute the absolute value.',
	  'examples': [
	    'abs(3.5)',
	    'abs(-4.2)'
	  ],
	  'seealso': ['sign']
	};


/***/ },
/* 330 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/add.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'add',
	  'category': 'Operators',
	  'syntax': [
	    'x + y',
	    'add(x, y)'
	  ],
	  'description': 'Add two values.',
	  'examples': [
	    'a = 2.1 + 3.6',
	    'a - 3.6',
	    '3 + 2i',
	    '3 cm + 2 inch',
	    '"2.3" + "4"'
	  ],
	  'seealso': [
	    'subtract'
	  ]
	};


/***/ },
/* 331 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/ceil.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'ceil',
	  'category': 'Arithmetic',
	  'syntax': [
	    'ceil(x)'
	  ],
	  'description':
	      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
	  'examples': [
	    'ceil(3.2)',
	    'ceil(3.8)',
	    'ceil(-4.2)'
	  ],
	  'seealso': ['floor', 'fix', 'round']
	};


/***/ },
/* 332 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/cube.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'cube',
	  'category': 'Arithmetic',
	  'syntax': [
	    'cube(x)'
	  ],
	  'description': 'Compute the cube of a value. The cube of x is x * x * x.',
	  'examples': [
	    'cube(2)',
	    '2^3',
	    '2 * 2 * 2'
	  ],
	  'seealso': [
	    'multiply',
	    'square',
	    'pow'
	  ]
	};


/***/ },
/* 333 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/divide.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'divide',
	  'category': 'Operators',
	  'syntax': [
	    'x / y',
	    'divide(x, y)'
	  ],
	  'description': 'Divide two values.',
	  'examples': [
	    'a = 2 / 3',
	    'a * 3',
	    '4.5 / 2',
	    '3 + 4 / 2',
	    '(3 + 4) / 2',
	    '18 km / 4.5'
	  ],
	  'seealso': [
	    'multiply'
	  ]
	};


/***/ },
/* 334 */
/*!***********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/dotDivide.js ***!
  \***********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'dotDivide',
	  'category': 'Operators',
	  'syntax': [
	    'x ./ y',
	    'dotDivide(x, y)'
	  ],
	  'description': 'Divide two values element wise.',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'b = [2, 1, 1; 3, 2, 5]',
	    'a ./ b'
	  ],
	  'seealso': [
	    'multiply',
	    'dotMultiply',
	    'divide'
	  ]
	};


/***/ },
/* 335 */
/*!*************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/dotMultiply.js ***!
  \*************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'dotMultiply',
	  'category': 'Operators',
	  'syntax': [
	    'x .* y',
	    'dotMultiply(x, y)'
	  ],
	  'description': 'Multiply two values element wise.',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'b = [2, 1, 1; 3, 2, 5]',
	    'a .* b'
	  ],
	  'seealso': [
	    'multiply',
	    'divide',
	    'dotDivide'
	  ]
	};


/***/ },
/* 336 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/dotPow.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'dotpow',
	  'category': 'Operators',
	  'syntax': [
	    'x .^ y',
	    'dotpow(x, y)'
	  ],
	  'description':
	      'Calculates the power of x to y element wise.',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'a .^ 2'
	  ],
	  'seealso': [
	    'pow'
	  ]
	};


/***/ },
/* 337 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/exp.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'exp',
	  'category': 'Arithmetic',
	  'syntax': [
	    'exp(x)'
	  ],
	  'description': 'Calculate the exponent of a value.',
	  'examples': [
	    'exp(1.3)',
	    'e ^ 1.3',
	    'log(exp(1.3))',
	    'x = 2.4',
	    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'
	  ],
	  'seealso': [
	    'pow',
	    'log'
	  ]
	};


/***/ },
/* 338 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/fix.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'fix',
	  'category': 'Arithmetic',
	  'syntax': [
	    'fix(x)'
	  ],
	  'description':
	      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
	  'examples': [
	    'fix(3.2)',
	    'fix(3.8)',
	    'fix(-4.2)',
	    'fix(-4.8)'
	  ],
	  'seealso': ['ceil', 'floor', 'round']
	};


/***/ },
/* 339 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/floor.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'floor',
	  'category': 'Arithmetic',
	  'syntax': [
	    'floor(x)'
	  ],
	  'description':
	      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
	  'examples': [
	    'floor(3.2)',
	    'floor(3.8)',
	    'floor(-4.2)'
	  ],
	  'seealso': ['ceil', 'fix', 'round']
	};


/***/ },
/* 340 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/gcd.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'gcd',
	  'category': 'Arithmetic',
	  'syntax': [
	    'gcd(a, b)',
	    'gcd(a, b, c, ...)'
	  ],
	  'description': 'Compute the greatest common divisor.',
	  'examples': [
	    'gcd(8, 12)',
	    'gcd(-4, 6)',
	    'gcd(25, 15, -10)'
	  ],
	  'seealso': [ 'lcm', 'xgcd' ]
	};


/***/ },
/* 341 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/lcm.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'lcm',
	  'category': 'Arithmetic',
	  'syntax': [
	    'lcm(x, y)'
	  ],
	  'description': 'Compute the least common multiple.',
	  'examples': [
	    'lcm(4, 6)',
	    'lcm(6, 21)',
	    'lcm(6, 21, 5)'
	  ],
	  'seealso': [ 'gcd' ]
	};


/***/ },
/* 342 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/log.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'log',
	  'category': 'Arithmetic',
	  'syntax': [
	    'log(x)',
	    'log(x, base)'
	  ],
	  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
	  'examples': [
	    'log(3.5)',
	    'a = log(2.4)',
	    'exp(a)',
	    '10 ^ 4',
	    'log(10000, 10)',
	    'log(10000) / log(10)',
	    'b = log(1024, 2)',
	    '2 ^ b'
	  ],
	  'seealso': [
	    'exp',
	    'log10'
	  ]
	};

/***/ },
/* 343 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/log10.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'log10',
	  'category': 'Arithmetic',
	  'syntax': [
	    'log10(x)'
	  ],
	  'description': 'Compute the 10-base logarithm of a value.',
	  'examples': [
	    'log10(0.00001)',
	    'log10(10000)',
	    '10 ^ 4',
	    'log(10000) / log(10)',
	    'log(10000, 10)'
	  ],
	  'seealso': [
	    'exp',
	    'log'
	  ]
	};


/***/ },
/* 344 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/mod.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'mod',
	  'category': 'Operators',
	  'syntax': [
	    'x % y',
	    'x mod y',
	    'mod(x, y)'
	  ],
	  'description':
	      'Calculates the modulus, the remainder of an integer division.',
	  'examples': [
	    '7 % 3',
	    '11 % 2',
	    '10 mod 4',
	    'function isOdd(x) = x % 2',
	    'isOdd(2)',
	    'isOdd(3)'
	  ],
	  'seealso': ['divide']
	};


/***/ },
/* 345 */
/*!**********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/multiply.js ***!
  \**********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'multiply',
	  'category': 'Operators',
	  'syntax': [
	    'x * y',
	    'multiply(x, y)'
	  ],
	  'description': 'multiply two values.',
	  'examples': [
	    'a = 2.1 * 3.4',
	    'a / 3.4',
	    '2 * 3 + 4',
	    '2 * (3 + 4)',
	    '3 * 2.1 km'
	  ],
	  'seealso': [
	    'divide'
	  ]
	};


/***/ },
/* 346 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/norm.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'norm',
	  'category': 'Arithmetic',
	  'syntax': [
	    'norm(x)',
	    'norm(x, p)'
	  ],
	  'description': 'Calculate the norm of a number, vector or matrix.',
	  'examples': [
	    'abs(-3.5)',
	    'norm(-3.5)',
	    'norm(3 - 4i))',
	    'norm([1, 2, -3], Infinity)',
	    'norm([1, 2, -3], -Infinity)',
	    'norm([3, 4], 2)',
	    'norm([[1, 2], [3, 4]], 1)',
	    'norm([[1, 2], [3, 4]], \'inf\')',
	    'norm([[1, 2], [3, 4]], \'fro\')'
	  ]
	};


/***/ },
/* 347 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/nthRoot.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'nthRoot',
	  'category': 'Arithmetic',
	  'syntax': [
	    'nthRoot(a)',
	    'nthRoot(a, root)'
	  ],
	  'description': 'Calculate the nth root of a value. ' +
	      'The principal nth root of a positive real number A, ' +
	      'is the positive real solution of the equation "x^root = A".',
	  'examples': [
	    '4 ^ 3',
	    'nthRoot(64, 3)',
	    'nthRoot(9, 2)',
	    'sqrt(9)'
	  ],
	  'seealso': [
	    'sqrt',
	    'pow'
	  ]
	};

/***/ },
/* 348 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/pow.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'pow',
	  'category': 'Operators',
	  'syntax': [
	    'x ^ y',
	    'pow(x, y)'
	  ],
	  'description':
	      'Calculates the power of x to y, x^y.',
	  'examples': [
	    '2^3 = 8',
	    '2*2*2',
	    '1 + e ^ (pi * i)'
	  ],
	  'seealso': [ 'multiply' ]
	};


/***/ },
/* 349 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/round.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'round',
	  'category': 'Arithmetic',
	  'syntax': [
	    'round(x)',
	    'round(x, n)'
	  ],
	  'description':
	      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
	  'examples': [
	    'round(3.2)',
	    'round(3.8)',
	    'round(-4.2)',
	    'round(-4.8)',
	    'round(pi, 3)',
	    'round(123.45678, 2)'
	  ],
	  'seealso': ['ceil', 'floor', 'fix']
	};


/***/ },
/* 350 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/sign.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'sign',
	  'category': 'Arithmetic',
	  'syntax': [
	    'sign(x)'
	  ],
	  'description':
	      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
	  'examples': [
	    'sign(3.5)',
	    'sign(-4.2)',
	    'sign(0)'
	  ],
	  'seealso': [
	    'abs'
	  ]
	};


/***/ },
/* 351 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/sqrt.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'sqrt',
	  'category': 'Arithmetic',
	  'syntax': [
	    'sqrt(x)'
	  ],
	  'description':
	      'Compute the square root value. If x = y * y, then y is the square root of x.',
	  'examples': [
	    'sqrt(25)',
	    '5 * 5',
	    'sqrt(-1)'
	  ],
	  'seealso': [
	    'square',
	    'multiply'
	  ]
	};


/***/ },
/* 352 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/square.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'square',
	  'category': 'Arithmetic',
	  'syntax': [
	    'square(x)'
	  ],
	  'description':
	      'Compute the square of a value. The square of x is x * x.',
	  'examples': [
	    'square(3)',
	    'sqrt(9)',
	    '3^2',
	    '3 * 3'
	  ],
	  'seealso': [
	    'multiply',
	    'pow',
	    'sqrt',
	    'cube'
	  ]
	};


/***/ },
/* 353 */
/*!**********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/subtract.js ***!
  \**********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'subtract',
	  'category': 'Operators',
	  'syntax': [
	    'x - y',
	    'subtract(x, y)'
	  ],
	  'description': 'subtract two values.',
	  'examples': [
	    'a = 5.3 - 2',
	    'a + 2',
	    '2/3 - 1/6',
	    '2 * 3 - 3',
	    '2.1 km - 500m'
	  ],
	  'seealso': [
	    'add'
	  ]
	};


/***/ },
/* 354 */
/*!************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/unaryMinus.js ***!
  \************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'unaryMinus',
	  'category': 'Operators',
	  'syntax': [
	    '-x',
	    'unaryMinus(x)'
	  ],
	  'description':
	      'Inverse the sign of a value. Converts booleans and strings to numbers.',
	  'examples': [
	    '-4.5',
	    '-(-5.6)',
	    '-"22"'
	  ],
	  'seealso': [
	    'add', 'subtract', 'unaryPlus'
	  ]
	};


/***/ },
/* 355 */
/*!***********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/unaryPlus.js ***!
  \***********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'unaryPlus',
	  'category': 'Operators',
	  'syntax': [
	    '+x',
	    'unaryPlus(x)'
	  ],
	  'description':
	      'Converts booleans and strings to numbers.',
	  'examples': [
	    '+true',
	    '+"2"'
	  ],
	  'seealso': [
	    'add', 'subtract', 'unaryMinus'
	  ]
	};


/***/ },
/* 356 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/arithmetic/xgcd.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'xgcd',
	  'category': 'Arithmetic',
	  'syntax': [
	    'xgcd(a, b)'
	  ],
	  'description': 'Calculate the extended greatest common divisor for two values',
	  'examples': [
	    'xgcd(8, 12)',
	    'gcd(8, 12)',
	    'xgcd(36163, 21199)'
	  ],
	  'seealso': [ 'gcd', 'lcm' ]
	};


/***/ },
/* 357 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/bitwise/bitAnd.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'bitAnd',
	  'category': 'Bitwise',
	  'syntax': [
	    'x & y',
	    'bitAnd(x, y)'
	  ],
	  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
	  'examples': [
	    '5 & 3',
	    'bitAnd(53, 131)',
	    '[1, 12, 31] & 42'
	  ],
	  'seealso': [
	    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ },
/* 358 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/bitwise/bitNot.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'bitNot',
	  'category': 'Bitwise',
	  'syntax': [
	    '~x',
	    'bitNot(x)'
	  ],
	  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
	  'examples': [
	    '~1',
	    '~2',
	    'bitNot([2, -3, 4])'
	  ],
	  'seealso': [
	    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ },
/* 359 */
/*!****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/bitwise/bitOr.js ***!
  \****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'bitOr',
	  'category': 'Bitwise',
	  'syntax': [
	    'x | y',
	    'bitOr(x, y)'
	  ],
	  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
	  'examples': [
	    '5 | 3',
	    'bitOr([1, 2, 3], 4)'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ },
/* 360 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/bitwise/bitXor.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'bitXor',
	  'category': 'Bitwise',
	  'syntax': [
	    'bitXor(x, y)'
	  ],
	  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
	  'examples': [
	    'bitOr(1, 2)',
	    'bitXor([2, 3, 4], 4)'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ },
/* 361 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/bitwise/leftShift.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'leftShift',
	  'category': 'Bitwise',
	  'syntax': [
	    'x << y',
	    'leftShift(x, y)'
	  ],
	  'description': 'Bitwise left logical shift of a value x by y number of bits.',
	  'examples': [
	    '4 << 1',
	    '8 >> 1'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ },
/* 362 */
/*!**************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/bitwise/rightArithShift.js ***!
  \**************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'rightArithShift',
	  'category': 'Bitwise',
	  'syntax': [
	    'x >> y',
	    'leftShift(x, y)'
	  ],
	  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
	  'examples': [
	    '8 >> 1',
	    '4 << 1',
	    '-12 >> 2'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'
	  ]
	};


/***/ },
/* 363 */
/*!************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/bitwise/rightLogShift.js ***!
  \************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'rightLogShift',
	  'category': 'Bitwise',
	  'syntax': [
	    'x >> y',
	    'leftShift(x, y)'
	  ],
	  'description': 'Bitwise right logical shift of a value x by y number of bits.',
	  'examples': [
	    '8 >>> 1',
	    '4 << 1',
	    '-12 >>> 2'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'
	  ]
	};


/***/ },
/* 364 */
/*!****************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/combinatorics/bellNumbers.js ***!
  \****************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'bellNumbers',
	  'category': 'Combinatorics',
	  'syntax': [
	    'bellNumbers(n)'
	  ],
	  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
	  'examples': [
	    'bellNumbers(3)',
	    'bellNumbers(8)'
	  ],
	  'seealso': ['stirlingS2']
	};

/***/ },
/* 365 */
/*!****************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/combinatorics/composition.js ***!
  \****************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'composition',
	  'category': 'Combinatorics',
	  'syntax': [
	    'composition(n, k)'
	  ],
	  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
	  'examples': [
	    'composition(5, 3)'
	  ],
	  'seealso': ['combinations']
	};

/***/ },
/* 366 */
/*!***************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/combinatorics/stirlingS2.js ***!
  \***************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'stirlingS2',
	  'category': 'Combinatorics',
	  'syntax': [
	    'stirlingS2(n, k)'
	  ],
	  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
	  'examples': [
	    'stirlingS2(5, 3)'
	  ],
	  'seealso': ['bellNumbers']
	};


/***/ },
/* 367 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/complex/arg.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'arg',
	  'category': 'Complex',
	  'syntax': [
	    'arg(x)'
	  ],
	  'description':
	      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
	  'examples': [
	    'arg(2 + 2i)',
	    'atan2(3, 2)',
	    'arg(2 + 3i)'
	  ],
	  'seealso': [
	    're',
	    'im',
	    'conj',
	    'abs'
	  ]
	};


/***/ },
/* 368 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/complex/conj.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'conj',
	  'category': 'Complex',
	  'syntax': [
	    'conj(x)'
	  ],
	  'description':
	      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
	  'examples': [
	    'conj(2 + 3i)',
	    'conj(2 - 3i)',
	    'conj(-5.2i)'
	  ],
	  'seealso': [
	    're',
	    'im',
	    'abs',
	    'arg'
	  ]
	};


/***/ },
/* 369 */
/*!*************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/complex/re.js ***!
  \*************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 're',
	  'category': 'Complex',
	  'syntax': [
	    're(x)'
	  ],
	  'description': 'Get the real part of a complex number.',
	  'examples': [
	    're(2 + 3i)',
	    'im(2 + 3i)',
	    're(-5.2i)',
	    're(2.4)'
	  ],
	  'seealso': [
	    'im',
	    'conj',
	    'abs',
	    'arg'
	  ]
	};


/***/ },
/* 370 */
/*!*************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/complex/im.js ***!
  \*************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'im',
	  'category': 'Complex',
	  'syntax': [
	    'im(x)'
	  ],
	  'description': 'Get the imaginary part of a complex number.',
	  'examples': [
	    'im(2 + 3i)',
	    're(2 + 3i)',
	    'im(-5.2i)',
	    'im(2.4)'
	  ],
	  'seealso': [
	    're',
	    'conj',
	    'abs',
	    'arg'
	  ]
	};


/***/ },
/* 371 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/expression/eval.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'eval',
	  'category': 'Expression',
	  'syntax': [
	    'eval(expression)',
	    'eval([expr1, expr2, expr3, ...])'
	  ],
	  'description': 'Evaluate an expression or an array with expressions.',
	  'examples': [
	    'eval("2 + 3")',
	    'eval("sqrt(" + 4 + ")")'
	  ],
	  'seealso': []
	};


/***/ },
/* 372 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/expression/help.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'help',
	  'category': 'Expression',
	  'syntax': [
	    'help(object)',
	    'help(string)'
	  ],
	  'description': 'Display documentation on a function or data type.',
	  'examples': [
	    'help(sqrt)',
	    'help("complex")'
	  ],
	  'seealso': []
	};


/***/ },
/* 373 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/geometry/intersect.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'intersect',
	  'category': 'Geometry',
	  'syntax': [
	    'intersect(expr1, expr2, expr3, expr4)',
	    'intersect(expr1, expr2, expr3)'
	  ],
	  'description': 'Computes the intersection point of lines and/or planes.',
	  'examples': [
	    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',
	    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'
	  ],
	  'seealso': []
	};


/***/ },
/* 374 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/logical/and.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'and',
	  'category': 'Logical',
	  'syntax': [
	    'x and y',
	    'and(x, y)'
	  ],
	  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
	  'examples': [
	    'true and false',
	    'true and true',
	    '2 and 4'
	  ],
	  'seealso': [
	    'not', 'or', 'xor'
	  ]
	};


/***/ },
/* 375 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/logical/not.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'not',
	  'category': 'Logical',
	  'syntax': [
	    '!x',
	    'not x',
	    'not(x)'
	  ],
	  'description': 'Logical not. Flips the boolean value of given argument.',
	  'examples': [
	    '!true',
	    'not false',
	    '!2',
	    '!0'
	  ],
	  'seealso': [
	    'and', 'or', 'xor'
	  ]
	};


/***/ },
/* 376 */
/*!*************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/logical/or.js ***!
  \*************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'or',
	  'category': 'Logical',
	  'syntax': [
	    'x or y',
	    'or(x, y)'
	  ],
	  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
	  'examples': [
	    'true or false',
	    'false or false',
	    '0 or 4'
	  ],
	  'seealso': [
	    'not', 'and', 'xor'
	  ]
	};


/***/ },
/* 377 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/logical/xor.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'xor',
	  'category': 'Logical',
	  'syntax': [
	    'x or y',
	    'or(x, y)'
	  ],
	  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
	  'examples': [
	    'true xor false',
	    'false xor false',
	    'true xor true',
	    '0 or 4'
	  ],
	  'seealso': [
	    'not', 'and', 'or'
	  ]
	};


/***/ },
/* 378 */
/*!****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/concat.js ***!
  \****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'concat',
	  'category': 'Matrix',
	  'syntax': [
	    'concat(A, B, C, ...)',
	    'concat(A, B, C, ..., dim)'
	  ],
	  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
	  'examples': [
	    'A = [1, 2; 5, 6]',
	    'B = [3, 4; 7, 8]',
	    'concat(A, B)',
	    'concat(A, B, 1)',
	    'concat(A, B, 2)'
	  ],
	  'seealso': [
	    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 379 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/cross.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'cross',
	  'category': 'Matrix',
	  'syntax': [
	    'cross(A, B)'
	  ],
	  'description': 'Calculate the cross product for two vectors in three dimensional space.',
	  'examples': [
	    'cross([1, 1, 0],  [0, 1, 1])',
	    'cross([3, -3, 1], [4, 9, 2])',
	    'cross([2, 3, 4],  [5, 6, 7])'
	  ],
	  'seealso': [
	    'multiply',
	    'dot'
	  ]
	};


/***/ },
/* 380 */
/*!*************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/det.js ***!
  \*************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'det',
	  'category': 'Matrix',
	  'syntax': [
	    'det(x)'
	  ],
	  'description': 'Calculate the determinant of a matrix',
	  'examples': [
	    'det([1, 2; 3, 4])',
	    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'
	  ],
	  'seealso': [
	    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 381 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/diag.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'diag',
	  'category': 'Matrix',
	  'syntax': [
	    'diag(x)',
	    'diag(x, k)'
	  ],
	  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
	  'examples': [
	    'diag(1:3)',
	    'diag(1:3, 1)',
	    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',
	    'diag(a)'
	  ],
	  'seealso': [
	    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 382 */
/*!*************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/dot.js ***!
  \*************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'dot',
	  'category': 'Matrix',
	  'syntax': [
	    'dot(A, B)'
	  ],
	  'description': 'Calculate the dot product of two vectors. ' +
	      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +
	      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
	  'examples': [
	    'dot([2, 4, 1], [2, 2, 3])',
	    '[2, 4, 1] * [2, 2, 3]'
	  ],
	  'seealso': [
	    'multiply',
	    'cross'
	  ]
	};


/***/ },
/* 383 */
/*!*************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/eye.js ***!
  \*************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'eye',
	  'category': 'Matrix',
	  'syntax': [
	    'eye(n)',
	    'eye(m, n)',
	    'eye([m, n])',
	    'eye'
	  ],
	  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
	  'examples': [
	    'eye(3)',
	    'eye(3, 5)',
	    'a = [1, 2, 3; 4, 5, 6]',
	    'eye(size(a))'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 384 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/flatten.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'flatten',
	  'category': 'Matrix',
	  'syntax': [
	    'flatten(x)'
	  ],
	  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'size(a)',
	    'b = flatten(a)',
	    'size(b)'
	  ],
	  'seealso': [
	    'concat', 'resize', 'size', 'squeeze'
	  ]
	};


/***/ },
/* 385 */
/*!*************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/inv.js ***!
  \*************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'inv',
	  'category': 'Matrix',
	  'syntax': [
	    'inv(x)'
	  ],
	  'description': 'Calculate the inverse of a matrix',
	  'examples': [
	    'inv([1, 2; 3, 4])',
	    'inv(4)',
	    '1 / 4'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 386 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/ones.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'ones',
	  'category': 'Matrix',
	  'syntax': [
	    'ones(m)',
	    'ones(m, n)',
	    'ones(m, n, p, ...)',
	    'ones([m])',
	    'ones([m, n])',
	    'ones([m, n, p, ...])',
	    'ones'
	  ],
	  'description': 'Create a matrix containing ones.',
	  'examples': [
	    'ones(3)',
	    'ones(3, 5)',
	    'ones([2,3]) * 4.5',
	    'a = [1, 2, 3; 4, 5, 6]',
	    'ones(size(a))'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 387 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/range.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'range',
	  'category': 'Type',
	  'syntax': [
	    'start:end',
	    'start:step:end',
	    'range(start, end)',
	    'range(start, end, step)',
	    'range(string)'
	  ],
	  'description':
	      'Create a range. Lower bound of the range is included, upper bound is excluded.',
	  'examples': [
	    '1:5',
	    '3:-1:-3',
	    'range(3, 7)',
	    'range(0, 12, 2)',
	    'range("4:10")',
	    'a = [1, 2, 3, 4; 5, 6, 7, 8]',
	    'a[1:2, 1:2]'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 388 */
/*!****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/resize.js ***!
  \****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'resize',
	  'category': 'Matrix',
	  'syntax': [
	    'resize(x, size)',
	    'resize(x, size, defaultValue)'
	  ],
	  'description': 'Resize a matrix.',
	  'examples': [
	    'resize([1,2,3,4,5], [3])',
	    'resize([1,2,3], [5])',
	    'resize([1,2,3], [5], -1)',
	    'resize(2, [2, 3])',
	    'resize("hello", [8], "!")'
	  ],
	  'seealso': [
	    'size', 'subset', 'squeeze'
	  ]
	};


/***/ },
/* 389 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/size.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'size',
	  'category': 'Matrix',
	  'syntax': [
	    'size(x)'
	  ],
	  'description': 'Calculate the size of a matrix.',
	  'examples': [
	    'size(2.3)',
	    'size("hello world")',
	    'a = [1, 2; 3, 4; 5, 6]',
	    'size(a)',
	    'size(1:6)'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 390 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/squeeze.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'squeeze',
	  'category': 'Matrix',
	  'syntax': [
	    'squeeze(x)'
	  ],
	  'description': 'Remove inner and outer singleton dimensions from a matrix.',
	  'examples': [
	    'a = zeros(3,2,1)',
	    'size(squeeze(a))',
	    'b = zeros(1,1,3)',
	    'size(squeeze(b))'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 391 */
/*!****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/subset.js ***!
  \****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'subset',
	  'category': 'Matrix',
	  'syntax': [
	    'value(index)',
	    'value(index) = replacement',
	    'subset(value, [index])',
	    'subset(value, [index], replacement)'
	  ],
	  'description': 'Get or set a subset of a matrix or string. ' +
	      'Indexes are one-based. ' +
	      'Both the ranges lower-bound and upper-bound are included.',
	  'examples': [
	    'd = [1, 2; 3, 4]',
	    'e = []',
	    'e[1, 1:2] = [5, 6]',
	    'e[2, :] = [7, 8]',
	    'f = d * e',
	    'f[2, 1]',
	    'f[:, 1]'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 392 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/trace.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'trace',
	  'category': 'Matrix',
	  'syntax': [
	    'trace(A)'
	  ],
	  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
	  'examples': [
	    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',
	    'trace(A)'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'
	  ]
	};


/***/ },
/* 393 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/transpose.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'transpose',
	  'category': 'Matrix',
	  'syntax': [
	    'x\'',
	    'transpose(x)'
	  ],
	  'description': 'Transpose a matrix',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'a\'',
	    'transpose(a)'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'
	  ]
	};


/***/ },
/* 394 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/matrix/zeros.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'zeros',
	  'category': 'Matrix',
	  'syntax': [
	    'zeros(m)',
	    'zeros(m, n)',
	    'zeros(m, n, p, ...)',
	    'zeros([m])',
	    'zeros([m, n])',
	    'zeros([m, n, p, ...])',
	    'zeros'
	  ],
	  'description': 'Create a matrix containing zeros.',
	  'examples': [
	    'zeros(3)',
	    'zeros(3, 5)',
	    'a = [1, 2, 3; 4, 5, 6]',
	    'zeros(size(a))'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'
	  ]
	};


/***/ },
/* 395 */
/*!***************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/probability/combinations.js ***!
  \***************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'combinations',
	  'category': 'Probability',
	  'syntax': [
	    'combinations(n, k)'
	  ],
	  'description': 'Compute the number of combinations of n items taken k at a time',
	  'examples': [
	    'combinations(7, 5)'
	  ],
	  'seealso': ['permutations', 'factorial']
	};


/***/ },
/* 396 */
/*!************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/probability/factorial.js ***!
  \************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'factorial',
	  'category': 'Probability',
	  'syntax': [
	    'n!',
	    'factorial(n)'
	  ],
	  'description': 'Compute the factorial of a value',
	  'examples': [
	    '5!',
	    '5 * 4 * 3 * 2 * 1',
	    '3!'
	  ],
	  'seealso': ['combinations', 'permutations', 'gamma']
	};


/***/ },
/* 397 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/probability/gamma.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'gamma',
	  'category': 'Probability',
	  'syntax': [
	    'gamma(n)'
	  ],
	  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
	  'examples': [
	    'gamma(4)',
	    '3!',
	    'gamma(1/2)',
	    'sqrt(pi)'
	  ],
	  'seealso': ['factorial']
	};


/***/ },
/* 398 */
/*!**************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/probability/multinomial.js ***!
  \**************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'multinomial',
	  'category': 'Probability',
	  'syntax': [
	    'multinomial(A)'
	  ],
	  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',
	  'examples': [
	    'multinomial([1, 2, 1])'
	  ],
	  'seealso': ['combinations', 'factorial']
	};

/***/ },
/* 399 */
/*!***************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/probability/permutations.js ***!
  \***************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'permutations',
	  'category': 'Probability',
	  'syntax': [
	    'permutations(n)',
	    'permutations(n, k)'
	  ],
	  'description': 'Compute the number of permutations of n items taken k at a time',
	  'examples': [
	    'permutations(5)',
	    'permutations(5, 3)'
	  ],
	  'seealso': ['combinations', 'factorial']
	};


/***/ },
/* 400 */
/*!*************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/probability/pickRandom.js ***!
  \*************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'pickRandom',
	  'category': 'Probability',
	  'syntax': [
	    'pickRandom(array)'
	  ],
	  'description':
	      'Pick a random entry from a given array.',
	  'examples': [
	    'pickRandom(0:10)',
	    'pickRandom([1, 3, 1, 6])'
	  ],
	  'seealso': ['random', 'randomInt']
	};


/***/ },
/* 401 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/probability/random.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'random',
	  'category': 'Probability',
	  'syntax': [
	    'random()',
	    'random(max)',
	    'random(min, max)',
	    'random(size)',
	    'random(size, max)',
	    'random(size, min, max)'
	  ],
	  'description':
	      'Return a random number.',
	  'examples': [
	    'random()',
	    'random(10, 20)',
	    'random([2, 3])'
	  ],
	  'seealso': ['pickRandom', 'randomInt']
	};


/***/ },
/* 402 */
/*!************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/probability/randomInt.js ***!
  \************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'randInt',
	  'category': 'Probability',
	  'syntax': [
	    'randInt(max)',
	    'randInt(min, max)',
	    'randInt(size)',
	    'randInt(size, max)',
	    'randInt(size, min, max)'
	  ],
	  'description':
	      'Return a random integer number',
	  'examples': [
	    'randInt(10, 20)',
	    'randInt([2, 3], 10)'
	  ],
	  'seealso': ['pickRandom', 'random']
	};

/***/ },
/* 403 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/relational/compare.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'compare',
	  'category': 'Relational',
	  'syntax': [
	    'compare(x, y)'
	  ],
	  'description':
	      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',
	  'examples': [
	    'compare(2, 3)',
	    'compare(3, 2)',
	    'compare(2, 2)',
	    'compare(5cm, 40mm)',
	    'compare(2, [1, 2, 3])'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq'
	  ]
	};


/***/ },
/* 404 */
/*!***********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/relational/deepEqual.js ***!
  \***********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'deepEqual',
	  'category': 'Relational',
	  'syntax': [
	    'deepEqual(x, y)'
	  ],
	  'description':
	      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
	  'examples': [
	    '[1,3,4] == [1,3,4]',
	    '[1,3,4] == [1,3]'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'
	  ]
	};


/***/ },
/* 405 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/relational/equal.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'equal',
	  'category': 'Relational',
	  'syntax': [
	    'x == y',
	    'equal(x, y)'
	  ],
	  'description':
	      'Check equality of two values. Returns true if the values are equal, and false if not.',
	  'examples': [
	    '2+2 == 3',
	    '2+2 == 4',
	    'a = 3.2',
	    'b = 6-2.8',
	    'a == b',
	    '50cm == 0.5m'
	  ],
	  'seealso': [
	    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
	  ]
	};


/***/ },
/* 406 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/relational/larger.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'larger',
	  'category': 'Relational',
	  'syntax': [
	    'x > y',
	    'larger(x, y)'
	  ],
	  'description':
	      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
	  'examples': [
	    '2 > 3',
	    '5 > 2*2',
	    'a = 3.3',
	    'b = 6-2.8',
	    '(a > b)',
	    '(b < a)',
	    '5 cm > 2 inch'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'
	  ]
	};


/***/ },
/* 407 */
/*!**********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/relational/largerEq.js ***!
  \**********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'largerEq',
	  'category': 'Relational',
	  'syntax': [
	    'x >= y',
	    'largerEq(x, y)'
	  ],
	  'description':
	      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
	  'examples': [
	    '2 > 1+1',
	    '2 >= 1+1',
	    'a = 3.2',
	    'b = 6-2.8',
	    '(a > b)'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'
	  ]
	};


/***/ },
/* 408 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/relational/smaller.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'smaller',
	  'category': 'Relational',
	  'syntax': [
	    'x < y',
	    'smaller(x, y)'
	  ],
	  'description':
	      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
	  'examples': [
	    '2 < 3',
	    '5 < 2*2',
	    'a = 3.3',
	    'b = 6-2.8',
	    '(a < b)',
	    '5 cm < 2 inch'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'
	  ]
	};


/***/ },
/* 409 */
/*!***********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/relational/smallerEq.js ***!
  \***********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'smallerEq',
	  'category': 'Relational',
	  'syntax': [
	    'x <= y',
	    'smallerEq(x, y)'
	  ],
	  'description':
	      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
	  'examples': [
	    '2 < 1+1',
	    '2 <= 1+1',
	    'a = 3.2',
	    'b = 6-2.8',
	    '(a < b)'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'
	  ]
	};


/***/ },
/* 410 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/relational/unequal.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'unequal',
	  'category': 'Relational',
	  'syntax': [
	    'x != y',
	    'unequal(x, y)'
	  ],
	  'description':
	      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
	  'examples': [
	    '2+2 != 3',
	    '2+2 != 4',
	    'a = 3.2',
	    'b = 6-2.8',
	    'a != b',
	    '50cm != 0.5m',
	    '5 cm != 2 inch'
	  ],
	  'seealso': [
	    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
	  ]
	};


/***/ },
/* 411 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/statistics/max.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'max',
	  'category': 'Statistics',
	  'syntax': [
	    'max(a, b, c, ...)',
	    'max(A)',
	    'max(A, dim)'
	  ],
	  'description': 'Compute the maximum value of a list of values.',
	  'examples': [
	    'max(2, 3, 4, 1)',
	    'max([2, 3, 4, 1])',
	    'max([2, 5; 4, 3])',
	    'max([2, 5; 4, 3], 1)',
	    'max([2, 5; 4, 3], 2)',
	    'max(2.7, 7.1, -4.5, 2.0, 4.1)',
	    'min(2.7, 7.1, -4.5, 2.0, 4.1)'
	  ],
	  'seealso': [
	    'mean',
	    'median',
	    'min',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ },
/* 412 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/statistics/mean.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'mean',
	  'category': 'Statistics',
	  'syntax': [
	    'mean(a, b, c, ...)',
	    'mean(A)',
	    'mean(A, dim)'
	  ],
	  'description': 'Compute the arithmetic mean of a list of values.',
	  'examples': [
	    'mean(2, 3, 4, 1)',
	    'mean([2, 3, 4, 1])',
	    'mean([2, 5; 4, 3])',
	    'mean([2, 5; 4, 3], 1)',
	    'mean([2, 5; 4, 3], 2)',
	    'mean([1.0, 2.7, 3.2, 4.0])'
	  ],
	  'seealso': [
	    'max',
	    'median',
	    'min',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ },
/* 413 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/statistics/median.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'median',
	  'category': 'Statistics',
	  'syntax': [
	    'median(a, b, c, ...)',
	    'median(A)'
	  ],
	  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
	  'examples': [
	    'median(5, 2, 7)',
	    'median([3, -1, 5, 7])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'min',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ },
/* 414 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/statistics/min.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'min',
	  'category': 'Statistics',
	  'syntax': [
	    'min(a, b, c, ...)',
	    'min(A)',
	    'min(A, dim)'
	  ],
	  'description': 'Compute the minimum value of a list of values.',
	  'examples': [
	    'min(2, 3, 4, 1)',
	    'min([2, 3, 4, 1])',
	    'min([2, 5; 4, 3])',
	    'min([2, 5; 4, 3], 1)',
	    'min([2, 5; 4, 3], 2)',
	    'min(2.7, 7.1, -4.5, 2.0, 4.1)',
	    'max(2.7, 7.1, -4.5, 2.0, 4.1)'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'median',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ },
/* 415 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/statistics/prod.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'prod',
	  'category': 'Statistics',
	  'syntax': [
	    'prod(a, b, c, ...)',
	    'prod(A)'
	  ],
	  'description': 'Compute the product of all values.',
	  'examples': [
	    'prod(2, 3, 4)',
	    'prod([2, 3, 4])',
	    'prod([2, 5; 4, 3])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'min',
	    'median',
	    'min',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ },
/* 416 */
/*!*************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/statistics/quantileSeq.js ***!
  \*************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'quantileSeq',
	  'category': 'Statistics',
	  'syntax': [
	    'quantileSeq(A, prob[, sorted])',
	    'quantileSeq(A, [prob1, prob2, ...][, sorted])',
	    'quantileSeq(A, N[, sorted])'
	  ],
	  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
	  'examples': [
	    'quantileSeq([3, -1, 5, 7], 0.5)',
	    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',
	    'quantileSeq([3, -1, 5, 7], 2)',
	    'quantileSeq([-1, 3, 5, 7], 0.5, true)'
	  ],
	  'seealso': [
	    'mean',
	    'median',
	    'min',
	    'max',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};

/***/ },
/* 417 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/statistics/std.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'std',
	  'category': 'Statistics',
	  'syntax': [
	    'std(a, b, c, ...)',
	    'std(A)',
	    'std(A, normalization)'
	  ],
	  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': [
	    'std(2, 4, 6)',
	    'std([2, 4, 6, 8])',
	    'std([2, 4, 6, 8], "uncorrected")',
	    'std([2, 4, 6, 8], "biased")',
	    'std([1, 2, 3; 4, 5, 6])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'min',
	    'median',
	    'min',
	    'prod',
	    'sum',
	    'var'
	  ]
	};


/***/ },
/* 418 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/statistics/sum.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'sum',
	  'category': 'Statistics',
	  'syntax': [
	    'sum(a, b, c, ...)',
	    'sum(A)'
	  ],
	  'description': 'Compute the sum of all values.',
	  'examples': [
	    'sum(2, 3, 4, 1)',
	    'sum([2, 3, 4, 1])',
	    'sum([2, 5; 4, 3])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'median',
	    'min',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ },
/* 419 */
/*!*****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/statistics/var.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'var',
	  'category': 'Statistics',
	  'syntax': [
	    'var(a, b, c, ...)',
	    'var(A)',
	    'var(A, normalization)'
	  ],
	  'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': [
	    'var(2, 4, 6)',
	    'var([2, 4, 6, 8])',
	    'var([2, 4, 6, 8], "uncorrected")',
	    'var([2, 4, 6, 8], "biased")',
	    'var([1, 2, 3; 4, 5, 6])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'min',
	    'median',
	    'min',
	    'prod',
	    'std',
	    'sum'
	  ]
	};


/***/ },
/* 420 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/acos.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'acos',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acos(x)'
	  ],
	  'description': 'Compute the inverse cosine of a value in radians.',
	  'examples': [
	    'acos(0.5)',
	    'acos(cos(2.3))'
	  ],
	  'seealso': [
	    'cos',
	    'atan',
	    'asin'
	  ]
	};


/***/ },
/* 421 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/acosh.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'acosh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acosh(x)'
	  ],
	  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
	  'examples': [
	    'acosh(1.5)'
	  ],
	  'seealso': [
	    'cosh',
	    'asinh',
	    'atanh'
	  ]
	};

/***/ },
/* 422 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/acot.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'acot',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acot(x)'
	  ],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': [
	    'acot(0.5)',
	    'acot(cot(0.5))',
	    'acot(2)'
	  ],
	  'seealso': [
	    'cot',
	    'atan'
	  ]
	};


/***/ },
/* 423 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/acoth.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'acoth',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acoth(x)'
	  ],
	  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
	  'examples': [
	    'acoth(0.5)'
	  ],
	  'seealso': [
	    'acsch',
	    'asech'
	  ]
	};

/***/ },
/* 424 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/acsc.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'acsc',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acsc(x)'
	  ],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': [
	    'acsc(0.5)',
	    'acsc(csc(0.5))',
	    'acsc(2)'
	  ],
	  'seealso': [
	    'csc',
	    'asin',
	    'asec'
	  ]
	};


/***/ },
/* 425 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/acsch.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'acsch',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acsch(x)'
	  ],
	  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
	  'examples': [
	    'acsch(0.5)'
	  ],
	  'seealso': [
	    'asech',
	    'acoth'
	  ]
	};


/***/ },
/* 426 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/asec.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'asec',
	  'category': 'Trigonometry',
	  'syntax': [
	    'asec(x)'
	  ],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': [
	    'asec(0.5)',
	    'asec(sec(0.5))',
	    'asec(2)'
	  ],
	  'seealso': [
	    'acos',
	    'acot',
	    'acsc'
	  ]
	};


/***/ },
/* 427 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/asech.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'asech',
	  'category': 'Trigonometry',
	  'syntax': [
	    'asech(x)'
	  ],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': [
	    'asech(0.5)'
	  ],
	  'seealso': [
	    'acsch',
	    'acoth'
	  ]
	};


/***/ },
/* 428 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/asin.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'asin',
	  'category': 'Trigonometry',
	  'syntax': [
	    'asin(x)'
	  ],
	  'description': 'Compute the inverse sine of a value in radians.',
	  'examples': [
	    'asin(0.5)',
	    'asin(sin(2.3))'
	  ],
	  'seealso': [
	    'sin',
	    'acos',
	    'atan'
	  ]
	};


/***/ },
/* 429 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/asinh.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'asinh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'asinh(x)'
	  ],
	  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
	  'examples': [
	    'asinh(0.5)'
	  ],
	  'seealso': [
	    'acosh',
	    'atanh'
	  ]
	};


/***/ },
/* 430 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/atan.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'atan',
	  'category': 'Trigonometry',
	  'syntax': [
	    'atan(x)'
	  ],
	  'description': 'Compute the inverse tangent of a value in radians.',
	  'examples': [
	    'atan(0.5)',
	    'atan(tan(2.3))'
	  ],
	  'seealso': [
	    'tan',
	    'acos',
	    'asin'
	  ]
	};


/***/ },
/* 431 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/atanh.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'atanh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'atanh(x)'
	  ],
	  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
	  'examples': [
	    'atanh(0.5)'
	  ],
	  'seealso': [
	    'acosh',
	    'asinh'
	  ]
	};


/***/ },
/* 432 */
/*!*********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/atan2.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'atan2',
	  'category': 'Trigonometry',
	  'syntax': [
	    'atan2(y, x)'
	  ],
	  'description':
	      'Computes the principal value of the arc tangent of y/x in radians.',
	  'examples': [
	    'atan2(2, 2) / pi',
	    'angle = 60 deg in rad',
	    'x = cos(angle)',
	    'y = sin(angle)',
	    'atan2(y, x)'
	  ],
	  'seealso': [
	    'sin',
	    'cos',
	    'tan'
	  ]
	};


/***/ },
/* 433 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/cos.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'cos',
	  'category': 'Trigonometry',
	  'syntax': [
	    'cos(x)'
	  ],
	  'description': 'Compute the cosine of x in radians.',
	  'examples': [
	    'cos(2)',
	    'cos(pi / 4) ^ 2',
	    'cos(180 deg)',
	    'cos(60 deg)',
	    'sin(0.2)^2 + cos(0.2)^2'
	  ],
	  'seealso': [
	    'acos',
	    'sin',
	    'tan'
	  ]
	};


/***/ },
/* 434 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/cosh.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'cosh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'cosh(x)'
	  ],
	  'description': 'Compute the hyperbolic cosine of x in radians.',
	  'examples': [
	    'cosh(0.5)'
	  ],
	  'seealso': [
	    'sinh',
	    'tanh',
	    'coth'
	  ]
	};


/***/ },
/* 435 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/cot.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'cot',
	  'category': 'Trigonometry',
	  'syntax': [
	    'cot(x)'
	  ],
	  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
	  'examples': [
	    'cot(2)',
	    '1 / tan(2)'
	  ],
	  'seealso': [
	    'sec',
	    'csc',
	    'tan'
	  ]
	};


/***/ },
/* 436 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/coth.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'coth',
	  'category': 'Trigonometry',
	  'syntax': [
	    'coth(x)'
	  ],
	  'description': 'Compute the hyperbolic cotangent of x in radians.',
	  'examples': [
	    'coth(2)',
	    '1 / tanh(2)'
	  ],
	  'seealso': [
	    'sech',
	    'csch',
	    'tanh'
	  ]
	};


/***/ },
/* 437 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/csc.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'csc',
	  'category': 'Trigonometry',
	  'syntax': [
	    'csc(x)'
	  ],
	  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
	  'examples': [
	    'csc(2)',
	    '1 / sin(2)'
	  ],
	  'seealso': [
	    'sec',
	    'cot',
	    'sin'
	  ]
	};


/***/ },
/* 438 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/csch.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'csch',
	  'category': 'Trigonometry',
	  'syntax': [
	    'csch(x)'
	  ],
	  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
	  'examples': [
	    'csch(2)',
	    '1 / sinh(2)'
	  ],
	  'seealso': [
	    'sech',
	    'coth',
	    'sinh'
	  ]
	};


/***/ },
/* 439 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/sec.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'sec',
	  'category': 'Trigonometry',
	  'syntax': [
	    'sec(x)'
	  ],
	  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
	  'examples': [
	    'sec(2)',
	    '1 / cos(2)'
	  ],
	  'seealso': [
	    'cot',
	    'csc',
	    'cos'
	  ]
	};


/***/ },
/* 440 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/sech.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'sech',
	  'category': 'Trigonometry',
	  'syntax': [
	    'sech(x)'
	  ],
	  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
	  'examples': [
	    'sech(2)',
	    '1 / cosh(2)'
	  ],
	  'seealso': [
	    'coth',
	    'csch',
	    'cosh'
	  ]
	};


/***/ },
/* 441 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/sin.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'sin',
	  'category': 'Trigonometry',
	  'syntax': [
	    'sin(x)'
	  ],
	  'description': 'Compute the sine of x in radians.',
	  'examples': [
	    'sin(2)',
	    'sin(pi / 4) ^ 2',
	    'sin(90 deg)',
	    'sin(30 deg)',
	    'sin(0.2)^2 + cos(0.2)^2'
	  ],
	  'seealso': [
	    'asin',
	    'cos',
	    'tan'
	  ]
	};


/***/ },
/* 442 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/sinh.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'sinh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'sinh(x)'
	  ],
	  'description': 'Compute the hyperbolic sine of x in radians.',
	  'examples': [
	    'sinh(0.5)'
	  ],
	  'seealso': [
	    'cosh',
	    'tanh'
	  ]
	};


/***/ },
/* 443 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/tan.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'tan',
	  'category': 'Trigonometry',
	  'syntax': [
	    'tan(x)'
	  ],
	  'description': 'Compute the tangent of x in radians.',
	  'examples': [
	    'tan(0.5)',
	    'sin(0.5) / cos(0.5)',
	    'tan(pi / 4)',
	    'tan(45 deg)'
	  ],
	  'seealso': [
	    'atan',
	    'sin',
	    'cos'
	  ]
	};


/***/ },
/* 444 */
/*!********************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/trigonometry/tanh.js ***!
  \********************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'tanh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'tanh(x)'
	  ],
	  'description': 'Compute the hyperbolic tangent of x in radians.',
	  'examples': [
	    'tanh(0.5)',
	    'sinh(0.5) / cosh(0.5)'
	  ],
	  'seealso': [
	    'sinh',
	    'cosh'
	  ]
	};


/***/ },
/* 445 */
/*!***********************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/units/to.js ***!
  \***********************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'to',
	  'category': 'Units',
	  'syntax': [
	    'x to unit',
	    'to(x, unit)'
	  ],
	  'description': 'Change the unit of a value.',
	  'examples': [
	    '5 inch to cm',
	    '3.2kg to g',
	    '16 bytes in bits'
	  ],
	  'seealso': []
	};


/***/ },
/* 446 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/clone.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'clone',
	  'category': 'Utils',
	  'syntax': [
	    'clone(x)'
	  ],
	  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
	  'examples': [
	    'clone(3.5)',
	    'clone(2 - 4i)',
	    'clone(45 deg)',
	    'clone([1, 2; 3, 4])',
	    'clone("hello world")'
	  ],
	  'seealso': []
	};


/***/ },
/* 447 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/map.js ***!
  \************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'map',
	  'category': 'Utils',
	  'syntax': [
	    'map(x, callback)'
	  ],
	  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
	  'examples': [
	    'map([1, 2, 3], function(val) { return value * value })'
	  ],
	  'seealso': ['filter', 'forEach']
	};


/***/ },
/* 448 */
/*!************************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/partitionSelect.js ***!
  \************************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'partitionSelect',
	  'category': 'Utils',
	  'syntax': [
	    'partitionSelect(x, k)',
	    'partitionSelect(x, k, compare)'
	  ],
	  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
	  'examples': [
	    'partitionSelect([5, 10, 1], 2)',
	    'partitionSelect(["C", "B", "A", "D"], 1)'
	  ],
	  'seealso': ['sort']
	};


/***/ },
/* 449 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/filter.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'filter',
	  'category': 'Utils',
	  'syntax': [
	    'filter(x, test)'
	  ],
	  'description': 'Filter items in a matrix.',
	  'examples': [
	    'isPositive(x) = x > 0',
	    'filter([6, -2, -1, 4, 3], isPositive)',
	    'filter([6, -2, 0, 1, 0], x != 0)'
	  ],
	  'seealso': ['sort', 'map', 'forEach']
	};


/***/ },
/* 450 */
/*!****************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/forEach.js ***!
  \****************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'forEach',
	  'category': 'Utils',
	  'syntax': [
	    'forEach(x, callback)'
	  ],
	  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
	  'examples': [
	    'forEach([1, 2, 3], function(val) { console.log(val) })'
	  ],
	  'seealso': ['map', 'sort', 'filter']
	};


/***/ },
/* 451 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/format.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'format',
	  'category': 'Utils',
	  'syntax': [
	    'format(value)',
	    'format(value, precision)'
	  ],
	  'description': 'Format a value of any type as string.',
	  'examples': [
	    'format(2.3)',
	    'format(3 - 4i)',
	    'format([])',
	    'format(pi, 3)'
	  ],
	  'seealso': ['print']
	};


/***/ },
/* 452 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/isInteger.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'isInteger',
	  'category': 'Utils',
	  'syntax': [
	    'isInteger(x)'
	  ],
	  'description': 'Test whether a value is an integer number.',
	  'examples': [
	    'isInteger(2)',
	    'isInteger(3.5)',
	    'isInteger([3, 0.5, -2])'
	  ],
	  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
	};


/***/ },
/* 453 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/isNegative.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'isNegative',
	  'category': 'Utils',
	  'syntax': [
	    'isNegative(x)'
	  ],
	  'description': 'Test whether a value is negative: smaller than zero.',
	  'examples': [
	    'isNegative(2)',
	    'isNegative(0)',
	    'isNegative(-4)',
	    'isNegative([3, 0.5, -2])'
	  ],
	  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
	};


/***/ },
/* 454 */
/*!******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/isNumeric.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'isNumeric',
	  'category': 'Utils',
	  'syntax': [
	    'isNumeric(x)'
	  ],
	  'description': 'Test whether a value is a numeric value. ' +
	    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
	  'examples': [
	    'isNumeric(2)',
	    'isNumeric(0)',
	    'isNumeric(bignumber(500))',
	    'isNumeric(fraction(0.125))',
	    'isNumeric("3")',
	    'isNumeric(2 + 3i)',
	    'isNumeric([2.3, "foo", false])'
	  ],
	  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive']
	};


/***/ },
/* 455 */
/*!*******************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/isPositive.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'isPositive',
	  'category': 'Utils',
	  'syntax': [
	    'isPositive(x)'
	  ],
	  'description': 'Test whether a value is positive: larger than zero.',
	  'examples': [
	    'isPositive(2)',
	    'isPositive(0)',
	    'isPositive(-4)',
	    'isPositive([3, 0.5, -2])'
	  ],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
	};


/***/ },
/* 456 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/isZero.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'isZero',
	  'category': 'Utils',
	  'syntax': [
	    'isZero(x)'
	  ],
	  'description': 'Test whether a value is zero.',
	  'examples': [
	    'isZero(2)',
	    'isZero(0)',
	    'isZero(-4)',
	    'isZero([3, 0, -2, 0])'
	  ],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
	};


/***/ },
/* 457 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/import.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'import',
	  'category': 'Utils',
	  'syntax': [
	    'import(string)'
	  ],
	  'description': 'Import functions from a file.',
	  'examples': [
	    'import("numbers")',
	    'import("./mylib.js")'
	  ],
	  'seealso': []
	};


/***/ },
/* 458 */
/*!*************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/sort.js ***!
  \*************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'sort',
	  'category': 'Utils',
	  'syntax': [
	    'sort(x)',
	    'sort(x, compare)'
	  ],
	  'description': 'Sort the items in a matrix. Compare can be a string "asc" or "desc", or a custom sort function.',
	  'examples': [
	    'sort([5, 10, 1])',
	    'sort(["C", "B", "A", "D"])',
	    'sortByLength(a, b) = size(a)[1] - size(b)[1]',
	    'sort(["Langdon", "Tom", "Sara"], sortByLength)'
	  ],
	  'seealso': ['map', 'filter', 'forEach']
	};


/***/ },
/* 459 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/docs/function/utils/typeof.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = {
	  'name': 'typeof',
	  'category': 'Utils',
	  'syntax': [
	    'typeof(x)'
	  ],
	  'description': 'Get the type of a variable.',
	  'examples': [
	    'typeof(3.5)',
	    'typeof(2 - 4i)',
	    'typeof(45 deg)',
	    'typeof("hello world")'
	  ],
	  'seealso': []
	};


/***/ },
/* 460 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/expression/function/index.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./compile */ 461),
	  __webpack_require__(/*! ./eval */ 479),
	  __webpack_require__(/*! ./help */ 480),
	  __webpack_require__(/*! ./parse */ 481),
	  __webpack_require__(/*! ./parser */ 482)
	];


/***/ },
/* 461 */
/*!*****************************************************!*\
  !*** ./~/mathjs/lib/expression/function/compile.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  var parse = load(__webpack_require__(/*! ../parse */ 462));

	  /**
	   * Parse and compile an expression.
	   * Returns a an object with a function `eval([scope])` to evaluate the
	   * compiled expression.
	   *
	   * Syntax:
	   *
	   *     math.compile(expr)                       // returns one node
	   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
	   *
	   * Examples:
	   *
	   *     var code = math.compile('sqrt(3^2 + 4^2)');
	   *     code.eval(); // 5
	   *
	   *     var scope = {a: 3, b: 4}
	   *     var code = math.compile('a * b'); // 12
	   *     code.eval(scope); // 12
	   *     scope.a = 5;
	   *     code.eval(scope); // 20
	   *
	   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);
	   *     nodes[2].eval(); // 12
	   *
	   * See also:
	   *
	   *    parse, eval
	   *
	   * @param {string | string[] | Array | Matrix} expr
	   *            The expression to be compiled
	   * @return {{eval: Function} | Array.<{eval: Function}>} code
	   *            An object with the compiled expression
	   * @throws {Error}
	   */
	  return typed('compile', {
	    'string': function (expr) {
	      return parse(expr).compile();
	    },

	    'Array | Matrix': function (expr) {
	      return deepMap(expr, function (entry) {
	        return parse(entry).compile();
	      });
	    }
	  });
	}

	exports.name = 'compile';
	exports.factory = factory;


/***/ },
/* 462 */
/*!******************************************!*\
  !*** ./~/mathjs/lib/expression/parse.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ArgumentsError = __webpack_require__(/*! ../error/ArgumentsError */ 27);
	var deepMap = __webpack_require__(/*! ../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  var ArrayNode               = load(__webpack_require__(/*! ./node/ArrayNode */ 463));
	  var AssignmentNode          = load(__webpack_require__(/*! ./node/AssignmentNode */ 466));
	  var BlockNode               = load(__webpack_require__(/*! ./node/BlockNode */ 468));
	  var ConditionalNode         = load(__webpack_require__(/*! ./node/ConditionalNode */ 469));
	  var ConstantNode            = load(__webpack_require__(/*! ./node/ConstantNode */ 470));
	  var FunctionAssignmentNode  = load(__webpack_require__(/*! ./node/FunctionAssignmentNode */ 471));
	  var IndexNode               = load(__webpack_require__(/*! ./node/IndexNode */ 472));
	  var OperatorNode            = load(__webpack_require__(/*! ./node/OperatorNode */ 475));
	  var ParenthesisNode         = load(__webpack_require__(/*! ./node/ParenthesisNode */ 477));
	  var FunctionNode            = load(__webpack_require__(/*! ./node/FunctionNode */ 476));
	  var RangeNode               = load(__webpack_require__(/*! ./node/RangeNode */ 473));
	  var SymbolNode              = load(__webpack_require__(/*! ./node/SymbolNode */ 474));
	  var UpdateNode              = load(__webpack_require__(/*! ./node/UpdateNode */ 478));


	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval();
	   *
	   * Syntax:
	   *
	   *     parse(expr)
	   *     parse(expr, options)
	   *     parse([expr1, expr2, expr3, ...])
	   *     parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     var node = parse('sqrt(3^2 + 4^2)');
	   *     node.compile(math).eval(); // 5
	   *
	   *     var scope = {a:3, b:4}
	   *     var node = parse('a * b'); // 12
	   *     var code = node.compile(math);
	   *     code.eval(scope); // 12
	   *     scope.a = 5;
	   *     code.eval(scope); // 20
	   *
	   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
	   *     nodes[2].compile(math).eval(); // 12
	   *
	   * @param {string | string[] | Matrix} expr
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */
	  function parse (expr, options) {
	    if (arguments.length != 1 && arguments.length != 2) {
	      throw new ArgumentsError('parse', arguments.length, 1, 2);
	    }

	    // pass extra nodes
	    extra_nodes = (options && options.nodes) ? options.nodes : {};

	    if (typeof expr === 'string') {
	      // parse a single expression
	      expression = expr;
	      return parseStart();
	    }
	    else if (Array.isArray(expr) || expr instanceof type.Matrix) {
	      // parse an array or matrix with expressions
	      return deepMap(expr, function (elem) {
	        if (typeof elem !== 'string') throw new TypeError('String expected');

	        expression = elem;
	        return parseStart();
	      });
	    }
	    else {
	      // oops
	      throw new TypeError('String or matrix expected');
	    }
	  }

	  // token types enumeration
	  var TOKENTYPE = {
	    NULL : 0,
	    DELIMITER : 1,
	    NUMBER : 2,
	    SYMBOL : 3,
	    UNKNOWN : 4
	  };

	  // map with all delimiters
	  var DELIMITERS = {
	    ',': true,
	    '(': true,
	    ')': true,
	    '[': true,
	    ']': true,
	    '\"': true,
	    ';': true,

	    '+': true,
	    '-': true,
	    '*': true,
	    '.*': true,
	    '/': true,
	    './': true,
	    '%': true,
	    '^': true,
	    '.^': true,
	    '~': true,
	    '!': true,
	    '&': true,
	    '|': true,
	    '^|': true,
	    '\'': true,
	    '=': true,
	    ':': true,
	    '?': true,

	    '==': true,
	    '!=': true,
	    '<': true,
	    '>': true,
	    '<=': true,
	    '>=': true,

	    '<<': true,
	    '>>': true,
	    '>>>': true
	  };

	  // map with all named delimiters
	  var NAMED_DELIMITERS = {
	    'mod': true,
	    'to': true,
	    'in': true,
	    'and': true,
	    'xor': true,
	    'or': true,
	    'not': true
	  };

	  var extra_nodes = {};             // current extra nodes
	  var expression = '';              // current expression
	  var index = 0;                    // current index in expr
	  var c = '';                       // current token character in expr
	  var token = '';                   // current token
	  var token_type = TOKENTYPE.NULL;  // type of the token
	  var nesting_level = 0;            // level of nesting inside parameters, used to ignore newline characters
	  var conditional_level = null;     // when a conditional is being parsed, the level of the conditional is stored here

	  /**
	   * Get the first character from the expression.
	   * The character is stored into the char c. If the end of the expression is
	   * reached, the function puts an empty string in c.
	   * @private
	   */
	  function first() {
	    index = 0;
	    c = expression.charAt(0);
	    nesting_level = 0;
	    conditional_level = null;
	  }

	  /**
	   * Get the next character from the expression.
	   * The character is stored into the char c. If the end of the expression is
	   * reached, the function puts an empty string in c.
	   * @private
	   */
	  function next() {
	    index++;
	    c = expression.charAt(index);
	  }

	  /**
	   * Preview the next character from the expression.
	   * @return {string} cNext
	   * @private
	   */
	  function nextPreview() {
	    return expression.charAt(index + 1);
	  }

	  /**
	   * Preview the second next character from the expression.
	   * @return {string} cNext
	   * @private
	   */
	  function nextNextPreview() {
	    return expression.charAt(index + 2);
	  }

	  /**
	   * Get next token in the current string expr.
	   * The token and token type are available as token and token_type
	   * @private
	   */
	  function getToken() {
	    token_type = TOKENTYPE.NULL;
	    token = '';

	    // skip over whitespaces
	    // space, tab, and newline when inside parameters
	    while (c == ' ' || c == '\t' || (c == '\n' && nesting_level)) {
	      // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
	      next();
	    }

	    // skip comment
	    if (c == '#') {
	      while (c != '\n' && c != '') {
	        next();
	      }
	    }

	    // check for end of expression
	    if (c == '') {
	      // token is still empty
	      token_type = TOKENTYPE.DELIMITER;
	      return;
	    }

	    // check for new line character
	    if (c == '\n' && !nesting_level) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c;
	      next();
	      return;
	    }

	    // check for delimiters consisting of 3 characters
	    var c2 = c + nextPreview();
	    var c3 = c2 + nextNextPreview();
	    if (c3.length == 3 && DELIMITERS[c3]) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c3;
	      next();
	      next();
	      next();
	      return;
	    }

	    // check for delimiters consisting of 2 characters
	    if (c2.length == 2 && DELIMITERS[c2]) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c2;
	      next();
	      next();
	      return;
	    }

	    // check for delimiters consisting of 1 character
	    if (DELIMITERS[c]) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c;
	      next();
	      return;
	    }

	    // check for a number
	    if (isDigitDot(c)) {
	      token_type = TOKENTYPE.NUMBER;

	      // get number, can have a single dot
	      if (c == '.') {
	        token += c;
	        next();

	        if (!isDigit(c)) {
	          // this is no legal number, it is just a dot
	          token_type = TOKENTYPE.UNKNOWN;
	        }
	      }
	      else {
	        while (isDigit(c)) {
	          token += c;
	          next();
	        }
	        if (c == '.') {
	          token += c;
	          next();
	        }
	      }
	      while (isDigit(c)) {
	        token += c;
	        next();
	      }

	      // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"
	      c2 = nextPreview();
	      if ((c == 'E' || c == 'e') && (isDigit(c2) || c2 == '-' || c2 == '+')) {
	        token += c;
	        next();

	        if (c == '+' || c == '-') {
	          token += c;
	          next();
	        }

	        // Scientific notation MUST be followed by an exponent
	        if (!isDigit(c)) {
	          // this is no legal number, exponent is missing.
	          token_type = TOKENTYPE.UNKNOWN;
	        }

	        while (isDigit(c)) {
	          token += c;
	          next();
	        }
	      }

	      return;
	    }

	    // check for variables, functions, named operators
	    if (isAlpha(c)) {
	      while (isAlpha(c) || isDigit(c)) {
	        token += c;
	        next();
	      }

	      if (NAMED_DELIMITERS[token]) {
	        token_type = TOKENTYPE.DELIMITER;
	      }
	      else {
	        token_type = TOKENTYPE.SYMBOL;
	      }

	      return;
	    }

	    // something unknown is found, wrong characters -> a syntax error
	    token_type = TOKENTYPE.UNKNOWN;
	    while (c != '') {
	      token += c;
	      next();
	    }
	    throw createSyntaxError('Syntax error in part "' + token + '"');
	  }

	  /**
	   * Get next token and skip newline tokens
	   */
	  function getTokenSkipNewline () {
	    do {
	      getToken();
	    }
	    while (token == '\n');
	  }

	  /**
	   * Open parameters.
	   * New line characters will be ignored until closeParams() is called
	   */
	  function openParams() {
	    nesting_level++;
	  }

	  /**
	   * Close parameters.
	   * New line characters will no longer be ignored
	   */
	  function closeParams() {
	    nesting_level--;
	  }

	  /**
	   * checks if the given char c is a letter (upper or lower case)
	   * or underscore
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   * @private
	   */
	  function isAlpha (c) {
	    return ((c >= 'a' && c <= 'z') ||
	        (c >= 'A' && c <= 'Z') ||
	        c == '_');
	  }

	  /**
	   * checks if the given char c is a digit or dot
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   * @private
	   */
	  function isDigitDot (c) {
	    return ((c >= '0' && c <= '9') ||
	        c == '.');
	  }

	  /**
	   * checks if the given char c is a digit
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   * @private
	   */
	  function isDigit (c) {
	    return ((c >= '0' && c <= '9'));
	  }

	  /**
	   * Start of the parse levels below, in order of precedence
	   * @return {Node} node
	   * @private
	   */
	  function parseStart () {
	    // get the first character in expression
	    first();

	    getToken();

	    var node = parseBlock();

	    // check for garbage at the end of the expression
	    // an expression ends with a empty character '' and token_type DELIMITER
	    if (token != '') {
	      if (token_type == TOKENTYPE.DELIMITER) {
	        // user entered a not existing operator like "//"

	        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean != ?"
	        throw createError('Unexpected operator ' + token);
	      }
	      else {
	        throw createSyntaxError('Unexpected part "' + token + '"');
	      }
	    }

	    return node;
	  }

	  /**
	   * Parse a block with expressions. Expressions can be separated by a newline
	   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
	   * of the preceding line is returned.
	   * @return {Node} node
	   * @private
	   */
	  function parseBlock () {
	    var node;
	    var blocks = [];
	    var visible;

	    if (token == '') {
	      // empty expression
	      return new ConstantNode('undefined', 'undefined');
	    }

	    if (token != '\n' && token != ';') {
	      node = parseFunctionAssignment();
	    }

	    // TODO: simplify this loop
	    while (token == '\n' || token == ';') {
	      if (blocks.length == 0 && node) {
	        visible = (token != ';');
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }

	      getToken();
	      if (token != '\n' && token != ';' && token != '') {
	        node = parseFunctionAssignment();

	        visible = (token != ';');
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }
	    }

	    if (blocks.length > 0) {
	      return new BlockNode(blocks);
	    }
	    else {
	      return node;
	    }
	  }

	  /**
	   * Parse a function assignment like "function f(a,b) = a*b"
	   * @return {Node} node
	   * @private
	   */
	  function parseFunctionAssignment () {
	    // TODO: function assignment using keyword 'function' is deprecated since version 0.18.0, cleanup some day
	    if (token_type == TOKENTYPE.SYMBOL && token == 'function') {
	      throw createSyntaxError('Deprecated keyword "function". ' +
	          'Functions can now be assigned without it, like "f(x) = x^2".');
	    }

	    return parseAssignment();
	  }

	  /**
	   * Assignment of a variable, can be a variable like "a=2.3" or a updating an
	   * existing variable like "matrix(2,3:5)=[6,7,8]"
	   * @return {Node} node
	   * @private
	   */
	  function parseAssignment () {
	    var name, args, expr, valid;

	    var node = parseConditional();

	    if (token == '=') {
	      if (node && node.isSymbolNode) {
	        // parse a variable assignment like 'a = 2/3'
	        name = node.name;
	        getTokenSkipNewline();
	        expr = parseAssignment();
	        return new AssignmentNode(name, expr);
	      }
	      else if (node && node.isIndexNode) {
	        // parse a matrix subset assignment like 'A[1,2] = 4'
	        getTokenSkipNewline();
	        expr = parseAssignment();
	        return new UpdateNode(node, expr);
	      }
	      else if (node && node.isFunctionNode) {
	        // parse function assignment like 'f(x) = x^2'
	        valid = true;
	        args = [];

	        name = node.name;
	        node.args.forEach(function (arg, index) {
	          if (arg && arg.isSymbolNode) {
	            args[index] = arg.name;
	          }
	          else {
	            valid = false;
	          }
	        });

	        if (valid) {
	          getTokenSkipNewline();
	          expr = parseAssignment();
	          return new FunctionAssignmentNode(name, args, expr);
	        }
	      }

	      throw createSyntaxError('Invalid left hand side of assignment operator =');
	    }

	    return node;
	  }

	  /**
	   * conditional operation
	   *
	   *     condition ? truePart : falsePart
	   *
	   * Note: conditional operator is right-associative
	   *
	   * @return {Node} node
	   * @private
	   */
	  function parseConditional () {
	    var node = parseLogicalOr();

	    while (token == '?') {
	      // set a conditional level, the range operator will be ignored as long
	      // as conditional_level == nesting_level.
	      var prev = conditional_level;
	      conditional_level = nesting_level;
	      getTokenSkipNewline();

	      var condition = node;
	      var trueExpr = parseLogicalOr();

	      if (token != ':') throw createSyntaxError('False part of conditional expression expected');

	      conditional_level = null;
	      getTokenSkipNewline();

	      var falseExpr = parseConditional(); // Note: check for conditional operator again, right associativity

	      node = new ConditionalNode(condition, trueExpr, falseExpr);

	      // restore the previous conditional level
	      conditional_level = prev;
	    }

	    return node;
	  }

	  /**
	   * logical or, 'x or y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalOr() {
	    var node = parseLogicalXor();

	    while (token == 'or') {
	      getTokenSkipNewline();
	      node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);
	    }

	    return node;
	  }

	  /**
	   * logical exclusive or, 'x xor y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalXor() {
	    var node = parseLogicalAnd();

	    while (token == 'xor') {
	      getTokenSkipNewline();
	      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);
	    }

	    return node;
	  }

	  /**
	   * logical and, 'x and y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalAnd() {
	    var node = parseBitwiseOr();

	    while (token == 'and') {
	      getTokenSkipNewline();
	      node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);
	    }

	    return node;
	  }

	  /**
	   * bitwise or, 'x | y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseOr() {
	    var node = parseBitwiseXor();

	    while (token == '|') {
	      getTokenSkipNewline();
	      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);
	    }

	    return node;
	  }

	  /**
	   * bitwise exclusive or (xor), 'x ^| y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseXor() {
	    var node = parseBitwiseAnd();

	    while (token == '^|') {
	      getTokenSkipNewline();
	      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);
	    }

	    return node;
	  }

	  /**
	   * bitwise and, 'x & y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseAnd () {
	    var node = parseRelational();

	    while (token == '&') {
	      getTokenSkipNewline();
	      node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);
	    }

	    return node;
	  }

	  /**
	   * relational operators
	   * @return {Node} node
	   * @private
	   */
	  function parseRelational () {
	    var node, operators, name, fn, params;

	    node = parseShift();

	    operators = {
	      '==': 'equal',
	      '!=': 'unequal',
	      '<': 'smaller',
	      '>': 'larger',
	      '<=': 'smallerEq',
	      '>=': 'largerEq'
	    };
	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getTokenSkipNewline();
	      params = [node, parseShift()];
	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
	   * @return {Node} node
	   * @private
	   */
	  function parseShift () {
	    var node, operators, name, fn, params;

	    node = parseConversion();

	    operators = {
	      '<<' : 'leftShift',
	      '>>' : 'rightArithShift',
	      '>>>' : 'rightLogShift'
	    };

	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getTokenSkipNewline();
	      params = [node, parseConversion()];
	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * conversion operators 'to' and 'in'
	   * @return {Node} node
	   * @private
	   */
	  function parseConversion () {
	    var node, operators, name, fn, params;

	    node = parseRange();

	    operators = {
	      'to' : 'to',
	      'in' : 'to'   // alias of 'to'
	    };

	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getTokenSkipNewline();
	      params = [node, parseRange()];
	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
	   * @return {Node} node
	   * @private
	   */
	  function parseRange () {
	    var node, params = [];

	    if (token == ':') {
	      // implicit start=1 (one-based)
	      node = new ConstantNode('1', 'number');
	    }
	    else {
	      // explicit start
	      node = parseAddSubtract();
	    }

	    if (token == ':' && (conditional_level !== nesting_level)) {
	      // we ignore the range operator when a conditional operator is being processed on the same level
	      params.push(node);

	      // parse step and end
	      while (token == ':' && params.length < 3) {
	        getTokenSkipNewline();

	        if (token == ')' || token == ']' || token == ',' || token == '') {
	          // implicit end
	          params.push(new SymbolNode('end'));
	        }
	        else {
	          // explicit end
	          params.push(parseAddSubtract());
	        }
	      }

	      if (params.length == 3) {
	        // params = [start, step, end]
	        node = new RangeNode(params[0], params[2], params[1]); // start, end, step
	      }
	      else { // length == 2
	        // params = [start, end]
	        node = new RangeNode(params[0], params[1]); // start, end
	      }
	    }

	    return node;
	  }

	  /**
	   * add or subtract
	   * @return {Node} node
	   * @private
	   */
	  function parseAddSubtract ()  {
	    var node, operators, name, fn, params;

	    node = parseMultiplyDivide();

	    operators = {
	      '+': 'add',
	      '-': 'subtract'
	    };
	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getTokenSkipNewline();
	      params = [node, parseMultiplyDivide()];
	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * multiply, divide, modulus
	   * @return {Node} node
	   * @private
	   */
	  function parseMultiplyDivide () {
	    var node, operators, name, fn, params;

	    node = parseUnary();

	    operators = {
	      '*': 'multiply',
	      '.*': 'dotMultiply',
	      '/': 'divide',
	      './': 'dotDivide',
	      '%': 'mod',
	      'mod': 'mod'
	    };

	    if (token in operators) {
	      while (token in operators) {
	        name = token;
	        fn = operators[name];

	        getTokenSkipNewline();
	        params = [node, parseUnary()];
	        node = new OperatorNode(name, fn, params);
	      }
	    }

	    // parse implicit multiplication
	    if ((token_type == TOKENTYPE.SYMBOL) ||
	        (token == 'in' && (node && node.isConstantNode)) ||
	        (token_type == TOKENTYPE.NUMBER && !(node && node.isConstantNode)) ||
	        (token == '(' || token == '[')) {
	      // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
	      // number:      implicit multiplication like '(2+3)2'
	      //              Note: we don't allow implicit multiplication between numbers,
	      //              like '2 3'. I'm not sure whether that is a good idea.
	      // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)', '2[1,2,3]'
	      node = new OperatorNode('*', 'multiply', [node, parseMultiplyDivide()]);
	    }

	    return node;
	  }

	  /**
	   * Unary plus and minus, and logical and bitwise not
	   * @return {Node} node
	   * @private
	   */
	  function parseUnary () {
	    var name, params;
	    var fn = {
	      '-': 'unaryMinus',
	      '+': 'unaryPlus',
	      '~': 'bitNot',
	      'not': 'not'
	    }[token];

	    if (fn) {
	      name = token;

	      getTokenSkipNewline();
	      params = [parseUnary()];

	      return new OperatorNode(name, fn, params);
	    }

	    return parsePow();
	  }

	  /**
	   * power
	   * Note: power operator is right associative
	   * @return {Node} node
	   * @private
	   */
	  function parsePow () {
	    var node, name, fn, params;

	    node = parseLeftHandOperators();

	    if (token == '^' || token == '.^') {
	      name = token;
	      fn = (name == '^') ? 'pow' : 'dotPow';

	      getTokenSkipNewline();
	      params = [node, parseUnary()]; // Go back to unary, we can have '2^-3'
	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * Left hand operators: factorial x!, transpose x'
	   * @return {Node} node
	   * @private
	   */
	  function parseLeftHandOperators ()  {
	    var node, operators, name, fn, params;

	    node = parseCustomNodes();

	    operators = {
	      '!': 'factorial',
	      '\'': 'transpose'
	    };

	    while (token in operators) {
	      name = token;
	      fn = operators[name];

	      getToken();
	      params = [node];

	      node = new OperatorNode(name, fn, params);
	    }

	    return node;
	  }

	  /**
	   * Parse a custom node handler. A node handler can be used to process
	   * nodes in a custom way, for example for handling a plot.
	   *
	   * A handler must be passed as second argument of the parse function.
	   * - must extend math.expression.node.Node
	   * - must contain a function _compile(defs: Object) : string
	   * - must contain a function find(filter: Object) : Node[]
	   * - must contain a function toString() : string
	   * - the constructor is called with a single argument containing all parameters
	   *
	   * For example:
	   *
	   *     nodes = {
	   *       'plot': PlotHandler
	   *     };
	   *
	   * The constructor of the handler is called as:
	   *
	   *     node = new PlotHandler(params);
	   *
	   * The handler will be invoked when evaluating an expression like:
	   *
	   *     node = math.parse('plot(sin(x), x)', nodes);
	   *
	   * @return {Node} node
	   * @private
	   */
	  function parseCustomNodes () {
	    var params = [], handler;

	    if (token_type == TOKENTYPE.SYMBOL && extra_nodes[token]) {
	      handler = extra_nodes[token];

	      getToken();

	      // parse parameters
	      if (token == '(') {
	        params = [];

	        openParams();
	        getToken();

	        if (token != ')') {
	          params.push(parseConditional());

	          // parse a list with parameters
	          while (token == ',') {
	            getToken();
	            params.push(parseConditional());
	          }
	        }

	        if (token != ')') {
	          throw createSyntaxError('Parenthesis ) expected');
	        }
	        closeParams();
	        getToken();
	      }

	      // create a new node handler
	      //noinspection JSValidateTypes
	      return new handler(params);
	    }

	    return parseSymbol();
	  }

	  /**
	   * parse symbols: functions, variables, constants, units
	   * @return {Node} node
	   * @private
	   */
	  function parseSymbol () {
	    var node, name;

	    if (token_type == TOKENTYPE.SYMBOL ||
	        (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {
	      name = token;

	      getToken();

	      // parse function parameters and matrix index
	      node = parseFunctions(name);
	      node = parseIndex(node);
	      return node;
	    }

	    return parseString();
	  }

	  /**
	   * parse a function call like fn(a, b, c)
	   * @param {string} name    Function name
	   * @return {FunctionNode | SymbolNode} node
	   * @private
	   */
	  function parseFunctions (name) {
	    var params;

	    if (token == '(') {
	      params = [];

	      openParams();
	      getToken();

	      if (token != ')') {
	        params.push(parseConditional());

	        // parse a list with parameters
	        while (token == ',') {
	          getToken();
	          params.push(parseConditional());
	        }
	      }

	      if (token != ')') {
	        throw createSyntaxError('Parenthesis ) expected');
	      }
	      closeParams();
	      getToken();

	      return new FunctionNode(name, params);
	    }

	    return new SymbolNode(name);
	  }

	  /**
	   * parse index parameters, enclosed in square brackets [...], for example A[2,3]
	   * @param {Node} node    Node on which to apply the parameters. If there
	   *                       are no parameters in the expression, the node
	   *                       itself is returned
	   * @return {Node} node
	   * @private
	   */
	  function parseIndex (node) {
	    var params;

	    while (token == '[') {
	      params = [];

	      openParams();
	      getToken();

	      if (token != ']') {
	        params.push(parseConditional());

	        // parse a list with parameters
	        while (token == ',') {
	          getToken();
	          params.push(parseConditional());
	        }
	      }

	      if (token != ']') {
	        throw createSyntaxError('Parenthesis ] expected');
	      }
	      closeParams();
	      getToken();

	      node = new IndexNode(node, params);
	    }

	    return node;
	  }

	  /**
	   * parse a string.
	   * A string is enclosed by double quotes
	   * @return {Node} node
	   * @private
	   */
	  function parseString () {
	    var node, str, tPrev;

	    if (token == '"') {
	      // string "..."
	      str = '';
	      tPrev = '';
	      while (c != '' && (c != '\"' || tPrev == '\\')) { // also handle escape character
	        str += c;
	        tPrev = c;
	        next();
	      }

	      getToken();
	      if (token != '"') {
	        throw createSyntaxError('End of string " expected');
	      }
	      getToken();

	      // create constant
	      node = new ConstantNode(str, 'string');

	      // parse index parameters
	      node = parseIndex(node);

	      return node;
	    }

	    return parseMatrix();
	  }

	  /**
	   * parse the matrix
	   * @return {Node} node
	   * @private
	   */
	  function parseMatrix () {
	    var array, params, rows, cols;

	    if (token == '[') {
	      // matrix [...]
	      openParams();
	      getToken();

	      if (token != ']') {
	        // this is a non-empty matrix
	        var row = parseRow();

	        if (token == ';') {
	          // 2 dimensional array
	          rows = 1;
	          params = [row];

	          // the rows of the matrix are separated by dot-comma's
	          while (token == ';') {
	            getToken();

	            params[rows] = parseRow();
	            rows++;
	          }

	          if (token != ']') {
	            throw createSyntaxError('End of matrix ] expected');
	          }
	          closeParams();
	          getToken();

	          // check if the number of columns matches in all rows
	          cols = params[0].nodes.length;
	          for (var r = 1; r < rows; r++) {
	            if (params[r].nodes.length != cols) {
	              throw createError('Column dimensions mismatch ' +
	                  '(' + params[r].nodes.length + ' != ' + cols + ')');
	            }
	          }

	          array = new ArrayNode(params);
	        }
	        else {
	          // 1 dimensional vector
	          if (token != ']') {
	            throw createSyntaxError('End of matrix ] expected');
	          }
	          closeParams();
	          getToken();

	          array = row;
	        }
	      }
	      else {
	        // this is an empty matrix "[ ]"
	        closeParams();
	        getToken();
	        array = new ArrayNode([]);
	      }

	      return array;
	    }

	    return parseNumber();
	  }

	  /**
	   * Parse a single comma-separated row from a matrix, like 'a, b, c'
	   * @return {ArrayNode} node
	   */
	  function parseRow () {
	    var params = [parseAssignment()];
	    var len = 1;

	    while (token == ',') {
	      getToken();

	      // parse expression
	      params[len] = parseAssignment();
	      len++;
	    }

	    return new ArrayNode(params);
	  }

	  /**
	   * parse a number
	   * @return {Node} node
	   * @private
	   */
	  function parseNumber () {
	    var number;

	    if (token_type == TOKENTYPE.NUMBER) {
	      // this is a number
	      number = token;
	      getToken();

	      return new ConstantNode(number, 'number');
	    }

	    return parseParentheses();
	  }

	  /**
	   * parentheses
	   * @return {Node} node
	   * @private
	   */
	  function parseParentheses () {
	    var node;

	    // check if it is a parenthesized expression
	    if (token == '(') {
	      // parentheses (...)
	      openParams();
	      getToken();

	      node = parseAssignment(); // start again

	      if (token != ')') {
	        throw createSyntaxError('Parenthesis ) expected');
	      }
	      closeParams();
	      getToken();

	      return new ParenthesisNode(node);
	    }

	    return parseEnd();
	  }

	  /**
	   * Evaluated when the expression is not yet ended but expected to end
	   * @return {Node} res
	   * @private
	   */
	  function parseEnd () {
	    if (token == '') {
	      // syntax error or unexpected end of expression
	      throw createSyntaxError('Unexpected end of expression');
	    } else {
	      throw createSyntaxError('Value expected');
	    }
	  }

	  /**
	   * Shortcut for getting the current row value (one based)
	   * Returns the line of the currently handled expression
	   * @private
	   */
	  /* TODO: implement keeping track on the row number
	  function row () {
	    return null;
	  }
	  */

	  /**
	   * Shortcut for getting the current col value (one based)
	   * Returns the column (position) where the last token starts
	   * @private
	   */
	  function col () {
	    return index - token.length + 1;
	  }

	  /**
	   * Create an error
	   * @param {string} message
	   * @return {SyntaxError} instantiated error
	   * @private
	   */
	  function createSyntaxError (message) {
	    var c = col();
	    var error = new SyntaxError(message + ' (char ' + c + ')');
	    error['char'] = c;

	    return error;
	  }

	  /**
	   * Create an error
	   * @param {string} message
	   * @return {Error} instantiated error
	   * @private
	   */
	  function createError (message) {
	    var c = col();
	    var error = new Error(message + ' (char ' + c + ')');
	    error['char'] = c;

	    return error;
	  }

	  return parse;
	};

	exports.name = 'parse';
	exports.path = 'expression';
	exports.factory = factory;


/***/ },
/* 463 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/expression/node/ArrayNode.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var string = __webpack_require__(/*! ../../utils/string */ 36);

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));

	  /**
	   * @constructor ArrayNode
	   * @extends {Node}
	   * Holds an 1-dimensional array with nodes
	   * @param {Node[]} [nodes]   1 dimensional array with nodes
	   */
	  function ArrayNode(nodes) {
	    if (!(this instanceof ArrayNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.nodes = nodes || [];

	    // validate input
	    if (!Array.isArray(this.nodes)
	        || !this.nodes.every(function (node) {return node && node.isNode;})) {
	      throw new TypeError('Array containing Nodes expected');
	    }
	  }

	  ArrayNode.prototype = new Node();

	  ArrayNode.prototype.type = 'ArrayNode';

	  ArrayNode.prototype.isArrayNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @private
	   */
	  ArrayNode.prototype._compile = function (defs) {
	    var asMatrix = (defs.math.config().matrix !== 'array');

	    var nodes = this.nodes.map(function (node) {
	      return node._compile(defs);
	    });

	    return (asMatrix ? 'math.matrix([' : '[') +
	        nodes.join(',') +
	        (asMatrix ? '])' : ']');
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ArrayNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.nodes.length; i++) {
	      var node = this.nodes[i];
	      callback(node, 'nodes[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new ArrayNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ArrayNode} Returns a transformed copy of the node
	   */
	  ArrayNode.prototype.map = function (callback) {
	    var nodes = [];
	    for (var i = 0; i < this.nodes.length; i++) {
	      nodes[i] = this._ifNode(callback(this.nodes[i], 'nodes[' + i + ']', this));
	    }
	    return new ArrayNode(nodes);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ArrayNode}
	   */
	  ArrayNode.prototype.clone = function() {
	    return new ArrayNode(this.nodes.slice(0));
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ArrayNode.prototype._toString = function(options) {
	    return string.format(this.nodes);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ArrayNode.prototype._toTex = function(options) {
	    var s = '\\begin{bmatrix}';

	    this.nodes.forEach(function(node) {
	      if (node.nodes) {
	        s += node.nodes.map(function(childNode) {
	          return childNode.toTex(options);
	        }).join('&');
	      }
	      else {
	        s += node.toTex(options);
	      }

	      // new line
	      s += '\\\\';
	    });
	    s += '\\end{bmatrix}';
	    return s;
	  };

	  return ArrayNode;
	}

	exports.name = 'ArrayNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 464 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/expression/node/Node.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var keywords = __webpack_require__(/*! ../keywords */ 465);
	var extend = __webpack_require__(/*! ../../utils/object */ 21).extend;

	function factory (type, config, load, typed, math) {
	  /**
	   * Node
	   */
	  function Node() {
	    if (!(this instanceof Node)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }

	  /**
	   * Evaluate the node
	   * @param {Object} [scope]  Scope to read/write variables
	   * @return {*}              Returns the result
	   */
	  Node.prototype.eval = function(scope) {
	    return this.compile().eval(scope);
	  };

	  Node.prototype.type = 'Node';

	  Node.prototype.isNode = true;

	  /**
	   * Compile the node to javascript code
	   * @return {{eval: function}} expr  Returns an object with a function 'eval',
	   *                                  which can be invoked as expr.eval([scope]),
	   *                                  where scope is an optional object with
	   *                                  variables.
	   */
	  Node.prototype.compile = function () {
	    // TODO: calling compile(math) is deprecated since version 2.0.0. Remove this warning some day
	    if (arguments.length > 0) {
	      throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');
	    }

	    // definitions globally available inside the closure of the compiled expressions
	    var defs = {
	      math: math.expression.transform,
	      args: {}, // can be filled with names of FunctionAssignment arguments
	      _validateScope: _validateScope
	    };

	    var code = this._compile(defs);

	    var defsCode = Object.keys(defs).map(function (name) {
	      return '    var ' + name + ' = defs["' + name + '"];';
	    });

	    var factoryCode =
	        defsCode.join(' ') +
	        'return {' +
	        '  "eval": function (scope) {' +
	        '    if (scope) _validateScope(scope);' +
	        '    scope = scope || {};' +
	        '    return ' + code + ';' +
	        '  }' +
	        '};';

	    var factory = new Function('defs', factoryCode);
	    return factory(defs);
	  };

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          and constants globally available inside the closure
	   *                          of the compiled expression
	   * @return {string} js
	   * @private
	   */
	  Node.prototype._compile = function (defs) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot compile a Node interface');
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  Node.prototype.forEach = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run forEach on a Node interface');
	  };

	  /**
	   * Create a new Node having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */
	  Node.prototype.map = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run map on a Node interface');
	  };

	  /**
	   * Validate whether an object is a Node, for use with map
	   * @param {Node} node
	   * @returns {Node} Returns the input if it's a node, else throws an Error
	   * @protected
	   */
	  Node.prototype._ifNode = function (node) {
	    if (!(node && node.isNode)) {
	      throw new TypeError('Callback function must return a Node');
	    }

	    return node;
	  };

	  /**
	   * Recursively traverse all nodes in a node tree. Executes given callback for
	   * this node and each of its child nodes.
	   * @param {function(node: Node, path: string, parent: Node)} callback
	   *          A callback called for every node in the node tree.
	   */
	  Node.prototype.traverse = function (callback) {
	    // execute callback for itself
	    callback(this, null, null);

	    // recursively traverse over all childs of a node
	    function _traverse(node, callback) {
	      node.forEach(function (child, path, parent) {
	        callback(child, path, parent);
	        _traverse(child, callback);
	      });
	    }

	    _traverse(this, callback);
	  };

	  /**
	   * Recursively transform a node tree via a transform function.
	   *
	   * For example, to replace all nodes of type SymbolNode having name 'x' with a
	   * ConstantNode with value 2:
	   *
	   *     var res = Node.transform(function (node, path, parent) {
	   *       if (node && node.isSymbolNode) && (node.name == 'x')) {
	   *         return new ConstantNode(2);
	   *       }
	   *       else {
	   *         return node;
	   *       }
	   *     });
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *          A mapping function accepting a node, and returning
	   *          a replacement for the node or the original node.
	   *          Signature: callback(node: Node, index: string, parent: Node) : Node
	   * @return {Node} Returns the original node or its replacement
	   */
	  Node.prototype.transform = function (callback) {
	    // traverse over all childs
	    function _transform (node, callback) {
	      return node.map(function(child, path, parent) {
	        var replacement = callback(child, path, parent);
	        return _transform(replacement, callback);
	      });
	    }

	    var replacement = callback(this, null, null);
	    return _transform(replacement, callback);
	  };

	  /**
	   * Find any node in the node tree matching given filter function. For example, to
	   * find all nodes of type SymbolNode having name 'x':
	   *
	   *     var results = Node.filter(function (node) {
	   *       return (node && node.isSymbolNode) && (node.name == 'x');
	   *     });
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *            A test function returning true when a node matches, and false
	   *            otherwise. Function signature:
	   *            callback(node: Node, index: string, parent: Node) : boolean
	   * @return {Node[]} nodes       An array with nodes matching given filter criteria
	   */
	  Node.prototype.filter = function (callback) {
	    var nodes = [];

	    this.traverse(function (node, path, parent) {
	      if (callback(node, path, parent)) {
	        nodes.push(node);
	      }
	    });

	    return nodes;
	  };

	  // TODO: deprecated since version 1.1.0, remove this some day
	  Node.prototype.find = function () {
	    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
	  };

	  // TODO: deprecated since version 1.1.0, remove this some day
	  Node.prototype.match = function () {
	    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {Node}
	   */
	  Node.prototype.clone = function () {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot clone a Node interface');
	  };

	  /**
	  /**
	   * Get string representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */
	  Node.prototype.toString = function (options) {
	    var customString;
	    if (options && typeof options == "object") {
	        switch (typeof options.handler) {
	          case 'object':
	          case 'undefined':
	            break;
	          case 'function':
	            customString = options.handler(this, options);
	            break;
	          default:
	            throw new TypeError('Object or function expected as callback');
	        }
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    }

	    return this._toString(options);
	  };

	  /**
	   * Internal function to generate the string output.
	   * This has to be implemented by every Node
	   *
	   * @throws {Error}
	   */
	  Node.prototype._toString = function () {
	    //must be implemented by each of the Node implementations
	    throw new Error('_toString not implemented for ' + this.type);
	  };

	  /**
	   * Get LaTeX representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */
	  Node.prototype.toTex = function (options) {
	    var customTex;
	    if (options && typeof options == 'object') {
	      switch (typeof options.handler) {
	        case 'object':
	        case 'undefined':
	          break;
	        case 'function':
	          customTex = options.handler(this, options);
	          break;
	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }

	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    }

	    return this._toTex(options);
	  };

	  /**
	   * Internal function to generate the LaTeX output.
	   * This has to be implemented by every Node
	   *
	   * @param {Object} [options]
	   * @throws {Error}
	   */
	  Node.prototype._toTex = function (options) {
	    //must be implemented by each of the Node implementations
	    throw new Error('_toTex not implemented for ' + this.type);
	  };

	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  Node.prototype.getIdentifier = function () {
	    return this.type;
	  };

	  /**
	   * Get the content of the current Node.
	   * @return {Node} node
	   **/
	  Node.prototype.getContent = function () {
	    return this;
	  };

	  /**
	   * Validate the symbol names of a scope.
	   * Throws an error when the scope contains an illegal symbol.
	   * @param {Object} scope
	   */
	  function _validateScope(scope) {
	    for (var symbol in scope) {
	      if (scope.hasOwnProperty(symbol)) {
	        if (symbol in keywords) {
	          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
	        }
	      }
	    }
	  }

	  return Node;
	}

	exports.name = 'Node';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;


/***/ },
/* 465 */
/*!*********************************************!*\
  !*** ./~/mathjs/lib/expression/keywords.js ***!
  \*********************************************/
/***/ function(module, exports) {

	'use strict';

	// Reserved keywords not allowed to use in the parser
	module.exports = {
	  end: true
	};


/***/ },
/* 466 */
/*!********************************************************!*\
  !*** ./~/mathjs/lib/expression/node/AssignmentNode.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));
	  var ArrayNode = load(__webpack_require__(/*! ./ArrayNode */ 463));

	  var keywords = __webpack_require__(/*! ../keywords */ 465);
	  var operators = __webpack_require__(/*! ../operators */ 467);

	  /**
	   * @constructor AssignmentNode
	   * @extends {Node}
	   * Define a symbol, like "a = 3.2"
	   *
	   * @param {string} name       Symbol name
	   * @param {Node} expr         The expression defining the symbol
	   */
	  function AssignmentNode(name, expr) {
	    if (!(this instanceof AssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
	    if (!(expr && expr.isNode))  throw new TypeError('Node expected for parameter "expr"');
	    if (name in keywords)         throw new Error('Illegal symbol name, "'  + name +  '" is a reserved keyword');

	    this.name = name;
	    this.expr = expr;
	  }

	  AssignmentNode.prototype = new Node();

	  AssignmentNode.prototype.type = 'AssignmentNode';

	  AssignmentNode.prototype.isAssignmentNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @private
	   */
	  AssignmentNode.prototype._compile = function (defs) {
	    return 'scope["' + this.name + '"] = ' + this.expr._compile(defs) + '';
	  };


	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  AssignmentNode.prototype.forEach = function (callback) {
	    callback(this.expr, 'expr', this);
	  };

	  /**
	   * Create a new AssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {AssignmentNode} Returns a transformed copy of the node
	   */
	  AssignmentNode.prototype.map = function (callback) {
	    return new AssignmentNode(this.name, this._ifNode(callback(this.expr, 'expr', this)));
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {AssignmentNode}
	   */
	  AssignmentNode.prototype.clone = function() {
	    return new AssignmentNode(this.name, this.expr);
	  };

	  /*
	   * Is parenthesis needed?
	   * @param {node} node
	   * @param {string} parenthesis
	   * @private
	   */
	  function needParenthesis(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);
	    return (parenthesis === 'all')
	      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
	  }

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AssignmentNode.prototype._toString = function(options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var expr = this.expr.toString(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '(' + expr + ')';
	    }
	    return this.name + ' = ' + expr;
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AssignmentNode.prototype._toTex = function(options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var expr = this.expr.toTex(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '\\left(' + expr + '\\right)';
	    }

	    return latex.toSymbol(this.name) + ':=' + expr;
	  };

	  return AssignmentNode;
	}

	exports.name = 'AssignmentNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 467 */
/*!**********************************************!*\
  !*** ./~/mathjs/lib/expression/operators.js ***!
  \**********************************************/
/***/ function(module, exports) {

	'use strict'

	//list of identifiers of nodes in order of their precedence
	//also contains information about left/right associativity
	//and which other operator the operator is associative with
	//Example:
	// addition is associative with addition and subtraction, because:
	// (a+b)+c=a+(b+c)
	// (a+b)-c=a+(b-c)
	//
	// postfix operators are left associative, prefix operators 
	// are right associative
	//
	//It's also possible to set the following properties:
	// latexParens: if set to false, this node doesn't need to be enclosed
	//              in parentheses when using LaTeX
	// latexLeftParens: if set to false, this !OperatorNode's! 
	//                  left argument doesn't need to be enclosed
	//                  in parentheses
	// latexRightParens: the same for the right argument
	var properties = [
	  { //assignment
	    'AssignmentNode': {},
	    'FunctionAssignmentNode': {}
	  },
	  { //conditional expression
	    'ConditionalNode': {
	      latexLeftParens: false,
	      latexRightParens: false,
	      latexParens: false
	      //conditionals don't need parentheses in LaTeX because
	      //they are 2 dimensional
	    }
	  },
	  { //logical or
	    'OperatorNode:or': {
	      associativity: 'left',
	      associativeWith: []
	    }

	  },
	  { //logical xor
	    'OperatorNode:xor': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //logical and
	    'OperatorNode:and': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //bitwise or
	    'OperatorNode:bitOr': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //bitwise xor
	    'OperatorNode:bitXor': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //bitwise and
	    'OperatorNode:bitAnd': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //relational operators
	    'OperatorNode:equal': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:unequal': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:smaller': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:larger': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:smallerEq': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:largerEq': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //bitshift operators
	    'OperatorNode:leftShift': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:rightArithShift': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:rightLogShift': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //unit conversion
	    'OperatorNode:to': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //range
	    'RangeNode': {}
	  },
	  { //addition, subtraction
	    'OperatorNode:add': {
	      associativity: 'left',
	      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
	    },
	    'OperatorNode:subtract': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //multiply, divide, modulus
	    'OperatorNode:multiply': {
	      associativity: 'left',
	      associativeWith: [
	        'OperatorNode:multiply',
	        'OperatorNode:divide',
	        'Operator:dotMultiply',
	        'Operator:dotDivide'
	      ]
	    },
	    'OperatorNode:divide': {
	      associativity: 'left',
	      associativeWith: [],
	      latexLeftParens: false,
	      latexRightParens: false,
	      latexParens: false
	      //fractions don't require parentheses because
	      //they're 2 dimensional, so parens aren't needed
	      //in LaTeX
	    },
	    'OperatorNode:dotMultiply': {
	      associativity: 'left',
	      associativeWith: [
	        'OperatorNode:multiply',
	        'OperatorNode:divide',
	        'OperatorNode:dotMultiply',
	        'OperatorNode:doDivide'
	      ]
	    },
	    'OperatorNode:dotDivide': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:mod': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //unary prefix operators
	    'OperatorNode:unaryPlus': {
	      associativity: 'right'
	    },
	    'OperatorNode:unaryMinus': {
	      associativity: 'right'
	    },
	    'OperatorNode:bitNot': {
	      associativity: 'right'
	    },
	    'OperatorNode:not': {
	      associativity: 'right'
	    }
	  },
	  { //exponentiation
	    'OperatorNode:pow': {
	      associativity: 'right',
	      associativeWith: [],
	      latexRightParens: false,
	      //the exponent doesn't need parentheses in
	      //LaTeX because it's 2 dimensional
	      //(it's on top)
	    },
	    'OperatorNode:dotPow': {
	      associativity: 'right',
	      associativeWith: []
	    }
	  },
	  { //factorial
	    'OperatorNode:factorial': {
	      associativity: 'left'
	    }
	  },
	  { //matrix transpose
	    'OperatorNode:transpose': {
	      associativity: 'left'
	    }
	  }
	];

	/**
	 * Get the precedence of a Node.
	 * Higher number for higher precedence, starting with 0.
	 * Returns null if the precedence is undefined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {number|null}
	 */
	function getPrecedence (_node, parenthesis) {
	  var node = _node;
	  if (parenthesis !== 'keep') {
	    //ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }
	  var identifier = node.getIdentifier();
	  for (var i = 0; i < properties.length; i++) {
	    if (identifier in properties[i]) {
	      return i;
	    }
	  }
	  return null;
	}

	/**
	 * Get the associativity of an operator (left or right).
	 * Returns a string containing 'left' or 'right' or null if
	 * the associativity is not defined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {string|null}
	 * @throws {Error}
	 */
	function getAssociativity (_node, parenthesis) {
	  var node = _node;
	  if (parenthesis !== 'keep') {
	    //ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }
	  var identifier = node.getIdentifier();
	  var index = getPrecedence(node, parenthesis);
	  if (index === null) {
	    //node isn't in the list
	    return null;
	  }
	  var property = properties[index][identifier];

	  if (property.hasOwnProperty('associativity')) {
	    if (property.associativity === 'left') {
	      return 'left';
	    }
	    if (property.associativity === 'right') {
	      return 'right';
	    }
	    //associativity is invalid
	    throw Error('\'' + identifier + '\' has the invalid associativity \''
	                + property.associativity + '\'.');
	  }

	  //associativity is undefined
	  return null;
	}

	/**
	 * Check if an operator is associative with another operator.
	 * Returns either true or false or null if not defined.
	 *
	 * @param {Node} nodeA
	 * @param {Node} nodeB
	 * @param {string} parenthesis
	 * @return {bool|null}
	 */
	function isAssociativeWith (nodeA, nodeB, parenthesis) {
	  var a = nodeA;
	  var b = nodeB;
	  if (parenthesis !== 'keep') {
	    //ParenthesisNodes are only ignored when not in 'keep' mode
	    var a = nodeA.getContent();
	    var b = nodeB.getContent();
	  }
	  var identifierA = a.getIdentifier();
	  var identifierB = b.getIdentifier();
	  var index = getPrecedence(a, parenthesis);
	  if (index === null) {
	    //node isn't in the list
	    return null;
	  }
	  var property = properties[index][identifierA];

	  if (property.hasOwnProperty('associativeWith')
	      && (property.associativeWith instanceof Array)) {
	    for (var i = 0; i < property.associativeWith.length; i++) {
	      if (property.associativeWith[i] === identifierB) {
	        return true;
	      }
	    }
	    return false;
	  }

	  //associativeWith is not defined
	  return null;
	}

	module.exports.properties = properties;
	module.exports.getPrecedence = getPrecedence;
	module.exports.getAssociativity = getAssociativity;
	module.exports.isAssociativeWith = isAssociativeWith;


/***/ },
/* 468 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/expression/node/BlockNode.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));
	  var ResultSet = load(__webpack_require__(/*! ../../type/resultset/ResultSet */ 289));

	  /**
	   * @constructor BlockNode
	   * @extends {Node}
	   * Holds a set with blocks
	   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
	   *            An array with blocks, where a block is constructed as an Object
	   *            with properties block, which is a Node, and visible, which is
	   *            a boolean. The property visible is optional and is true by default
	   */
	  function BlockNode(blocks) {
	    if (!(this instanceof BlockNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input, copy blocks
	    if (!Array.isArray(blocks)) throw new Error('Array expected');
	    this.blocks = blocks.map(function (block) {
	      var node = block && block.node;
	      var visible = block && block.visible !== undefined ? block.visible : true;

	      if (!(node && node.isNode))      throw new TypeError('Property "node" must be a Node');
	      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');

	      return {
	        node: node,
	        visible: visible
	      }
	    });
	  }

	  BlockNode.prototype = new Node();

	  BlockNode.prototype.type = 'BlockNode';

	  BlockNode.prototype.isBlockNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  BlockNode.prototype._compile = function (defs) {
	    defs.ResultSet = ResultSet;
	    var blocks = this.blocks.map(function (param) {
	      var js = param.node._compile(defs);
	      if (param.visible) {
	        return 'results.push(' + js + ');';
	      }
	      else {
	        return js + ';';
	      }
	    });

	    return '(function () {' +
	        'var results = [];' +
	        blocks.join('') +
	        'return new ResultSet(results);' +
	        '})()';
	  };

	  /**
	   * Execute a callback for each of the child blocks of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  BlockNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.blocks.length; i++) {
	      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
	    }
	  };

	  /**
	   * Create a new BlockNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {BlockNode} Returns a transformed copy of the node
	   */
	  BlockNode.prototype.map = function (callback) {
	    var blocks = [];
	    for (var i = 0; i < this.blocks.length; i++) {
	      var block = this.blocks[i];
	      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
	      blocks[i] = {
	        node: node,
	        visible: block.visible
	      };
	    }
	    return new BlockNode(blocks);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {BlockNode}
	   */
	  BlockNode.prototype.clone = function () {
	    var blocks = this.blocks.map(function (block) {
	      return {
	        node: block.node,
	        visible: block.visible
	      };
	    });

	    return new BlockNode(blocks);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  BlockNode.prototype._toString = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toString(options) + (param.visible ? '' : ';');
	    }).join('\n');
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  BlockNode.prototype._toTex = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toTex(options) + (param.visible ? '' : ';');
	    }).join('\\;\\;\n');
	  };

	  return BlockNode;
	}

	exports.name = 'BlockNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 469 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/expression/node/ConditionalNode.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var latex = __webpack_require__(/*! ../../utils/latex */ 42);
	var operators = __webpack_require__(/*! ../operators */ 467);

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));

	  var BigNumber = load(__webpack_require__(/*! ../../type/bignumber/BigNumber */ 270));
	  var Complex   = load(__webpack_require__(/*! ../../type/complex/Complex */ 278));
	  var Unit      = load(__webpack_require__(/*! ../../type/unit/Unit */ 279));

	  /**
	   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
	   *
	   * @param {Node} condition   Condition, must result in a boolean
	   * @param {Node} trueExpr    Expression evaluated when condition is true
	   * @param {Node} falseExpr   Expression evaluated when condition is true
	   *
	   * @constructor ConditionalNode
	   * @extends {Node}
	   */
	  function ConditionalNode(condition, trueExpr, falseExpr) {
	    if (!(this instanceof ConditionalNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (!(condition && condition.isNode)) throw new TypeError('Parameter condition must be a Node');
	    if (!(trueExpr && trueExpr.isNode))  throw new TypeError('Parameter trueExpr must be a Node');
	    if (!(falseExpr && falseExpr.isNode)) throw new TypeError('Parameter falseExpr must be a Node');

	    this.condition = condition;
	    this.trueExpr = trueExpr;
	    this.falseExpr = falseExpr;
	  }

	  ConditionalNode.prototype = new Node();

	  ConditionalNode.prototype.type = 'ConditionalNode';

	  ConditionalNode.prototype.isConditionalNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  ConditionalNode.prototype._compile = function (defs) {
	    /**
	     * Test whether a condition is met
	     * @param {*} condition
	     * @returns {boolean} true if condition is true or non-zero, else false
	     */
	    defs.testCondition = function (condition) {
	      if (typeof condition === 'number'
	          || typeof condition === 'boolean'
	          || typeof condition === 'string') {
	        return condition ? true : false;
	      }

	      if (condition) {
	        if (condition.isBigNumber === true) {
	          return condition.isZero() ? false : true;
	        }

	        if (condition.isComplex === true) {
	          return (condition.re || condition.im) ? true : false;
	        }

	        if (condition.isUnit === true) {
	          return condition.value ? true : false;
	        }
	      }

	      if (condition === null || condition === undefined) {
	        return false;
	      }

	      throw new TypeError('Unsupported type of condition "' + defs.math['typeof'](condition) + '"');
	    };

	    return (
	    'testCondition(' + this.condition._compile(defs) + ') ? ' +
	    '( ' + this.trueExpr._compile(defs) + ') : ' +
	    '( ' + this.falseExpr._compile(defs) + ')'
	    );
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ConditionalNode.prototype.forEach = function (callback) {
	    callback(this.condition, 'condition', this);
	    callback(this.trueExpr, 'trueExpr', this);
	    callback(this.falseExpr, 'falseExpr', this);
	  };

	  /**
	   * Create a new ConditionalNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ConditionalNode} Returns a transformed copy of the node
	   */
	  ConditionalNode.prototype.map = function (callback) {
	    return new ConditionalNode(
	        this._ifNode(callback(this.condition, 'condition', this)),
	        this._ifNode(callback(this.trueExpr, 'trueExpr', this)),
	        this._ifNode(callback(this.falseExpr, 'falseExpr', this))
	    );
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConditionalNode}
	   */
	  ConditionalNode.prototype.clone = function () {
	    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConditionalNode.prototype._toString = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis);

	    //Enclose Arguments in parentheses if they are an OperatorNode
	    //or have lower or equal precedence
	    //NOTE: enclosing all OperatorNodes in parentheses is a decision
	    //purely based on aesthetics and readability
	    var condition = this.condition.toString(options);
	    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
	    if ((parenthesis === 'all')
	        || (this.condition.type === 'OperatorNode')
	        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {
	      condition = '(' + condition + ')';
	    }

	    var trueExpr = this.trueExpr.toString(options);
	    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
	    if ((parenthesis === 'all')
	        || (this.trueExpr.type === 'OperatorNode')
	        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {
	      trueExpr = '(' + trueExpr + ')';
	    }

	    var falseExpr = this.falseExpr.toString(options);
	    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
	    if ((parenthesis === 'all')
	        || (this.falseExpr.type === 'OperatorNode')
	        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {
	      falseExpr = '(' + falseExpr + ')';
	    }
	    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConditionalNode.prototype._toTex = function (options) {
	    return '\\left\\{\\begin{array}{l l}{'
	        + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if}\\;'
	        + this.condition.toTex(options)
	        + '}\\\\{' + this.falseExpr.toTex(options)
	        + '}, &\\quad{\\text{otherwise}}\\end{array}\\right.';
	  };

	  return ConditionalNode;
	}

	exports.name = 'ConditionalNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 470 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/expression/node/ConstantNode.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var getType = __webpack_require__(/*! ../../utils/types */ 35).type;

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));

	  /**
	   * A ConstantNode holds a constant value like a number or string. A ConstantNode
	   * stores a stringified version of the value and uses this to compile to
	   * JavaScript.
	   *
	   * In case of a stringified number as input, this may be compiled to a BigNumber
	   * when the math instance is configured for BigNumbers.
	   *
	   * Usage:
	   *
	   *     // stringified values with type
	   *     new ConstantNode('2.3', 'number');
	   *     new ConstantNode('true', 'boolean');
	   *     new ConstantNode('hello', 'string');
	   *
	   *     // non-stringified values, type will be automatically detected
	   *     new ConstantNode(2.3);
	   *     new ConstantNode('hello');
	   *
	   * @param {string | number | boolean | null | undefined} value
	   *                            When valueType is provided, value must contain
	   *                            an uninterpreted string representing the value.
	   *                            When valueType is undefined, value can be a
	   *                            number, string, boolean, null, or undefined, and
	   *                            the type will be determined automatically.
	   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',
	   *                              'boolean', 'undefined', 'null'
	   * @constructor ConstantNode
	   * @extends {Node}
	   */
	  function ConstantNode(value, valueType) {
	    if (!(this instanceof ConstantNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (valueType) {
	      if (typeof valueType !== 'string') {
	        throw new TypeError('String expected for parameter "valueType"');
	      }
	      if (typeof value !== 'string') {
	        throw new TypeError('String expected for parameter "value"');
	      }

	      this.value = value;
	      this.valueType = valueType;
	    }
	    else {
	      // stringify the value and determine the type
	      this.value = value + '';
	      this.valueType = getType(value);
	    }

	    if (!SUPPORTED_TYPES[this.valueType]) {
	      throw new TypeError('Unsupported type of value "' + this.valueType + '"');
	    }
	  }

	  var SUPPORTED_TYPES = {
	    'number': true,
	    'string': true,
	    'boolean': true,
	    'undefined': true,
	    'null': true
	  };

	  ConstantNode.prototype = new Node();

	  ConstantNode.prototype.type = 'ConstantNode';

	  ConstantNode.prototype.isConstantNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  ConstantNode.prototype._compile = function (defs) {
	    switch (this.valueType) {
	      case 'number':
	        // TODO: replace this with using config.number
	        var numConfig = defs.math.config().number;
	        if (numConfig === 'bignumber') {
	          return 'math.bignumber("' + this.value + '")';
	        }
	        else if (numConfig === 'fraction') {
	          return 'math.fraction("' + this.value + '")';
	        }
	        else {
	          // remove leading zeros like '003.2' which are not allowed by JavaScript
	          return this.value.replace(/^(0*)[0-9]/, function (match, zeros) {
	            return match.substring(zeros.length);
	          });
	        }

	      case 'string':
	        return '"' + this.value + '"';

	      case 'boolean':
	        return this.value;

	      case 'undefined':
	        return this.value;

	      case 'null':
	        return this.value;

	      default:
	        // TODO: move this error to the constructor?
	        throw new TypeError('Unsupported type of constant "' + this.valueType + '"');
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ConstantNode.prototype.forEach = function (callback) {
	    // nothing to do, we don't have childs
	  };


	  /**
	   * Create a new ConstantNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ConstantNode} Returns a clone of the node
	   */
	  ConstantNode.prototype.map = function (callback) {
	    return this.clone();
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConstantNode}
	   */
	  ConstantNode.prototype.clone = function () {
	    return new ConstantNode(this.value, this.valueType);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConstantNode.prototype._toString = function (options) {
	    switch (this.valueType) {
	      case 'string':
	        return '"' + this.value + '"';

	      default:
	        return this.value;
	    }
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConstantNode.prototype._toTex = function (options) {
	    var value = this.value,
	        index;
	    switch (this.valueType) {
	      case 'string':
	        return '\\mathtt{"' + value + '"}';

	      case 'number':
	        index = value.toLowerCase().indexOf('e');
	        if (index !== -1) {
	          return value.substring(0, index) + '\\cdot10^{' +
	              value.substring(index + 1) + '}';
	        }
	        return value;

	      default:
	        return value;
	    }
	  };

	  return ConstantNode;
	}

	exports.name = 'ConstantNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 471 */
/*!****************************************************************!*\
  !*** ./~/mathjs/lib/expression/node/FunctionAssignmentNode.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var keywords = __webpack_require__(/*! ../keywords */ 465);
	var latex = __webpack_require__(/*! ../../utils/latex */ 42);
	var operators = __webpack_require__(/*! ../operators */ 467);

	function isString (x) {
	  return typeof x === 'string';
	}

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));

	  /**
	   * @constructor FunctionAssignmentNode
	   * @extends {Node}
	   * Function assignment
	   *
	   * @param {string} name           Function name
	   * @param {string[]} params         Function parameter names
	   * @param {Node} expr             The function expression
	   */
	  function FunctionAssignmentNode(name, params, expr) {
	    if (!(this instanceof FunctionAssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
	    if (!Array.isArray(params) || !params.every(isString))  throw new TypeError('Array containing strings expected for parameter "params"');
	    if (!(expr && expr.isNode)) throw new TypeError('Node expected for parameter "expr"');
	    if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');

	    this.name = name;
	    this.params = params;
	    this.expr = expr;
	  }

	  FunctionAssignmentNode.prototype = new Node();

	  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';

	  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  FunctionAssignmentNode.prototype._compile = function (defs) {
	    // add the function arguments to defs (used by SymbolNode and UpdateNode)
	    this.params.forEach(function (variable) {
	      defs.args[variable] = true;
	    });

	    return 'scope["' + this.name + '"] = ' +
	        '  (function () {' +
	        '    var fn = function ' + this.name + '(' + this.params.join(',') + ') {' +
	        '      if (arguments.length != ' + this.params.length + ') {' +
	          // TODO: use util.error.ArgumentsError here?
	          // TODO: test arguments error
	        '        throw new SyntaxError("Wrong number of arguments in function ' + this.name + ' (" + arguments.length + " provided, ' + this.params.length + ' expected)");' +
	        '      }' +
	        '      return ' + this.expr._compile(defs) + '' +
	        '    };' +
	        '    fn.syntax = "' + this.name + '(' + this.params.join(', ') + ')";' +
	        '    return fn;' +
	        '  })()';
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  FunctionAssignmentNode.prototype.forEach = function (callback) {
	    callback(this.expr, 'expr', this);
	  };

	  /**
	   * Create a new FunctionAssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
	   */
	  FunctionAssignmentNode.prototype.map = function (callback) {
	    var expr = this._ifNode(callback(this.expr, 'expr', this));

	    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionAssignmentNode}
	   */
	  FunctionAssignmentNode.prototype.clone = function () {
	    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
	  };

	  /**
	   * Is parenthesis needed?
	   * @param {Node} node
	   * @param {Object} parenthesis
	   * @private
	   */
	  function needParenthesis(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);

	    return (parenthesis === 'all')
	      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
	  }

	  /**
	   * get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionAssignmentNode.prototype._toString = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var expr = this.expr.toString(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '(' + expr + ')';
	    }
	    return 'function ' + this.name +
	        '(' + this.params.join(', ') + ') = ' + expr;
	  };

	  /**
	   * get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionAssignmentNode.prototype._toTex = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var expr = this.expr.toTex(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '\\left(' + expr + '\\right)';
	    }

	    return '\\mathrm{' + this.name
	        + '}\\left(' + this.params.map(latex.toSymbol).join(',') + '\\right):=' + expr;
	  };

	  return FunctionAssignmentNode;
	}
	exports.name = 'FunctionAssignmentNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 472 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/expression/node/IndexNode.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));
	  var RangeNode = load(__webpack_require__(/*! ./RangeNode */ 473));
	  var SymbolNode = load(__webpack_require__(/*! ./SymbolNode */ 474));

	  var BigNumber = load(__webpack_require__(/*! ../../type/bignumber/BigNumber */ 270));
	  var Range = load(__webpack_require__(/*! ../../type/matrix/Range */ 266));

	  var isArray = Array.isArray;

	  /**
	   * @constructor IndexNode
	   * @extends Node
	   *
	   * get a subset of a matrix
	   *
	   * @param {Node} object
	   * @param {Node[]} ranges
	   */
	  function IndexNode(object, ranges) {
	    if (!(this instanceof IndexNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (!(object && object.isNode)) throw new TypeError('Node expected for parameter "object"');
	    if (!isArray(ranges)
	        || !ranges.every(function (range) {return range && range.isNode;})) {
	      throw new TypeError('Array containing Nodes expected for parameter "ranges"');
	    }

	    this.object = object;
	    this.ranges = ranges;
	  }

	  IndexNode.prototype = new Node();

	  IndexNode.prototype.type = 'IndexNode';

	  IndexNode.prototype.isIndexNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  IndexNode.prototype._compile = function (defs) {
	    return this.compileSubset(defs);
	  };

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs           Object which can be used to define functions
	   *                                or constants globally available for the
	   *                                compiled expression
	   * @param {string} [replacement]  If provided, the function returns
	   *                                  "math.subset(obj, math.index(...), replacement)"
	   *                                Else, the function returns
	   *                                  "math.subset(obj, math.index(...))"
	   * @return {string} js
	   * @returns {string}
	   */
	  IndexNode.prototype.compileSubset = function (defs, replacement) {
	    // check whether any of the ranges expressions uses the context symbol 'end'
	    function test(node) {
	      return (node && node.isSymbolNode) && (node.name == 'end');
	    }

	    var someUseEnd = false;
	    var rangesUseEnd = this.ranges.map(function (range) {
	      var useEnd = range.filter(test).length > 0;
	      someUseEnd = useEnd ? useEnd : someUseEnd;
	      return useEnd;
	    });

	    // create a Range from start, step and end
	    defs.range = function (start, end, step) {
	      return new Range(
	          (start && start.isBigNumber === true) ? start.toNumber() : start,
	          (end   && end.isBigNumber === true)   ? end.toNumber()   : end,
	          (step  && step.isBigNumber === true)  ? step.toNumber()  : step
	      );
	    };

	    // TODO: implement support for bignumber (currently bignumbers are silently
	    //       reduced to numbers when changing the value to zero-based)

	    // TODO: Optimization: when the range values are ConstantNodes,
	    //       we can beforehand resolve the zero-based value

	    var ranges = this.ranges.map(function (range, i) {
	      var useEnd = rangesUseEnd[i];
	      if (range && range.isRangeNode) {
	        if (useEnd) {
	          defs.args.end = true;

	          // resolve end and create range
	          return '(function () {' +
	              '  var end = size[' + i + '];' +
	              '  return range(' +
	              '    ' + range.start._compile(defs) + ', ' +
	              '    ' + range.end._compile(defs) + ', ' +
	              '    ' + (range.step ? range.step._compile(defs) : '1') +
	              '  );' +
	              '})()';
	        }
	        else {
	          // create range
	          return 'range(' +
	              range.start._compile(defs) + ', ' +
	              range.end._compile(defs) + ', ' +
	              (range.step ? range.step._compile(defs) : '1') +
	              ')';
	        }
	      }
	      else {
	        if (useEnd) {
	          defs.args.end = true;

	          // resolve the parameter 'end'
	          return '(function () {' +
	              '  var end = size[' + i + '];' +
	              '  return ' + range._compile(defs) + ';' +
	              '})()'
	        }
	        else {
	          // just evaluate the expression
	          return range._compile(defs);
	        }
	      }
	    });

	    // if some parameters use the 'end' parameter, we need to calculate the size
	    if (someUseEnd) {
	      return '(function () {' +
	          '  var obj = ' + this.object._compile(defs) + ';' +
	          '  var size = math.size(obj).valueOf();' +
	          '  return math.subset(' +
	          '    obj, ' +
	          '    math.index(' + ranges.join(', ') + ')' +
	          '    ' + (replacement ? (', ' + replacement) : '') +
	          '  );' +
	          '})()';
	    }
	    else {
	      return 'math.subset(' +
	          this.object._compile(defs) + ',' +
	          'math.index(' + ranges.join(', ') + ')' +
	          (replacement ? (', ' + replacement) : '') +
	          ')';
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  IndexNode.prototype.forEach = function (callback) {
	    // object
	    callback(this.object, 'object', this);

	    // ranges
	    for (var i = 0; i < this.ranges.length; i++) {
	      callback(this.ranges[i], 'ranges[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new IndexNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {IndexNode} Returns a transformed copy of the node
	   */
	  IndexNode.prototype.map = function (callback) {
	    var object = this._ifNode(callback(this.object, 'object', this));

	    var ranges = [];
	    for (var i = 0; i < this.ranges.length; i++) {
	      ranges[i] = this._ifNode(callback(this.ranges[i], 'ranges[' + i + ']', this));
	    }

	    return new IndexNode(object, ranges);
	  };

	  /**
	   * Get the name of the object linked to this IndexNode
	   * @return {string} name
	   */
	  IndexNode.prototype.objectName = function () {
	    return this.object.name;
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {IndexNode}
	   */
	  IndexNode.prototype.clone = function () {
	    return new IndexNode(this.object, this.ranges.slice(0));
	  };

	  /**
	   * Is parenthesis needed?
	   * @private
	   */
	  function needParenthesis(node) {
	    switch (node.object.type) {
	      case 'ArrayNode':
	      case 'ConstantNode': //TODO don't know if this one makes sense
	      case 'SymbolNode':
	      case 'ParenthesisNode':
	        //those nodes don't need parentheses within an index node
	        return false;
	      default:
	        return true;
	    }
	  }

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  IndexNode.prototype._toString = function (options) {
	    var object = this.object.toString(options);
	    if (needParenthesis(this)) {
	      object = '(' + object + '(';
	    }
	    // format the parameters like "[1, 0:5]"
	    return object + '[' + this.ranges.join(', ') + ']';
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  IndexNode.prototype._toTex = function (options) {
	    var object = this.object.toTex(options);
	    if (needParenthesis(this)) {
	      object = '\\left(' + object + '\\right)';
	    }

	    var ranges = this.ranges.map(function (range) {
	      return range.toTex(options);
	    });

	    return object + '_{' + ranges.join(',') + '}';
	  };

	  return IndexNode;
	}

	exports.name = 'IndexNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 473 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/expression/node/RangeNode.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var operators = __webpack_require__(/*! ../operators */ 467);

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));

	  /**
	   * @constructor RangeNode
	   * @extends {Node}
	   * create a range
	   * @param {Node} start  included lower-bound
	   * @param {Node} end    included lower-bound
	   * @param {Node} [step] optional step
	   */
	  function RangeNode(start, end, step) {
	    if (!(this instanceof RangeNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate inputs
	    if (!(start && start.isNode)) throw new TypeError('Node expected');
	    if (!(end && end.isNode)) throw new TypeError('Node expected');
	    if (step && !(step && step.isNode)) throw new TypeError('Node expected');
	    if (arguments.length > 3) throw new Error('Too many arguments');

	    this.start = start;         // included lower-bound
	    this.end = end;           // included upper-bound
	    this.step = step || null;  // optional step
	  }

	  RangeNode.prototype = new Node();

	  RangeNode.prototype.type = 'RangeNode';

	  RangeNode.prototype.isRangeNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  RangeNode.prototype._compile = function (defs) {
	    return 'math.range(' +
	        this.start._compile(defs) + ', ' +
	        this.end._compile(defs) +
	        (this.step ? (', ' + this.step._compile(defs)) : '') +
	        ')';
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  RangeNode.prototype.forEach = function (callback) {
	    callback(this.start, 'start', this);
	    callback(this.end, 'end', this);
	    if (this.step) {
	      callback(this.step, 'step', this);
	    }
	  };

	  /**
	   * Create a new RangeNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {RangeNode} Returns a transformed copy of the node
	   */
	  RangeNode.prototype.map = function (callback) {
	    return new RangeNode(
	        this._ifNode(callback(this.start, 'start', this)),
	        this._ifNode(callback(this.end, 'end', this)),
	        this.step && this._ifNode(callback(this.step, 'step', this))
	    );
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {RangeNode}
	   */
	  RangeNode.prototype.clone = function () {
	    return new RangeNode(this.start, this.end, this.step && this.step);
	  };

	  /**
	   * Calculate the necessary parentheses
	   * @param {Node} node
	   * @param {string} parenthesis
	   * @return {Object} parentheses
	   * @private
	   */
	  function calculateNecessaryParentheses(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var parens = {};

	    var startPrecedence = operators.getPrecedence(node.start, parenthesis);
	    parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence))
	      || (parenthesis === 'all');

	    if (node.step) {
	      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
	      parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence))
	        || (parenthesis === 'all');
	    }

	    var endPrecedence = operators.getPrecedence(node.end, parenthesis);
	    parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence))
	      || (parenthesis === 'all');

	    return parens;
	  }

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  RangeNode.prototype._toString = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);

	    //format string as start:step:stop
	    var str;

	    var start = this.start.toString(options);
	    if (parens.start) {
	      start = '(' + start + ')';
	    }
	    str = start;

	    if (this.step) {
	      var step = this.step.toString(options);
	      if (parens.step) {
	        step = '(' + step + ')';
	      }
	      str += ':' + step;
	    }

	    var end = this.end.toString(options);
	    if (parens.end) {
	      end = '(' + end + ')';
	    }
	    str += ':' + end;

	    return str;
	  };

	  /**
	   * Get LaTeX representation
	   * @params {Object} options
	   * @return {string} str
	   */
	  RangeNode.prototype._toTex = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);

	    var str = this.start.toTex(options);
	    if (parens.start) {
	      str = '\\left(' + str + '\\right)';
	    }

	    if (this.step) {
	      var step = this.step.toTex(options);
	      if (parens.step) {
	        step = '\\left(' + step + '\\right)';
	      }
	      str += ':' + step;
	    }

	    var end = this.end.toTex(options);
	    if (parens.end) {
	      end = '\\left(' + end + '\\right)';
	    }
	    str += ':' + end;

	    return str;
	  };

	  return RangeNode;
	}

	exports.name = 'RangeNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 474 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/expression/node/SymbolNode.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	function factory (type, config, load, typed, math) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));

	  var Unit = load(__webpack_require__(/*! ../../type/unit/Unit */ 279));

	  /**
	   * @constructor SymbolNode
	   * @extends {Node}
	   * A symbol node can hold and resolve a symbol
	   * @param {string} name
	   * @extends {Node}
	   */
	  function SymbolNode(name) {
	    if (!(this instanceof SymbolNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (typeof name !== 'string')  throw new TypeError('String expected for parameter "name"');

	    this.name = name;
	  }

	  SymbolNode.prototype = new Node();

	  SymbolNode.prototype.type = 'SymbolNode';

	  SymbolNode.prototype.isSymbolNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  SymbolNode.prototype._compile = function (defs) {
	    // add a function to the definitions
	    defs['undef'] = undef;
	    defs['Unit'] = Unit;

	    if (this.name in defs.args) {
	      // this is a FunctionAssignment argument
	      // (like an x when inside the expression of a function assignment `f(x) = ...`)
	      return this.name;
	    }
	    else if (this.name in defs.math) {
	      return '("' + this.name + '" in scope ? scope["' + this.name + '"] : math["' + this.name + '"])';
	    }
	    else {
	      return '(' +
	          '"' + this.name + '" in scope ? scope["' + this.name + '"] : ' +
	          (Unit.isValuelessUnit(this.name) ?
	          'new Unit(null, "' + this.name + '")' :
	          'undef("' + this.name + '")') +
	          ')';
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  SymbolNode.prototype.forEach = function (callback) {
	    // nothing to do, we don't have childs
	  };

	  /**
	   * Create a new SymbolNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {SymbolNode} Returns a clone of the node
	   */
	  SymbolNode.prototype.map = function (callback) {
	    return this.clone();
	  };

	  /**
	   * Throws an error 'Undefined symbol {name}'
	   * @param {string} name
	   */
	  function undef (name) {
	    throw new Error('Undefined symbol ' + name);
	  }

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {SymbolNode}
	   */
	  SymbolNode.prototype.clone = function() {
	    return new SymbolNode(this.name);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  SymbolNode.prototype._toString = function(options) {
	    return this.name;
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  SymbolNode.prototype._toTex = function(options) {
	    var isUnit = false;
	    if ((typeof math[this.name] === 'undefined') && Unit.isValuelessUnit(this.name)) {
	      isUnit = true;
	    }
	    var symbol = latex.toSymbol(this.name, isUnit);
	    if (symbol[0] === '\\') {
	      //no space needed if the symbol starts with '\'
	      return symbol;
	    }
	    //the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol
	    return ' ' + symbol;
	  };

	  return SymbolNode;
	}

	exports.name = 'SymbolNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;


/***/ },
/* 475 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/expression/node/OperatorNode.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var latex = __webpack_require__(/*! ../../utils/latex */ 42);
	var operators = __webpack_require__(/*! ../operators */ 467);

	function factory (type, config, load, typed, math) {
	  var Node         = load(__webpack_require__(/*! ./Node */ 464));
	  var ConstantNode = load(__webpack_require__(/*! ./ConstantNode */ 470));
	  var SymbolNode   = load(__webpack_require__(/*! ./SymbolNode */ 474));
	  var FunctionNode = load(__webpack_require__(/*! ./FunctionNode */ 476));

	  /**
	   * @constructor OperatorNode
	   * @extends {Node}
	   * An operator with two arguments, like 2+3
	   *
	   * @param {string} op       Operator name, for example '+'
	   * @param {string} fn       Function name, for example 'add'
	   * @param {Node[]} args     Operator arguments
	   */
	  function OperatorNode(op, fn, args) {
	    if (!(this instanceof OperatorNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    //validate input
	    if (typeof op !== 'string') {
	      throw new TypeError('string expected for parameter "op"');
	    }
	    if (typeof fn !== 'string') {
	      throw new TypeError('string expected for parameter "fn"');
	    }
	    if (!Array.isArray(args)
	        || !args.every(function (node) {return node && node.isNode;})) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }

	    this.op = op;
	    this.fn = fn;
	    this.args = args || [];
	  }

	  OperatorNode.prototype = new Node();

	  OperatorNode.prototype.type = 'OperatorNode';

	  OperatorNode.prototype.isOperatorNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  OperatorNode.prototype._compile = function (defs) {
	    if (!(this.fn in defs.math)) {
	      throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
	    }

	    var args = this.args.map(function (arg) {
	      return arg._compile(defs);
	    });
	    return 'math.' + this.fn + '(' + args.join(', ') + ')';
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  OperatorNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new OperatorNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */
	  OperatorNode.prototype.map = function (callback) {
	    var args = [];
	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }
	    return new OperatorNode(this.op, this.fn, args);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {OperatorNode}
	   */
	  OperatorNode.prototype.clone = function () {
	    return new OperatorNode(this.op, this.fn, this.args.slice(0));
	  };

	  /**
	   * Calculate which parentheses are necessary. Gets an OperatorNode
	   * (which is the root of the tree) and an Array of Nodes
	   * (this.args) and returns an array where 'true' means that an argument
	   * has to be enclosed in parentheses whereas 'false' means the opposite.
	   *
	   * @param {OperatorNode} root
	   * @param {string} parenthesis
	   * @param {Node[]} arguments
	   * @param {bool}
	   * @return {bool[]}
	   * @private
	   */
	  function calculateNecessaryParentheses(root, parenthesis, args, latex) {
	    //precedence of the root OperatorNode
	    var precedence = operators.getPrecedence(root, parenthesis);
	    var associativity = operators.getAssociativity(root, parenthesis);

	    if ((parenthesis === 'all') || (args.length > 2)) {
	      var parens = [];
	      args.forEach(function (arg) {
	        switch (arg.getContent().type) { //Nodes that don't need extra parentheses
	          case 'ArrayNode':
	          case 'ConstantNode':
	          case 'SymbolNode':
	          case 'ParenthesisNode':
	            parens.push(false);
	            break;
	          default:
	            parens.push(true);
	        }
	      });
	      return parens;
	    }

	    switch (args.length) {
	      case 0:
	        return [];
	      case 1: //unary operators
	              //precedence of the operand
	        var operandPrecedence = operators.getPrecedence(args[0], parenthesis);

	        //handle special cases for LaTeX, where some of the parentheses aren't needed
	        if (latex && (operandPrecedence !== null)) {
	          var operandIdentifier;
	          var rootIdentifier;
	          if (parenthesis === 'keep') {
	            operandIdentifier = args[0].getIdentifier();
	            rootIdentifier = root.getIdentifier();
	          }
	          else {
	            //Ignore Parenthesis Nodes when not in 'keep' mode
	            operandIdentifier = args[0].getContent().getIdentifier();
	            rootIdentifier = root.getContent().getIdentifier();
	          }
	          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
	            return [false];
	          }

	          if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
	            return [false];
	          }
	        }

	        if (operandPrecedence === null) {
	          //if the operand has no defined precedence, no parens are needed
	          return [false];
	        }

	        if (operandPrecedence <= precedence) {
	          //if the operands precedence is lower, parens are needed
	          return [true];
	        }

	        //otherwise, no parens needed
	        return [false];

	      case 2: //binary operators
	        var lhsParens; //left hand side needs parenthesis?
	        //precedence of the left hand side
	        var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);
	        //is the root node associative with the left hand side
	        var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);

	        if (lhsPrecedence === null) {
	          //if the left hand side has no defined precedence, no parens are needed
	          //FunctionNode for example
	          lhsParens = false;
	        }
	        else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {
	          //In case of equal precedence, if the root node is left associative
	          // parens are **never** necessary for the left hand side.
	          //If it is right associative however, parens are necessary
	          //if the root node isn't associative with the left hand side
	          lhsParens = true;
	        }
	        else if (lhsPrecedence < precedence) {
	          lhsParens = true;
	        }
	        else {
	          lhsParens = false;
	        }

	        var rhsParens; //right hand side needs parenthesis?
	        //precedence of the right hand side
	        var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);
	        //is the root node associative with the right hand side?
	        var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);

	        if (rhsPrecedence === null) {
	          //if the right hand side has no defined precedence, no parens are needed
	          //FunctionNode for example
	          rhsParens = false;
	        }
	        else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {
	          //In case of equal precedence, if the root node is right associative
	          // parens are **never** necessary for the right hand side.
	          //If it is left associative however, parens are necessary
	          //if the root node isn't associative with the right hand side
	          rhsParens = true;
	        }
	        else if (rhsPrecedence < precedence) {
	          rhsParens = true;
	        }
	        else {
	          rhsParens = false;
	        }

	        //handle special cases for LaTeX, where some of the parentheses aren't needed
	        if (latex) {
	          var rootIdentifier;
	          var lhsIdentifier;
	          var rhsIdentifier;
	          if (parenthesis === 'keep') {
	            rootIdentifier = root.getIdentifier();
	            lhsIdentifier = root.args[0].getIdentifier();
	            rhsIdentifier = root.args[1].getIdentifier();
	          }
	          else {
	            //Ignore ParenthesisNodes when not in 'keep' mode
	            rootIdentifier = root.getContent().getIdentifier();
	            lhsIdentifier = root.args[0].getContent().getIdentifier();
	            rhsIdentifier = root.args[1].getContent().getIdentifier();
	          }

	          if (lhsPrecedence !== null) {
	            if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
	              lhsParens = false;
	            }

	            if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
	              lhsParens = false;
	            }
	          }

	          if (rhsPrecedence !== null) {
	            if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {
	              rhsParens = false;
	            }

	            if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
	              rhsParens = false;
	            }
	          }
	        }

	        return [lhsParens, rhsParens];
	    }
	  }

	  /**
	   * Get string representation.
	   * @param {Object} options
	   * @return {string} str
	   */
	  OperatorNode.prototype._toString = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, args, false);

	    switch (args.length) {
	      case 1: //unary operators
	        var assoc = operators.getAssociativity(this, parenthesis);

	        var operand = args[0].toString(options);
	        if (parens[0]) {
	          operand = '(' + operand + ')';
	        }

	        if (assoc === 'right') { //prefix operator
	          return this.op + operand;
	        }
	        else if (assoc === 'left') { //postfix
	          return operand + this.op;
	        }

	        //fall back to postfix
	        return operand + this.op;

	      case 2:
	        var lhs = args[0].toString(options); //left hand side
	        var rhs = args[1].toString(options); //right hand side
	        if (parens[0]) { //left hand side in parenthesis?
	          lhs = '(' + lhs + ')';
	        }
	        if (parens[1]) { //right hand side in parenthesis?
	          rhs = '(' + rhs + ')';
	        }

	        return lhs + ' ' + this.op + ' ' + rhs;

	      default:
	        //fallback to formatting as a function call
	        return this.fn + '(' + this.args.join(', ') + ')';
	    }
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  OperatorNode.prototype._toTex = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, args, true);
	    var op = latex.operators[this.fn];
	    op = typeof op === 'undefined' ? this.op : op; //fall back to using this.op

	    switch (args.length) {
	      case 1: //unary operators
	        var assoc = operators.getAssociativity(this, parenthesis);

	        var operand = args[0].toTex(options);
	        if (parens[0]) {
	          operand = '\\left(' + operand + '\\right)';
	        }

	        if (assoc === 'right') { //prefix operator
	          return op + operand;
	        }
	        else if (assoc === 'left') { //postfix operator
	          return operand + op;
	        }

	        //fall back to postfix
	        return operand + op;

	      case 2: //binary operators
	        var lhs = args[0]; //left hand side
	        var lhsTex = lhs.toTex(options);
	        if (parens[0]) {
	          lhsTex = '\\left(' + lhsTex + '\\right)';
	        }

	        var rhs = args[1]; //right hand side
	        var rhsTex = rhs.toTex(options);
	        if (parens[1]) {
	          rhsTex = '\\left(' + rhsTex + '\\right)';
	        }

	        //handle some exceptions (due to the way LaTeX works)
	        var lhsIdentifier;
	        if (parenthesis === 'keep') {
	          lhsIdentifier = lhs.getIdentifier();
	        }
	        else {
	          //Ignore ParenthesisNodes if in 'keep' mode
	          lhsIdentifier = lhs.getContent().getIdentifier();
	        }
	        switch (this.getIdentifier()) {
	          case 'OperatorNode:divide':
	            //op contains '\\frac' at this point
	            return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
	          case 'OperatorNode:pow':
	            lhsTex = '{' + lhsTex + '}';
	            rhsTex = '{' + rhsTex + '}';
	            switch (lhsIdentifier) {
	              case 'ConditionalNode': //
	              case 'OperatorNode:divide':
	                lhsTex = '\\left(' + lhsTex + '\\right)';
	            }
	        }
	        return lhsTex + op + rhsTex;

	      default:
	        //fall back to formatting as a function call
	        //as this is a fallback, it doesn't use
	        //fancy function names
	        return '\\mathrm{' + this.fn + '}\\left('
	            + args.map(function (arg) {
	              return arg.toTex(options);
	            }).join(',') + '\\right)';
	    }
	  };

	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  OperatorNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.fn;
	  };

	  return OperatorNode;
	}

	exports.name = 'OperatorNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;


/***/ },
/* 476 */
/*!******************************************************!*\
  !*** ./~/mathjs/lib/expression/node/FunctionNode.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var latex = __webpack_require__(/*! ../../utils/latex */ 42);

	function factory (type, config, load, typed, math) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));
	  var SymbolNode = load(__webpack_require__(/*! ./SymbolNode */ 474));

	  /**
	   * @constructor FunctionNode
	   * @extends {Node}
	   * invoke a list with arguments on a node
	   * @param {string} name
	   * @param {Node[]} args
	   */
	  function FunctionNode(name, args) {
	    if (!(this instanceof FunctionNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (typeof name !== 'string') throw new TypeError('string expected for parameter "name"');
	    if (!Array.isArray(args)
	        || !args.every(function (arg) {return arg && arg.isNode;})) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }

	    this.name = name;
	    this.args = args || [];
	  }

	  FunctionNode.prototype = new Node();

	  FunctionNode.prototype.type = 'FunctionNode';

	  FunctionNode.prototype.isFunctionNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  FunctionNode.prototype._compile = function (defs) {
	    var fn = defs.math[this.name];
	    var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);

	    // compile the parameters
	    var args = this.args.map(function (arg) {
	      return arg._compile(defs);
	    });

	    if (isRaw) {
	      // pass unevaluated parameters (nodes) to the function
	      var paramsName;
	      var i = 0;
	      do {
	        paramsName = 'p' + i;
	        i++;
	      }
	      while (paramsName in defs);
	      defs[paramsName] = this.args;

	      return '("' + this.name + '" in scope ? ' +
	          'scope["' + this.name + '"](' + args.join(', ') + ') : ' +
	          'math["' + this.name + '"]' + '(' + paramsName + ', math, scope))';
	    }
	    else {
	      // "regular" evaluation
	      var symbol = new SymbolNode(this.name);
	      return symbol._compile(defs) + '(' + args.join(', ') + ')';
	    }
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  FunctionNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };

	  /**
	   * Create a new FunctionNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionNode} Returns a transformed copy of the node
	   */
	  FunctionNode.prototype.map = function (callback) {
	    var args = [];
	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }
	    return new FunctionNode(this.name, args);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionNode}
	   */
	  FunctionNode.prototype.clone = function () {
	    return new FunctionNode(this.name, this.args.slice(0));
	  };

	  //backup Node's toString function
	  //@private
	  var nodeToString = FunctionNode.prototype.toString;

	  /**
	   * Get string representation. (wrapper function)
	   * This overrides parts of Node's toString function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toString
	   * function.
	   *
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  FunctionNode.prototype.toString = function (options) {
	    var customString;
	    if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(this.name)) {
	      //callback is a map of callback functions
	      customString = options.handler[this.name](this, options);
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    }

	    //fall back to Node's toString
	    return nodeToString.call(this, options);
	  }

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionNode.prototype._toString = function (options) {
	    // format the parameters like "add(2, 4.2)"
	    return this.name + '(' + this.args.join(', ') + ')';
	  };

	  /*
	   * Expand a LaTeX template
	   *
	   * @param {string} template
	   * @param {Node} node
	   * @param {Object} options
	   * @private
	   **/
	  function expandTemplate(template, node, options) {
	    var latex = '';

	    // Match everything of the form ${identifier} or ${identifier[2]} or $$
	    // while submatching identifier and 2 (in the second case)
	    var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');

	    var inputPos = 0;   //position in the input string
	    var match;
	    while ((match = regex.exec(template)) !== null) {   //go through all matches
	      // add everything in front of the match to the LaTeX string
	      latex += template.substring(inputPos, match.index);
	      inputPos = match.index;

	      if (match[0] === '$$') { // escaped dollar sign
	        latex += '$';
	        inputPos++;
	      }
	      else { // template parameter
	        inputPos += match[0].length;
	        var property = node[match[1]];
	        if (!property) {
	          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
	        }
	        if (match[2] === undefined) { //no square brackets
	          switch (typeof property) {
	            case 'string':
	              latex += property;
	              break;
	            case 'object':
	              if (property.isNode) {
	                latex += property.toTex(options);
	              }
	              else if (Array.isArray(property)) {
	                //make array of Nodes into comma separated list
	                latex += property.map(function (arg, index) {
	                  if (arg && arg.isNode) {
	                    return arg.toTex(options);
	                  }
	                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
	                }).join(',');
	              }
	              else {
	                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	              }
	              break;
	            default:
	              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	          }
	        }
	        else { //with square brackets
	          if (property[match[2]] && property[match[2]].isNode) {
	            latex += property[match[2]].toTex(options);
	          }
	          else {
	            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
	          }
	        }
	      }
	    }
	    latex += template.slice(inputPos);  //append rest of the template

	    return latex;
	  }

	  //backup Node's toTex function
	  //@private
	  var nodeToTex = FunctionNode.prototype.toTex;

	  /**
	   * Get LaTeX representation. (wrapper function)
	   * This overrides parts of Node's toTex function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toTex
	   * function.
	   *
	   * @param {Object} options
	   * @return {string}
	   */
	  FunctionNode.prototype.toTex = function (options) {
	    var customTex;
	    if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(this.name)) {
	      //callback is a map of callback functions
	      customTex = options.handler[this.name](this, options);
	    }

	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    }

	    //fall back to Node's toTex
	    return nodeToTex.call(this, options);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionNode.prototype._toTex = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';


	    var args = this.args.map(function (arg) { //get LaTeX of the arguments
	      return arg.toTex(options);
	    });

	    var latexConverter;

	    if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {
	      //.toTex is a callback function
	      latexConverter = math[this.name].toTex;
	    }

	    var customToTex;
	    switch (typeof latexConverter) {
	      case 'function': //a callback function
	        customToTex = latexConverter(this, options);
	        break;
	      case 'string': //a template string
	        customToTex = expandTemplate(latexConverter, this, options);
	        break;
	      case 'object': //an object with different "converters" for different numbers of arguments
	        switch (typeof latexConverter[args.length]) {
	          case 'function':
	            customToTex = latexConverter[args.length](this, options);
	            break;
	          case 'string':
	            customToTex = expandTemplate(latexConverter[args.length], this, options);
	            break;
	        }
	    }

	    if (typeof customToTex !== 'undefined') {
	      return customToTex;
	    }

	    return expandTemplate(latex.defaultTemplate, this, options);
	  };

	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  FunctionNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.name;
	  };

	  return FunctionNode;
	}

	exports.name = 'FunctionNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;


/***/ },
/* 477 */
/*!*********************************************************!*\
  !*** ./~/mathjs/lib/expression/node/ParenthesisNode.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));

	  /**
	   * @constructor ParenthesisNode
	   * @extends {Node}
	   * A parenthesis node describes manual parenthesis from the user input
	   * @param {Node} content
	   * @extends {Node}
	   */
	  function ParenthesisNode(content) {
	    if (!(this instanceof ParenthesisNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    // validate input
	    if (!(content && content.isNode)) {
	      throw new TypeError('Node expected for parameter "content"');
	    }

	    this.content = content;
	  }

	  ParenthesisNode.prototype = new Node();

	  ParenthesisNode.prototype.type = 'ParenthesisNode';

	  ParenthesisNode.prototype.isParenthesisNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  ParenthesisNode.prototype._compile = function (defs) {
	    return this.content._compile(defs);
	  };

	  /**
	   * Get the content of the current Node.
	   * @return {Node} content
	   * @override
	   **/
	  ParenthesisNode.prototype.getContent = function () {
	    return this.content.getContent();
	  }

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ParenthesisNode.prototype.forEach = function (callback) {
	    callback(this.content, 'content', this);
	  };

	  /**
	   * Create a new ParenthesisNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ParenthesisNode} Returns a clone of the node
	   */
	  ParenthesisNode.prototype.map = function (callback) {
	    var content = callback(this.content, 'content', this);
	    return new ParenthesisNode(content);
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ParenthesisNode}
	   */
	  ParenthesisNode.prototype.clone = function() {
	    return new ParenthesisNode(this.content);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ParenthesisNode.prototype._toString = function(options) {
	    if ((!options) || (options && options.parenthesis === 'keep')) {
	      return '(' + this.content.toString(options) + ')';
	    }
	    return this.content.toString(options);
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ParenthesisNode.prototype._toTex = function(options) {
	    if ((!options) || (options && options.parenthesis === 'keep')) {
	      return '\\left(' + this.content.toTex(options) + '\\right)';
	    }
	    return this.content.toTex(options);
	  };

	  return ParenthesisNode;
	}

	exports.name = 'ParenthesisNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 478 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/expression/node/UpdateNode.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var Node = load(__webpack_require__(/*! ./Node */ 464));
	  var IndexNode = load(__webpack_require__(/*! ./IndexNode */ 472));

	  /**
	   * @constructor UpdateNode
	   * @extends {Node}
	   * Update a matrix subset, like A[2,3] = 4.5
	   *
	   * @param {IndexNode} index             IndexNode containing symbol and ranges
	   * @param {Node} expr                   The expression defining the symbol
	   */
	  function UpdateNode(index, expr) {
	    if (!(this instanceof UpdateNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!(index && index.isIndexNode)) {
	      throw new TypeError('Expected IndexNode for parameter "index"');
	    }
	    if (!(expr && expr.isNode)) {
	      throw new TypeError('Expected Node for parameter "expr"');
	    }

	    this.index = index;
	    this.expr = expr;
	  }

	  UpdateNode.prototype = new Node();

	  UpdateNode.prototype.type = 'UpdateNode';

	  UpdateNode.prototype.isUpdateNode = true;

	  /**
	   * Compile the node to javascript code
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @return {string} js
	   * @private
	   */
	  UpdateNode.prototype._compile = function (defs) {
	    var lhs = (this.index.objectName() in defs.args)
	        ? this.name + ' = ' // this is a FunctionAssignment argument
	        : 'scope["' + this.index.objectName() + '\"]';

	    var rhs = this.index.compileSubset(defs, this.expr._compile(defs));

	    return lhs + ' = ' + rhs;
	  };

	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  UpdateNode.prototype.forEach = function (callback) {
	    callback(this.index, 'index', this);
	    callback(this.expr, 'expr', this);
	  };

	  /**
	   * Create a new UpdateNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {UpdateNode} Returns a transformed copy of the node
	   */
	  UpdateNode.prototype.map = function (callback) {
	    return new UpdateNode(
	        this._ifNode(callback(this.index, 'index', this)),
	        this._ifNode(callback(this.expr, 'expr', this))
	    );
	  };

	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {UpdateNode}
	   */
	  UpdateNode.prototype.clone = function () {
	    return new UpdateNode(this.index, this.expr);
	  };

	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */
	  UpdateNode.prototype._toString = function (options) {
	    var expr = this.expr.toString(options);
	    if (options && options.parenthesis === 'all') {
	      expr = '(' + expr + ')';
	    }
	    return this.index.toString(options) + ' = ' + expr;
	  };

	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */
	  UpdateNode.prototype._toTex = function (options) {
	    var expr = this.expr.toTex(options);
	    if (options && options.parenthesis === 'all') {
	      expr = '\\left(' + expr + '\\right)';
	    }
	    return this.index.toTex(options) + ':=' + expr;
	  };

	  return UpdateNode;
	}

	exports.name = 'UpdateNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ },
/* 479 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/expression/function/eval.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var deepMap = __webpack_require__(/*! ../../utils/collection/deepMap */ 45);

	function factory (type, config, load, typed) {
	  var parse = load(__webpack_require__(/*! ../parse */ 462));

	  /**
	   * Evaluate an expression.
	   *
	   * Syntax:
	   *
	   *     math.eval(expr)
	   *     math.eval(expr, scope)
	   *     math.eval([expr1, expr2, expr3, ...])
	   *     math.eval([expr1, expr2, expr3, ...], scope)
	   *
	   * Example:
	   *
	   *     math.eval('(2+3)/4');                // 1.25
	   *     math.eval('sqrt(3^2 + 4^2)');        // 5
	   *     math.eval('sqrt(-4)');               // 2i
	   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]
	   *
	   *     var scope = {a:3, b:4};
	   *     math.eval('a * b', scope);           // 12
	   *
	   * See also:
	   *
	   *    parse, compile
	   *
	   * @param {string | string[] | Matrix} expr   The expression to be evaluated
	   * @param {Object} [scope]                    Scope to read/write variables
	   * @return {*} The result of the expression
	   * @throws {Error}
	   */
	  return typed('compile', {
	    'string': function (expr) {
	      var scope = {};
	      return parse(expr).compile().eval(scope);
	    },

	    'string, Object': function (expr, scope) {
	      return parse(expr).compile().eval(scope);
	    },

	    'Array | Matrix': function (expr) {
	      var scope = {};
	      return deepMap(expr, function (entry) {
	        return parse(entry).compile().eval(scope);
	      });
	    },

	    'Array | Matrix, Object': function (expr, scope) {
	      return deepMap(expr, function (entry) {
	        return parse(entry).compile().eval(scope);
	      });
	    }
	  });
	}

	exports.name = 'eval';
	exports.factory = factory;

/***/ },
/* 480 */
/*!**************************************************!*\
  !*** ./~/mathjs/lib/expression/function/help.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed, math) {
	  var docs = load(__webpack_require__(/*! ../docs */ 296));

	  /**
	   * Retrieve help on a function or data type.
	   * Help files are retrieved from the documentation in math.expression.docs.
	   *
	   * Syntax:
	   *
	   *    math.help(search)
	   *
	   * Examples:
	   *
	   *    console.log(math.help('sin').toString());
	   *    console.log(math.help(math.add).toString());
	   *    console.log(math.help(math.add).toJSON());
	   *
	   * @param {Function | string | Object} search   A function or function name
	   *                                              for which to get help
	   * @return {Help} A help object
	   */
	  return typed('help', {
	    'any': function (search) {
	      var prop;
	      var name = search;

	      if (typeof search !== 'string') {
	        for (prop in math) {
	          // search in functions and constants
	          if (math.hasOwnProperty(prop) && (search === math[prop])) {
	            name = prop;
	            break;
	          }
	        }

	        /* TODO: implement help for data types
	         if (!text) {
	         // search data type
	         for (prop in math.type) {
	         if (math.type.hasOwnProperty(prop)) {
	         if (search === math.type[prop]) {
	         text = prop;
	         break;
	         }
	         }
	         }
	         }
	         */
	      }

	      var doc = docs[name];
	      if (!doc) {
	        throw new Error('No documentation found on "' + name + '"');
	      }
	      return new type.Help(doc);
	    }
	  });
	}

	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.name = 'help';
	exports.factory = factory;


/***/ },
/* 481 */
/*!***************************************************!*\
  !*** ./~/mathjs/lib/expression/function/parse.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed) {
	  var parse = load(__webpack_require__(/*! ../parse */ 462));

	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval();
	   *
	   * Syntax:
	   *
	   *     parse(expr)
	   *     parse(expr, options)
	   *     parse([expr1, expr2, expr3, ...])
	   *     parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     var node = parse('sqrt(3^2 + 4^2)');
	   *     node.compile().eval(); // 5
	   *
	   *     var scope = {a:3, b:4}
	   *     var node = parse('a * b'); // 12
	   *     var code = node.compile();
	   *     code.eval(scope); // 12
	   *     scope.a = 5;
	   *     code.eval(scope); // 20
	   *
	   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
	   *     nodes[2].compile().eval(); // 12
	   *
	   * See also:
	   *
	   *     eval, compile
	   *
	   * @param {string | string[] | Matrix} expr          Expression to be parsed
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */
	  return typed('parse', {
	    'string | Array | Matrix': parse,
	    'string | Array | Matrix, Object': parse
	  });
	}

	exports.name = 'parse';
	exports.factory = factory;


/***/ },
/* 482 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/expression/function/parser.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed, math) {
	  var Parser = load(__webpack_require__(/*! ../Parser */ 483));

	  /**
	   * Create a parser. The function creates a new `math.expression.Parser` object.
	   *
	   * Syntax:
	   *
	   *    math.parser()
	   *
	   * Examples:
	   *
	   *     var parser = new math.parser();
	   *
	   *     // evaluate expressions
	   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5
	   *     var b = parser.eval('sqrt(-4)');        // 2i
	   *     var c = parser.eval('2 inch in cm');    // 5.08 cm
	   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476
	   *
	   *     // define variables and functions
	   *     parser.eval('x = 7 / 2');               // 3.5
	   *     parser.eval('x + 3');                   // 6.5
	   *     parser.eval('function f(x, y) = x^y');  // f(x, y)
	   *     parser.eval('f(2, 3)');                 // 8
	   *
	   *     // get and set variables and functions
	   *     var x = parser.get('x');                // 7
	   *     var f = parser.get('f');                // function
	   *     var g = f(3, 2);                        // 9
	   *     parser.set('h', 500);
	   *     var i = parser.eval('h / 2');           // 250
	   *     parser.set('hello', function (name) {
	   *       return 'hello, ' + name + '!';
	   *     });
	   *     parser.eval('hello("user")');           // "hello, user!"
	   *
	   *     // clear defined functions and variables
	   *     parser.clear();
	   *
	   * See also:
	   *
	   *    eval, compile, parse
	   *
	   * @return {Parser} Parser
	   */
	  return typed('parser', {
	    '': function () {
	      return new Parser(math);
	    }
	  });
	}

	exports.name = 'parser';
	exports.factory = factory;
	exports.math = true; // requires the math namespace as 5th argument


/***/ },
/* 483 */
/*!*******************************************!*\
  !*** ./~/mathjs/lib/expression/Parser.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function factory (type, config, load, typed, math) {
	  var _parse = load(__webpack_require__(/*! ./parse */ 462));

	  /**
	   * @constructor Parser
	   * Parser contains methods to evaluate or parse expressions, and has a number
	   * of convenience methods to get, set, and remove variables from memory. Parser
	   * keeps a scope containing variables in memory, which is used for all
	   * evaluations.
	   *
	   * Methods:
	   *    var result = parser.eval(expr);    // evaluate an expression
	   *    var value = parser.get(name);      // retrieve a variable from the parser
	   *    parser.set(name, value);           // set a variable in the parser
	   *    parser.remove(name);               // clear a variable from the
	   *                                       // parsers scope
	   *    parser.clear();                    // clear the parsers scope
	   *
	   * Example usage:
	   *    var parser = new Parser();
	   *    // Note: there is a convenience method which can be used instead:
	   *    // var parser = new math.parser();
	   *
	   *    // evaluate expressions
	   *    parser.eval('sqrt(3^2 + 4^2)');         // 5
	   *    parser.eval('sqrt(-4)');                // 2i
	   *    parser.eval('2 inch in cm');            // 5.08 cm
	   *    parser.eval('cos(45 deg)');             // 0.7071067811865476
	   *
	   *    // define variables and functions
	   *    parser.eval('x = 7 / 2');               // 3.5
	   *    parser.eval('x + 3');                   // 6.5
	   *    parser.eval('function f(x, y) = x^y');  // f(x, y)
	   *    parser.eval('f(2, 3)');                 // 8
	   *
	   *    // get and set variables and functions
	   *    var x = parser.get('x');                // 7
	   *    var f = parser.get('f');                // function
	   *    var g = f(3, 2);                        // 9
	   *    parser.set('h', 500);
	   *    var i = parser.eval('h / 2');           // 250
	   *    parser.set('hello', function (name) {
	   *        return 'hello, ' + name + '!';
	   *    });
	   *    parser.eval('hello("user")');           // "hello, user!"
	   *
	   *    // clear defined functions and variables
	   *    parser.clear();
	   *
	   */
	  function Parser() {
	    if (!(this instanceof Parser)) {
	      throw new SyntaxError(
	          'Constructor must be called with the new operator');
	    }
	    this.scope = {};
	  }

	  /**
	   * Attach type information
	   */
	  Parser.prototype.type = 'Parser';
	  Parser.prototype.isParser = true;

	  /**
	   * Parse an expression and return the parsed function node.
	   * The node tree can be compiled via `code = node.compile(math)`,
	   * and the compiled code can be executed as `code.eval([scope])`
	   * @param {string} expr
	   * @return {Node} node
	   * @throws {Error}
	   */
	  Parser.prototype.parse = function (expr) {
	    throw new Error('Parser.parse is deprecated. Use math.parse instead.');
	  };

	  /**
	   * Parse and compile an expression, return the compiled javascript code.
	   * The node can be evaluated via code.eval([scope])
	   * @param {string} expr
	   * @return {{eval: function}} code
	   * @throws {Error}
	   */
	  Parser.prototype.compile = function (expr) {
	    throw new Error('Parser.compile is deprecated. Use math.compile instead.');
	  };

	  /**
	   * Parse and evaluate the given expression
	   * @param {string} expr   A string containing an expression, for example "2+3"
	   * @return {*} result     The result, or undefined when the expression was empty
	   * @throws {Error}
	   */
	  Parser.prototype.eval = function (expr) {
	    // TODO: validate arguments
	    return _parse(expr)
	        .compile()
	        .eval(this.scope);
	  };

	  /**
	   * Get a variable (a function or variable) by name from the parsers scope.
	   * Returns undefined when not found
	   * @param {string} name
	   * @return {* | undefined} value
	   */
	  Parser.prototype.get = function (name) {
	    // TODO: validate arguments
	    return this.scope[name];
	  };

	  /**
	   * Set a symbol (a function or variable) by name from the parsers scope.
	   * @param {string} name
	   * @param {* | undefined} value
	   */
	  Parser.prototype.set = function (name, value) {
	    // TODO: validate arguments
	    return this.scope[name] = value;
	  };

	  /**
	   * Remove a variable from the parsers scope
	   * @param {string} name
	   */
	  Parser.prototype.remove = function (name) {
	    // TODO: validate arguments
	    delete this.scope[name];
	  };

	  /**
	   * Clear the scope with variables and functions
	   */
	  Parser.prototype.clear = function () {
	    for (var name in this.scope) {
	      if (this.scope.hasOwnProperty(name)) {
	        delete this.scope[name];
	      }
	    }
	  };

	  return Parser;
	}

	exports.name = 'Parser';
	exports.path = 'expression';
	exports.factory = factory;
	exports.math = true; // requires the math namespace as 5th argument


/***/ },
/* 484 */
/*!***********************************************!*\
  !*** ./~/mathjs/lib/expression/node/index.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./ArrayNode */ 463),
	  __webpack_require__(/*! ./AssignmentNode */ 466),
	  __webpack_require__(/*! ./BlockNode */ 468),
	  __webpack_require__(/*! ./ConditionalNode */ 469),
	  __webpack_require__(/*! ./ConstantNode */ 470),
	  __webpack_require__(/*! ./IndexNode */ 472),
	  __webpack_require__(/*! ./FunctionAssignmentNode */ 471),
	  __webpack_require__(/*! ./FunctionNode */ 476),
	  __webpack_require__(/*! ./Node */ 464),
	  __webpack_require__(/*! ./OperatorNode */ 475),
	  __webpack_require__(/*! ./ParenthesisNode */ 477),
	  __webpack_require__(/*! ./RangeNode */ 473),
	  __webpack_require__(/*! ./SymbolNode */ 474),
	  __webpack_require__(/*! ./UpdateNode */ 478)
	];


/***/ },
/* 485 */
/*!****************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/index.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./concat.transform */ 488),
	  __webpack_require__(/*! ./filter.transform */ 489),
	  __webpack_require__(/*! ./forEach.transform */ 490),
	  __webpack_require__(/*! ./index.transform */ 491),
	  __webpack_require__(/*! ./map.transform */ 492),
	  __webpack_require__(/*! ./max.transform */ 486),
	  __webpack_require__(/*! ./mean.transform */ 493),
	  __webpack_require__(/*! ./min.transform */ 494),
	  __webpack_require__(/*! ./range.transform */ 495),
	  __webpack_require__(/*! ./subset.transform */ 496)
	];


/***/ },
/* 486 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/max.transform.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(/*! ./error.transform */ 487).transform;
	var isCollection = __webpack_require__(/*! ../../utils/collection/isCollection */ 182);

	/**
	 * Attach a transform function to math.max
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function max
	 * from one-based to zero based
	 */
	function factory (type, config, load, typed) {
	  var max = load(__webpack_require__(/*! ../../function/statistics/max */ 192));

	  return typed('max', {
	    '...any': function (args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length == 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (typeof dim === 'number') {
	          args[1] = dim - 1;
	        }
	        else if (dim && dim.isBigNumber === true) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return max.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'max';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 487 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/error.transform.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var IndexError = __webpack_require__(/*! ../../error/IndexError */ 33);

	/**
	 * Transform zero-based indices to one-based indices in errors
	 * @param {Error} err
	 * @returns {Error} Returns the transformed error
	 */
	exports.transform = function (err) {
	  if (err && err.isIndexError) {
	    return new IndexError(err.index + 1, err.min + 1, err.max + 1);
	  }

	  return err;
	};


/***/ },
/* 488 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/concat.transform.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(/*! ./error.transform */ 487).transform;

	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function concat
	 * from one-based to zero based
	 */
	function factory (type, config, load, typed) {
	  var concat = load(__webpack_require__(/*! ../../function/matrix/concat */ 32));

	  // @see: comment of concat itself
	 return typed('concat', {
	    '...any': function (args) {
	      // change last argument from one-based to zero-based
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];
	      if (typeof last === 'number') {
	        args[lastIndex] = last - 1;
	      }
	      else if (last && last.isBigNumber === true) {
	        args[lastIndex] = last.minus(1);
	      }

	      try {
	        return concat.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'concat';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 489 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/filter.transform.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Attach a transform function to math.filter
	 * Adds a property transform containing the transform function.
	 *
	 * This transform adds support for equations as test function for math.filter,
	 * so you can do something like 'filter([3, -2, 5], x > 0)'.
	 */
	function factory (type, config, load, typed) {
	  var filter = load(__webpack_require__(/*! ../../function/utils/filter */ 249));
	  var SymbolNode = load(__webpack_require__(/*! ../node/SymbolNode */ 474));

	  function filterTransform(args, math, scope) {
	    var x, test;

	    if (args[0]) {
	      x = args[0].compile().eval(scope);
	    }

	    if (args[1]) {
	      if (args[1] && args[1].isSymbolNode) {
	        // a function pointer, like filter([3, -2, 5], myTestFunction);
	        test = args[1].compile().eval(scope);
	      }
	      else {
	        // an equation like filter([3, -2, 5], x > 0)

	        // find an undefined symbol
	        var _scope = scope || {};
	        var symbol = args[1]
	            .filter(function (node) {
	              return (node && node.isSymbolNode) &&
	                  !(node.name in math) &&
	                  !(node.name in _scope);
	            })[0];

	        // create a test function for this equation
	        var sub = Object.create(_scope);
	        var eq = args[1].compile();
	        if (symbol) {
	          var name = symbol.name;
	          test = function (x) {
	            sub[name] = x;
	            return eq.eval(sub);
	          }
	        }
	        else {
	          throw new Error('No undefined variable found in filter equation');
	        }
	      }
	    }

	    return filter(x, test);
	  }

	  filterTransform.rawArgs = true;

	  return filterTransform;
	}

	exports.name = 'filter';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 490 */
/*!****************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/forEach.transform.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Attach a transform function to math.forEach
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory (type, config, load, typed) {
	  var forEach = load(__webpack_require__(/*! ../../function/utils/forEach */ 256));

	  return typed('forEach', {
	    'Array | Matrix, function': function (array, callback) {
	      var recurse = function (value, index) {
	        if (Array.isArray(value)) {
	          value.forEach(function (child, i) {
	            // we create a copy of the index array and append the new index value
	            recurse(child, index.concat(i + 1)); // one based index, hence i+1
	          });
	        }
	        else {
	          callback(value, index, array);
	        }
	      };
	      recurse(array.valueOf(), []); // pass Array
	    }
	  });
	}

	exports.name = 'forEach';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 491 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/index.transform.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isArray = Array.isArray;

	/**
	 * Attach a transform function to math.index
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory (type, config, load) {
	  var indexFactory = load(__webpack_require__(/*! ../../type/matrix/function/index */ 267));

	  return function indexTransform() {
	    var args = [];
	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];

	      // change from one-based to zero based, and convert BigNumber to number
	      if (arg && arg.isRange === true) {
	        arg.start--;
	        arg.end -= (arg.step > 0 ? 0 : 2);
	      }
	      else if (arg && arg.isSet === true) {
	        arg = arg.map(function (v) { return v - 1; });
	      }
	      else if (arg && (arg.isArray === true || arg.isMatrix)) {
	        arg = arg.map(function (v) { return v - 1; });
	      }
	      else if (typeof arg === 'number') {
	        arg--;
	      }
	      else if (arg && arg.isBigNumber === true) {
	        arg = arg.toNumber() - 1;
	      }
	      else {
	        throw new TypeError('Ranges must be a Number, Range, Array or Matrix');
	      }

	      args[i] = arg;
	    }

	    var res = new type.Index();
	    type.Index.apply(res, args);
	    return res;
	  };
	}

	exports.name = 'index';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 492 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/map.transform.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Attach a transform function to math.map
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory (type, config, load, typed) {
	  var map = load(__webpack_require__(/*! ../../function/utils/map */ 252));
	  var matrix = load(__webpack_require__(/*! ../../type/matrix/function/matrix */ 39));

	  return typed('max', {
	    'Array, function': function (x, callback) {
	      return _map(x, callback, x);
	    },

	    'Matrix, function': function (x, callback) {
	      return matrix(_map(x.valueOf(), callback, x));
	    }
	  });
	}

	/**
	 * Map for a multi dimensional array. One-based indexes
	 * @param {Array} array
	 * @param {function} callback
	 * @param {Array} orig
	 * @return {Array}
	 * @private
	 */
	function _map (array, callback, orig) {
	  function recurse(value, index) {
	    if (Array.isArray(value)) {
	      return value.map(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
	      });
	    }
	    else {
	      return callback(value, index, orig);
	    }
	  }

	  return recurse(array, []);
	}

	exports.name = 'map';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 493 */
/*!*************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/mean.transform.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(/*! ./error.transform */ 487).transform;
	var isCollection = __webpack_require__(/*! ../../utils/collection/isCollection */ 182);

	/**
	 * Attach a transform function to math.mean
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function mean
	 * from one-based to zero based
	 */
	function factory (type, config, load, typed) {
	  var mean = load(__webpack_require__(/*! ../../function/statistics/mean */ 194));

	  return typed('mean', {
	    '...any': function (args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length == 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (typeof dim === 'number') {
	          args[1] = dim - 1;
	        }
	        else if (dim && dim.isBigNumber === true) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return mean.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'mean';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 494 */
/*!************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/min.transform.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(/*! ./error.transform */ 487).transform;
	var isCollection = __webpack_require__(/*! ../../utils/collection/isCollection */ 182);

	/**
	 * Attach a transform function to math.min
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function min
	 * from one-based to zero based
	 */
	function factory (type, config, load, typed) {
	  var min = load(__webpack_require__(/*! ../../function/statistics/min */ 197));

	  return typed('min', {
	    '...any': function (args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length == 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (typeof dim === 'number') {
	          args[1] = dim - 1;
	        }
	        else if (dim && dim.isBigNumber === true) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return min.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'min';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 495 */
/*!**************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/range.transform.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */
	function factory (type, config, load, typed) {
	  var range = load(__webpack_require__(/*! ../../function/matrix/range */ 69));

	  return typed('range', {
	    '...any': function (args) {
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];
	      if (typeof last !== 'boolean') {
	        // append a parameter includeEnd=true
	        args.push(true);
	      }

	      return range.apply(null, args);
	    }
	  });
	}

	exports.name = 'range';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 496 */
/*!***************************************************************!*\
  !*** ./~/mathjs/lib/expression/transform/subset.transform.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errorTransform = __webpack_require__(/*! ./error.transform */ 487).transform;

	/**
	 * Attach a transform function to math.subset
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */
	function factory (type, config, load, typed) {
	  var subset = load(__webpack_require__(/*! ../../function/matrix/subset */ 73));

	  return typed('subset', {
	    '...any': function (args) {
	      try {
	        return subset.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}

	exports.name = 'subset';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ },
/* 497 */
/*!*****************************************!*\
  !*** ./~/mathjs/lib/expression/Help.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var object = __webpack_require__(/*! ../utils/object */ 21);
	var string = __webpack_require__(/*! ../utils/string */ 36);

	function factory (type, config, load, typed) {
	  var parser = load(__webpack_require__(/*! ./function/parser */ 482))();

	  /**
	   * Documentation object
	   * @param {Object} doc  Object containing properties:
	   *                      {string} name
	   *                      {string} category
	   *                      {string} description
	   *                      {string[]} syntax
	   *                      {string[]} examples
	   *                      {string[]} seealso
	   * @constructor
	   */
	  function Help(doc) {
	    if (!(this instanceof Help)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!doc)  throw new Error('Argument "doc" missing');

	    this.doc = doc;
	  }

	  /**
	   * Attach type information
	   */
	  Help.prototype.type = 'Help';
	  Help.prototype.isHelp = true;

	  /**
	   * Generate a string representation of the Help object
	   * @return {string} Returns a string
	   * @private
	   */
	  Help.prototype.toString = function () {
	    var doc = this.doc || {};
	    var desc = '\n';

	    if (doc.name) {
	      desc += 'Name: ' + doc.name + '\n\n';
	    }
	    if (doc.category) {
	      desc += 'Category: ' + doc.category + '\n\n';
	    }
	    if (doc.description) {
	      desc += 'Description:\n    ' + doc.description + '\n\n';
	    }
	    if (doc.syntax) {
	      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
	    }
	    if (doc.examples) {
	      desc += 'Examples:\n';
	      for (var i = 0; i < doc.examples.length; i++) {
	        var expr = doc.examples[i];
	        desc += '    ' + expr + '\n';

	        var res;
	        try {
	          res = parser.eval(expr);
	        }
	        catch (e) {
	          res = e;
	        }
	        if (res && !res.isHelp) {
	          desc += '        ' + string.format(res, {precision: 14}) + '\n';
	        }
	      }
	      desc += '\n';
	    }
	    if (doc.seealso) {
	      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
	    }

	    return desc;
	  };

	  /**
	   * Export the help object to JSON
	   */
	  Help.prototype.toJSON = function () {
	    var obj = object.clone(this.doc);
	    obj.mathjs = 'Help';
	    return obj;
	  };

	  /**
	   * Instantiate a Help object from a JSON object
	   * @param {Object} json
	   * @returns {Help} Returns a new Help object
	   */
	  Help.fromJSON = function (json) {
	    var doc = {};
	    for (var prop in json) {
	      if (prop !== 'mathjs') { // ignore mathjs field
	        doc[prop] = json[prop];
	      }
	    }
	    return new Help(doc);
	  };

	  /**
	   * Returns a string representation of the Help object
	   */
	  Help.prototype.valueOf = Help.prototype.toString;

	  return Help;
	}

	exports.name = 'Help';
	exports.path = 'type';
	exports.factory = factory;


/***/ },
/* 498 */
/*!************************************!*\
  !*** ./~/mathjs/lib/json/index.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(/*! ./reviver */ 499)
	];


/***/ },
/* 499 */
/*!**************************************!*\
  !*** ./~/mathjs/lib/json/reviver.js ***!
  \**************************************/
/***/ function(module, exports) {

	'use strict';

	function factory (type, config, load, typed) {
	  /**
	   * Instantiate mathjs data types from their JSON representation
	   * @param {string} key
	   * @param {*} value
	   * @returns {*} Returns the revived object
	   */
	  return function reviver(key, value) {
	    var constructor = type[value && value.mathjs];
	    if (constructor && typeof constructor.fromJSON === 'function') {
	      return constructor.fromJSON(value);
	    }

	    return value;
	  }
	}

	exports.name = 'reviver';
	exports.path = 'json';
	exports.factory = factory;


/***/ },
/* 500 */
/*!*************************************!*\
  !*** ./~/mathjs/lib/error/index.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ArgumentsError = __webpack_require__(/*! ./ArgumentsError */ 27);
	var DimensionError = __webpack_require__(/*! ./DimensionError */ 38);
	var IndexError = __webpack_require__(/*! ./IndexError */ 33);

	module.exports = [
	  {
	    name: 'ArgumentsError', path: 'error',
	    factory: function () {
	      return ArgumentsError;
	    }
	  },
	  {
	    name: 'DimensionError',
	    path: 'error',
	    factory: function () {
	      return DimensionError;
	    }
	  },
	  {
	    name: 'IndexError',
	    path: 'error',
	    factory: function () {
	      return IndexError;
	    }
	  }
	];

	// TODO: implement an InvalidValueError?


/***/ },
/* 501 */
/*!*****************************!*\
  !*** ./src/mMath/Parser.js ***!
  \*****************************/
/***/ function(module, exports) {

	/**
	 * @fileOverview text mode math parser and command handler.
	 * @module mMath/Parser
	 */ 
	'use strict';
	module.exports = function registerParser(mm) {
	  var check  = mm.check;
	  var _      = check(mm._);
	  var LOW    = check(mm.Logger.Priority.LOW);

	  //--------------------------------------------------------------------------
	  /**
	   * @summary **mMath super simple math parser**
	   * @description
	   * This is currently more of a shim on top of javascript functions than
	   * an actual parser at this point. All it does is locate symbols in the
	   * text sting and convert them to symbolic function references.  Then
	   * it spits out a function that wraps the expression.
	   * @constructor
	   * @param {MMath} mmath an instance of the symbolic math library.
	   * @param {object} context contains settings, and a vars object.
	   * @param {object} sessionContext contains a userConfig.
	   * @returns {Parser} a new mMath parser.
	   */  
	  var Parser = (function parserCtorCtor() {
	    // Any static data for the parser goes here.
	  
	    var Parser = function parserCtor(context, mmath, sessionContext) {
	      check(context);
	      check(mmath);
	      check(sessionContext);
	      var self = this;
	      self.evalFailed = false;

	      /* istanbul ignore next */ // Tested independently.
	      function evalFuncStr(func) {
	        var vars = context.vars;  // jshint ignore:line
	        // When a workspace is saved to storage all functions are converted
	        // to strings. They are reevaluated to functions the first time
	        // an attempt is made to use one.
	        /* istanbul ignore else */ // Tested independently.
	        if (!_.isFunction(func)) {
	          func = '(' + func + ')';
	          mm.log.debug('- Convert [{0}] to function', func, LOW);
	          return eval(func); // jshint ignore:line 
	        }
	        else {
	         return func;
	        }
	      }

	      Parser.prototype.update = function update() {
	        var vars = context.vars; 
	        Object.keys(vars).forEach(
	          /* istanbul ignore next */ // Tested independently.
	          function (key) {
	            var f = vars[key].f;
	            try {          
	              vars[key].f = evalFuncStr(f);
	            }
	            catch (e) {
	              mm.log.warning(
	                '[' + key + ']: Invalid function in workspace: ', f);
	              delete vars[key];
	            }
	          }
	        );
	      }

	      /* istanbul ignore next */ // Tested independently.
	      Parser.prototype.evalBacktick = function evalBacktick(expr) {
	        var vars = context.vars; // jshint ignore:line
	        if (sessionContext.userConfig.administrator) {
	          try {
	            var r = eval(expr); // jshint ignore:line 
	            return r;
	          }
	          catch (e) {
	            return new Error('Eval failed:' + e.stack);
	          }
	        }
	        else {
	          /* istanbul ignore next */ // Tested independently.
	          return new Error('You must be an administrator to do this.');
	        }
	      }

	      Parser.prototype.evaluate = function evaluate(expr) {
	        var vars = context.vars; 
	        var val = null;      
	        var undefineds = [];        
	        var hasUndefined = false;
	        var textExpression;
	        var hasAssignment;
	        var assigned;
	        try {      
	          /* istanbul ignore if */ // Tested independently.
	          if (_.startsWith(expr, '`')) return self.evalBacktick(expr.substr(1));      
	          var NUMBERMODE = context.settings._props.numberMode.values;
	          self.evalFailed = false;
	          assigned = '';
	          var re = /^\s*([A-Za-z_]+[0-9A-Za-z_$]*)\s*=/;
	          var matches = expr.match(re);
	          hasAssignment = matches;
	          if (hasAssignment) {
	            assigned = matches[1];
	            var i = expr.indexOf('=');
	            expr = expr.substring(i + 1);
	            mm.log.debug('--- Assignment: ', assigned, LOW);
	            mm.log.debug('--- Expression: ', expr, LOW);
	          }
	          
	          textExpression = _.trim(expr);
	          var idTest = /[A-Za-z_]+[0-9A-Za-z_]*/g;
	          var hasVariables = false;
	          expr = expr.replace(idTest, function(v) {
	            var rv = 'vars["' + v + '"].f()';
	            hasVariables = true;
	            mm.log.debug('id:[{0}]', v, LOW);
	            if (!vars[v]) {
	              // look for the symbol in mmath.
	              if (mmath[v]) {
	                if (mmath[v].f &&
	                    context.settings.numberMode !== NUMBERMODE.num) {
	                  
	                  rv = 'mmath.' + v + '.f'; // Standard mMeddle implementation
	                  if (mmath[v].big &&
	                    context.settings.numberMode === NUMBERMODE.big) {
	                    rv = 'mmath.' + v + '.big'; // Use big when available.
	                  }
	                }
	                else {
	                  rv = 'Math.' + v; // Use the Math implementation
	                }
	              }
	              else {
	                hasUndefined = true;
	                /* istanbul ignore else */ // Tested independently.
	                if (_.indexOf(undefineds, v) < 0) undefineds.push(v);
	                var undefinedFunc = 
	                    '(function(){ return self.notDefined("' +
	                    v + '") })';

	                // TODO: Add a DO/UNDO change log to context.
	                context.saved = false;
	                context.savedLocal = false;
	                vars[v] = {human: '*undefined*', f:
	                    eval(undefinedFunc) }; // jshint ignore:line 
	              }
	            }
	            return rv;
	          });

	          expr = '(function(){ return ' + expr + ' })';
	          mm.log.debug('Eval: ', expr, LOW);
	        }
	        catch (e) {
	          mm.log.error('Parser internal error:', e.stack);
	          throw e;
	        }

	        // The text expression has been parsed into a javascript
	        // expression. Now try to evaluate that.
	        try {
	          // eval is the core of this for a while, so suck it up.
	          var f = eval(expr); // jshint ignore:line 
	          if (hasAssignment) { 
	            // TODO: Add a DO/UNDO change log to context.
	            context.saved = false;
	            context.savedLocal = false;
	            vars[assigned] = {human: textExpression, f: f };
	          }
	          if (hasUndefined) {
	            mm.log('- Cannot yet evaluate function: {0} {1} still undefined.',
	              /* istanbul ignore next */ // Tested independently.
	              undefineds.join(), undefineds.length === 1 ? 'is' : 'are');
	          }
	          else {
	            val = f(); // Execute the function.
	            /* istanbul ignore if */ // Tested independently.
	            if (self.evalFailed) {
	              var e1 = 'Evaluation failed. Some values are still undefined.'
	              return new Error(e1);
	            }
	            else {
	              return val.toString();
	            }
	          }
	          
	          return val;
	        }
	        catch (e) {
	          /* istanbul ignore next */ // Tested independently.
	          if (context.settings.debugMode) {
	            mm.log(e.stack);
	          } 
	          else {
	            mm.log(e);
	          }
	          /* istanbul ignore next */
	          return '';
	        }
	      }
	      
	      /* istanbul ignore next */ // Tested independently.
	      Parser.prototype.notDefined = function notDefined(v) {
	        self.evalFailed = true;
	        mm.log('- Variable "{0}" is undefined', v);
	        return null;
	      }
	    } // End of constructor for access to constructor closure.
	    return Parser;
	  }()); // Run constructor initializer for static creations.

	  return Parser;
	}

/***/ },
/* 502 */
/*!****************************!*\
  !*** ./src/mMath/index.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(mm) {
	  mm.mMath = {};
	  mm.mMath.MMath  = __webpack_require__(/*! ./MMath */ 15)(mm);
	  mm.mMath.Parser = __webpack_require__(/*! ./Parser */ 501)(mm);
	  
	  __webpack_require__(/*! ./nde */ 503)(mm);
	};


/***/ },
/* 503 */
/*!**************************!*\
  !*** ./src/mMath/nde.js ***!
  \**************************/
/***/ function(module, exports) {

	/**
	 * @fileOverview mMath node foundation.
	 * @module mMath/MNode
	 * @description
	 * mMath ndes (I use this instead of the 4 letter name to make searches
	 * work better) are the foundation for its various expression structures.
	 * The two most important major types are 'val' and 'op' nodes.  Val nodes
	 * can be used as arguments to operators and functions.  'op' nodes represent
	 * the potential invocation of an operator. 'def' nodes define invariant
	 * math elements such as function definitions, operators, constants, value
	 * types and units.
	 */ 
	'use strict';
	module.exports = function registerNdes(mm) {
	  var _ =   mm.check(mm._);

	  function max(a, b) { return a > b ? a : b; }
	  function min(a, b) { return a < b ? a : b; }

	  /**
	   * @summary **Base mMath MNode constructor**
	   * @description
	   * Edit ndes are individual items which can be selected or added to an
	   * expression. Every node participates in multiple graphs. The links
	   * of the graph are in the `lnks` and `rlnks` of the node, where lnks
	   * are forward (as detailed by the lnk type) and rlnks are the opposite.
	   * @constructor
	   * @param {string} type the type name of the MNode
	   * @param {object} context the mode context (usually an Expression) 
	   * @param {number} parentNid the node id of the parent container
	   * @returns {MNode} a mmath MNode.
	   */
	  function MNode(type, context, parentNid) {
	    var  self = this;
	    context.initNode(self);
	    self.type      = type;
	    self.context   = context;
	    self.parentNid = parentNid;
	  }

	  /**
	   * @summary **Commutative cmm list**
	   * @description
	   * The list of ndes joined by the same operation for which commutative
	   * algebraic editing is allowed. The result of the expression is the
	   * same regardless of the order in which the base operator is appied
	   * to any of the values.
	   * @param {array} list the commutative values ndes
	   * @returns {mExp} a mmath expression.
	   */
	  MNode.prototype.cm = function cm(list) {
	    var self = this;
	    self.m_list = list;
	    return self;
	  }

	  /**
	   * @summary **Function join**
	   * @description
	   * Builds the hierarchy of a functional expression.
	   * @param {MNode} left (or first) value.
	   * @param {MNode} right (or second) value.     
	   * @returns {fExp} a functional expression value node.
	   */
	  MNode.prototype.func = function func(left, right) {
	    var self = this;
	    self.f_left = left;
	    self.f_right = right;
	    return self;
	  }
	  
	  /**
	   * @summary **size of the rendered mnode**
	   * @description
	   * When this node is rendered to the specified display context, it will
	   * required a bounding box of [w, y+, y-] where w is the horizontal width,
	   * y+ is the vertical height above the lower left corner, and y- (is present
	   * is the number of units of descent. Note y- is a positive value, so the
	   * full y range is (y+)+(y-).
	   * @param {DisplayContext} dc the display context.     
	   * @returns {array} [w, y+, y-]
	   */
	  MNode.prototype.size = function size(dc) {
	    var self = this;
	    return [1, 1, 0];
	  }

	  /**
	   * @summary **Move selection/caret within the container node**
	   * @description
	   * Directions are selected from the following:
	   *   'out' : select the container this node is in
	   *   'in'  : move into the current selection
	   *   'nxt' : move to the right
	   *   'prv' : move to the left
	   *   'up'  : move up (or up and right)
	   *   'dwn' : move down (or down and right)
	   *   'sup' : move up and right
	   *   'sub' : move down and right
	   *
	   * @param {string} dir a direction
	   * @returns {bool} true when the position was moved.
	   */
	  MNode.prototype.move = function move(dir) {
	    return false;
	  }

	  //--------------------------------------------------------------------------
	  /**
	   * @summary **Empty node constructor**
	   * @description
	   * An empty node is a placeholder for any other node at some location in
	   * a container. 
	   * @param {object} context the mode context (usually an Expression) 
	   * @param {number} parentNid the node id of the parent container   
	   * @returns {MNode} a mmath MNode.
	   */
	  function MEmpty(context, parentNid) {
	    var self = this;
	    MNode.call(this, 'mempty', context, parentNid);
	  }

	  MEmpty.prototype = _.create(MNode.prototype, { 
	    'constructor': MEmpty 
	  });

	  MEmpty.prototype.size = function size(dc) {
	    return [1.2, 1.1, 0];
	  }
	  
	  //--------------------------------------------------------------------------
	  /**
	   * @summary **The base container for a row of nodes**
	   * @description
	   * Every expression starts out as an MRow of nodes. MRows have at most
	   * one vacant placeholder that can contain any other node. The insertion
	   * cursor can be between any two nodes. 
	   * @param {object} context the mode context (usually an Expression) 
	   * @param {number} parentNid the node id of the parent container
	   * @returns {MRow} a mmath MRow MNode.
	   
	   */
	  function MRow(context, parentNid) {
	    var self = this;
	    MNode.call(this, 'mrow', context, nid);
	    self.row = [ new MEmpty(context, self.nid) ];
	    self.caret = 1;
	    
	  }

	  MRow.prototype = _.create(MNode.prototype, { 
	    'constructor': MRow 
	  });
	  
	  MRow.prototype.size = function size(dc) {
	    var self = this;
	    if (! 'chromeH' in self) {
	      // TODO: Use dc to set chromeH and chromeY
	      // Horizontal and vertical chrome as computed from the dc.
	      //  [Left, between entries, Right]
	      self.chromeH = [ 1.01, 1, 1.02 ];
	      //  [Above, between entries, Below] 
	      self.chromeV = [ 0, 0, 0 ];
	    }
	    var hsep = 0;

	    var sz = self.row.reduce( function(previousSize, mnode) {
	      var nsize = mnode.size(dc);
	      totX  = previousSize[0] + hsep;
	      maxYu = max(previousSize[1], nize[1]);
	      maxYd = max(previousSize[2], nize[2]);
	      hsep = self.chromeH[1];
	      return [totX, maxYu, maxYd];
	    }, [0, 0, 0]);

	    return [ self.chromeH[0] + sz[0] + self.chromeH[2],
	             sz[1] + self.chromeV[0],
	             sz[2] + self.chromeV[2] ];
	  }

	  //--------------------------------------------------------------------------
	  function eExp(obj) {
	    return new MNode({ list: obj });
	  }

	  //--------------------------------------------------------------------------  
	  function fExp(obj) {
	    return new MNode(obj);
	  }

	  //--------------------------------------------------------------------------  
	  function mExp(obj) {
	    return new MNode(obj);
	  }
	  
	  //--------------------------------------------------------------------------  
	  /**
	   * @summary **Expression constructor**
	   * @description
	   * Expressions are an isolated `MNode` DAG along with an editing cursor
	   * and selection(s). The undo/redo list is also part of the expression.
	   * All of the Ndes within the expression are assigned Nids (node ids) in
	   * a closed space local to the expression. An external expression can be
	   * referenced from the expression but is not itself part of the expression
	   * unless copies of its nodes are inserted.
	   *
	   * The entire expression including its history and change list are self
	   * contained so its easy to serialize the contents (as long as all 
	   * external references are suitably truncated).
	   *
	   * Ndes contain various forward pointing nids that describe the graph.
	   * Going backwards in the graph requireds computing the previous nid,
	   * by traversing the entire graph from the front.
	   * @constructor
	   * @param {object} obj any initialization for the Exp.
	   * @returns {Exp} a mmath Expression.
	   */
	  function Exp(obj) {
	    var self = this;
	    //self.root = new MNode();

	    self.type      = 'exp';
	    self.context   = self;
	    self.parentNid = -1;

	    var nodes = [];

	    // Add the node to the local list and assign a unique nid.
	    self.initNode = function initNode(self) {
	      var nid = nodes.length;
	      nodes.push(self);
	      self.nid = nid;
	    }

	    self.initNode(self);
	    self.nodes = nodes;

	    self.changes = [];
	    self.changeIndex = 0;


	    MNode.call(this, 'exp', self, 0);
	  }
	  
	  Exp.prototype = _.create(MRow.prototype, {
	    'constructor': Exp
	  });
	  
	  /**
	   * @summary **Insert into the expression**
	   * @description
	   * The object is inserted into the expression at the current cursor
	   * or insertion point.
	   * @param {object} obj any MNode or valid MNode initializer
	   * @param {bool} overwrite instead of insert   
	   * @returns {Exp} the mmath Expression for chaining.
	   */
	  Exp.prototype.ins = function ins(obj, overwrite) {
	    var self = this; 
	    var chg = {};
	    if (_.isString(obj)) {
	      chg = { text: obj }
	    }
	    else if (_.isNumber(obj)) {
	      chg = { text: obj.toString() }
	    }
	    else {
	      _.assign(chg, obj);
	    }
	    if (overwrite) chg.overwrite = overwrite;

	    // Convert the obj into a change.
	    self.changes.push(chg);
	    self.redo();
	    return self;
	  }
	  
	  /**
	   * @summary **Undo the last change operation**
	   * @description
	   * The last operation in the change list is undone.
	   * @returns true if there was something undone.
	   */
	  Exp.prototype.undo = function undo() {
	    var self = this;
	    if (self.changeIndex === 0) {
	      return false;
	    }
	    self.changeIndex--;
	    var chg = self.changes[self.changeIndex];
	    self._change(chg, true);
	    return true;
	  }

	  /**
	   * @summary **Redo the last undone change operation**
	   * @description
	   * The last undo is redone. This is also the way that initial changes
	   * are applied.
	   * @returns true if there was something redone.
	   */
	  Exp.prototype.redo = function redo() {
	    var self = this;
	    if (self.changes.length < self.changeIndex) {
	      return false;
	    }
	    var chg = self.changes[self.changeIndex];
	    self._change(chg);
	    self.changeIndex++;
	    return true;
	  }

	  /**
	   * @summary **Create a new node in the expression**
	   * @param {object} chg a change object used as the source of the node.
	   */
	  Exp.prototype._addNde = function _addNde(chg) {
	    var self = this;
	    var node = new MNode(chg.text);
	    node.nid = self.ndes.length;
	    self.ndes.push(node);
	    return node;
	  }
	  
	  /**
	   * @summary **Create a new node in the expression**
	   * @param {object} chg a change object used as the source of the node.
	   */
	  Exp.prototype._addNde = function _addNde(chg) {
	    var self = this;
	    var node = new MNode(chg.text);
	    node.nid = self.ndes.length;
	    self.ndes.push(node);
	    return node;
	  }

	  /**
	   * @summary **Applies or undoes a change**
	   * @description
	   * The last undo is redone. This is also the way that initial changes
	   * are applied.
	   * @param {object} chg a change object to apply to the expression
	   * @param {bool} undo true to undo a change
	   */
	  Exp.prototype._change = function _change(chg, undo) {
	    var self = this;
	    if (self.changes.length < self.changeIndex) {
	      return false;
	    }
	    
	    // There is always a current MNode since even empty expressions
	    // have the expression def node.
	    var currNid = self.nid;
	    var currNde = self.ndes[currNid];
	    var nextNid = currNde.nextNid;
	    
	    var chg = self.changes[self.changeIndex];
	    if (undo) {
	      throw new Error('in your dreams');
	    }
	    else {
	      var node = self._addNde(chg);
	      var newNid = node.nid;
	      if (chg.overwrite && nid > 0) {
	        chg.undo = {}
	        chg.undo.nid = self.nid;
	        chg.undo.prevNid = self.prevNid;
	        chg.undo.nextNid = nextNid;
	        // Replace the current nid with the new one.
	        self.ndes[self.prevNid].nextNid = nid;
	        node.nextNid = nextNid;
	      }
	      else {
	        chg.undo = {}
	        chg.undo.nid = self.nid;
	        chg.undo.prevNid = self.prevNid;
	        chg.undo.nextNid = nextNid;
	        chg.undo.newNid = newNid;
	        chg.undo.remove = true;
	        // Insert the node in the list.
	        currNde.nextNid = newNid;
	        node.nextNid = nextNid;
	        self.prevNid = self.nid; // Support overwrite.
	        self.nid = newNid; // Advance to the next nid.
	      }
	    }
	    return true;
	  }

	  /**
	   * @summary **Insert the elements of a string**
	   * @description
	   * This is a shorthand for individual insertions of the components
	   * parsed from the string.
	   * @param {string} txt the text to be inserted as parts
	   * @returns Exp
	   */
	  Exp.prototype.insParsed = function insParsed(txt) {
	    var self = this;
	    txt.split(' ').forEach(function (x) { self.ins(x); });
	    return self;
	  }
	  
	  /**
	   * @summary **A string representation of the expression**
	   * @description
	   * Provides a representation of an expression as a pure string.
	   * @param {object} options optional options to control the format
	   * @returns string
	   */
	  Exp.prototype.toString = function toString(options) {
	    var self = this;
	    var s = '';
	    var node = self.ndes[0];
	    while (node) {
	      s += '(' + node.nid + ')';
	      if (node.txt) s += node.txt + ' ';
	      if (node.ref) s += '[' + node.ref + '] ';
	      var nid = node.nextNid;
	      node = self.ndes[nid];
	    }
	    return s;
	  }  

	  //--------------------------------------------------------------------------  
	  mm.mMath.eExp = eExp;
	  mm.mMath.fExp = fExp;
	  mm.mMath.mExp = mExp;
	  
	  mm.mMath.Exp  = Exp;
	  mm.mMath.MNode  = MNode;
	}  


/***/ },
/* 504 */,
/* 505 */
/*!***********************************!*\
  !*** ./src/sal/ClientProvider.js ***!
  \***********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview Storage Client Provider
	 * @module sal/ClientProvider
	 */ 
	 module.exports = function(mm) {
	  var qq    = mm.check(mm.Q);
	  //--------------------------------------------------------------------------
	  /**
	   * @summary **Provides storage operations over the session socket**
	   * @description
	   * A ClientProvider is plugged into client based StorageEngine which is
	   * running in a browser or node client that is connected to a mMeddle
	   * server over a socket based ClientSession.
	   * @constructor
	   * @param {StorageEngine} engine context for this engine
	   * @param {ClientSession} cs the current client session
	   * @returns {ClientProvider} the new ClientProvider 
	   */  
	  function ClientProvider(engine, cs) {
	    var self = this;
	    self.engine = mm.check(engine);
	    self.cs     = mm.check(cs);
	  }

	  /**
	   * @summary **registers the Client Remote StorageProvider**
	   * @description
	   * Provides storage operations over sockets to the mMeddle server.
	   * @static
	   * @param {StorageEngine} engine the current storage engine
	   * @param {ClientSession} cs the current client session
	   */  
	  ClientProvider.register = function registerClientProvider(engine, cs) {
	    engine.clientProvider = new ClientProvider(engine, cs);
	  }    

	  /**
	   * @summary **initialize the remote storage provider**
	   * @return {Promise} resolves when successful.
	   */  
	  ClientProvider.prototype.initialize =
	  function initialize(op) {
	    var self = this;
	    /* istanbul ignore else */
	    if (!self.initialized) {
	      self.initialized = qq(true);
	    }
	    return self.initialized;
	  }  

	  /**
	   * @summary **perform a remote storage operation**
	   * @param {StorageEngine} op the operation to perform.
	   */  
	  ClientProvider.prototype.perform =
	  function perform(op) {
	    var self = this;
	    // Pass only the relevant request parts of the op.
	    var simpleOp = { op: op.op, path: op.path, content: op.content };
	    var rsRequired = op.path.callback ? op.path.callback : true;
	    var tmt = op.path.timeout ? op.path.timeout : null;
	    return self.cs.rq('clientStorage', simpleOp, rsRequired, tmt)
	    .then(function (rs) {
	      rs.content._elapsed = rs._elapsed;
	      op.deferred.resolve(rs.content);
	    },
	    function (e) {
	      op.deferred.reject(e);
	      return;
	    });
	  }
	  
	  return ClientProvider;
	}




/***/ },
/* 506 */
/*!*******************************!*\
  !*** ./src/sal/ClientUser.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @fileOverview The User object used by client applications.
	 * @module sal/ClientUser
	 * @description
	 * mMeddle has a reasonably simple but ultimtely insecure user model.
	 * This is by design (and because I am both pragmatic and lazy).
	 * 
	 * User names (i.e. aliases) must be unique for the entire site.
	 * To enforce this, each user (the person) must select a password
	 * to establish their unique identity, and to avoid accidental logins
	 * from one person to access another person's stuff.
	 * 
	 * Passwords are never saved directly by mMeddle, but since the client
	 * code is JavaScript running on a browser, there is always a weak spot
	 * where hacker access to the client browser can compromise the whole
	 * system. When a user is created the first time, or when a password is
	 * changed, the plain text of the password is converted into a PBKDF2
	 * (Password Based Key Derived Function 2) hash. This hash is significantly
	 * more resistent to attacks than a simple SHA or MD5 hash. The plain text
	 * is deleted at that point, and as long as the user uses the same browser,
	 * there is no need to reenter a text password. Also, since the plain text
	 * is never sent to the server or stored in a database, the user's other
	 * accounts (for which he has selected the same password or a simple
	 * variant on it) do not become more vulnerable from here.
	 * 
	 * The PBK hash is now the actual password and it is saved as a hex string
	 * in the browser local storage user. The more paranoid may want to remove
	 * these, but in truth the reentry of the plain text password on every login
	 * creates a much bigger threat window. If the browser is compromised the
	 * user is compromised, there is no middle ground.
	 * 
	 * The PBK is sent to the server for saving during create User and change
	 * password request handling. Logins do not sent the PBK itself, instead
	 * they send a SHA256 hash of the PBK seeded by the random socket.io 
	 * connection id for session. Since this changes on every connection, the
	 * PBK is that much less vulnerable to packet sniffers.
	 * 
	 * Finally, the PBK itself is seeded by the creation time for the user so
	 * multiple users who select the same password, do not end up with the
	 * same PBK.
	 * 
	 * All that sounds like I've made some effort to be secure, but don't be
	 * fooled. mMeddle is not designed for security and privacy. It is about
	 * sharing content, not restricting its access. I don't expect to 'harden'
	 * the security in the future, as there is little call for it in this kind
	 * of site. On the other hand, adding third party authentication may prove
	 * to be a temptation too great to resist, since they do offer user 
	 * conveniences (and greater security).
	 * 
	 */ 
	module.exports = function registerClientUser(mm) {
	  var _          = mm.check(mm._);
	  var text2ua    = mm.check(mm.util.text2ua);
	  var ua2hex     = mm.check(mm.util.ua2hex);
	  var CoreObject = mm.check(mm.obj.CoreObject);
	  var sha256     = mm.check(__webpack_require__(/*! fast-sha256 */ 507));
	  
	  var ANONYMOUS = 'anonymous';
	  
	  /**
	   * @summary **Create a ClientUser**
	   * @description
	   * A client user the information about a user that is available to
	   * a client during normal workspace interaction. It will contain a
	   * hashed password if the user is logged in to a server.
	   * @constructor
	   * @param {userName} userName the userName for this client
	   * @returns {ClientUser} the new client user.
	   */  
	  var ClientUser = (function clientUserCtorCreator() {
	    var ctor = function ClientUser(userName) {
	      var self = this;
	      self.name = userName ? userName : ANONYMOUS;
	      self.firstName = null;
	      self.lastName = null;
	      self.email = null;
	      self.creationDate = new Date();
	      self.loggedIn = false;
	      // The PBKDF2 salt is per user and is based on the sub millisecond
	      // datetime for when the user was created. This is just so the same
	      // password for different users creates different PDKs.
	      // Its a small comfort.
	      self.pbkdf2Salt = ua2hex(text2ua(self.creationDate.toISOString()));
	    };

	    return ctor;
	  }());

	  ClientUser.prototype = Object.create(CoreObject.prototype);
	  ClientUser.prototype.PBKDF2_ROUNDS = 1000; // A reasonable number of rounds.
	  ClientUser.prototype.PBKDF2_DKLEN = 16; // 16 byte derived key.

	  /**
	   * @summary Initialize a clientUser from a JSON derived object.
	   * @description
	   * All fields of the existing clientUser are replaced by those in
	   * the source object (which is often created by parsing a JSON string).
	   * Any fields NOT in the source object remain unchanged.
	   * Note that sanitized user objects are only useful for display
	   * purposes, they are useless for logging in or validating anything.
	   * @param {Object} userObj the raw user object
	   * @param {bool} sanitized true to remove ugly internal values
	   * @returns self for chaining.
	   */
	  ClientUser.prototype.init = function init(userObj, sanitize) {
	    var self = this;  
	    if (userObj) _.assign(self, userObj);
	    if (sanitize) {
	      delete self.pbkdf2Salt;
	      delete self.pdk;
	      delete self.hpdk;
	      delete self.owner;
	    }
	    return self;
	  }
	  
	  /**
	   * @summary True is this is an anonymous user.
	   * @returns true is anonymous.
	   */
	  ClientUser.prototype.isAnonymous = function isAnonymous() {
	    var self = this;  
	    return (!self.name) ||
	           (!self.lastName) ||
	           _.startsWith(self.name, ANONYMOUS);
	  }

	  /**
	   * @summary Put the PDK (Password Derived Key) into the user object
	   * @description
	   * The hashed password is added along with a datetime derived salt, or
	   * a PDK from some other source is stuffed in.
	   * @param {string} ptpwd a plain text password
	   * @param {bool} ispdk optional PDK supplied instead of plain text.
	   * @returns self for chaining.   
	   */
	  ClientUser.prototype.hashP = function hashP(ptpwd, ispdk) {
	    var self = this;  
	    // A saved pdk was used instead of plain text.
	    if (ispdk) {
	      self.pdk = ptpwd;
	    }
	    else {
	      var uIntArrayPDK = sha256.pbkdf2(
	          text2ua(ptpwd), 
	          self.pbkdf2Salt,
	          self.PBKDF2_ROUNDS,
	          self.PBKDF2_DKLEN);
	      self.pdk = ua2hex(uIntArrayPDK);
	    }
	    return self;
	  }

	  /**
	   * @summary Do a sha256 hash on the Password Derived Key
	   * @description
	   * The hashed password is hashed again before it is sent over the
	   * wire. The causes the hash to change every session.
	   * @param {string} a seed for the hash.
	   * @returns self for chaining.
	   */
	  ClientUser.prototype.hashPdk = function hashPdk(seed) {
	    var self = this;  
	    var seedypdk = 'HASHPDK:' + seed + '_' + self.pdk;
	    var uIntArrayPDK = sha256(text2ua(seedypdk));
	    self.hpdk = ua2hex(uIntArrayPDK);
	    //mm.log(seedypdk, '--->', self.hpdk);
	    return self;
	  }

	  return ClientUser;
	}

/***/ },
/* 507 */
/*!*********************************!*\
  !*** ./~/fast-sha256/sha256.js ***!
  \*********************************/
/***/ function(module, exports) {

	/*
	 * SHA-256 (+ HMAC and PBKDF2) in JavaScript.
	 * Written in 2014 by Dmitry Chestnykh.
	 * Public domain, no warranty.
	 *
	 * Functions (accept and return Uint8Arrays):
	 *
	 *   sha256(message) -> hash
	 *   sha256.hmac(key, message) -> mac
	 *   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk
	 *
	 */
	(function(root, f) {
	  if (typeof module !== 'undefined' && module.exports) module.exports = f();
	  else root.sha256 = f();
	})(this, function() {
	  'use strict';

	  var K = new Uint32Array([
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
	    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
	    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
	    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
	    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
	    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
	    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
	    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
	    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
	    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	  ]);

	  function blocks(w, v, p, pos, len) {
	    var a, b, c, d, e, f, g, h, u, i, j, t1, t2;
	    while (len >= 64) {
	      a = v[0];
	      b = v[1];
	      c = v[2];
	      d = v[3];
	      e = v[4];
	      f = v[5];
	      g = v[6];
	      h = v[7];

	      for (i = 0; i < 16; i++) {
	        j = pos + i*4;
	        w[i] = (((p[j  ] & 0xff) << 24) | ((p[j+1] & 0xff)<<16) |
	                ((p[j+2] & 0xff) <<  8) | ( p[j+3] & 0xff));
	      }

	      for (i = 16; i < 64; i++) {
	        u = w[i-2];
	        t1 = (u>>>17 | u<<(32-17)) ^ (u>>>19 | u<<(32-19)) ^ (u>>>10);

	        u = w[i-15];
	        t2 = (u>>>7 | u<<(32-7)) ^ (u>>>18 | u<<(32-18)) ^ (u>>>3);

	        w[i] = (t1 + w[i-7] | 0) + (t2 + w[i-16] | 0);
	      }

	      for (i = 0; i < 64; i++) {
	        t1 = (((((e>>>6 | e<<(32-6)) ^ (e>>>11 | e<<(32-11)) ^
	                 (e>>>25 | e<<(32-25))) + ((e & f) ^ (~e & g))) | 0) +
	                   ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

	        t2 = (((a>>>2 | a<<(32-2)) ^ (a>>>13 | a<<(32-13)) ^
	              (a>>>22 | a<<(32-22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

	        h = g;
	        g = f;
	        f = e;
	        e = (d + t1) | 0;
	        d = c;
	        c = b;
	        b = a;
	        a = (t1 + t2) | 0;
	      }

	      v[0] += a;
	      v[1] += b;
	      v[2] += c;
	      v[3] += d;
	      v[4] += e;
	      v[5] += f;
	      v[6] += g;
	      v[7] += h;

	      pos += 64;
	      len -= 64;
	    }
	    return pos;
	  }

	  function SHA256() {
	    this.v = new Uint32Array(8);
	    this.w = new Int32Array(64);
	    this.buf = new Uint8Array(128);
	    this.buflen = 0;
	    this.len = 0;
	    this.reset();
	  }

	  SHA256.prototype.reset = function() {
	    this.v[0] = 0x6a09e667;
	    this.v[1] = 0xbb67ae85;
	    this.v[2] = 0x3c6ef372;
	    this.v[3] = 0xa54ff53a;
	    this.v[4] = 0x510e527f;
	    this.v[5] = 0x9b05688c;
	    this.v[6] = 0x1f83d9ab;
	    this.v[7] = 0x5be0cd19;
	    this.buflen = 0;
	    this.len = 0;
	  };

	  SHA256.prototype.clean = function() {
	    var i;
	    for (i = 0; i < this.buf.length; i++) this.buf[i] = 0;
	    for (i = 0; i < this.w.length; i++) this.w[i] = 0;
	    this.reset();
	  };

	  SHA256.prototype.update = function(m, len) {
	    var mpos = 0, mlen = (typeof len !== 'undefined') ? len : m.length;
	    this.len += mlen;
	    if (this.buflen > 0) {
	      while (this.buflen < 64 && mlen > 0) {
	        this.buf[this.buflen++] = m[mpos++];
	        mlen--;
	      }
	      if (this.buflen === 64) {
	        blocks(this.w, this.v, this.buf, 0, 64);
	        this.buflen = 0;
	      }
	    }
	    if (mlen >= 64) {
	      mpos = blocks(this.w, this.v, m, mpos, mlen);
	      mlen %= 64;
	    }
	    while (mlen > 0) {
	      this.buf[this.buflen++] = m[mpos++];
	      mlen--;
	    }
	    return this;
	  };

	  SHA256.prototype.finish = function(h) {
	    var mlen = this.len,
	        left = this.buflen,
	        bhi = (mlen / 0x20000000) | 0,
	        blo = mlen << 3,
	        padlen = (mlen % 64 < 56) ? 64 : 128,
	        i;

	    this.buf[left] = 0x80;
	    for (i = left + 1; i < padlen - 8; i++) this.buf[i] = 0;
	    this.buf[padlen-8] = (bhi >>> 24) & 0xff;
	    this.buf[padlen-7] = (bhi >>> 16) & 0xff;
	    this.buf[padlen-6] = (bhi >>>  8) & 0xff;
	    this.buf[padlen-5] = (bhi >>>  0) & 0xff;
	    this.buf[padlen-4] = (blo >>> 24) & 0xff;
	    this.buf[padlen-3] = (blo >>> 16) & 0xff;
	    this.buf[padlen-2] = (blo >>>  8) & 0xff;
	    this.buf[padlen-1] = (blo >>>  0) & 0xff;

	    blocks(this.w, this.v, this.buf, 0, padlen);

	    for (i = 0; i < 8; i++) {
	      h[i*4+0] = (this.v[i] >>> 24) & 0xff;
	      h[i*4+1] = (this.v[i] >>> 16) & 0xff;
	      h[i*4+2] = (this.v[i] >>>  8) & 0xff;
	      h[i*4+3] = (this.v[i] >>>  0) & 0xff;
	    }
	    return this;
	  };

	  function HMAC(k) {
	    var i, pad = new Uint8Array(64);
	    if (k.length > 64)
	      (new SHA256()).update(k).finish(pad);
	    else
	      for (i = 0; i < k.length; i++) pad[i] = k[i];
	    this.inner = new SHA256();
	    this.outer = new SHA256();
	    for (i = 0; i < 64; i++) pad[i] ^= 0x36;
	    this.inner.update(pad);
	    for (i = 0; i < 64; i++) pad[i] ^= 0x36 ^ 0x5c;
	    this.outer.update(pad);
	    this.istate = new Uint32Array(8);
	    this.ostate = new Uint32Array(8);
	    for (i = 0; i < 8; i++) {
	      this.istate[i] = this.inner.v[i];
	      this.ostate[i] = this.outer.v[i];
	    }
	    for (i = 0; i < pad.length; i++) pad[i] = 0;
	  }

	  HMAC.prototype.reset = function() {
	    for (var i = 0; i < 8; i++) {
	      this.inner.v[i] = this.istate[i];
	      this.outer.v[i] = this.ostate[i];
	    }
	    this.inner.len = this.outer.len = 64;
	    this.inner.buflen = this.outer.buflen = 0;
	  };

	  HMAC.prototype.clean = function() {
	    for (var i = 0; i < 8; i++) this.ostate[i] = this.istate[i] = 0;
	    this.inner.clean();
	    this.outer.clean();
	  };

	  HMAC.prototype.update = function(m) {
	    this.inner.update(m);
	    return this;
	  };

	  HMAC.prototype.finish = function(h) {
	    this.inner.finish(h);
	    this.outer.update(h, 32).finish(h);
	    return this;
	  };

	  var sha256 = function(m) {
	    var h = new Uint8Array(32);
	    (new SHA256()).update(m).finish(h).clean();
	    return h;
	  };

	  sha256.hmac = function(k, m) {
	    var h = new Uint8Array(32);
	    (new HMAC(k)).update(m).finish(h).clean();
	    return h;
	  };

	  sha256.pbkdf2 = function(password, salt, rounds, dkLen) {
	    var i, j, k,
	        ctr = new Uint8Array(4),
	        t = new Uint8Array(32),
	        u = new Uint8Array(32),
	        dk = new Uint8Array(dkLen),
	        prf = new HMAC(password);

	    for (i = 0; i * 32 < dkLen; i++) {
	      k = i + 1;
	      ctr[0] = (k >>> 24) & 0xff;
	      ctr[1] = (k >>> 16) & 0xff;
	      ctr[2] = (k >>> 8)  & 0xff;
	      ctr[3] = (k >>> 0)  & 0xff;
	      prf.reset();
	      prf.update(salt);
	      prf.update(ctr);
	      prf.finish(u);
	      for (j = 0; j < 32; j++) t[j] = u[j];
	      for (j = 2; j <= rounds; j++) {
	        prf.reset();
	        prf.update(u).finish(u);
	        for (k = 0; k < 32; k++) t[k] ^= u[k];
	      }
	      for (j = 0; j < 32 && i*32 + j < dkLen; j++) dk[i*32 + j] = t[j];
	    }
	    for (i = 0; i < 32; i++) t[i] = u[i] = 0;
	    for (i = 0; i < 4; i++) ctr[i] = 0;
	    prf.clean();
	    return dk;
	  };

	  return sha256;
	});


/***/ },
/* 508 */
/*!*********************************!*\
  !*** ./src/sal/LocalStorage.js ***!
  \*********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview LocalStorage abstraction
	 * @module sal/LocalStorage
	 */ 
	 module.exports = function(mm) {
	  
	  //--------------------------------------------------------------------------
	  /**
	   * @summary **Local Storage for Browser and node apps**
	   * @description
	   * This implements the Windows.localStorage operations as sync
	   * file IO on node, and provides pass throughs for actual browser
	   * localStorage when running on an actual browser of a headless
	   * browser like PhantomJS.
	   *
	   * LocalStorage is persistent for the site across executions of the browser.
	   * No more than 2.49 million characters total can be stored in localStorage.
	   * @constructor
	   * @returns {LocalStorage} the new local storage service.
	   */  
	  var LocalStorage = (function localStorageCtorCreator() {
	    var ctor = function LocalStorage() {
	      var self = this;
	      /* istanbul ignore else */
	      if (mm.config.inNode) {
	        var domain = mm.util.mmEnvOption('LOCALSTORAGE', mm.config.appName);
	        var dir = mm.path.join(mm.config.baseDir, 
	            'storage', 'localStorage', domain);
	        self.baseDir = dir;
	        self.filePath = function filePath(name) {
	          var fileName = name + '.localStorage.json';
	          return mm.path.join(self.baseDir, fileName);
	        }
	      }
	      else {
	        if (typeof(mm.window.localStorage) === 'undefined') {
	          mm.log.warn('No browser support for local Storage');
	        }
	      }
	    };
	    
	    return ctor;
	  }());

	  /**
	   * @summary **Clear the local storage**
	   * @description
	   * All variables are cleared for this domain in local storage.
	   * Clear() takes no arguments, and simply empties the entire storage 
	   * object for that domain.  
	   */  
	  LocalStorage.prototype.clear = function localClear() {
	    var self = this;
	    /* istanbul ignore else */
	    if (mm.config.inNode) {
	      mm.del.sync(self.baseDir);
	    }
	    else {
	      mm.window.localStorage.clear();
	    }
	  }

	  /**
	   * @summary **Store a named object in local storage**
	   * @description
	   * Any other object of the same name will be replaced by this one.
	   * @param {string} name the name of the object in storage
	   * @param {obj} obj a named object
	   */  
	  LocalStorage.prototype.store = function localStore(name, obj) {
	    var self = this;
	    var text = mm.util.JSONify(obj, 2);
	    
	    /* istanbul ignore else */
	    if (mm.config.inNode) {
	      mm.mkdirp.sync(self.baseDir);
	      mm.fs.writeFileSync(self.filePath(name), text);
	    }
	    else {
	      mm.window.localStorage.setItem(name, text);
	    }
	  }

	  /**
	   * @summary **Load a named object from local storage**
	   * @param {string} name the name of the object to load
	   * @returns {obj} returns the object or undefined.
	   */  
	  LocalStorage.prototype.load = function localLoad(name) {
	    var self = this;
	    var text;
	    /* istanbul ignore else */
	    if (mm.config.inNode) {
	      try {
	        text = String(mm.fs.readFileSync(self.filePath(name)))
	      }
	      catch (e) {
	        return text;
	      }
	    }
	    else {
	      text = mm.window.localStorage.getItem(name);
	    }
	    if (!text) return text;
	    return JSON.parse(text);
	  }
	  
	  /**
	   * @summary **Remove a single object from local storage**
	   * @param {string} name the name of the object to remove
	   */  
	  LocalStorage.prototype.remove = function localRemove(name) {
	    var self = this;
	    /* istanbul ignore else */
	    if (mm.config.inNode) {
	      var fp = self.filePath(name);
	      if (mm.fs.existsSync(fp)) {
	        mm.fs.unlinkSync(fp);
	      }
	    }
	    else {
	      mm.window.localStorage.removeItem(name);
	    }
	  }

	  return LocalStorage;
	}


/***/ },
/* 509 */,
/* 510 */
/*!**********************************!*\
  !*** ./src/sal/StorageClient.js ***!
  \**********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview Storage client
	 * @module sal/StorageClient
	 */ 
	 module.exports = function(mm) {
	  var _       = mm.check(mm._);
	  var StoragePath = mm.check(mm.storage.StoragePath);

	  /**
	   * @summary **Client for access to persistent storage**
	   * @description
	   * A StorageClient provides access to the storage services to save and
	   * load objects to the persistent store. The `user` field in the client
	   * constructor options specifies the owner for every object that can be
	   * written by this client. Other objects can be read by specifying their
	   * owners in the path parameter of operations.
	   * @constructor
	   * @param {Object} options the options for the client type.
	   * @returns {StorageClient} the new storage client.
	   */  
	  var StorageClient = (function storageClientCtorCreator() {
	    var ctor = function StorageClient(options) {
	      var self = this;
	      _.defaults(self, options);
	      /* istanbul ignore if */
	      if (typeof self.engine === 'undefined') {
	        // TODO: Remove this if it serves no purpose. 
	        self.engine = mm.check(mm.storage.storageEngine);
	      }
	    };

	    return ctor;
	  }());

	  /**
	   * @summary **Determine if an error is NOT FOUND**
	   * @description
	   * This examines the error code and returns true if it indicates that
	   * the request failed to find the object.
	   * @param {Error} err the Error object
	   * @returns {bool} true if the Error object indicates NOT FOUND.
	   */
	  StorageClient.prototype.notFound = function notFound(err) {
	    return mm.util.ENOENT(err);
	  }

	  /**
	   * @summary **Store an object**
	   * @description
	   * The object is stored in the specified path. A promise is returned
	   * which evaluates to the full `StorageInfo` to the object when it
	   * has been successfully saved. The object must contain a `name` field
	   * that will uniquely index the object in its destination collection or
	   * directory. Note that the object stored should not be modified until
	   * the operation is complete, and the object may be modified by the call.
	   * @param {StoragePath} path the text path or object
	   * @param {Object} obj the object to store
	   * @returns {Promise} a promise to a `StorageInfo`
	   */
	  StorageClient.prototype.store = function clientStore(path, obj) {
	    var self = this;
	    /* istanbul ignore else */
	    if (!(path instanceof StoragePath)) {
	      path = new StoragePath(self, path);
	    }
	 
	    return self.engine.rq('store', path, obj.name, obj);
	  }

	  /**
	   * @summary **Load an object**
	   * @description
	   * The object is loaded from the specified path. A promise is returned
	   * which evaluates to the object if it is sucessfully loaded.
	   * The loaded object will contain a `name` field that is the unique name
	   * of the object in the collection or directory it is stored in.
	   * @param {StoragePath} path the text path or object
	   * @param {string} name the named item to load   
	   * @returns {Promise} a promise to the object
	   */
	  StorageClient.prototype.load = function clientLoad(path, name) {
	    var self = this;
	    /* istanbul ignore else */
	    if (!(path instanceof StoragePath)) {
	      path = new StoragePath(self, path);
	    }
	    return self.engine.rq('load', path, name)
	    .then(function (info) {
	      // Timing info is also returned in the content.
	      if (info._elapsed) info.content._elapsed = info._elapsed;
	      return info.content;
	    });
	  }

	  /**
	   * @summary **Load one or more objects**
	   * @description
	   * The set of objects is loaded from the specified path based on the
	   * name pattern. The name pattern is either a name, or a partial name
	   * with a '*' suffix for prefix matching. Unless there is a storage
	   * error, an array is always returned (although it is empty on a non
	   * matching pattern). Currently, an engine specific limit is
	   * placed on the maximum number of items returned (based on the 
	   * largest possible single response.
	   *
	   * When the callback function is used, there is no limit to how many
	   * objects can be read. If an error occurs no more (if any) callbacks
	   * will occur and the result promise is rejected with the error.
	   * When reading normally that callback `obj` will contain one
	   * item of the result or null when there are no more results available.
	   * If your callback returns `true` then it is done and no more callbacks
	   * will occur. The result promise will resolve with an array of
	   * names for all objects that were handled (or [] if `terse` is set).
	   * An error thrown by any callback will result in a rejected result
	   * promise.
	   *
	   * The callback is called once with null if no objects match the pattern.
	   * Terse is useful if the full set of names could itself be a problem of
	   * scale. Not often true, but its there if you need it.
	   * @param {StoragePath} path the text path or object
	   * @param {string} name pattern for items to retrieve
	   * @param {function} optional callback(obj)
	   * @param {boolean} terse promise result is true or error only.
	   * @returns {Promise} a promise to the object array.
	   */
	  StorageClient.prototype.loadMultiple =
	  function clientLoadMultiple(path, namePattern, callback, terse) 
	  {
	    var self = this;
	    /* istanbul ignore else */
	    if (!(path instanceof StoragePath)) {
	      path = new StoragePath(self, path);
	    }
	    if (_.isFunction(callback)) {
	      path.callback = callback;
	      path.terse = terse;
	    }
	    return self.engine.rq('loadMultiple', path, namePattern)
	    .then(function (info) {
	      return info.content;
	    });
	  }

	  /**
	   * @summary **Remove an object**
	   * @description
	   * The object is removed from the specified path. A promise is returned
	   * which evaluates to true object is sucessfully removed.
	   * @param {StoragePath} path the text path or object
	   * @param {string} name the item to remove
	   * @returns {Promise} a promise to true if removed.
	   */
	  StorageClient.prototype.remove = function clientRemove(path, name) {
	    var self = this;
	    /* istanbul ignore else */
	    if (!(path instanceof StoragePath)) {
	      path = new StoragePath(self, path);
	    }
	    return self.engine.rq('remove', path, name);
	  }
	  
	  /**
	   * @summary **Close the client**
	   * @description
	   * The client disconnects from the engine and releases any resources 
	   * it currently holds.
	   */
	  StorageClient.prototype.close = function clientClose() {
	  }

	  return StorageClient;
	}


/***/ },
/* 511 */
/*!**********************************!*\
  !*** ./src/sal/StorageEngine.js ***!
  \**********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview Storage Engine
	 * @module sal/storageEngine
	 */ 
	 module.exports = function(mm) {
	  var _     = mm.check(mm._);
	  var qq    = mm.check(mm.Q);
	  
	  //--------------------------------------------------------------------------
	  /**
	   * @summary **Background persistent storage service**
	   * @description
	   * A storage engine services storage requests for clients or the server.
	   * @constructor
	   * @returns {StorageEngine} the new storage engine.
	   */  
	  var StorageEngine = (function storageEngineCtorCreator() {
	    var ctor = function StorageEngine() {
	      var self = this;
	      self.todo = [];
	      self.idle = true;
	      self.engineTimeout = 10000;
	      self.initialized = false;
	    };

	    return ctor;
	  }());

	  /**
	   * @summary **Close the engine**
	   * @description
	   * The engine closes any pending clients and releases any resources 
	   * it currently holds.
	   */
	  StorageEngine.prototype.close = /* istanbul ignore next */
	  function engineClose() {
	    var self = this;
	    if (self.dbProvider && self.dbProvider.close) {
	      self.dbProvider.close();
	    }
	    if (self.fileProvider && self.fileProvider.close) {
	      self.fileProvider.close();
	    }
	    if (self.clientProvider && self.clientProvider.close) {
	      self.clientProvider.close();
	    }
	    
	    self.initialized = false;
	  }

	  /**
	   * @summary **Initiate an operation by engine**
	   * @description
	   * The operation is queued to the appropriate provider.
	   * @param {string} opName the operation requested.
	   * @param {StoragePath} path the text path or object
	   * @param {string} name unique name of the object  
	   * @param {object} content the named object to store on 'store' operations.
	   * @returns {Promise} a promise to a `StorageInfo`
	   */
	  StorageEngine.prototype.rq = 
	  function engineRq(opName, path, name, content) {
	    var self = this;
	    /* istanbul ignore next */
	    path.itemName = name ? name : path.itemName;
	    return self.queue({ op: opName, path: path, content: content});
	  }

	  /**
	   * @summary **Queue an operation to the storage engine**
	   * @description
	   * The operation is added to the storage engine  queue.
	   * @param {object} op a storage operation object
	   * @returns {Promise} a promise to a `StorageInfo`
	   */
	  StorageEngine.prototype.queue = 
	  function engineQueue(op) {
	    var self = this;
	    op.deferred = qq.defer(); // Add a promise and resolver.
	    var ms = self.engineTimeout;
	    // If the called provider goes to see the wizard, this will finally
	    // terminate the operation with a failure after a couple of minutes.
	    var tp = op.deferred.promise.timeout(ms, 
	      'Storage engine timed out after ' + ms + ' ms');
	    self.todo.push(op);
	    /* istanbul ignore else */
	    if (self.idle) {
	      // TODO: Since this is never idle, perhaps I should rethink the
	      // operation queue.
	      self.initializeProviders()
	      .then(function () {
	        // Schedule run operation.
	        self.run(); // Kick the engine into gear.
	      });
	    }

	    return tp;
	  }

	  StorageEngine.prototype.run = 
	  function engineRun() {
	  try {
	      var self = this;
	      self.idle = false;

	      // Do stuff as long as work is available.
	      while (self.todo.length > 0) {
	        var op = self.todo.shift();
	        op.started = _.now();
	        self.startOp(op);
	      }
	      
	      self.idle = true;
	    }
	    catch (e) {
	      /* istanbul ignore next */
	      mm.log.error('* Storage Engine Failure:', e.stack);
	    }
	  }

	  /**
	   * @summary **Initialize the engine providers**
	   * @description
	   * All registered providers are initialized once. If initialization of a
	   * provider fails, it is removed and will not be used.
	   */  
	  StorageEngine.prototype.initializeProviders =
	  function engineInitializeProviders() {
	    var self = this;
	    var initializedProviders = [];
	    if (!self.initialized) {
	      self.initializer = qq.defer();
	      var p;
	      if (self.dbProvider) {
	        p = self.dbProvider.initialize();
	        initializedProviders.push(p);
	        p.catch( /* istanbul ignore next */
	        function () {
	          mm.log.warn('Database provider is not available');
	          delete self.dbProvider;
	        })
	      }

	      if (self.fileProvider) {
	        p = self.fileProvider.initialize();
	        initializedProviders.push(p);
	        p.catch( /* istanbul ignore next */
	        function () {
	          mm.log.error('File provider is not available');
	          delete self.fileProvider;
	        })
	      }

	      if (self.clientProvider) {
	        p = self.clientProvider.initialize();
	        initializedProviders.push(p);
	        p.catch( /* istanbul ignore next */
	        function () {
	          mm.log.error('Client provider is not available');
	          delete self.clientProvider;
	        })
	      }

	      self.initialized = qq.allSettled(initializedProviders);
	    }

	    return self.initialized;
	  }
	  
	  /**
	   * @summary **Peform a node.js filesystem operation**
	   * @description
	   * This handles `fs` based file IO operations.
	   * @param {Object} op the operation being performed
	   */  
	  StorageEngine.prototype.startOp = 
	  function startOp(op) {
	    var self = this;
	    var p = op.path;

	    // Use the client provider whenever it is available
	    if (self.clientProvider) {
	      self.clientProvider.perform(op);
	      return;
	    }
	 
	    // Use the filesystem if it was preferred by the client.
	    if (p.prefer === 'fs' && self.fileProvider) {
	      self.fileProvider.perform(op);
	      return;
	    }
	    
	    // Use the db by default (or if it is preferred)
	    if (self.dbProvider) {
	      self.dbProvider.perform(op);
	      return;
	    }

	    // Fall back on using the file provider as needed.
	    /* istanbul ignore if */ // Tested independently and repeatedly.
	    if (self.fileProvider) {
	      self.fileProvider.perform(op);
	      return;
	    }

	    /* istanbul ignore next */
	    var s = 'Unavailable storage operation: ' + op.op; 
	    /* istanbul ignore next */
	    op.deferred.reject(new Error(s));
	  }
	  
	  return StorageEngine;
	}


/***/ },
/* 512 */
/*!********************************!*\
  !*** ./src/sal/StorageInfo.js ***!
  \********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview Storage information about a file operation.
	 * @module sal/StorageInfo
	 */ 
	 module.exports = function(mm) {
	 
	  /**
	   * @summary **Information about a persistenly stored object**
	   * @description
	   * A StorageInfo contains information about an object in persistent
	   * storage such as its path, size, storage state, etc.
	   * @constructor
	   * @param {fs.Stats} stat optional the fs.Stat object.
	   * @returns {StorageInfo} the new storage info.
	   */  
	  var StorageInfo = (function storageInfoCtorCreator() {
	    var ctor = function StorageInfo(stat) {
	      var self = this;
	      if (stat) mm._.defaults(self, stat);
	    };

	    return ctor;
	  }());

	  return StorageInfo;
	}


/***/ },
/* 513 */
/*!********************************!*\
  !*** ./src/sal/StoragePath.js ***!
  \********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview Storage path abstraction
	 * @module sal/StoragePath
	 */ 
	 module.exports = function(mm) {

	  //--------------------------------------------------------------------------
	  /**
	   * @summary **Location of a stored object**
	   * @description
	   * A StoragePath specifies a location in persistent storage. Options
	   * for the storage engine can also be part of the path. The storage
	   * clients provide Path, operation names, and additional info to the
	   *  storage engine.
	   * @constructor
	   * @param {StorageClient} context the context for the path
	   * @param {string} text text form of the path
	   * @returns {StoragePath} the new storage path.
	   */
	  var StoragePath = (function storagePathCtorCreator() {
	    var ctor = function StoragePath(context, text) {
	      var self = this;
	      var parts = text.split('/');
	      /* istanbul ignore else */
	      if (parts.length < 2) {
	        // The userName matches the owner field in content.
	        self.userName = context.user;
	        self.collectionName = parts[0];
	      }
	      else {
	        self.userName = parts[0];
	        self.collectionName = parts[1];
	      }
	      if (context.prefer) self.prefer = context.prefer;
	    };
	    
	    return ctor;
	  }());

	  return StoragePath;
	}


/***/ },
/* 514 */
/*!**************************!*\
  !*** ./src/sal/index.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	// Insert the Services Abstraction Layer dependencies.
	module.exports = function(mm) {
	  //mm.storage = require('./storage')(mm);

	  mm.storage = {};
	  mm.storage.providers = {};
	  mm.storage.LocalStorage  = __webpack_require__(/*! ./LocalStorage */ 508)(mm);
	  mm.storage.StoragePath   = __webpack_require__(/*! ./StoragePath */ 513)(mm);
	  mm.storage.StorageInfo   = __webpack_require__(/*! ./StorageInfo */ 512)(mm);
	  mm.storage.StorageEngine = __webpack_require__(/*! ./StorageEngine */ 511)(mm);
	  mm.storage.StorageClient = __webpack_require__(/*! ./StorageClient */ 510)(mm);
	  
	  if (mm.config.inNode) {
	    mm.storage.providers.MongoDBProvider = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./MongoDBProvider\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))(mm);
	    mm.storage.providers.FileProvider    = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./FileProvider\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))(mm);
	  }
	  mm.storage.providers.ClientProvider  = __webpack_require__(/*! ./ClientProvider */ 505)(mm);
	 
	  mm.users = {};
	  mm.users.ClientUser = __webpack_require__(/*! ./ClientUser */ 506)(mm);
	};


/***/ },
/* 515 */
/*!******************************!*\
  !*** ./src/test/MockSock.js ***!
  \******************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview MockSock mock client and server socket.io for testing
	 * @module sal/MockSock
	 */ 
	 module.exports = function(mm) {
	   var qq = mm.check(mm.Q);
	   var _  = mm.check(mm._);
	  
	  //--------------------------------------------------------------------------
	  /**
	   * @summary **Mock socket.io server**
	   * @description
	   * Implements a server side socket.io for use by test servers when
	   * testing node.js clients in-process instead of over the wire. This
	   * is used for unit testing and code coverage.
	   * @constructor
	   * @returns {MockSockServer} the new storage path.
	   */  
	  var MockSockServer = (function mockSockServerCtorCreator() {
	    var ctor = function mockSockServer() {
	      var self = this;
	      self.version = '0.9.16_MockSockServer';
	      self.connectedD = qq.defer();
	      self.connected = self.connectedD.promise;
	      self.log = function() {
	        var args = Array.prototype.slice.call(arguments);
	        args[0] = '[MockServer]:' + args[0];
	        mm.log.debug.apply(null, args);
	      }
	    };
	    
	    return ctor;
	  }());

	  /**
	   * @summary **Mock listen**
	   * @description
	   * Pretend to listen for a client, but don't really.
	   * @param {Server} server object (ignored)
	   * @returns {MockSocket} returns a Mock client Socket.
	   */  
	  MockSockServer.prototype.listen = function mockListen(server) {
	    var self = this;  
	    self.log('Listening...');
	    return self;
	  }

	  /**
	   * @summary **Mock io configure**
	   * @description
	   * Call a mock configure routine.
	   * @param {function} func configuration function
	   */  
	  MockSockServer.prototype.configure = function mockIoConfigure(func) {
	    func();
	  }

	  /**
	   * @summary **Mock io set**
	   * @description
	   * Set a mock sockets parameter.
	   * @param {...*} args ignored arguments
	   */  
	  MockSockServer.prototype.set = function mockIoSet() {
	  // var self = this;
	  }

	  /**
	   * @summary **Mock io on event register**
	   * @description
	   * The only event actually 'registered' here is 'connection'.
	   * Anything else is currently ignored.  Calls a function of the
	   * form handler(socket).
	   * @param {string} event must be the 'connection' event
	   * @param {function(socket)} the socket for direct server-client io.
	   */  
	  MockSockServer.prototype.on = function mockIoConnect(event, handler) {
	    var self = this;  
	    self.log('on [' + event + ']');
	    if (event === 'connection') {
	      self.connected
	      .then(function (clientSocket) {
	        self.log('Connected to', clientSocket);
	        handler(clientSocket);
	        
	        // Allow reconnections - kludgey, but good enough for testing.
	        self.connectedD = qq.defer();
	        self.connected = self.connectedD.promise;
	        self.on('connected', handler);
	      });
	    }
	  }
	  
	  //--------------------------------------------------------------------------
	  /**
	   * @summary **Mock socket.io client**
	   * @description
	   * Implements client side socket.io for use in testing node.js clients 
	   * in-process instead of over the wire. 
	   * @constructor
	   * @param {MockSockServer} server the server to 'connect' to.
	   * @returns {MockSockClient} the new storage path.
	   */  
	  var MockSockClient = (function mockSockClientCtorCreator() {
	    var ctor = function mockSockClient(server) {
	      var self = this;
	      self.version = '0.9.16_MockSockClient';
	      self.server = server;
	      self.log = function() {
	        var args = Array.prototype.slice.call(arguments);
	        args[0] = '[MockClient]:' + args[0];
	        mm.log.debug.apply(null, args);
	      }
	    };
	    return ctor;
	  }());

	  /**
	   * @summary **Mock connect**
	   * @description
	   * Provides a new unique connection to the MockSockServer and returns a
	   * MockSocket for bidirectional io between the in-process client and
	   * the server.
	   * @param {string} url the url of the server (ignored)
	   * @returns {MockSocket} returns a Mock client Socket.
	   */  
	  MockSockClient.prototype.connect = function connect(url) {
	    var self = this;  
	    self.url = url;
	    self.log('Connecting to server:', url);
	    return self.reconnect(true);
	  }

	  MockSockClient.prototype.reconnect = function reconnect(firstConnect) {
	    var self = this;  
	    if (!firstConnect) {
	      self.log('Reconnecting to server:', self.url);
	    }
	    var id = 'MockId_' + _.random(100000000).toString();
	    var mySocket = new MockSocket(id, 'client', self);
	    var remoteSocket = new MockSocket(id, 'server', self.server);
	    mySocket.remote = remoteSocket;
	    remoteSocket.remote = mySocket;
	    self.server.connectedD.resolve(remoteSocket);
	    return mySocket;
	  }

	  //--------------------------------------------------------------------------
	  /**
	   * @summary **Mock client/server socket**
	   * @description
	   * Implements single client or server side socket
	   * @constructor
	   * @param {string} id the id shared between the socket pair
	   * @param {string} alias the short name to use in log messages
	   * @param {Object} owner the client or server that owns this socket
	   * @returns {MockSocket} the new mock socket.
	   */  
	  var MockSocket = (function mockClientSocketCtorCreator() {
	    var ctor = function mockSocket(id, alias, owner) {
	      var self = this;  
	      self.id = id;
	      self.alias = alias;
	      self.owner = owner;
	      self.socket = owner; // Socket name for reconnect.
	      self.remote = null;
	      self.events = {};
	      self.log = function() {
	        var args = Array.prototype.slice.call(arguments);
	        args[0] = '[MockSock_' + self.alias + ']:' + args[0];
	        mm.log.debug.apply(null, args);
	      }
	    };
	    
	    return ctor;
	  }());

	  /**
	   * @summary **Mock on event**
	   * @description
	   * Register a mock receive event and handler.
	   * @param {string} event the name of the event
	   * @param {function(data)} handler the function to handle the event
	   */  
	  MockSocket.prototype.on = function on(event, handler) {
	    var self = this;
	    // Register the event handler.
	    self.events[event] = function(data) {
	      self.log('Recieved event[' + event + ']');
	      handler(data);
	    }
	  }

	  /**
	   * @summary **Mock emit**
	   * @description
	   * Register a mock transmit data.
	   * @param {string} event the name of the event
	   * @param {object) obj the data to send
	   */  
	  MockSocket.prototype.emit = function on(event, obj) {
	    var self = this;
	    self.log('Emit Event[' + event + ']');
	    if (self.remote.events[event]) {
	      self.remote.events[event](obj);
	    }
	    else {
	      self.log('--- Warning! No handler on remote for event[' + event + ']');
	    }
	  }

	  /**
	   * @summary **Mock disconnect**
	   * @description
	   * Perform a mock socket disconnect.
	   */  
	  MockSocket.prototype.disconnect = function disconnect() {
	    var self = this;  
	    self.log('***disconnect***');
	    self.emit('disconnect', {});
	  }
	  
	  //--------------------------------------------------------------------------  
	  return { 
	    Server: MockSockServer,
	    Client: MockSockClient
	  }
	}


/***/ },
/* 516 */,
/* 517 */
/*!***************************!*\
  !*** ./src/test/index.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	//
	// This registers the permanently available test support features into
	// the mMeddle global.
	//
	module.exports = function(mm) {
	  // Hooks for client/server test cases
	  mm.test = {};
	  mm.test.client = {};
	  mm.test.server = {};

	  // Fakes up both sides of a Sockets.io connection.
	  mm.mockSock = __webpack_require__(/*! ./MockSock */ 515)(mm);
	  
	  // Does self registration.
	  __webpack_require__(/*! ./testClientSupport */ 518)(mm);
	};


/***/ },
/* 518 */
/*!***************************************!*\
  !*** ./src/test/testClientSupport.js ***!
  \***************************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview Routines to improve client server testing.
	 * @module test/testClientSupport
	 * @description
	 * mm.test is populated with some 'global' items that make implementing
	 * test cases easier.
	 * 
	 */ 
	module.exports = function setupClientTestSupport(mm) {
	  var check         = mm.check;
	  var _             = check(mm._);          // jshint ignore:line 
	  var qq            = check(mm.Q);          // jshint ignore:line 
	  var EggTimer      = check(mm.obj.EggTimer);
	  var CliConsole    = check(mm.core.CliConsole);
	  var ClientSession = check(mm.core.ClientSession);
	  var MMeddleClient = check(mm.core.MMeddleClient);
	  var CliCommands   = check(mm.core.CliCommands);

	  var connectedP = false;
	  var connectedTimer;
	  var MAX_TEST_TIMEOUT_SEC = 10;
	    
	  /**
	   * @summary **Start an in-process version of the server**
	   * @description
	   * The mocksock socket.io simulator is used with the express.js server
	   * to create an in-process version of the mMeddle server. Since there is
	   * no actual network IO problems can often be isolated more easily.
	   * This also helps in getting code coverage since both sides of the
	   * client/server pair are tested concurrently.
	   * @alias module:test/testClientSupport.mockMeddleServer
	   */
	  function mockMeddleServer() {
	    try {
	      var appName = 'mockServer';
	      mm.log.setupAppDebugLog(appName);
	      mm.config = mm.config.appLoad(appName);
	      mm.log.debug('----- Server Configuration -----\n', mm.config);
	      
	      var mmServer = new mm.server.MMeddleServer(mm.config.baseDir);

	      mmServer.setupTerminationHandlers();
	      mmServer.initializeServer();
	      mmServer.start();
	      
	      var storageEngine = new mm.storage.StorageEngine();
	      if (!mm.util.mmEnvOption('NOFS', false)) {
	        mm.storage.providers.FileProvider.register(storageEngine);
	      }
	      if (!mm.util.mmEnvOption('NODB', false)) {
	        mm.storage.providers.MongoDBProvider.register(storageEngine);
	      }
	      
	      var socketService = new mm.server.SocketService();
	      socketService.initializeService(mmServer, storageEngine);
	      socketService.acceptConnections();
	      
	      mm.test.server.mmServer = mmServer;
	      mm.test.server.socketService = socketService;
	    }
	    catch (e) {
	      mm.log.error('- Mock mMeddle Server failure:', e.stack);
	    }
	  }
	  
	  /**
	   * @summary **Establish a local workspace for test clients**
	   * @description
	   * This sets up a local workspace for test clients named 'mochatests',
	   * and populates mm with the most useful objects to do client testing.
	   * This can be used by 'base' tests since it does not require the meddle
	   * server.
	   * @example:
	   *     before(mochaTestWorkspace()); // populates
	   *     mm.test.client.mmc      // the current MMeddleClient
	   *     mm.test.client.mConsole // the current console (Mock)
	   *     mm.test.client.cmds     // the current CliCommands
	   * @returns a promise that resolves when connected.
	   * @alias module:test/testClientSupport.mochaTestConnect
	   */
	  function mochaTestWorkspace() {
	    try {
	      if (mm.test.client.mmc) {
	        return;
	      }

	      var mConsole;
	      if (mm.config.inNode) {
	        mConsole = new CliConsole();
	      }
	      else {
	        mConsole = new CliConsole('cliInText', 'inTextPrompt', 'consolediv');
	      }

	      mm.mConsole = mConsole;
	      mm.test.client.mConsole = mConsole;
	      mm.log.setCliConsole(mConsole);
	      mm.log.debug('----- MochaTests Configuration -----\n', mm.config);
	      
	      var clientName = 'MochaTests';
	      var cs = new ClientSession(clientName);

	      var host = mm.config.startLocal ? mm.config.localUrl : mm.config.remoteUrl;
	      var mmc = new MMeddleClient(host, cs);
	      mm.test.client.cs = cs;
	      mm.test.client.mmc = mmc;

	      var cliCmds = new CliCommands(mConsole, cs);
	      mm.test.client.cmds = cliCmds;
	      cs.bindClient(mmc);
	      cs.loadLocalWorkspace();
	      cs.loadLocalUser();
	    }
	    catch (e) {
	        mm.log.error('Test Client Setup failed.', e.stack);
	    }
	  }

	  /**
	   * @summary **Connects to a mMeddle server as a mochatests client**
	   * @description
	   * This routine connects to a mMeddle server as a client named 'mochatests',
	   * and populates mm with the most useful objects to do client testing.
	   * Note that once connected, this will only attempt to reconnect if the
	   * connection is lost.
	   * @example:
	   *     mm.test.client.cs       // the current ClientSession
	   *     mm.test.client.mmc      // the current MMeddleClient
	   *     mm.test.client.mConsole // the current console (Mock)
	   *     mm.test.client.cmds     // the current CliCommands
	   * @returns a promise that resolves when connected.
	   * @alias module:test/testClientSupport.mochaTestConnect
	   */
	  function mochaTestConnect() {
	    try {
	      mochaTestWorkspace();

	      // Once the connection has succeeded or failed, we never need to
	      // look at it again.
	      if (connectedP) {
	        connectedTimer.reset(); // Live for a bit longer.
	        return connectedP; // All is well or terrible.
	      }

	      connectedTimer = new EggTimer(MAX_TEST_TIMEOUT_SEC * 1000);
	      connectedTimer.onDing(function () {
	        if (mm.config.inNode) {
	          mm.log('----- Shutdown server connection for tests.');      
	          mm.test.client.mConsole.close();
	          //process.exit();
	        }
	      });
	      
	      mm.log('- Connect to the test Server');
	      mm.test.debugon = true;
	      
	      var mockSock = mm.util.ifEnvOption('MOCKSOCK') || mm.config.mocksock;
	      if (mockSock) {
	        mm.socketServer.io = new mm.mockSock.Server();
	        mm.socketClient.io = new mm.mockSock.Client(mm.socketServer.io);
	        mockMeddleServer();
	      }
	      
	      // Do the actual connection.
	      connectedP = mm.test.client.mmc.connectWorkspace('local')
	      .then(function() {
	        mm.log('- Connected to server {0}', mm.test.client.mmc.host);
	        mm.test.client.cs.emitLogMessage(
	            mm.test.client.cs.appName + ' connected!');
	      });
	      
	      return connectedP;
	    }
	    catch (e) {
	        mm.log.error('Test Client Setup failed.', e.stack);
	    }
	  }

	  mm.test.mochaTestWorkspace = mochaTestWorkspace;
	  mm.test.mochaTestConnect = mochaTestConnect;
	}



/***/ },
/* 519 */
/*!****************************!*\
  !*** ./src/util/Config.js ***!
  \****************************/
/***/ function(module, exports) {

	'use srict';
	/**
	 * @fileOverview Loads config.json files 
	 * @module util/Config
	 */ 
	module.exports = function registerConfig(mm) {
	  var path = mm.check(mm.path);
	  var _    = mm.check(mm._);

	  // This is true so that the .json files can be a bit less strictly
	  // JSON and a bit more like JavaScript objects. Comments and
	  // unquoted field names are allowed.
	  var SANITIZE = true;  
	  
	  /**
	   * @summary **Create a Config**
	   * @description
	   * A Config is an object that contains key value pairs. It contains the
	   * persistent configuration about an application and optionally a specific
	   * user that controls the behavior of the app during its enire execution.
	   *
	   * The contents are loaded from `[app][.debug].config.json` files.
	   * More than one file is used to load the full configuration. 
	   * For example, the `.config.json` file is followed by the
	   * `server.config.json` file to load the primary settings for the server.
	   * if the DEBUG environment variable (or a config.debug is set), then the
	   * `server.debug.config.json` file is also loaded. On client applications,
	   * the settings start with `client.config.json`, then optionally 
	   * `client.config.debug.json`.

	   *  When a user logs in, a first a check is made for
	   * `user-[userName].config.json` and debug version. These will be
	   * placed in the session user configuration. 
	   *
	   * Config files are not created or modified by this class. They are created
	   * and modified externally and are considered to be static for the duration
	   * of the program execution (i.e. they are not reloaded on change).
	   * @constructor
	   * @returns {Config} the empty config settingss
	   */
	  var Config = (function configCtorCreator() {
	    return function Config() {
	      var self = this;
	      self.debug = mm.util.envOption('DEBUG', false);
	      self.debug = mm.util.mmEnvOption('DEBUG', self.debug);
	      self.configFilesLoaded = 0;
	    }
	  }());

	  /**
	   * @summary **Initialize a config from a JSON derived object**
	   * @description
	   * All fields of the same name in the existing config are replaced by
	   * those in the source object (which is often created by parsing a
	   * JSON string). Any fields NOT in the source object remain unchanged.
	   * @param {Object} config the raw object
	   * @returns self for chaining.
	   */
	  Config.prototype.init = function init(config) {
	    var self = this;  
	    _.assign(self, config);
	    return self;
	  }

	  /**
	   * @summary **Get a value from a config or use a default**
	   * @description
	   * If the value is present in the config then it is returned otherwise
	   * the default value supplied is returned.
	   * @param {string} fieldName the name of the field in the config 
	   * @param {Object} defaultValue the value to return
	   * @returns the value.
	   */
	  Config.prototype.get = function get(fieldName, defaultValue) {
	    var self = this;  
	    if (fieldName in self) return self[fieldName];
	    return defaultValue;
	  }

	  /**
	   * @summary **Load a config file by exact name **
	   * @description
	   * This is normally used internally.  The exact file is loaded into
	   * the Config. No errors are trapped so file access and not found 
	   * exceptions will be thrown.
	   * @param {string} cfgPath the exact file name to load
	   */
	  Config.prototype.loadFile = function loadFile(cfgPath) {
	    var self = this;
	    var cfg = String(mm.fs.readFileSync(cfgPath));
	    var config = mm.util.JSONparse(cfg, SANITIZE);
	    self.init(config);
	  }

	  /**
	   * @summary **Load a config file**
	   * @description
	   * The file is looked for in the base directory first, and then the 
	   * ./config subdirectory. Only the first file found is loaded.
	   * All loads are synchronous, but don't worry, loading configs is not
	   * a common event. Errors are logged, but otherwise do nothing.
	   * If `config.debug` then an additional file pair is checked with
	   * `.debug.config.json` extensions. 
	   * Note that this does nothing if run from within a Browser.
	   * @param {string} prefix the prefix to the .config.json file
	   * @param {string} optional context for log messages
	   * @returns self for chaining
	   */
	  Config.prototype.load = function load(prefix, context) {
	    var self = this;
	    /* istanbul ignore if */ // Tested in WebCLI
	    if (mm.config.inBrowser) return self;
	    var dir1 = mm.config.baseDir;
	    var dir2 = path.join(dir1, 'config');
	    var fileName = prefix + '.config.json';
	    var dirs = [dir1, dir2];
	    /* istanbul ignore next */
	    var ctx = _.isString(context) ? context : '';
	    function loadInternal() {
	      for (var i in dirs) {
	        try {          
	          var cfgPath = path.join(dirs[i], fileName);
	          self.loadFile(cfgPath);
	          mm.log.debug(ctx + '- Config:', cfgPath);
	          self.configFilesLoaded++;
	        }
	        catch (e) {
	          /* istanbul ignore if */ // Tested independently.
	          if (!mm.util.ENOENT(e)) {
	            mm.log.error(ctx +'Config read failed [' +
	                cfgPath + ']', e.stack);
	          }
	        }
	      }
	    }

	    loadInternal();
	    /* istanbul ignore if */ // Tested independently.
	    if (self.debug) {
	      fileName = prefix + '.debug.config.json';
	      loadInternal();
	    }
	    return self;
	  }
	  
	  /**
	   * @summary **Load standard app configs**
	   * @description
	   * This loads the default mmeddle.config.json file along with the 
	   * [appName.config.json file. Optional .debug.config.json files are
	   * loaded when required.  The appName is added as a key in the config.
	   * @param {string} appName the application name
	   * @param {string} optional context for log messages
	   * @returns self for chaining
	   */
	  Config.prototype.appLoad = function load(appName, context) {
	    var self = this;
	    var appId = path.basename(appName, '.js');
	    self.load('mmeddle').load(appId);
	    self.appName = appId;
	    return self;
	  }

	  /**
	   * @summary **Load a user config**
	   * @description
	   * This loads the user-[userName].config.json file along with the 
	   * optional .debug.config.json file
	   * @param {string} userName the user name to look up
	   * @param {string} optional context for log messages
	   * @returns false if nothing was loaded.
	   */
	  Config.prototype.userLoad = function load(userName, context) {
	    var self = this;
	    self.load('user-' + userName);
	    self.userName = userName;
	    return self.configFilesLoaded > 0;
	  }
	  
	  return Config;
	}


/***/ },
/* 520 */
/*!******************************!*\
  !*** ./src/util/EggTimer.js ***!
  \******************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @fileOverview EggTimer
	 * @module util/EggTimer
	 */ 
	 module.exports = function(mm) {
	  var _     = mm.check(mm._);
	  var qq    = mm.check(mm.Q);

	  //--------------------------------------------------------------------------
	  /**
	   * @summary **Resettable timer**
	   * @description
	   * A timer that will fire after two minutes (or any other time you set.
	   * @constructor
	   * @param {number} timeMs the number of ms to wait (optional)
	   * @param {string} timeMs the number of ms to wait (optional)    
	   * @returns {EggTimer} the new timer.
	   */  
	  var EggTimer = function EggTimerCtor(timeMs, name) {
	    var self = this;
	    var ms = 2 * 60 * 1000;
	    /* istanbul ignore next */
	    if (_.isString(timeMs)) {
	      self.name = timeMs;
	    }
	    else if (_.isNumber(timeMs)) {
	      ms = timeMs;
	    }
	    else {
	      /* istanbul ignore next */
	      self.name = 'Timer';
	    }
	    if (_.isString(name)) {
	      self.name = name;
	    }
	    self.duration = ms;
	    self.remaining = ms;
	    self.running = false;
	    self.dinged = false;
	  };

	  /**
	   * @summary **Set a Ding event**
	   * @description
	   * Set the event to call when the timer elapses.  There is ONLY one
	   * ding handler per timer. Setting a new one replaces the prior one.
	   * @returns {EggTimer} the same timer for chaining.
	   */
	  EggTimer.prototype.onDing = function onDing(dingHandler) {
	    var self = this;
	    self.dingHandler = dingHandler;
	    return self;
	  }

	  /**
	   * @summary **Force a Ding event**
	   * @description
	   * Force the ding event to occur, thus triggering the ding handlers.
	   * This is like winding the timer to zero before the timer has expired
	   * and letting it go Ding!
	   * @returns {EggTimer} the same timer for chaining.
	   */
	  EggTimer.prototype.forceDing = function forceDing(dingHandler) {
	    var self = this;
	    /* istanbul ignore else */
	    if (self.timedDefer) {
	      self.timedDefer.reject('forced Ding!');
	    }
	    return self;
	  }
	  
	  /**
	   * @summary **Reset the time back to the start time**
	   * @description
	   * The timer is started over.
	   * @param (number) timeMs a new number of ms to wait (optional)       
	   * @returns {EggTimer} the same timer for chaining.
	   */
	  EggTimer.prototype.reset = function reset(timeMs) {
	    var self = this;
	    if (self.timedDefer) {
	      self.timedDefer.resolve(self.getRemainingTime());
	    }
	    /* istanbul ignore if */
	    if (timeMs) {
	      self.duration = timeMs;
	    }
	    self.remaining = self.duration;
	    return self.start();
	  }

	  /**
	   * @summary **Start the timer**
	   * @description
	   * The timer will begin running.
	   * @returns {EggTimer} the same timer for chaining.
	   */
	  EggTimer.prototype.start = function start() {
	    var self = this;
	    // Allocate a deferred promise with a timer that will automatically
	    // fire the ding handler. Each time reset occurs a new timer is
	    // started and the old one is resolved to keep it from firing.
	    self.timedDefer = qq.defer();
	    self.timedDefer
	      .promise
	      .timeout(self.remaining, 'Ding!')
	      .fail(self.dingWrapper.bind(self)); 
	    self.startTime = _.now()
	    self.running = true;
	    self.dinged = false;
	    return self;
	  }

	  /**
	   * @summary **Fire the ding handler if it exists**
	   */
	  EggTimer.prototype.dingWrapper = function dingWrapper() {
	    var self = this;
	    self.running = false;
	    self.stopTime = _.now();
	    self.dinged = true;
	    /* istanbul ignore else */ // Inspected.
	    if (self.dingHandler) {
	      try {
	        self.dingHandler();
	      }
	      catch (e) {
	        /* istanbul ignore next */
	        mm.log.error(self.name + 'handler failed', e.stack);
	      }
	    }
	  }

	  /**
	   * @summary **Stop the timer**
	   * @description
	   * The timer will stop and no event will be called. The timer can
	   * remain stopped indefinitely but like a stopwatch, when started,
	   * it will continue where it left off.
	   * Call reset to restart it with the orignial duration.
	   * @returns {EggTimer} the same timer for chaining.
	   */
	  EggTimer.prototype.stop = function stop() {
	    var self = this;
	    self.running = false;
	    self.stopTime = _.now();
	    self.remaining = self.getRemainingTime();
	    /* istanbul ignore else */ // Inspected.
	    if (self.timedDefer) {
	      self.timedDefer.resolve(self.remaining);
	    }
	    return self;
	  }

	  /**
	   * @summary **Get the elapsed time for the timer**
	   * @returns {number} the elapsed in ms.
	   */
	  EggTimer.prototype.getElapsedTime = function getElapsedTime() {
	    var self = this;
	    var stopTime = self.running ? _.now() : self.stopTime;
	    return self.dinged ? self.duration : stopTime - self.startTime;
	  }
	  
	  /**
	   * @summary **Get the remaining time for the timer**
	   * @returns {number} the time until the ding event fires
	   */
	  EggTimer.prototype.getRemainingTime = function getRemainingTime() {
	    var self = this;
	    var remaining = self.duration - self.getElapsedTime();
	    return self.dinged ? 0 : remaining;
	  }

	  return EggTimer;
	}


/***/ },
/* 521 */
/*!**************************!*\
  !*** ./src/util/Enum.js ***!
  \**************************/
/***/ function(module, exports) {

	'use strict';
	module.exports = function registerSimpleEnum() {
	  // The world's simples Enum mechanism.
	  function Enum(values) {
	    var self = this;
	    values.split('|').forEach(function(arg) { self[arg] = arg });
	  }

	  return Enum;
	}

/***/ },
/* 522 */
/*!****************************!*\
  !*** ./src/util/Logger.js ***!
  \****************************/
/***/ function(module, exports) {

	/**
	 * @fileOverview Logger static methods and constructor.
	 * @module util/Logger
	 */ 
	'use strict';
	module.exports = function registerLoggers(mm) {
	  var _      = mm.check(mm._);
	  var format = mm.check(mm.format);
	  
	  /**
	   * @summary **Create a Priority**
	   * @description
	   * The last argument in any call to a Logger can specify a LogPriority.
	   * Messages to a logger can be filtered based on Priority levels.
	   * @constructor
	   * @param {number} level the log level of this priority
	   * @param {string} name a nice name for display
	   * @returns {Priority} the new logger
	   */    
	  function Priority(level, name) {
	    var self = this;
	    self.level = level;
	    self.name = name;
	  }

	  Priority.LOW    = new Priority(0, 'LOW');   
	  Priority.NORMAL = new Priority(1, 'NORMAL');   
	  Priority.HIGH   = new Priority(2, 'HIGH');   

	  /**
	   * @summary **Create a Logger**
	   * @description
	   * A Logger receives text messages from various parts of the program
	   * via calls to the `log` method, and dispatches them to zero or more
	   * destination handlers. The messages may be filtered (i.e. not output)
	   * by various mechanisms. Normally one or more destination functions
	   * handle output.  A Logger initialized with no destination handlers,
	   * although it is enabled, for all the good that will do you.
	   *
	   * Arranging loggers in a hierarchy is useful since it provides
	   * flexibility in dispatching. For example, status messages can go
	   * to both a display area, to some log file, and to a server,
	   * while internal warnings may just be dispatched to the server.
	   * @constructor
	   * @param {string} name the name of the logger (origin)
	   * @param {Logger} parent an optional parent logger
	   * @returns {Logger} the new logger
	   */
	  var Logger = (function loggerCtorCreator() {
	    return function Logger(name, parent) {
	      var self = this;
	      self.name = name;
	      self.enabled = true;
	      self.parent = parent ? parent : null;

	      /**
	       * The minimum `Priority` of messages that will be
	       * output to the destinations of this logger. This is set by
	       * the `allowPriority` method.
	       * @name minimumPriority
	       * @type {number}
	       * @memberOf module:util/Logger~Logger#
	       */       
	      self.minimumPriority = Priority.NORMAL;

	      /** @member {Array} destinations 
	       *  @memberOf! module:utisl/log
	       *  @description The array of destination functions
	       */
	      self.destinations = [];
	    }
	  }());

	  /**
	   * @summary Enum for log message priority values.
	   * @readonly
	   * @enum {number}
	   * @default
	   */  
	  Logger.Priority = Priority;

	  /**
	   * @summary **Bind log and a few functions as properties to a new member**
	   * @description This is a convenient way to get a shortcut to the `log` method of a
	   * logger so it can be used as a standalone function. This also binds
	   * the convenience properties: `enable`, and `disable`.  These must be
	   * used immediately before a call to `log`.
	   * @static
	   * @param {Logger} bindLog the logger to fetch the `log` method from
	   * @returns {function} the rebound `log` method wrapper
	   * @example
	   *    var status = Logger.bindLog(allMyLoggers.statusLogger);
	   *    ...
	   *    status.enable.log("Whoop whoop! Everyone to get off from street.");
	   */
	  Logger.bindLog = function bindLog (rootLogger) {
	    var log = _.bind(rootLogger.log, rootLogger);
	    // Bind convenience functions to the wrapper function.
	    _bindFuncAsProp(log, 'enable', rootLogger.enable, rootLogger);
	    _bindFuncAsProp(log, 'disable', rootLogger.disable, rootLogger);
	    return log;
	  }
	  
	  function _bindFuncAsProp(obj, name, f, root) {
	    Object.defineProperty(obj, name, {
	      get: function() { return f.call(root); }
	    });
	  }

	  /**
	   * @summary **Exception handler for logger failures (replacable)**
	   * @description Loggers should not fail, but when they do someting bad has
	   * happened. This is a replaceble function that logs the stack trace
	   * by default.
	   * @static
	   * @param {Error} bindLog the exception that faulted the logger
	   */
	  /* istanbul ignore next */     
	  Logger.failureHandler = function failureHandler(e) {
	    console.log('***** Logger Failure *****:', e.stack);
	  }

	  /**
	   * @summary **Format an object argument (replacable)**
	   * @description Used internally when objects are passed without a format.
	   * @static
	   * @param {*} obj the object to format
	   * @returns the `util.inpect()` of the object
	   */
	  Logger.formatObject = function formatObject(obj) {
	    if (typeof obj === 'undefined') return '(undefined)';  
	    if (obj === null) return '(null)';
	    if (typeof obj === 'object') {
	      if (obj instanceof String ||
	          obj instanceof Number ||
	          obj instanceof Date) {
	        return obj.toString();
	      }
	      else {
	        return mm.util.inspect(obj);
	      }
	    }
	    else {
	      return obj.toString();
	    }
	  }

	  /**
	   * @summary **Logger string format routine**
	   * @description Exposes the format routine used by the logger.
	   * The first parameter is a `sf` compatible format, any remaning 
	   * parameters are substitued into the the format.
	   * The logger failure handler is used for bad formats.
	   * @static
	   * @param {...*} arguments the format string and its arguments
	   * @returns {string} the formatted string
	   */
	  Logger.format = function format() {
	    return Logger.formatArray(Array.prototype.slice.call(arguments));
	  }

	  /**
	   * @summary **Logger string format array of arguments**
	   * @description Exposes the format routine used by the logger.
	   * The first entry is a `sf` compatible format, any remaning parameters
	   * are substitued into the the format. The logger failure handler is
	   * used for bad formats.
	   * @static
	   * @param {Array} args the format string and its arguments
	   * @returns {string} the formatted string
	   */
	  Logger.formatArray = function formatArray(args) {
	    // If the output contains only one argument or the
	    // first argument is not a format, then produce `toString()` or
	    // `util.inspect` formatted arguments separated by spaces.
	    if (args && args.length > 1 && _.isString(args[0]) && args[0].indexOf('{') > -1) {
	      try {
	        return format.apply(null, args);
	      }
	      catch (e) {
	        Logger.failureHandler(e);
	        // Bad formats provide comma separated outputs, not failure.
	        return args.join(); 
	      }      
	    }
	    else {
	      var outText = '';    
	      var separator = '';
	      args.forEach(function(arg) {
	        outText += separator + Logger.formatObject(arg);
	        separator = ' ';
	      })
	      return outText;
	    }
	  }

	  /**
	   * @summary **Get origin for a message (replacable)**
	   * @description
	   * This is usually used by Destination handlers to get
	   * the origin "[logger name]" prefix to place on the message.
	   * The handlers can add additional information such as a timestamp, 
	   * or omit the origin entirely.
	   * @returns {string} '[logger name]' by default.
	   */
	  Logger.prototype.origin = function origin() {
	    var self = this;
	    return '[' + self.name + ']';
	  }

	  /**
	   * @summary **Add another destination handler to this logger**
	   * @description
	   * Destination handlers are functions which receive the text message
	   * to log, as well as the logger which produced it, and the message
	   * priority: `destFunc(message, logger, priority)`.
	   * Multiple identical destinations are ignored.
	   * @param {function(message, Logger, priority)} handler 
	   *    the destination function
	   * @returns {Logger} the logger for chaining
	   */
	  Logger.prototype.addDestination = function addDestination(handler)
	  { 
	    var self = this;
	    if (_.indexOf(self.destinations, handler) < 0) {
	      self.destinations.push(handler);
	    }
	    return self;
	  }

	  /**
	   * @summary **Remove a handler from this logger**
	   * @description
	   * Removes a single destination handler, or clears them all with '*'.
	   * @param {function(message, Logger, priority)|*} handler the
	   *    destination handler function or '*'.
	   * @returns {Logger} the logger for chaining
	   */
	  Logger.prototype.removeDestination = function removeDestination(handler)
	  { 
	    var self = this;
	    if (handler === '*') {
	      self.destinations = [];
	    }
	    else if (_.indexOf(self.destinations, handler) >= 0) {
	      self.destinations = _.without(self.destinations, handler);
	    }
	    return self;
	  }
	  
	  /**
	   * @summary **Log a message**
	   * @description
	   * This is often a `format` followed by objects, but can be a simple
	   * text string, or a list of objects.  The message will be converted
	   * into a text string and output to all of the destinations of this
	   * logger and its parents, unless the message is rejected by a
	   * filter, or the logger is disabled.  The last argument can be a 
	   * Logger.Priority which controls log filtering.
	   * @param {...*} arguments zero or more objects, often with a leading format string.
	   * @returns {Logger} the logger for chaining
	   */
	  Logger.prototype.log = function log() {
	    var self = this;
	    if (self.enabled) {
	      var args = Array.prototype.slice.call(arguments);
	      var n = args.length;
	      if (n > 0) {
	        if (args[n - 1] instanceof Priority) {
	          var priority = args.pop();
	          return self.logArray(args, priority);
	        }
	      }
	      return self.logArray(args);
	    }
	    return self;
	  }

	  /**
	   * @summary **Select the lowest priority to log**
	   * @description
	   * Modifies the minimumPriority to filter the logging of messages.
	   * @param {number} v The minimum priority to log
	   * @returns {Logger} the logger for chaining
	   * @example
	   *    logger.allowPriority(Logger.Priority.LOW);
	   */
	  Logger.prototype.allowPriority = function allowPriority(v) {
	    var self = this;
	    self.minimumPriority = v;
	    return self;
	  }

	  /**
	   * @summary **Enable the logger**
	   * @description
	   * When a logger is enabled then any messages with a priority greater
	   * than or equal to the `minimumPriority` (as set by {@link allowPriority})
	   * will be logged to all of the destination handlers of this logger andt
	   * its parent handlers (unless it is disabled).
	   * @param {boolean} value optional state to set the logger to
	   * @returns {Logger} the logger for chaining
	   */
	  Logger.prototype.enable = function enable(value) {
	    var self = this;
	    self.enabled = (arguments.length === 0 || value);
	    return self;
	  }

	  /**
	   * @summary **Disable this logger**
	   * @description
	   * When a logger is disabled then any messages sent to this logger are
	   * discarded. This encludes messages sent from child loggers to this one.
	   * By extension, this means that the parent to this logger will receive
	   * no messages from this logger or its children.
	   * @returns {Logger} the logger for chaining
	   */
	  Logger.prototype.disable = function disable() {
	    return this.enable(false);
	  }

	  /**
	   * @summary **Log an array of objects as a message**
	   * @description
	   * The first object can be a format.
	   * @param {Array} args zero or more objects in an array.
	   * @param {Priority} priority an optional message priority.
	   * @returns {Logger} the logger for chaining
	   */
	  Logger.prototype.logArray = function logArray(args, priority) {
	    var self = this;
	    var outText = '';    
	    if (self.enabled) {
	      outText = Logger.formatArray(args);
	    }
	    return self.logString(outText, priority);
	  }

	  /**
	   * @summary **Log a single string message to the logger's destinations**
	   * @param {string} text the message to log.
	   * @param {Priority} priority an optional message priority.   
	   * @returns {Logger} the logger for chaining
	   */
	  Logger.prototype.logString = function logString(text, priority) {
	    var self = this;
	    if (self.enabled) {    
	      var messagePriority = priority ? priority : Priority.NORMAL;
	      var logger = self;
	      var originLogger = self;
	      while (logger) {
	        if (logger.enabled) {
	          _logString(text, originLogger, logger, messagePriority);
	          logger = logger.parent;
	        }
	        else {
	          logger = null;
	        }
	      }
	    }
	    return self;
	  }

	  function _logString(text, originLogger, logger, messagePriority) {
	    if (messagePriority.level >= logger.minimumPriority.level) {
	      logger.destinations.forEach(function (handler) {
	        _logStringToDestination(handler, text, originLogger, messagePriority);
	      })
	    }
	  }

	  function _logStringToDestination(handler, text, logger, messagePriority) {
	    try {
	      handler(text, logger, messagePriority);
	    }
		  catch (e) {
		      // Loggers should hide the problems caused by badly
		      // behaving destination handlers and just eat the bad
		      // messages, or whatever else is causing the trouble.
		      // This keeps the logger from being part of the problem
		      // thats causing whatever nightmare is in progress.
	        /* istanbul ignore next */
	        Logger.failureHandler(e);
		    }
	    }

	  return Logger;
	}


/***/ },
/* 523 */
/*!***************************!*\
  !*** ./src/util/index.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	//
	// Most utils register their dependency routines directly into the global
	// environment object rather than returning an object themselves.  This
	// seems to be a bit more flexible, but I'm not sure that I'm in love with
	// the style. As always, I reserve the right to change my mind later.
	//
	module.exports = function(mm) {
	  mm.util = __webpack_require__(/*! util */ 524); // Node.js utilities, extended.
	  __webpack_require__(/*! ./utilString */ 527)(mm.util, mm);
	  __webpack_require__(/*! ./utilIntArray */ 528)(mm.util);
	  __webpack_require__(/*! ./utilEnv */ 529)(mm.util, mm);
	  __webpack_require__(/*! ./utilDateTime */ 530)(mm.util, mm);
	  __webpack_require__(/*! ./utilJSON */ 531)(mm.util, mm);
	  
	  mm.obj = {};
	  mm.obj.Config = __webpack_require__(/*! ./Config */ 519)(mm);
	  //mm.obj.Settings = require('./Settings')(mm);  
	  mm.obj.EggTimer = __webpack_require__(/*! ./EggTimer */ 520)(mm);  
	  mm.obj.Enum = __webpack_require__(/*! ./Enum */ 521)();
	  
	  mm.Logger = __webpack_require__(/*! ./Logger */ 522)(mm);
	  mm.log = __webpack_require__(/*! ./log */ 532)(mm);
	  
	  mm.format = mm.Logger.format;

	  /* istanbul ignore next */ // Tested independently
	  mm.obj.CoreObject = function CoreObject() {
	    // core object prototype functions here.
	  };

	};


/***/ },
/* 524 */
/*!****************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/util/util.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ 525);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(/*! inherits */ 526);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 2)))

/***/ },
/* 525 */
/*!***********************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/util/support/isBufferBrowser.js ***!
  \***********************************************************************/
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 526 */
/*!***************************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/util/~/inherits/inherits_browser.js ***!
  \***************************************************************************/
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 527 */
/*!********************************!*\
  !*** ./src/util/utilString.js ***!
  \********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @file General utility string functions
	 * @module util/utility
	 */
	module.exports = function registerStringUtilities(util, mm) {
	  
	  /**
	   * @summary **Remove a prefix from a string if it is present**
	   * @param {string} str the string to return in trimmed form
	   * @param {string} prefix a prefix to check for.
	   * @returns {string} the original string or a prefixed version.
	   * @alias module:utils/utility.trimPrefix
	   */
	  mm.util.trimPrefix = function trimPrefix(str, prefix) {
	    var n = prefix.length;
	    return mm._.startsWith(str, prefix) ? str.substr(n) : str;
	  }

	  /**
	   * @summary **Remove all multiples of whitespace from a string**
	   * @param {string} str the string to return in trimmed form
	   * @returns {string} the string or a prefixed version.
	   * @alias module:utils/utility.trimPrefix
	   */
	  mm.util.removeWhitespace = function removeWhitespace(str) {
	    var r = str.replace(/\s+/g, ' ')
	    return r;
	  }

	  /**
	   * @summary **Get a number with leading zeros**
	   * @description
	   * If not an integer the value is truncated to an integer.
	   * @param {number} v the number to zero fill
	   * @param {number} n the number of digits in the number
	   * @returns {string} the number of length n with leading zeros
	   * @alias module:utils/utility.trimPrefix
	   */
	  mm.util.zeroFilled = function(v, n) {
	    var sign = '';
	    if (v < 0) {
	      v = -v;
	      sign = '-';
	    }
	    var val = v.toString();
	    var i = val.indexOf('.');
	    if (i >= 0) val = val.substring(0, i); // trim after decimal.
	    var res = mm._.repeat('0', n) + val;
	    res = res.substr(res.length - n);
	    if (res[0] === '0' && sign) res = sign + res.substring(1);
	    return res;
	  }

	  /**
	   * @summary **Match a wildcard pattern**
	   * @description
	   * Matches a string that contains ? and * for matching.
	   * Note that strange characters in the pattern may be interpreted as
	   * part of a regular expression with correspondingly strange results.
	   * $, ^, [,  and ] are escaped properly but beware of other characters.
	   * @param {string} str the string to match to the pattern
	   * @param {string} pattern the pattern to match
	   * @returns {bool} true if the string matches the pattern
	   * @alias module:utils/utility.wildMatch
	   */
	  mm.util.wildMatch = function wildMatch(str, pattern) {
	    var wr = pattern.replace( /\./g, '\.');   // Escape '.'
	    wr = wr.replace( /\$/g, '\$');   // Escape '$'
	    wr = wr.replace( /\^/g, '\^');   // Escape '^'
	    wr = wr.replace( /\[/g, '\[');   // Escape '['
	    wr = wr.replace( /\]/g, '\]');   // Escape ']'
	    wr = wr.replace( /\*/g, '.*');   // Handle *
	    wr = wr.replace( /\?/g, '.' );   // Handle ?
	    wr = '^' + wr + '$';
	    var re = new RegExp(wr, 'i') 
	    return re.test(str);
	/*
	    var si = pattern.indexOf('*');
	    var qi = pattern.indexOf('?');
	    var n = pattern.length;
	    var m = str.length;
	    var pc;
	    // If there must ne an exact match then return it.
	    if (si < 0 && qi < 0) {
	      match = pattern === str;
	      return match;
	    }
	    // For ? only matches do it now.
	    var match = true;
	    if (si < 0) {
	      // No need to check, the lengths have to match.
	      if (m !== n) return false;
	      for (var j = 0; j < n; j++) {
	        pc = pattern[j];
	        if (pc !== '?' && pc !== str[j]) match = false;
	      }
	      return match;
	    }
	    var leftPattern = pattern.substr(0, si);
	    var leftStr = str.substr(0, si);
	    // Match the ? parts.
	    if (!wildMatch(leftStr, leftPattern)) return false;
	    // Eat up to the * and one character from the source str.
	    var rightPattern = pattern.substr(si + 1);
	    // An end of pattern * always matches everything else.
	    if (rightPattern.length === 0) return true;
	    n = rightPattern.length;
	    var rightStr = str.substr(str.length - n);
	    match = wildMatch(rightStr, rightPattern);
	    return match;
	*/
	  }
	  
	  /**
	   * @summary **True on an ENOENT string or error**
	   * @description
	   * Examines an Error or string to see if it contains an ENOENT code.
	   * @param {string|Error} e the error or string to examine
	   * @returns {bool} true if this is an ENOENT error
	   * @alias module:utils/utility.ENOENT
	   */
	  mm.util.ENOENT = function ENOENT(e) {
	    var errString = '';
	    if (e instanceof Error) {
	      if (e.code === 'ENOENT') return true;
	      errString = e.toString();
	    }
	    else if (mm._.isString(e)) {
	      errString = e;
	    }
	    return errString.indexOf('ENOENT, ') >= 0;
	  }
	  
	}


/***/ },
/* 528 */
/*!**********************************!*\
  !*** ./src/util/utilIntArray.js ***!
  \**********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @file General Utility functions for UIntArrays.
	 * @module util/utility
	 */
	module.exports = function registerUIntArrayUtils(util, mm) {

	  /**
	   * Convert a `UInt8Array` into a string of hex digits.
	   * @param {UInt8Array} ua the array to convert to text
	   * @returns {string} the string of hex characters
	   * @alias module:utils/utility.ua2hex
	   */
	  util.ua2hex = function ua2hex(ua) {
	      var h = '';
	      for (var i = 0; i < ua.length; i++) {
	          var d = ua[i].toString(16);
	          h += (d.length < 2) ? '0' + d : d;
	      }
	      return h;
	  }

	  /**
	   * Convert a UInt8Array into a string of hex digits.
	   * @param {string} s the string to encode as `UInt8Array`
	   * @returns {UInt8Array} the encoded array
	   * @alias module:utils/utility.text2ua
	   */
	  util.text2ua = function text2ua(s) {
	      var ua = new Uint8Array(s.length);
	      for (var i = 0; i < s.length; i++) {
	          ua[i] = s.charCodeAt(i);
	      }
	      return ua;
	  }
	}


/***/ },
/* 529 */
/*!*****************************!*\
  !*** ./src/util/utilEnv.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	/**
	 * @file General utility functions for Environment variable handling
	 * @module util/utility
	 */
	module.exports = function registerEnvUtilities(util, mm) {

	  /**
	   * @summary **Get a default value or override with an environment variable**
	   * @description
	   * On node.js this uses the process environment variables, on browsers,
	   * the default value is always used.
	   * @param {string} envName the environment variable name
	   * @param {obj} default value
	   * @returns {string|obj} the env string or default value
	   * @alias module:utils/utility.envOption
	   */
	  mm.util.envOption = function envOption(envName, defaultValue) {
	    var envValue = defaultValue;
	    if (mm.config.inNode) {
	      var v = process.env[envName];
	      envValue = v ? v : envValue;
	    }
	    return envValue;
	  }  

	  /**
	   * @summary **True is a named environment variable exists**
	   * @param {string} envName the environment variable name
	   * @returns {bool} true if the variable exists and is truthy
	   * @alias module:utils/utility.ifEnvOption
	   */
	  mm.util.ifEnvOption = function ifEnvOption(envName) {
	    return mm.util.envOption(envName, false) ? true : false;
	  }

	  /**
	   * @summary **Get a default value or override it with MMEDDLE env variable**
	   * @description
	   * On node.js this uses the process environment variable named
	   * MMEDDLE_[envName].  On browsers the default value is always used.
	   * @param {string} envName the environment variable name
	   * @param {obj} default value
	   * @returns {string|obj} the env string or default value
	   * @alias module:utils/utility.mmEnvOption
	   */
	  mm.util.mmEnvOption = function mmEnvOption(envName, defaultValue) {
	    return mm.util.envOption('MMEDDLE_' + envName, defaultValue);
	  }
	  
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 2)))

/***/ },
/* 530 */
/*!**********************************!*\
  !*** ./src/util/utilDateTime.js ***!
  \**********************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @file General utility functions for Date and Time
	 * @module util/utility
	 */
	module.exports = function registerDateTimeUtilities(util, mm) {
	  
	  /**
	   * @summary **Get yyyymmdd format date**
	   * @param {Date} date Optional Date, otherwise new Date() is used.
	   * @returns {string} yyyymmdd formated date.
	   * @alias module:utils/utility.yyyymmdd
	   */
	  mm.util.yyyymmdd = function(date) {
	    if (arguments.length === 0 || typeof date === 'undefined') {
	      date = new Date()
	    }
	    if (mm._.isNumber(date) || mm._.isString(date)) date = new Date(date);
	    // Determine and display the month, day, and year. The getMonth method
	    // uses a zero offset for the month number.
	    var month = date.getMonth() + 1;
	    var day   = date.getDate();
	    var year  = date.getFullYear();
	    return (year + mm.util.zeroFilled(month, 2) + mm.util.zeroFilled(day, 2))
	  }
	  
	  /**
	   * @summary **Get yymmdd format date**
	   * @param {Date} date Optional Date, otherwise new Date() is used.
	   * @returns {string} yymmdd formated date.
	   * @alias module:utils/utility.yymmdd
	   */
	  mm.util.yymmdd = function(date) {
	    if (arguments.length === 0 || typeof date === 'undefined') {
	      date = new Date()
	    }
	    if (mm._.isNumber(date) || mm._.isString(date)) date = new Date(date);    
	    var month = date.getMonth() + 1;
	    var day   = date.getDate();
	    var year  = date.getFullYear();
	    return (mm.util.zeroFilled(year, 2) +
	            mm.util.zeroFilled(month, 2) +
	            mm.util.zeroFilled(day, 2))
	  }

	  /**
	   * @summary **Get hh:mm:ss format time**
	   * @param {Date} date Optional Date, otherwise new Date() is used.
	   * @returns {string} hh:mm:ss formated date.
	   * @alias module:utils/utility.hhmmss
	   */
	  mm.util.hhmmss = function(date) {
	    if (arguments.length === 0 || typeof date === 'undefined') {
	      date = new Date()
	    }
	    if (mm._.isNumber(date) || mm._.isString(date)) date = new Date(date);    
	    // Determine and display the month, day, and year. The getMonth method
	    // uses a zero offset for the month number.
	    var hours   = date.getHours();
	    var minutes = date.getMinutes();
	    var seconds = date.getSeconds();
	    return (mm.util.zeroFilled(hours, 2) + ':' +
	            mm.util.zeroFilled(minutes, 2) + ':' +
	            mm.util.zeroFilled(seconds, 2))
	  }

	  /**
	   * @summary **Get yymmdd|hh:mm:ss format timestamp**
	   * @param {Date|number} date Optional Date, otherwise new Date() is used.
	   * @returns {string} yymmdd|hh:mm:dd formated date time stamp.
	   * @alias module:utils/utility.timestamp
	   */
	  mm.util.timestamp = function(date) {
	    return mm.util.yymmdd(date) + '|' + mm.util.hhmmss(date)
	  }
	  
	  /**
	   * @summary **Get a month as a text name**
	   * @description
	   * If no month name list is supplied, the english full month names are used.
	   * @param {Date} date a date or valid date constructor argument.
	   * @param {array} monthList an optional array of month names.
	   * @returns {string} the month found in the date as a name.
	   * @alias module:utils/utility.monthName
	   */
	  mm.util.monthName = function monthName(date, monthList) {
	    var monthNames = monthList ? monthList : 
	        ['January',   'February', 'March',    'April',
	         'May',       'June',     'July',     'August', 
	         'September', 'October',  'November', 'December'];
	    var thisDate = new Date(date);
	    return monthNames[thisDate.getMonth()];
	  }

	  /**
	   * @summary **Get a month as a 3 character text name**
	   * @param {Date} date a date or valid date constructor argument.
	   * @returns {string} the month found in the date (i.e. 'Feb').
	   * @alias module:utils/utility.monthName3
	   */
	  mm.util.monthName3 = function monthName3(date, monthList) {
	    var monthNames = monthList ? monthList : 
	        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	         'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	    return mm.util.monthName(date, monthNames);
	  }

	  /**
	   * @summary **Get a weekday as a text name**
	   * @description
	   * The optional day of month will be replaced in the date, to determine
	   * the actual day of the week. If no day name list is supplied, the 
	   * english full weekday names are used.
	   * @param {Date} date a date or valid date constructor argument.
	   * @param {number} dayOfMonth an optional day of month.
	   * @param {array} dayList an optional array of day names.
	   * @returns {string} the weekday of the date (i.e. 'Tue').
	   * @alias module:utils/utility.weekday
	   */
	  mm.util.weekday = function weekday(date, dayOfMonth, dayList) {
	    var dayNames = dayList ? dayList : ['Sunday', 'Monday', 'Tuesday',
	        'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	    var thisDate = new Date(date);
	    if (dayOfMonth) thisDate.setDate(dayOfMonth);
	    return dayNames[thisDate.getDay()];
	  }

	  /**
	   * @summary **Get a weekday as a 3 character text name**
	   * @description
	   * The optional day of month will be replaced in the date, to determine
	   * the actual day of the week.
	   * @param {Date} date a date or valid date constructor argument.
	   * @param {number} dayOfMonth an optional day of month (overrides in date).
	   * @returns {string} the weekday of the date (i.e. 'Tue').
	   * @alias module:utils/utility.weekday3
	   */
	  mm.util.weekday3 = function weekday3(date, dayOfMonth) {
	    var weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
	    return mm.util.weekday(date, dayOfMonth, weekDays);
	  }
	  
	}


/***/ },
/* 531 */
/*!******************************!*\
  !*** ./src/util/utilJSON.js ***!
  \******************************/
/***/ function(module, exports) {

	'use strict';
	/**
	 * @file General utility functions for JSON manipulation
	 * @module util/utility
	 */
	module.exports = function registerJSONUtilities(util, mm) {

	  /**
	   * @summary **JSON.stringify an object with function conversions**
	   * @description
	   * Does a JSON.stringify with conversion of functions into strings
	   * for recovery through evals during loading.
	   * @param {Object} obj the object to convert
	   * @param {number} offset the indentation for pretty encoding
	   * @returns {string} the string value
	   * @alias module:utils/utility.JSONify
	   */
	  mm.util.JSONify = function JSONify(obj, offset) {
	    function fixup(key, val) {
	      if (mm._.isFunction(val)) {
	        //mm.log('---- func [' + key + ']:' + val.toString());
	        return val.toString();
	      }
	      else {
	        //mm.log('---- field[' + key + ']:' + mm.util.inspect(val));
	        return val
	      }
	    }
	    
	    return JSON.stringify(obj, fixup, offset);
	  }

	  /**
	   * @summary **Sanitize a string into valid JSON if possible**
	   * @description
	   * Sanitize a JSON-like string containing. For example changes JavaScript
	   * notation into JSON notation.  This is especially useful for human edited
	   * JSON such as config files since pure JSON is an annoying notation for
	   * human editing.  Block and EOL comments are allowed here.
	   * This function for example changes a string like "{a: 2, 'b': {c: 'd'}"
	   * into '{"a": 2, "b": {"c": "d"}'
	   * NOTE: This function was lifted shamelessly directly from Jos de Jong's
	   * jsoneditor 4.1.3.  Apache License - Version 2.0
	   * I added a fix to allow end of line comments and commas between kvpairs.
	   * @see Jos de Jong <wjosdejong@gmail.com>,
	   *      https://github.com/josdejong/jsoneditor.git.
	   * @param {string} jsString
	   * @returns {string} json
	   * @alias module:utils/utility.JSONitize
	   */
	  mm.util.JSONitize = function (jsString) {
	    // escape all single and double quotes inside strings
	    var chars = [];
	    var i = 0;
	    var latchedPrevIsBraceOrComma = false;

	    //If JSON starts with a function (characters/digits/"_-"), remove this function.
	    //This is useful for "stripping" JSONP objects to become JSON
	    //For example: /* some comment */ function_12321321 ( [{"a":"b"}] ); => [{"a":"b"}]
	    var match = jsString.match(/^\s*(\/\*(.|[\r\n])*?\*\/)?\s*[\da-zA-Z_$]+\s*\(([\s\S]*)\)\s*;?\s*$/);
	    /* istanbul ignore if */
	    if (match) {
	      jsString = match[3];
	    }

	    // helper functions to get the current/prev/next character
	    function curr () { return jsString.charAt(i);     }
	    function next()  { return jsString.charAt(i + 1); } /* istanbul ignore next */
	    function prev()  { return jsString.charAt(i - 1); }

	    // test whether the last non-whitespace character was a brace-open '{'
	    // or a , to indicate that this is a key that should be quoted.
	    function prevIsBraceOrComma() {
	      if (latchedPrevIsBraceOrComma) { // Added by jfogarty - mMeddle. 30may15
	        latchedPrevIsBraceOrComma = false;
	        return true;
	      }
	      var ii = i - 1;
	      while (ii >= 0) {
	        var cc = jsString.charAt(ii);
	        if (cc === '{'|| cc === ',') {
	          return true;
	        }
	        else if (cc === ' ' || cc === '\n' || cc === '\r') { // whitespace
	          ii--;
	        }
	        else {
	          return false;
	        }
	      }
	      /* istanbul ignore next */
	      return false;
	    }

	    // skip a block comment '/* ... */'
	    function skipComment () {
	      i += 2;
	      while (i < jsString.length && (curr() !== '*' || next() !== '/')) {
	        i++;
	      }
	      i += 2;
	    }

	    // skip an end of line comment '// ... \n'
	    function skipEolComment () {
	      // Added by jfogarty - mMeddle. 30may15 
	      latchedPrevIsBraceOrComma = prevIsBraceOrComma();
	      i += 2;
	      while (i < jsString.length && (curr() !== '\n')) {
	        i++;
	      }
	      i++;
	    }

	    // parse single or double quoted string
	    function parseString(quote) {
	      chars.push('"');
	      i++;
	      var c = curr();
	      while (i < jsString.length && c !== quote) {
	        /* istanbul ignore if */
	        if (c === '"' && prev() !== '\\') {
	          // unescaped double quote, escape it
	          chars.push('\\');
	        }

	        // handle escape character
	        /* istanbul ignore if */
	        if (c === '\\') {
	          i++;
	          c = curr();

	          // remove the escape character when followed by a single quote ', not needed
	          /* istanbul ignore else */
	          if (c !== '\'') {
	            chars.push('\\');
	          }
	        }
	        chars.push(c);

	        i++;
	        c = curr();
	      }
	      /* istanbul ignore if */
	      if (c === quote) {
	        chars.push('"');
	        i++;
	      }
	    }

	    // parse an unquoted key
	    function parseKey() {
	      var specialValues = ['null', 'true', 'false'];
	      var key = '';
	      var c = curr();

	      var regexp = /[a-zA-Z_$\d]/; // letter, number, underscore, dollar character
	      while (regexp.test(c)) {
	        key += c;
	        i++;
	        c = curr();
	      }

	      /* istanbul ignore else */
	      if (specialValues.indexOf(key) === -1) {
	        chars.push('"' + key + '"');
	      }
	      else {
	        chars.push(key);
	      }
	    }

	    while(i < jsString.length) {
	      var c = curr();

	      if (c === '/' && next() === '*') {
	        skipComment();
	      }
	      else if (c === '/' && next() === '/') {  // Added by jfogarty
	        skipEolComment();                      // mMeddle. 30may15 
	      }
	      else if (c === '\'' || c === '"') {
	        parseString(c);
	      }
	      else if (/[a-zA-Z_$]/.test(c) && prevIsBraceOrComma()) {
	        // an unquoted object key (like a in '{a:2}')
	        parseKey();
	      }
	      else {
	        chars.push(c);
	        i++;
	      }
	    }

	    return chars.join('');
	  };

	  /**
	   * @summary **JSON.parse a string to an object**
	   * @description
	   * Does a JSON.parse. The sanitize option runs the JSONitize sanitizer
	   * (for use with human edited JSON such as .config.json files.
	   * @param {string} the string to convert
	   * @param {bool} sanitize true to sanitize the string first
	   * @returns {Object} an object (throws on error)
	   * @alias module:utils/utility.JSONparse
	   */
	  mm.util.JSONparse = function JSONparse(str, sanitize) {
	    var s = str;
	    /* istanbul ignore else */
	    if (sanitize) s = mm.util.JSONitize(s);
	    return JSON.parse(s);
	  }
	  
	}


/***/ },
/* 532 */
/*!*************************!*\
  !*** ./src/util/log.js ***!
  \*************************/
/***/ function(module, exports) {

	'use srict';
	/**
	 * @fileOverview The Loggers used by mMeddleSequencedObject static methods 
	 *       and constructor.
	 * @module util/log
	 */ 
	module.exports = function registerLoggers(mm) {
	  var path = mm.check(mm.path);
	  var Logger = mm.check(mm.Logger);
	  
	  // The rootLogger provides a common logger to catch
	  // all log messages. By default it has no destinations.
	  var rootLogger    = new Logger('log');
	  var debugLogger   = new Logger('debug',   rootLogger);
	  var infoLogger    = new Logger('info',    rootLogger);
	  var statusLogger  = new Logger('status',  rootLogger);
	  var warningLogger = new Logger('warning', rootLogger);
	  var errorLogger   = new Logger('error',   rootLogger);

	  /**
	   * @namespace
	   * @property {object}  loggers - The set of available loggers
	   * @property {Logger}  loggers.rootLogger - the common logger
	   *   used to contain any destination handlers that aggregate output
	   *   from all other loggers. The `log` method of this logger is
	   *   not normally used.
	   * @property {Logger}  loggers.debugLogger - output from the program
	   *   that is not intended for users, only developers of this code.
	   *   Shortcut access: **mm.log.debug()**
	   * @property {Logger}  loggers.infoLogger - general info about the
	   *   execution of the program that should be saved persistently.
	   *   Shortcut access: **mm.log()** as well as **mm.log.info()**
	   * @property {Logger}  loggers.statusLogger - progress information
	   *   that is normally displayed on the user interface.
	   *   Shortcut access: **mm.log.status()**  
	   * @property {Logger}  loggers.warningLogger - execution warnings
	   *   not usually viewed by the user, but logged persistently.
	   *   Shortcut access: **mm.log.warn()*  
	   * @property {Logger}  loggers.errorLogger - execution errors that the
	   *   Shortcut access: **mm.log.error()**     
	   *   user needs to see
	   */   
	  mm.loggers = {
	    rootLogger: rootLogger, 
	    debugLogger: debugLogger,
	    infoLogger: infoLogger,    
	    statusLogger: statusLogger,
	    warningLogger: warningLogger,
	    errorLogger: errorLogger
	  }

	  var log    = Logger.bindLog(infoLogger);
	  log.info   = Logger.bindLog(infoLogger);
	  log.debug  = Logger.bindLog(debugLogger);  
	  log.status = Logger.bindLog(statusLogger);
	  log.warn   = Logger.bindLog(warningLogger);
	  log.error  = Logger.bindLog(errorLogger);
	  log.fail   = function (e) {
	    log.error('*** Internal Failure:', e.stack);
	  }

	  /**
	   * @summary **Logger destination for info logging**
	   * @description
	   * The raw console log is used for info messages.  These are the
	   * default log output, so no [name]: prefixes are added to the messages.
	   * @param {string} message the text of the message
	   * @param {Logger} logger the logger which originate this message
	   * @param {number} priority the `Logger.Priority` of the message
	   * @alias module:utils/log.consoleLogHandler
	   */
	  function rawConsoleLogHandler(message, logger, priority) {
	    /* istanbul ignore next */ // Tested independently.
	    var text = (priority.level > 1 ? '(!)' : '') + message;
	    /* istanbul ignore next */
	    if (log.writeLine) {
	      log.writeLine(text);
	    }
	    else {
	      console.log(text);
	    }
	  }

	  /**
	   * @summary **Logger destination for console logging**
	   * @description
	   * The console log is used for status messages, as well as when other
	   * console log types are unavailable for a given environment.
	   * @param {string} message the text of the message
	   * @param {Logger} logger the logger which originate this message
	   * @param {number} priority the `Logger.Priority` of the message
	   * @alias module:utils/log.consoleLogHandler
	   */
	  /* istanbul ignore next */ // Test logging takes over.
	  function consoleLogHandler(message, logger, priority) {
	    defaultLogHandler(console.log, message, logger, priority);
	  }

	  /**
	   * @summary **Logger destination handler for debug logging**
	   * @description   
	   * This is added to the {@link debugLogger} to handle `log.debg` messages.
	   * @param {string} message the text of the message
	   * @param {Logger} logger the logger which originate this message
	   * @param {number} priority the `Logger.Priority` of the message
	   * @alias module:utils/log.debugLogHandler
	   */
	  /* istanbul ignore next */
	  function debugLogHandler(message, logger, priority) {
	    // Node has no console.debug  
	    if (!console.debug) return consoleLogHandler(message, logger, priority);
	    defaultLogHandler(console.debug, message, logger, priority);
	  }
	  
	  /**
	   * @summary **Logger destination handler for error logging**
	   * @description
	   * This is added to the {@link errorLogger} to handle `log.error` messages.
	   * On `Node.js` this is to **stdio.err**. On browsers these are treated
	   * as `warn` messages since error logging is an ugly stack trace.
	   * @param {string} message the text of the message
	   * @param {Logger} logger the logger which originate this message
	   * @param {number} priority the `Logger.Priority` of the message
	   * @alias module:utils/log.errorLogHandler
	   */
	  /* istanbul ignore next */   
	  function errorLogHandler(message, logger, priority) {
	    // Use the warning log by default in a browser, since the error log
	    // ends up with an annoying stack trace of the logger itself. Not useful.
	    if (mm.config.inBrowser) return warningLogHandler(message, logger, priority);  
	    if (!console.error) return consoleLogHandler(message, logger, priority);
	    // In node, console.error outputs to stdio.err
	    defaultLogHandler(console.error, message, logger, priority);
	 }

	  /**
	   * @summary **Logger destination handler for warning logging**
	   * @description
	   * This is added to the {@link Logger} to handle `log.warn` messages.
	   * On browsers such as *FireFox*, warninge messages are output in yellow
	   * with a nice tag in the console window of the debugging tools.
	   * @param {string} message the text of the message
	   * @param {Logger} logger the logger which originate this message
	   * @param {number} priority the `Logger.Priority` of the message
	   * @alias module:utils/log.warningLogHandler
	   */
	   /* istanbul ignore next */
	   function warningLogHandler(message, logger, priority) {
	    if (!console.warn) return consoleLogHandler(message, logger, priority);
	    // In node, console.warn outputs to stdio.err
	    defaultLogHandler(console.warn, message, logger, priority);
	  }

	  /**
	   * @summary **Logger destination handler common function**
	   * @description
	   * This does the actual formatting of messages for the text line oriented
	   * log messages.
	   * @param {function} func the actual message output function
	   * @param {string} message the text of the message
	   * @param {Logger} logger the logger which originate this message
	   * @param {number} priority the `Logger.Priority` of the message
	   * @alias module:utils/log.defaultLogHandler
	   */
	  function defaultLogHandler(func, message, logger, priority) {
	    var ptext = '';
	    /* istanbul ignore next */
	    ptext = priority.level > 1 ? '(!)' : ptext;
	    var prefix = logger.origin() + ptext + ':';
	    var text = prefix + message;
	    // For the PhantomJS headless browser, log.debug is a native
	    // function that doesn't like being passed around.
	    /* istanbul ignore if */
	    if (mm.config.inPhantom) {
	      console.log(text);
	    }
	    else {
	      /* istanbul ignore else */ // Tested independently.
	      if (log.writeLine) {
	        log.writeLine(text);
	      }
	      else {
	        func(text);
	      }
	    }
	  }

	  infoLogger.addDestination(rawConsoleLogHandler);  
	  statusLogger.addDestination(consoleLogHandler);
	  debugLogger.addDestination(debugLogHandler);
	  warningLogger.addDestination(warningLogHandler);
	  errorLogger.addDestination(errorLogHandler);

	  /**
	   * @summary **Replace all console outputs with a Writeline function**
	   * @description
	   * When the application is to something like a browser, it is sometimes
	   * useful to replace all log output with a single writeline function
	   * of your choosing.
	   * @param {function} writeLine a function that takes a single string.
	   * @alias module:utils/log.setWriteLine
	   */
	  log.setWriteLine = function setWriteLine(writeLine) {
	    log.writeLine = writeLine;
	  }
	  
	  /**
	   * @summary **Replace all console outputs with a CliConsole**
	   * @description
	   * When an application is using an interactive command handler (i.e. it is
	   * a CLI or REPL) then don't use built-in node console logs, instead
	   * use the supplied CliConsole. This is also used by the mocha test
	   * clients to prefix or mute console outputs as needed.
	   * @param {CliConsole} cliConsole the Cli Console instance.
	   * @alias module:utils/log.setCliConsole
	   */
	  log.setCliConsole = function setCliConsole(cliConsole) {
	    log.cliConsole = cliConsole;
	    log.setWriteLine(cliConsole.writeLine);
	  }

	  /**
	   * @summary **Get a Logger destination handler for file output**
	   * @description
	   * This returns an asynchronous logging handler that appends timestamped
	   * messages to log file.
	   * @param {string} filePath the file to receive the log messages
	   * @alias module:utils/log.getFileLogHandler
	   */
	  log.getFileLogHandler = function getFileLogHandler(filePath) {
	    var msgQueue = []; // Messages before they get written to file.
	    var running = 0;
	    var logFailed = false;
	    var recursionLimit = 50;
	    var fileDir = mm.path.dirname(filePath);
	    
	    // The logHandler is synchronous, but it triggers an async writer.
	    function fileLogHandler(message, logger, priority) {
	      /* istanbul ignore next */ // Tested independently.
	      if (logFailed) return;
	      var entry = {
	        timestamp: mm._.now(),
	        origin: logger.origin(),
	        priority: priority,
	        message: message
	      };
	      msgQueue.push(entry);
	      if (running === 0) {
	        mm.Q.fcall(startRunning);
	      }
	    }
	    
	    function startRunning() {
	      /* istanbul ignore if */ // Tested independently.
	      if (logFailed) return;
	      /* istanbul ignore if */ // Tested independently.
	      if (running > recursionLimit) {
	        // TODO: Note that since this is not really recursion (it is callbacks
	        // the limit here seems somewhat arbitrary. Perhaps this check
	        // should be dropped as serving no good purpose.
	        logFailed = true;
	        mm.log.error('Writing to log [' + filePath +
	            '] was getting too far too far behind. Sorry, I give up.');
	        return;
	      }
	      running++;
	      try {
	        var text = formatTextLines();
	        mm.mkdirp(fileDir, function (err, made) {
	          /* istanbul ignore if */ // Tested independently.
	          if (err) {
	            logFailed = true;
	            mm.log.error('Creating log dir [' + fileDir + '] has failed', err);      
	            return;
	          }
	          mm.fs.appendFile(filePath, text, function (err) {
	            // A log file error kills logging dead.
	            /* istanbul ignore if */ // Tested independently.
	            if (err) {
	              logFailed = true;
	              mm.log.error('Writing to log [' + filePath + '] has failed', err);
	            }
	            else {
	              // While formatting or writing, more log messages have been posted.
	              if (msgQueue.length > 0) startRunning();
	            }
	            running--;
	          });
	        });
	      }
	      catch (err) {       /* istanbul ignore next */
	        logFailed = true; /* istanbul ignore next */
	        mm.log.error('Formatting log [' + filePath + '] has failed', err.stack);
	      }
	    }

	    function formatTextLines() {
	      var text = '';
	      msgQueue.forEach(function(entry) {
	        text += formatTextLine(entry);
	      });
	      msgQueue = []; // Clear the queue.
	      return text;
	    }

	    function formatTextLine(entry) {
	      var ts = mm.util.timestamp(entry.timestamp);
	      var text = ts + ' ' +
	        /* istanbul ignore next */ // Tested independently.
	        mm._.pad(entry.origin, 8) + (entry.priority.level > 1 ? '!!!' : '') +
	         entry.message +
	         '\n';
	      return text;
	    }
	    
	    return fileLogHandler;
	  }
	  
	  /**
	   * @summary **Set up and start an application file logger**
	   * @description
	   * This sets up a logging to a file named ./logs/[appname]-yymmdd.log.
	   * If debugToConsole is not set then the current log handlers for the
	   * debugging logger are cleared so debug messages are only logged to
	   * the log file. This currently does nothing when run from a browser.
	   * @param {string} appName the application name (with optional .js)
	   * @param {bool} debugToConsole also allow debug logging to the console.
	   * @alias module:utils/log.setupAppDebugLog
	   */
	   log.setupAppDebugLog = function setupAppDebugLog(appName, debugToConsole) {
	    /* istanbul ignore if */ // Tested independently (in WebCLI).
	    if (mm.config.inBrowser) return;
	    var logDir = mm.config.logDir;
	    var appId = path.basename(appName, '.js');
	    var logFile = appId + '-' + mm.util.yymmdd() + '.log';
	    var logPath = path.join(logDir, logFile);
	    mm.log('- Debug logging to ', logPath);
	    
	    // Note when mockSock is on, this means that both the server and cli
	    // will log to both log files.  Most entertaining.
	    mm.loggers.rootLogger.addDestination(log.getFileLogHandler(logPath));
	    
	    /* istanbul ignore if */ // Tested independently (in CLI).
	    if (debugToConsole) {
	      // Log debug messages only to the log file.
	      mm.log('- Debug logging to console enabled.');    
	    }
	    else {
	      mm.loggers.debugLogger.removeDestination('*');
	      mm.log.debug('============================= ' +
	                   'mMeddle ' + appId +' STARTED ' + 
	                   '=============================');
	    }
	  }

	  return log;
	}


/***/ },
/* 533 */
/*!************************!*\
  !*** ./src/version.js ***!
  \************************/
/***/ function(module, exports) {

	module.exports = {
	  version: '0.1.5',
	  ts: 'Sun Aug 02 2015 20:59:37 GMT-0700 (MST)'
	};
	// Note: This file is automatically generated when building mmeddle.js.
	// Changes made in this file will be overwritten.


/***/ },
/* 534 */
/*!******************!*\
  !*** ./~/q/q.js ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// vim:ts=4:sts=4:sw=4:
	/*!
	 *
	 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
	 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
	 *
	 * With parts by Tyler Close
	 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
	 * at http://www.opensource.org/licenses/mit-license.html
	 * Forked at ref_send.js version: 2009-05-11
	 *
	 * With parts by Mark Miller
	 * Copyright (C) 2011 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */

	(function (definition) {
	    "use strict";

	    // This file will function properly as a <script> tag, or a module
	    // using CommonJS and NodeJS or RequireJS module formats.  In
	    // Common/Node/RequireJS, the module exports the Q API and when
	    // executed as a simple <script>, it creates a Q global instead.

	    // Montage Require
	    if (typeof bootstrap === "function") {
	        bootstrap("promise", definition);

	    // CommonJS
	    } else if (true) {
	        module.exports = definition();

	    // RequireJS
	    } else if (typeof define === "function" && define.amd) {
	        define(definition);

	    // SES (Secure EcmaScript)
	    } else if (typeof ses !== "undefined") {
	        if (!ses.ok()) {
	            return;
	        } else {
	            ses.makeQ = definition;
	        }

	    // <script>
	    } else if (typeof self !== "undefined") {
	        self.Q = definition();

	    } else {
	        throw new Error("This environment was not anticipated by Q. Please file a bug.");
	    }

	})(function () {
	"use strict";

	var hasStacks = false;
	try {
	    throw new Error();
	} catch (e) {
	    hasStacks = !!e.stack;
	}

	// All code after this point will be filtered from stack traces reported
	// by Q.
	var qStartingLine = captureLine();
	var qFileName;

	// shims

	// used for fallback in "allResolved"
	var noop = function () {};

	// Use the fastest possible means to execute a task in a future turn
	// of the event loop.
	var nextTick =(function () {
	    // linked list of tasks (single, with head node)
	    var head = {task: void 0, next: null};
	    var tail = head;
	    var flushing = false;
	    var requestTick = void 0;
	    var isNodeJS = false;

	    function flush() {
	        /* jshint loopfunc: true */

	        while (head.next) {
	            head = head.next;
	            var task = head.task;
	            head.task = void 0;
	            var domain = head.domain;

	            if (domain) {
	                head.domain = void 0;
	                domain.enter();
	            }

	            try {
	                task();

	            } catch (e) {
	                if (isNodeJS) {
	                    // In node, uncaught exceptions are considered fatal errors.
	                    // Re-throw them synchronously to interrupt flushing!

	                    // Ensure continuation if the uncaught exception is suppressed
	                    // listening "uncaughtException" events (as domains does).
	                    // Continue in next event to avoid tick recursion.
	                    if (domain) {
	                        domain.exit();
	                    }
	                    setTimeout(flush, 0);
	                    if (domain) {
	                        domain.enter();
	                    }

	                    throw e;

	                } else {
	                    // In browsers, uncaught exceptions are not fatal.
	                    // Re-throw them asynchronously to avoid slow-downs.
	                    setTimeout(function() {
	                       throw e;
	                    }, 0);
	                }
	            }

	            if (domain) {
	                domain.exit();
	            }
	        }

	        flushing = false;
	    }

	    nextTick = function (task) {
	        tail = tail.next = {
	            task: task,
	            domain: isNodeJS && process.domain,
	            next: null
	        };

	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };

	    if (typeof process !== "undefined" && process.nextTick) {
	        // Node.js before 0.9. Note that some fake-Node environments, like the
	        // Mocha test runner, introduce a `process` global without a `nextTick`.
	        isNodeJS = true;

	        requestTick = function () {
	            process.nextTick(flush);
	        };

	    } else if (typeof setImmediate === "function") {
	        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
	        if (typeof window !== "undefined") {
	            requestTick = setImmediate.bind(window, flush);
	        } else {
	            requestTick = function () {
	                setImmediate(flush);
	            };
	        }

	    } else if (typeof MessageChannel !== "undefined") {
	        // modern browsers
	        // http://www.nonblocking.io/2011/06/windownexttick.html
	        var channel = new MessageChannel();
	        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
	        // working message ports the first time a page loads.
	        channel.port1.onmessage = function () {
	            requestTick = requestPortTick;
	            channel.port1.onmessage = flush;
	            flush();
	        };
	        var requestPortTick = function () {
	            // Opera requires us to provide a message payload, regardless of
	            // whether we use it.
	            channel.port2.postMessage(0);
	        };
	        requestTick = function () {
	            setTimeout(flush, 0);
	            requestPortTick();
	        };

	    } else {
	        // old browsers
	        requestTick = function () {
	            setTimeout(flush, 0);
	        };
	    }

	    return nextTick;
	})();

	// Attempt to make generics safe in the face of downstream
	// modifications.
	// There is no situation where this is necessary.
	// If you need a security guarantee, these primordials need to be
	// deeply frozen anyway, and if you don’t need a security guarantee,
	// this is just plain paranoid.
	// However, this **might** have the nice side-effect of reducing the size of
	// the minified code by reducing x.call() to merely x()
	// See Mark Miller’s explanation of what this does.
	// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
	var call = Function.call;
	function uncurryThis(f) {
	    return function () {
	        return call.apply(f, arguments);
	    };
	}
	// This is equivalent, but slower:
	// uncurryThis = Function_bind.bind(Function_bind.call);
	// http://jsperf.com/uncurrythis

	var array_slice = uncurryThis(Array.prototype.slice);

	var array_reduce = uncurryThis(
	    Array.prototype.reduce || function (callback, basis) {
	        var index = 0,
	            length = this.length;
	        // concerning the initial value, if one is not provided
	        if (arguments.length === 1) {
	            // seek to the first value in the array, accounting
	            // for the possibility that is is a sparse array
	            do {
	                if (index in this) {
	                    basis = this[index++];
	                    break;
	                }
	                if (++index >= length) {
	                    throw new TypeError();
	                }
	            } while (1);
	        }
	        // reduce
	        for (; index < length; index++) {
	            // account for the possibility that the array is sparse
	            if (index in this) {
	                basis = callback(basis, this[index], index);
	            }
	        }
	        return basis;
	    }
	);

	var array_indexOf = uncurryThis(
	    Array.prototype.indexOf || function (value) {
	        // not a very good shim, but good enough for our one use of it
	        for (var i = 0; i < this.length; i++) {
	            if (this[i] === value) {
	                return i;
	            }
	        }
	        return -1;
	    }
	);

	var array_map = uncurryThis(
	    Array.prototype.map || function (callback, thisp) {
	        var self = this;
	        var collect = [];
	        array_reduce(self, function (undefined, value, index) {
	            collect.push(callback.call(thisp, value, index, self));
	        }, void 0);
	        return collect;
	    }
	);

	var object_create = Object.create || function (prototype) {
	    function Type() { }
	    Type.prototype = prototype;
	    return new Type();
	};

	var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

	var object_keys = Object.keys || function (object) {
	    var keys = [];
	    for (var key in object) {
	        if (object_hasOwnProperty(object, key)) {
	            keys.push(key);
	        }
	    }
	    return keys;
	};

	var object_toString = uncurryThis(Object.prototype.toString);

	function isObject(value) {
	    return value === Object(value);
	}

	// generator related shims

	// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
	function isStopIteration(exception) {
	    return (
	        object_toString(exception) === "[object StopIteration]" ||
	        exception instanceof QReturnValue
	    );
	}

	// FIXME: Remove this helper and Q.return once ES6 generators are in
	// SpiderMonkey.
	var QReturnValue;
	if (typeof ReturnValue !== "undefined") {
	    QReturnValue = ReturnValue;
	} else {
	    QReturnValue = function (value) {
	        this.value = value;
	    };
	}

	// long stack traces

	var STACK_JUMP_SEPARATOR = "From previous event:";

	function makeStackTraceLong(error, promise) {
	    // If possible, transform the error stack trace by removing Node and Q
	    // cruft, then concatenating with the stack trace of `promise`. See #57.
	    if (hasStacks &&
	        promise.stack &&
	        typeof error === "object" &&
	        error !== null &&
	        error.stack &&
	        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	    ) {
	        var stacks = [];
	        for (var p = promise; !!p; p = p.source) {
	            if (p.stack) {
	                stacks.unshift(p.stack);
	            }
	        }
	        stacks.unshift(error.stack);

	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	}

	function filterStackString(stackString) {
	    var lines = stackString.split("\n");
	    var desiredLines = [];
	    for (var i = 0; i < lines.length; ++i) {
	        var line = lines[i];

	        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	            desiredLines.push(line);
	        }
	    }
	    return desiredLines.join("\n");
	}

	function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	           stackLine.indexOf("(node.js:") !== -1;
	}

	function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    // In IE10 function name can have spaces ("Anonymous function") O_o
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) {
	        return [attempt1[1], Number(attempt1[2])];
	    }

	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) {
	        return [attempt2[1], Number(attempt2[2])];
	    }

	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) {
	        return [attempt3[1], Number(attempt3[2])];
	    }
	}

	function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

	    if (!fileNameAndLineNumber) {
	        return false;
	    }

	    var fileName = fileNameAndLineNumber[0];
	    var lineNumber = fileNameAndLineNumber[1];

	    return fileName === qFileName &&
	        lineNumber >= qStartingLine &&
	        lineNumber <= qEndingLine;
	}

	// discover own file name and line number range for filtering stack
	// traces
	function captureLine() {
	    if (!hasStacks) {
	        return;
	    }

	    try {
	        throw new Error();
	    } catch (e) {
	        var lines = e.stack.split("\n");
	        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	        if (!fileNameAndLineNumber) {
	            return;
	        }

	        qFileName = fileNameAndLineNumber[0];
	        return fileNameAndLineNumber[1];
	    }
	}

	function deprecate(callback, name, alternative) {
	    return function () {
	        if (typeof console !== "undefined" &&
	            typeof console.warn === "function") {
	            console.warn(name + " is deprecated, use " + alternative +
	                         " instead.", new Error("").stack);
	        }
	        return callback.apply(callback, arguments);
	    };
	}

	// end of shims
	// beginning of real work

	/**
	 * Constructs a promise for an immediate reference, passes promises through, or
	 * coerces promises from different systems.
	 * @param value immediate reference or promise
	 */
	function Q(value) {
	    // If the object is already a Promise, return it directly.  This enables
	    // the resolve function to both be used to created references from objects,
	    // but to tolerably coerce non-promises to promises.
	    if (value instanceof Promise) {
	        return value;
	    }

	    // assimilate thenables
	    if (isPromiseAlike(value)) {
	        return coerce(value);
	    } else {
	        return fulfill(value);
	    }
	}
	Q.resolve = Q;

	/**
	 * Performs a task in a future turn of the event loop.
	 * @param {Function} task
	 */
	Q.nextTick = nextTick;

	/**
	 * Controls whether or not long stack traces will be on
	 */
	Q.longStackSupport = false;

	// enable long stacks if Q_DEBUG is set
	if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
	    Q.longStackSupport = true;
	}

	/**
	 * Constructs a {promise, resolve, reject} object.
	 *
	 * `resolve` is a callback to invoke with a more resolved value for the
	 * promise. To fulfill the promise, invoke `resolve` with any value that is
	 * not a thenable. To reject the promise, invoke `resolve` with a rejected
	 * thenable, or invoke `reject` with the reason directly. To resolve the
	 * promise to another thenable, thus putting it in the same state, invoke
	 * `resolve` with that other thenable.
	 */
	Q.defer = defer;
	function defer() {
	    // if "messages" is an "Array", that indicates that the promise has not yet
	    // been resolved.  If it is "undefined", it has been resolved.  Each
	    // element of the messages array is itself an array of complete arguments to
	    // forward to the resolved promise.  We coerce the resolution value to a
	    // promise using the `resolve` function because it handles both fully
	    // non-thenable values and other thenables gracefully.
	    var messages = [], progressListeners = [], resolvedPromise;

	    var deferred = object_create(defer.prototype);
	    var promise = object_create(Promise.prototype);

	    promise.promiseDispatch = function (resolve, op, operands) {
	        var args = array_slice(arguments);
	        if (messages) {
	            messages.push(args);
	            if (op === "when" && operands[1]) { // progress operand
	                progressListeners.push(operands[1]);
	            }
	        } else {
	            Q.nextTick(function () {
	                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
	            });
	        }
	    };

	    // XXX deprecated
	    promise.valueOf = function () {
	        if (messages) {
	            return promise;
	        }
	        var nearerValue = nearer(resolvedPromise);
	        if (isPromise(nearerValue)) {
	            resolvedPromise = nearerValue; // shorten chain
	        }
	        return nearerValue;
	    };

	    promise.inspect = function () {
	        if (!resolvedPromise) {
	            return { state: "pending" };
	        }
	        return resolvedPromise.inspect();
	    };

	    if (Q.longStackSupport && hasStacks) {
	        try {
	            throw new Error();
	        } catch (e) {
	            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
	            // accessor around; that causes memory leaks as per GH-111. Just
	            // reify the stack trace as a string ASAP.
	            //
	            // At the same time, cut off the first line; it's always just
	            // "[object Promise]\n", as per the `toString`.
	            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }
	    }

	    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
	    // consolidating them into `become`, since otherwise we'd create new
	    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

	    function become(newPromise) {
	        resolvedPromise = newPromise;
	        promise.source = newPromise;

	        array_reduce(messages, function (undefined, message) {
	            Q.nextTick(function () {
	                newPromise.promiseDispatch.apply(newPromise, message);
	            });
	        }, void 0);

	        messages = void 0;
	        progressListeners = void 0;
	    }

	    deferred.promise = promise;
	    deferred.resolve = function (value) {
	        if (resolvedPromise) {
	            return;
	        }

	        become(Q(value));
	    };

	    deferred.fulfill = function (value) {
	        if (resolvedPromise) {
	            return;
	        }

	        become(fulfill(value));
	    };
	    deferred.reject = function (reason) {
	        if (resolvedPromise) {
	            return;
	        }

	        become(reject(reason));
	    };
	    deferred.notify = function (progress) {
	        if (resolvedPromise) {
	            return;
	        }

	        array_reduce(progressListeners, function (undefined, progressListener) {
	            Q.nextTick(function () {
	                progressListener(progress);
	            });
	        }, void 0);
	    };

	    return deferred;
	}

	/**
	 * Creates a Node-style callback that will resolve or reject the deferred
	 * promise.
	 * @returns a nodeback
	 */
	defer.prototype.makeNodeResolver = function () {
	    var self = this;
	    return function (error, value) {
	        if (error) {
	            self.reject(error);
	        } else if (arguments.length > 2) {
	            self.resolve(array_slice(arguments, 1));
	        } else {
	            self.resolve(value);
	        }
	    };
	};

	/**
	 * @param resolver {Function} a function that returns nothing and accepts
	 * the resolve, reject, and notify functions for a deferred.
	 * @returns a promise that may be resolved with the given resolve and reject
	 * functions, or rejected by a thrown exception in resolver
	 */
	Q.Promise = promise; // ES6
	Q.promise = promise;
	function promise(resolver) {
	    if (typeof resolver !== "function") {
	        throw new TypeError("resolver must be a function.");
	    }
	    var deferred = defer();
	    try {
	        resolver(deferred.resolve, deferred.reject, deferred.notify);
	    } catch (reason) {
	        deferred.reject(reason);
	    }
	    return deferred.promise;
	}

	promise.race = race; // ES6
	promise.all = all; // ES6
	promise.reject = reject; // ES6
	promise.resolve = Q; // ES6

	// XXX experimental.  This method is a way to denote that a local value is
	// serializable and should be immediately dispatched to a remote upon request,
	// instead of passing a reference.
	Q.passByCopy = function (object) {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return object;
	};

	Promise.prototype.passByCopy = function () {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return this;
	};

	/**
	 * If two promises eventually fulfill to the same value, promises that value,
	 * but otherwise rejects.
	 * @param x {Any*}
	 * @param y {Any*}
	 * @returns {Any*} a promise for x and y if they are the same, but a rejection
	 * otherwise.
	 *
	 */
	Q.join = function (x, y) {
	    return Q(x).join(y);
	};

	Promise.prototype.join = function (that) {
	    return Q([this, that]).spread(function (x, y) {
	        if (x === y) {
	            // TODO: "===" should be Object.is or equiv
	            return x;
	        } else {
	            throw new Error("Can't join: not the same: " + x + " " + y);
	        }
	    });
	};

	/**
	 * Returns a promise for the first of an array of promises to become settled.
	 * @param answers {Array[Any*]} promises to race
	 * @returns {Any*} the first promise to be settled
	 */
	Q.race = race;
	function race(answerPs) {
	    return promise(function(resolve, reject) {
	        // Switch to this once we can assume at least ES5
	        // answerPs.forEach(function(answerP) {
	        //     Q(answerP).then(resolve, reject);
	        // });
	        // Use this in the meantime
	        for (var i = 0, len = answerPs.length; i < len; i++) {
	            Q(answerPs[i]).then(resolve, reject);
	        }
	    });
	}

	Promise.prototype.race = function () {
	    return this.then(Q.race);
	};

	/**
	 * Constructs a Promise with a promise descriptor object and optional fallback
	 * function.  The descriptor contains methods like when(rejected), get(name),
	 * set(name, value), post(name, args), and delete(name), which all
	 * return either a value, a promise for a value, or a rejection.  The fallback
	 * accepts the operation name, a resolver, and any further arguments that would
	 * have been forwarded to the appropriate method above had a method been
	 * provided with the proper name.  The API makes no guarantees about the nature
	 * of the returned object, apart from that it is usable whereever promises are
	 * bought and sold.
	 */
	Q.makePromise = Promise;
	function Promise(descriptor, fallback, inspect) {
	    if (fallback === void 0) {
	        fallback = function (op) {
	            return reject(new Error(
	                "Promise does not support operation: " + op
	            ));
	        };
	    }
	    if (inspect === void 0) {
	        inspect = function () {
	            return {state: "unknown"};
	        };
	    }

	    var promise = object_create(Promise.prototype);

	    promise.promiseDispatch = function (resolve, op, args) {
	        var result;
	        try {
	            if (descriptor[op]) {
	                result = descriptor[op].apply(promise, args);
	            } else {
	                result = fallback.call(promise, op, args);
	            }
	        } catch (exception) {
	            result = reject(exception);
	        }
	        if (resolve) {
	            resolve(result);
	        }
	    };

	    promise.inspect = inspect;

	    // XXX deprecated `valueOf` and `exception` support
	    if (inspect) {
	        var inspected = inspect();
	        if (inspected.state === "rejected") {
	            promise.exception = inspected.reason;
	        }

	        promise.valueOf = function () {
	            var inspected = inspect();
	            if (inspected.state === "pending" ||
	                inspected.state === "rejected") {
	                return promise;
	            }
	            return inspected.value;
	        };
	    }

	    return promise;
	}

	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};

	Promise.prototype.then = function (fulfilled, rejected, progressed) {
	    var self = this;
	    var deferred = defer();
	    var done = false;   // ensure the untrusted promise makes at most a
	                        // single call to one of the callbacks

	    function _fulfilled(value) {
	        try {
	            return typeof fulfilled === "function" ? fulfilled(value) : value;
	        } catch (exception) {
	            return reject(exception);
	        }
	    }

	    function _rejected(exception) {
	        if (typeof rejected === "function") {
	            makeStackTraceLong(exception, self);
	            try {
	                return rejected(exception);
	            } catch (newException) {
	                return reject(newException);
	            }
	        }
	        return reject(exception);
	    }

	    function _progressed(value) {
	        return typeof progressed === "function" ? progressed(value) : value;
	    }

	    Q.nextTick(function () {
	        self.promiseDispatch(function (value) {
	            if (done) {
	                return;
	            }
	            done = true;

	            deferred.resolve(_fulfilled(value));
	        }, "when", [function (exception) {
	            if (done) {
	                return;
	            }
	            done = true;

	            deferred.resolve(_rejected(exception));
	        }]);
	    });

	    // Progress propagator need to be attached in the current tick.
	    self.promiseDispatch(void 0, "when", [void 0, function (value) {
	        var newValue;
	        var threw = false;
	        try {
	            newValue = _progressed(value);
	        } catch (e) {
	            threw = true;
	            if (Q.onerror) {
	                Q.onerror(e);
	            } else {
	                throw e;
	            }
	        }

	        if (!threw) {
	            deferred.notify(newValue);
	        }
	    }]);

	    return deferred.promise;
	};

	Q.tap = function (promise, callback) {
	    return Q(promise).tap(callback);
	};

	/**
	 * Works almost like "finally", but not called for rejections.
	 * Original resolution value is passed through callback unaffected.
	 * Callback may return a promise that will be awaited for.
	 * @param {Function} callback
	 * @returns {Q.Promise}
	 * @example
	 * doSomething()
	 *   .then(...)
	 *   .tap(console.log)
	 *   .then(...);
	 */
	Promise.prototype.tap = function (callback) {
	    callback = Q(callback);

	    return this.then(function (value) {
	        return callback.fcall(value).thenResolve(value);
	    });
	};

	/**
	 * Registers an observer on a promise.
	 *
	 * Guarantees:
	 *
	 * 1. that fulfilled and rejected will be called only once.
	 * 2. that either the fulfilled callback or the rejected callback will be
	 *    called, but not both.
	 * 3. that fulfilled and rejected will not be called in this turn.
	 *
	 * @param value      promise or immediate reference to observe
	 * @param fulfilled  function to be called with the fulfilled value
	 * @param rejected   function to be called with the rejection exception
	 * @param progressed function to be called on any progress notifications
	 * @return promise for the return value from the invoked callback
	 */
	Q.when = when;
	function when(value, fulfilled, rejected, progressed) {
	    return Q(value).then(fulfilled, rejected, progressed);
	}

	Promise.prototype.thenResolve = function (value) {
	    return this.then(function () { return value; });
	};

	Q.thenResolve = function (promise, value) {
	    return Q(promise).thenResolve(value);
	};

	Promise.prototype.thenReject = function (reason) {
	    return this.then(function () { throw reason; });
	};

	Q.thenReject = function (promise, reason) {
	    return Q(promise).thenReject(reason);
	};

	/**
	 * If an object is not a promise, it is as "near" as possible.
	 * If a promise is rejected, it is as "near" as possible too.
	 * If it’s a fulfilled promise, the fulfillment value is nearer.
	 * If it’s a deferred promise and the deferred has been resolved, the
	 * resolution is "nearer".
	 * @param object
	 * @returns most resolved (nearest) form of the object
	 */

	// XXX should we re-do this?
	Q.nearer = nearer;
	function nearer(value) {
	    if (isPromise(value)) {
	        var inspected = value.inspect();
	        if (inspected.state === "fulfilled") {
	            return inspected.value;
	        }
	    }
	    return value;
	}

	/**
	 * @returns whether the given object is a promise.
	 * Otherwise it is a fulfilled value.
	 */
	Q.isPromise = isPromise;
	function isPromise(object) {
	    return object instanceof Promise;
	}

	Q.isPromiseAlike = isPromiseAlike;
	function isPromiseAlike(object) {
	    return isObject(object) && typeof object.then === "function";
	}

	/**
	 * @returns whether the given object is a pending promise, meaning not
	 * fulfilled or rejected.
	 */
	Q.isPending = isPending;
	function isPending(object) {
	    return isPromise(object) && object.inspect().state === "pending";
	}

	Promise.prototype.isPending = function () {
	    return this.inspect().state === "pending";
	};

	/**
	 * @returns whether the given object is a value or fulfilled
	 * promise.
	 */
	Q.isFulfilled = isFulfilled;
	function isFulfilled(object) {
	    return !isPromise(object) || object.inspect().state === "fulfilled";
	}

	Promise.prototype.isFulfilled = function () {
	    return this.inspect().state === "fulfilled";
	};

	/**
	 * @returns whether the given object is a rejected promise.
	 */
	Q.isRejected = isRejected;
	function isRejected(object) {
	    return isPromise(object) && object.inspect().state === "rejected";
	}

	Promise.prototype.isRejected = function () {
	    return this.inspect().state === "rejected";
	};

	//// BEGIN UNHANDLED REJECTION TRACKING

	// This promise library consumes exceptions thrown in handlers so they can be
	// handled by a subsequent promise.  The exceptions get added to this array when
	// they are created, and removed when they are handled.  Note that in ES6 or
	// shimmed environments, this would naturally be a `Set`.
	var unhandledReasons = [];
	var unhandledRejections = [];
	var trackUnhandledRejections = true;

	function resetUnhandledRejections() {
	    unhandledReasons.length = 0;
	    unhandledRejections.length = 0;

	    if (!trackUnhandledRejections) {
	        trackUnhandledRejections = true;
	    }
	}

	function trackRejection(promise, reason) {
	    if (!trackUnhandledRejections) {
	        return;
	    }

	    unhandledRejections.push(promise);
	    if (reason && typeof reason.stack !== "undefined") {
	        unhandledReasons.push(reason.stack);
	    } else {
	        unhandledReasons.push("(no stack) " + reason);
	    }
	}

	function untrackRejection(promise) {
	    if (!trackUnhandledRejections) {
	        return;
	    }

	    var at = array_indexOf(unhandledRejections, promise);
	    if (at !== -1) {
	        unhandledRejections.splice(at, 1);
	        unhandledReasons.splice(at, 1);
	    }
	}

	Q.resetUnhandledRejections = resetUnhandledRejections;

	Q.getUnhandledReasons = function () {
	    // Make a copy so that consumers can't interfere with our internal state.
	    return unhandledReasons.slice();
	};

	Q.stopUnhandledRejectionTracking = function () {
	    resetUnhandledRejections();
	    trackUnhandledRejections = false;
	};

	resetUnhandledRejections();

	//// END UNHANDLED REJECTION TRACKING

	/**
	 * Constructs a rejected promise.
	 * @param reason value describing the failure
	 */
	Q.reject = reject;
	function reject(reason) {
	    var rejection = Promise({
	        "when": function (rejected) {
	            // note that the error has been handled
	            if (rejected) {
	                untrackRejection(this);
	            }
	            return rejected ? rejected(reason) : this;
	        }
	    }, function fallback() {
	        return this;
	    }, function inspect() {
	        return { state: "rejected", reason: reason };
	    });

	    // Note that the reason has not been handled.
	    trackRejection(rejection, reason);

	    return rejection;
	}

	/**
	 * Constructs a fulfilled promise for an immediate reference.
	 * @param value immediate reference
	 */
	Q.fulfill = fulfill;
	function fulfill(value) {
	    return Promise({
	        "when": function () {
	            return value;
	        },
	        "get": function (name) {
	            return value[name];
	        },
	        "set": function (name, rhs) {
	            value[name] = rhs;
	        },
	        "delete": function (name) {
	            delete value[name];
	        },
	        "post": function (name, args) {
	            // Mark Miller proposes that post with no name should apply a
	            // promised function.
	            if (name === null || name === void 0) {
	                return value.apply(void 0, args);
	            } else {
	                return value[name].apply(value, args);
	            }
	        },
	        "apply": function (thisp, args) {
	            return value.apply(thisp, args);
	        },
	        "keys": function () {
	            return object_keys(value);
	        }
	    }, void 0, function inspect() {
	        return { state: "fulfilled", value: value };
	    });
	}

	/**
	 * Converts thenables to Q promises.
	 * @param promise thenable promise
	 * @returns a Q promise
	 */
	function coerce(promise) {
	    var deferred = defer();
	    Q.nextTick(function () {
	        try {
	            promise.then(deferred.resolve, deferred.reject, deferred.notify);
	        } catch (exception) {
	            deferred.reject(exception);
	        }
	    });
	    return deferred.promise;
	}

	/**
	 * Annotates an object such that it will never be
	 * transferred away from this process over any promise
	 * communication channel.
	 * @param object
	 * @returns promise a wrapping of that object that
	 * additionally responds to the "isDef" message
	 * without a rejection.
	 */
	Q.master = master;
	function master(object) {
	    return Promise({
	        "isDef": function () {}
	    }, function fallback(op, args) {
	        return dispatch(object, op, args);
	    }, function () {
	        return Q(object).inspect();
	    });
	}

	/**
	 * Spreads the values of a promised array of arguments into the
	 * fulfillment callback.
	 * @param fulfilled callback that receives variadic arguments from the
	 * promised array
	 * @param rejected callback that receives the exception if the promise
	 * is rejected.
	 * @returns a promise for the return value or thrown exception of
	 * either callback.
	 */
	Q.spread = spread;
	function spread(value, fulfilled, rejected) {
	    return Q(value).spread(fulfilled, rejected);
	}

	Promise.prototype.spread = function (fulfilled, rejected) {
	    return this.all().then(function (array) {
	        return fulfilled.apply(void 0, array);
	    }, rejected);
	};

	/**
	 * The async function is a decorator for generator functions, turning
	 * them into asynchronous generators.  Although generators are only part
	 * of the newest ECMAScript 6 drafts, this code does not cause syntax
	 * errors in older engines.  This code should continue to work and will
	 * in fact improve over time as the language improves.
	 *
	 * ES6 generators are currently part of V8 version 3.19 with the
	 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
	 * for longer, but under an older Python-inspired form.  This function
	 * works on both kinds of generators.
	 *
	 * Decorates a generator function such that:
	 *  - it may yield promises
	 *  - execution will continue when that promise is fulfilled
	 *  - the value of the yield expression will be the fulfilled value
	 *  - it returns a promise for the return value (when the generator
	 *    stops iterating)
	 *  - the decorated function returns a promise for the return value
	 *    of the generator or the first rejected promise among those
	 *    yielded.
	 *  - if an error is thrown in the generator, it propagates through
	 *    every following yield until it is caught, or until it escapes
	 *    the generator function altogether, and is translated into a
	 *    rejection for the promise returned by the decorated generator.
	 */
	Q.async = async;
	function async(makeGenerator) {
	    return function () {
	        // when verb is "send", arg is a value
	        // when verb is "throw", arg is an exception
	        function continuer(verb, arg) {
	            var result;

	            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
	            // engine that has a deployed base of browsers that support generators.
	            // However, SM's generators use the Python-inspired semantics of
	            // outdated ES6 drafts.  We would like to support ES6, but we'd also
	            // like to make it possible to use generators in deployed browsers, so
	            // we also support Python-style generators.  At some point we can remove
	            // this block.

	            if (typeof StopIteration === "undefined") {
	                // ES6 Generators
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    return reject(exception);
	                }
	                if (result.done) {
	                    return Q(result.value);
	                } else {
	                    return when(result.value, callback, errback);
	                }
	            } else {
	                // SpiderMonkey Generators
	                // FIXME: Remove this case when SM does ES6 generators.
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    if (isStopIteration(exception)) {
	                        return Q(exception.value);
	                    } else {
	                        return reject(exception);
	                    }
	                }
	                return when(result, callback, errback);
	            }
	        }
	        var generator = makeGenerator.apply(this, arguments);
	        var callback = continuer.bind(continuer, "next");
	        var errback = continuer.bind(continuer, "throw");
	        return callback();
	    };
	}

	/**
	 * The spawn function is a small wrapper around async that immediately
	 * calls the generator and also ends the promise chain, so that any
	 * unhandled errors are thrown instead of forwarded to the error
	 * handler. This is useful because it's extremely common to run
	 * generators at the top-level to work with libraries.
	 */
	Q.spawn = spawn;
	function spawn(makeGenerator) {
	    Q.done(Q.async(makeGenerator)());
	}

	// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
	/**
	 * Throws a ReturnValue exception to stop an asynchronous generator.
	 *
	 * This interface is a stop-gap measure to support generator return
	 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
	 * generators like Chromium 29, just use "return" in your generator
	 * functions.
	 *
	 * @param value the return value for the surrounding generator
	 * @throws ReturnValue exception with the value.
	 * @example
	 * // ES6 style
	 * Q.async(function* () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      return foo + bar;
	 * })
	 * // Older SpiderMonkey style
	 * Q.async(function () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      Q.return(foo + bar);
	 * })
	 */
	Q["return"] = _return;
	function _return(value) {
	    throw new QReturnValue(value);
	}

	/**
	 * The promised function decorator ensures that any promise arguments
	 * are settled and passed as values (`this` is also settled and passed
	 * as a value).  It will also ensure that the result of a function is
	 * always a promise.
	 *
	 * @example
	 * var add = Q.promised(function (a, b) {
	 *     return a + b;
	 * });
	 * add(Q(a), Q(B));
	 *
	 * @param {function} callback The function to decorate
	 * @returns {function} a function that has been decorated.
	 */
	Q.promised = promised;
	function promised(callback) {
	    return function () {
	        return spread([this, all(arguments)], function (self, args) {
	            return callback.apply(self, args);
	        });
	    };
	}

	/**
	 * sends a message to a value in a future turn
	 * @param object* the recipient
	 * @param op the name of the message operation, e.g., "when",
	 * @param args further arguments to be forwarded to the operation
	 * @returns result {Promise} a promise for the result of the operation
	 */
	Q.dispatch = dispatch;
	function dispatch(object, op, args) {
	    return Q(object).dispatch(op, args);
	}

	Promise.prototype.dispatch = function (op, args) {
	    var self = this;
	    var deferred = defer();
	    Q.nextTick(function () {
	        self.promiseDispatch(deferred.resolve, op, args);
	    });
	    return deferred.promise;
	};

	/**
	 * Gets the value of a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to get
	 * @return promise for the property value
	 */
	Q.get = function (object, key) {
	    return Q(object).dispatch("get", [key]);
	};

	Promise.prototype.get = function (key) {
	    return this.dispatch("get", [key]);
	};

	/**
	 * Sets the value of a property in a future turn.
	 * @param object    promise or immediate reference for object object
	 * @param name      name of property to set
	 * @param value     new value of property
	 * @return promise for the return value
	 */
	Q.set = function (object, key, value) {
	    return Q(object).dispatch("set", [key, value]);
	};

	Promise.prototype.set = function (key, value) {
	    return this.dispatch("set", [key, value]);
	};

	/**
	 * Deletes a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to delete
	 * @return promise for the return value
	 */
	Q.del = // XXX legacy
	Q["delete"] = function (object, key) {
	    return Q(object).dispatch("delete", [key]);
	};

	Promise.prototype.del = // XXX legacy
	Promise.prototype["delete"] = function (key) {
	    return this.dispatch("delete", [key]);
	};

	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param value     a value to post, typically an array of
	 *                  invocation arguments for promises that
	 *                  are ultimately backed with `resolve` values,
	 *                  as opposed to those backed with URLs
	 *                  wherein the posted value can be any
	 *                  JSON serializable object.
	 * @return promise for the return value
	 */
	// bound locally because it is used by other methods
	Q.mapply = // XXX As proposed by "Redsandro"
	Q.post = function (object, name, args) {
	    return Q(object).dispatch("post", [name, args]);
	};

	Promise.prototype.mapply = // XXX As proposed by "Redsandro"
	Promise.prototype.post = function (name, args) {
	    return this.dispatch("post", [name, args]);
	};

	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param ...args   array of invocation arguments
	 * @return promise for the return value
	 */
	Q.send = // XXX Mark Miller's proposed parlance
	Q.mcall = // XXX As proposed by "Redsandro"
	Q.invoke = function (object, name /*...args*/) {
	    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
	};

	Promise.prototype.send = // XXX Mark Miller's proposed parlance
	Promise.prototype.mcall = // XXX As proposed by "Redsandro"
	Promise.prototype.invoke = function (name /*...args*/) {
	    return this.dispatch("post", [name, array_slice(arguments, 1)]);
	};

	/**
	 * Applies the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param args      array of application arguments
	 */
	Q.fapply = function (object, args) {
	    return Q(object).dispatch("apply", [void 0, args]);
	};

	Promise.prototype.fapply = function (args) {
	    return this.dispatch("apply", [void 0, args]);
	};

	/**
	 * Calls the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q["try"] =
	Q.fcall = function (object /* ...args*/) {
	    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
	};

	Promise.prototype.fcall = function (/*...args*/) {
	    return this.dispatch("apply", [void 0, array_slice(arguments)]);
	};

	/**
	 * Binds the promised function, transforming return values into a fulfilled
	 * promise and thrown errors into a rejected one.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q.fbind = function (object /*...args*/) {
	    var promise = Q(object);
	    var args = array_slice(arguments, 1);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	Promise.prototype.fbind = function (/*...args*/) {
	    var promise = this;
	    var args = array_slice(arguments);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};

	/**
	 * Requests the names of the owned properties of a promised
	 * object in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @return promise for the keys of the eventually settled object
	 */
	Q.keys = function (object) {
	    return Q(object).dispatch("keys", []);
	};

	Promise.prototype.keys = function () {
	    return this.dispatch("keys", []);
	};

	/**
	 * Turns an array of promises into a promise for an array.  If any of
	 * the promises gets rejected, the whole array is rejected immediately.
	 * @param {Array*} an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns a promise for an array of the corresponding values
	 */
	// By Mark Miller
	// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
	Q.all = all;
	function all(promises) {
	    return when(promises, function (promises) {
	        var pendingCount = 0;
	        var deferred = defer();
	        array_reduce(promises, function (undefined, promise, index) {
	            var snapshot;
	            if (
	                isPromise(promise) &&
	                (snapshot = promise.inspect()).state === "fulfilled"
	            ) {
	                promises[index] = snapshot.value;
	            } else {
	                ++pendingCount;
	                when(
	                    promise,
	                    function (value) {
	                        promises[index] = value;
	                        if (--pendingCount === 0) {
	                            deferred.resolve(promises);
	                        }
	                    },
	                    deferred.reject,
	                    function (progress) {
	                        deferred.notify({ index: index, value: progress });
	                    }
	                );
	            }
	        }, void 0);
	        if (pendingCount === 0) {
	            deferred.resolve(promises);
	        }
	        return deferred.promise;
	    });
	}

	Promise.prototype.all = function () {
	    return all(this);
	};

	/**
	 * Returns the first resolved promise of an array. Prior rejected promises are
	 * ignored.  Rejects only if all promises are rejected.
	 * @param {Array*} an array containing values or promises for values
	 * @returns a promise fulfilled with the value of the first resolved promise,
	 * or a rejected promise if all promises are rejected.
	 */
	Q.any = any;

	function any(promises) {
	    if (promises.length === 0) {
	        return Q.resolve();
	    }

	    var deferred = Q.defer();
	    var pendingCount = 0;
	    array_reduce(promises, function(prev, current, index) {
	        var promise = promises[index];

	        pendingCount++;

	        when(promise, onFulfilled, onRejected, onProgress);
	        function onFulfilled(result) {
	            deferred.resolve(result);
	        }
	        function onRejected() {
	            pendingCount--;
	            if (pendingCount === 0) {
	                deferred.reject(new Error(
	                    "Can't get fulfillment value from any promise, all " +
	                    "promises were rejected."
	                ));
	            }
	        }
	        function onProgress(progress) {
	            deferred.notify({
	                index: index,
	                value: progress
	            });
	        }
	    }, undefined);

	    return deferred.promise;
	}

	Promise.prototype.any = function() {
	    return any(this);
	};

	/**
	 * Waits for all promises to be settled, either fulfilled or
	 * rejected.  This is distinct from `all` since that would stop
	 * waiting at the first rejection.  The promise returned by
	 * `allResolved` will never be rejected.
	 * @param promises a promise for an array (or an array) of promises
	 * (or values)
	 * @return a promise for an array of promises
	 */
	Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
	function allResolved(promises) {
	    return when(promises, function (promises) {
	        promises = array_map(promises, Q);
	        return when(all(array_map(promises, function (promise) {
	            return when(promise, noop, noop);
	        })), function () {
	            return promises;
	        });
	    });
	}

	Promise.prototype.allResolved = function () {
	    return allResolved(this);
	};

	/**
	 * @see Promise#allSettled
	 */
	Q.allSettled = allSettled;
	function allSettled(promises) {
	    return Q(promises).allSettled();
	}

	/**
	 * Turns an array of promises into a promise for an array of their states (as
	 * returned by `inspect`) when they have all settled.
	 * @param {Array[Any*]} values an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns {Array[State]} an array of states for the respective values.
	 */
	Promise.prototype.allSettled = function () {
	    return this.then(function (promises) {
	        return all(array_map(promises, function (promise) {
	            promise = Q(promise);
	            function regardless() {
	                return promise.inspect();
	            }
	            return promise.then(regardless, regardless);
	        }));
	    });
	};

	/**
	 * Captures the failure of a promise, giving an oportunity to recover
	 * with a callback.  If the given promise is fulfilled, the returned
	 * promise is fulfilled.
	 * @param {Any*} promise for something
	 * @param {Function} callback to fulfill the returned promise if the
	 * given promise is rejected
	 * @returns a promise for the return value of the callback
	 */
	Q.fail = // XXX legacy
	Q["catch"] = function (object, rejected) {
	    return Q(object).then(void 0, rejected);
	};

	Promise.prototype.fail = // XXX legacy
	Promise.prototype["catch"] = function (rejected) {
	    return this.then(void 0, rejected);
	};

	/**
	 * Attaches a listener that can respond to progress notifications from a
	 * promise's originating deferred. This listener receives the exact arguments
	 * passed to ``deferred.notify``.
	 * @param {Any*} promise for something
	 * @param {Function} callback to receive any progress notifications
	 * @returns the given promise, unchanged
	 */
	Q.progress = progress;
	function progress(object, progressed) {
	    return Q(object).then(void 0, void 0, progressed);
	}

	Promise.prototype.progress = function (progressed) {
	    return this.then(void 0, void 0, progressed);
	};

	/**
	 * Provides an opportunity to observe the settling of a promise,
	 * regardless of whether the promise is fulfilled or rejected.  Forwards
	 * the resolution to the returned promise when the callback is done.
	 * The callback can return a promise to defer completion.
	 * @param {Any*} promise
	 * @param {Function} callback to observe the resolution of the given
	 * promise, takes no arguments.
	 * @returns a promise for the resolution of the given promise when
	 * ``fin`` is done.
	 */
	Q.fin = // XXX legacy
	Q["finally"] = function (object, callback) {
	    return Q(object)["finally"](callback);
	};

	Promise.prototype.fin = // XXX legacy
	Promise.prototype["finally"] = function (callback) {
	    callback = Q(callback);
	    return this.then(function (value) {
	        return callback.fcall().then(function () {
	            return value;
	        });
	    }, function (reason) {
	        // TODO attempt to recycle the rejection with "this".
	        return callback.fcall().then(function () {
	            throw reason;
	        });
	    });
	};

	/**
	 * Terminates a chain of promises, forcing rejections to be
	 * thrown as exceptions.
	 * @param {Any*} promise at the end of a chain of promises
	 * @returns nothing
	 */
	Q.done = function (object, fulfilled, rejected, progress) {
	    return Q(object).done(fulfilled, rejected, progress);
	};

	Promise.prototype.done = function (fulfilled, rejected, progress) {
	    var onUnhandledError = function (error) {
	        // forward to a future turn so that ``when``
	        // does not catch it and turn it into a rejection.
	        Q.nextTick(function () {
	            makeStackTraceLong(error, promise);
	            if (Q.onerror) {
	                Q.onerror(error);
	            } else {
	                throw error;
	            }
	        });
	    };

	    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
	    var promise = fulfilled || rejected || progress ?
	        this.then(fulfilled, rejected, progress) :
	        this;

	    if (typeof process === "object" && process && process.domain) {
	        onUnhandledError = process.domain.bind(onUnhandledError);
	    }

	    promise.then(void 0, onUnhandledError);
	};

	/**
	 * Causes a promise to be rejected if it does not get fulfilled before
	 * some milliseconds time out.
	 * @param {Any*} promise
	 * @param {Number} milliseconds timeout
	 * @param {Any*} custom error message or Error object (optional)
	 * @returns a promise for the resolution of the given promise if it is
	 * fulfilled before the timeout, otherwise rejected.
	 */
	Q.timeout = function (object, ms, error) {
	    return Q(object).timeout(ms, error);
	};

	Promise.prototype.timeout = function (ms, error) {
	    var deferred = defer();
	    var timeoutId = setTimeout(function () {
	        if (!error || "string" === typeof error) {
	            error = new Error(error || "Timed out after " + ms + " ms");
	            error.code = "ETIMEDOUT";
	        }
	        deferred.reject(error);
	    }, ms);

	    this.then(function (value) {
	        clearTimeout(timeoutId);
	        deferred.resolve(value);
	    }, function (exception) {
	        clearTimeout(timeoutId);
	        deferred.reject(exception);
	    }, deferred.notify);

	    return deferred.promise;
	};

	/**
	 * Returns a promise for the given value (or promised value), some
	 * milliseconds after it resolved. Passes rejections immediately.
	 * @param {Any*} promise
	 * @param {Number} milliseconds
	 * @returns a promise for the resolution of the given promise after milliseconds
	 * time has elapsed since the resolution of the given promise.
	 * If the given promise rejects, that is passed immediately.
	 */
	Q.delay = function (object, timeout) {
	    if (timeout === void 0) {
	        timeout = object;
	        object = void 0;
	    }
	    return Q(object).delay(timeout);
	};

	Promise.prototype.delay = function (timeout) {
	    return this.then(function (value) {
	        var deferred = defer();
	        setTimeout(function () {
	            deferred.resolve(value);
	        }, timeout);
	        return deferred.promise;
	    });
	};

	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided as an array, and returns a promise.
	 *
	 *      Q.nfapply(FS.readFile, [__filename])
	 *      .then(function (content) {
	 *      })
	 *
	 */
	Q.nfapply = function (callback, args) {
	    return Q(callback).nfapply(args);
	};

	Promise.prototype.nfapply = function (args) {
	    var deferred = defer();
	    var nodeArgs = array_slice(args);
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};

	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided individually, and returns a promise.
	 * @example
	 * Q.nfcall(FS.readFile, __filename)
	 * .then(function (content) {
	 * })
	 *
	 */
	Q.nfcall = function (callback /*...args*/) {
	    var args = array_slice(arguments, 1);
	    return Q(callback).nfapply(args);
	};

	Promise.prototype.nfcall = function (/*...args*/) {
	    var nodeArgs = array_slice(arguments);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};

	/**
	 * Wraps a NodeJS continuation passing function and returns an equivalent
	 * version that returns a promise.
	 * @example
	 * Q.nfbind(FS.readFile, __filename)("utf-8")
	 * .then(console.log)
	 * .done()
	 */
	Q.nfbind =
	Q.denodeify = function (callback /*...args*/) {
	    var baseArgs = array_slice(arguments, 1);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        Q(callback).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};

	Promise.prototype.nfbind =
	Promise.prototype.denodeify = function (/*...args*/) {
	    var args = array_slice(arguments);
	    args.unshift(this);
	    return Q.denodeify.apply(void 0, args);
	};

	Q.nbind = function (callback, thisp /*...args*/) {
	    var baseArgs = array_slice(arguments, 2);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        function bound() {
	            return callback.apply(thisp, arguments);
	        }
	        Q(bound).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};

	Promise.prototype.nbind = function (/*thisp, ...args*/) {
	    var args = array_slice(arguments, 0);
	    args.unshift(this);
	    return Q.nbind.apply(void 0, args);
	};

	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback with a given array of arguments, plus a provided callback.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param {Array} args arguments to pass to the method; the callback
	 * will be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nmapply = // XXX As proposed by "Redsandro"
	Q.npost = function (object, name, args) {
	    return Q(object).npost(name, args);
	};

	Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
	Promise.prototype.npost = function (name, args) {
	    var nodeArgs = array_slice(args || []);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};

	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback, forwarding the given variadic arguments, plus a provided
	 * callback argument.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param ...args arguments to pass to the method; the callback will
	 * be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nsend = // XXX Based on Mark Miller's proposed "send"
	Q.nmcall = // XXX Based on "Redsandro's" proposal
	Q.ninvoke = function (object, name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 2);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};

	Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
	Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
	Promise.prototype.ninvoke = function (name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 1);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};

	/**
	 * If a function would like to support both Node continuation-passing-style and
	 * promise-returning-style, it can end its internal promise chain with
	 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
	 * elects to use a nodeback, the result will be sent there.  If they do not
	 * pass a nodeback, they will receive the result promise.
	 * @param object a result (or a promise for a result)
	 * @param {Function} nodeback a Node.js-style callback
	 * @returns either the promise or nothing
	 */
	Q.nodeify = nodeify;
	function nodeify(object, nodeback) {
	    return Q(object).nodeify(nodeback);
	}

	Promise.prototype.nodeify = function (nodeback) {
	    if (nodeback) {
	        this.then(function (value) {
	            Q.nextTick(function () {
	                nodeback(null, value);
	            });
	        }, function (error) {
	            Q.nextTick(function () {
	                nodeback(error);
	            });
	        });
	    } else {
	        return this;
	    }
	};

	// All code before this point will be filtered from stack traces.
	var qEndingLine = captureLine();

	return Q;

	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 2), __webpack_require__(/*! (webpack)/~/node-libs-browser/~/timers-browserify/main.js */ 535).setImmediate))

/***/ },
/* 535 */
/*!*****************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/timers-browserify/main.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(/*! process/browser.js */ 2).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/timers-browserify/main.js */ 535).setImmediate, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/timers-browserify/main.js */ 535).clearImmediate))

/***/ },
/* 536 */
/*!**********************************************!*\
  !*** ./~/socket.io-client/dist/socket.io.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */

	var io = ( false ? {} : module.exports);
	(function() {

	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, global) {

	  /**
	   * IO namespace.
	   *
	   * @namespace
	   */

	  var io = exports;

	  /**
	   * Socket.IO version
	   *
	   * @api public
	   */

	  io.version = '0.9.17';

	  /**
	   * Protocol implemented.
	   *
	   * @api public
	   */

	  io.protocol = 1;

	  /**
	   * Available transports, these will be populated with the available transports
	   *
	   * @api public
	   */

	  io.transports = [];

	  /**
	   * Keep track of jsonp callbacks.
	   *
	   * @api private
	   */

	  io.j = [];

	  /**
	   * Keep track of our io.Sockets
	   *
	   * @api private
	   */
	  io.sockets = {};


	  /**
	   * Manages connections to hosts.
	   *
	   * @param {String} uri
	   * @Param {Boolean} force creation of new socket (defaults to false)
	   * @api public
	   */

	  io.connect = function (host, details) {
	    var uri = io.util.parseUri(host)
	      , uuri
	      , socket;

	    if (global && global.location) {
	      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);
	      uri.host = uri.host || (global.document
	        ? global.document.domain : global.location.hostname);
	      uri.port = uri.port || global.location.port;
	    }

	    uuri = io.util.uniqueUri(uri);

	    var options = {
	        host: uri.host
	      , secure: 'https' == uri.protocol
	      , port: uri.port || ('https' == uri.protocol ? 443 : 80)
	      , query: uri.query || ''
	    };

	    io.util.merge(options, details);

	    if (options['force new connection'] || !io.sockets[uuri]) {
	      socket = new io.Socket(options);
	    }

	    if (!options['force new connection'] && socket) {
	      io.sockets[uuri] = socket;
	    }

	    socket = socket || io.sockets[uuri];

	    // if path is different from '' or /
	    return socket.of(uri.path.length > 1 ? uri.path : '');
	  };

	})( true ? module.exports : (this.io = {}), this);
	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, global) {

	  /**
	   * Utilities namespace.
	   *
	   * @namespace
	   */

	  var util = exports.util = {};

	  /**
	   * Parses an URI
	   *
	   * @author Steven Levithan <stevenlevithan.com> (MIT license)
	   * @api public
	   */

	  var re = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',
	               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',
	               'anchor'];

	  util.parseUri = function (str) {
	    var m = re.exec(str || '')
	      , uri = {}
	      , i = 14;

	    while (i--) {
	      uri[parts[i]] = m[i] || '';
	    }

	    return uri;
	  };

	  /**
	   * Produces a unique url that identifies a Socket.IO connection.
	   *
	   * @param {Object} uri
	   * @api public
	   */

	  util.uniqueUri = function (uri) {
	    var protocol = uri.protocol
	      , host = uri.host
	      , port = uri.port;

	    if ('document' in global) {
	      host = host || document.domain;
	      port = port || (protocol == 'https'
	        && document.location.protocol !== 'https:' ? 443 : document.location.port);
	    } else {
	      host = host || 'localhost';

	      if (!port && protocol == 'https') {
	        port = 443;
	      }
	    }

	    return (protocol || 'http') + '://' + host + ':' + (port || 80);
	  };

	  /**
	   * Mergest 2 query strings in to once unique query string
	   *
	   * @param {String} base
	   * @param {String} addition
	   * @api public
	   */

	  util.query = function (base, addition) {
	    var query = util.chunkQuery(base || '')
	      , components = [];

	    util.merge(query, util.chunkQuery(addition || ''));
	    for (var part in query) {
	      if (query.hasOwnProperty(part)) {
	        components.push(part + '=' + query[part]);
	      }
	    }

	    return components.length ? '?' + components.join('&') : '';
	  };

	  /**
	   * Transforms a querystring in to an object
	   *
	   * @param {String} qs
	   * @api public
	   */

	  util.chunkQuery = function (qs) {
	    var query = {}
	      , params = qs.split('&')
	      , i = 0
	      , l = params.length
	      , kv;

	    for (; i < l; ++i) {
	      kv = params[i].split('=');
	      if (kv[0]) {
	        query[kv[0]] = kv[1];
	      }
	    }

	    return query;
	  };

	  /**
	   * Executes the given function when the page is loaded.
	   *
	   *     io.util.load(function () { console.log('page loaded'); });
	   *
	   * @param {Function} fn
	   * @api public
	   */

	  var pageLoaded = false;

	  util.load = function (fn) {
	    if ('document' in global && document.readyState === 'complete' || pageLoaded) {
	      return fn();
	    }

	    util.on(global, 'load', fn, false);
	  };

	  /**
	   * Adds an event.
	   *
	   * @api private
	   */

	  util.on = function (element, event, fn, capture) {
	    if (element.attachEvent) {
	      element.attachEvent('on' + event, fn);
	    } else if (element.addEventListener) {
	      element.addEventListener(event, fn, capture);
	    }
	  };

	  /**
	   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.
	   *
	   * @param {Boolean} [xdomain] Create a request that can be used cross domain.
	   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.
	   * @api private
	   */

	  util.request = function (xdomain) {

	    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {
	      return new XDomainRequest();
	    }

	    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {
	      return new XMLHttpRequest();
	    }

	    if (!xdomain) {
	      try {
	        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');
	      } catch(e) { }
	    }

	    return null;
	  };

	  /**
	   * XHR based transport constructor.
	   *
	   * @constructor
	   * @api public
	   */

	  /**
	   * Change the internal pageLoaded value.
	   */

	  if ('undefined' != typeof window) {
	    util.load(function () {
	      pageLoaded = true;
	    });
	  }

	  /**
	   * Defers a function to ensure a spinner is not displayed by the browser
	   *
	   * @param {Function} fn
	   * @api public
	   */

	  util.defer = function (fn) {
	    if (!util.ua.webkit || 'undefined' != typeof importScripts) {
	      return fn();
	    }

	    util.load(function () {
	      setTimeout(fn, 100);
	    });
	  };

	  /**
	   * Merges two objects.
	   *
	   * @api public
	   */

	  util.merge = function merge (target, additional, deep, lastseen) {
	    var seen = lastseen || []
	      , depth = typeof deep == 'undefined' ? 2 : deep
	      , prop;

	    for (prop in additional) {
	      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {
	        if (typeof target[prop] !== 'object' || !depth) {
	          target[prop] = additional[prop];
	          seen.push(additional[prop]);
	        } else {
	          util.merge(target[prop], additional[prop], depth - 1, seen);
	        }
	      }
	    }

	    return target;
	  };

	  /**
	   * Merges prototypes from objects
	   *
	   * @api public
	   */

	  util.mixin = function (ctor, ctor2) {
	    util.merge(ctor.prototype, ctor2.prototype);
	  };

	  /**
	   * Shortcut for prototypical and static inheritance.
	   *
	   * @api private
	   */

	  util.inherit = function (ctor, ctor2) {
	    function f() {};
	    f.prototype = ctor2.prototype;
	    ctor.prototype = new f;
	  };

	  /**
	   * Checks if the given object is an Array.
	   *
	   *     io.util.isArray([]); // true
	   *     io.util.isArray({}); // false
	   *
	   * @param Object obj
	   * @api public
	   */

	  util.isArray = Array.isArray || function (obj) {
	    return Object.prototype.toString.call(obj) === '[object Array]';
	  };

	  /**
	   * Intersects values of two arrays into a third
	   *
	   * @api public
	   */

	  util.intersect = function (arr, arr2) {
	    var ret = []
	      , longest = arr.length > arr2.length ? arr : arr2
	      , shortest = arr.length > arr2.length ? arr2 : arr;

	    for (var i = 0, l = shortest.length; i < l; i++) {
	      if (~util.indexOf(longest, shortest[i]))
	        ret.push(shortest[i]);
	    }

	    return ret;
	  };

	  /**
	   * Array indexOf compatibility.
	   *
	   * @see bit.ly/a5Dxa2
	   * @api public
	   */

	  util.indexOf = function (arr, o, i) {

	    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;
	         i < j && arr[i] !== o; i++) {}

	    return j <= i ? -1 : i;
	  };

	  /**
	   * Converts enumerables to array.
	   *
	   * @api public
	   */

	  util.toArray = function (enu) {
	    var arr = [];

	    for (var i = 0, l = enu.length; i < l; i++)
	      arr.push(enu[i]);

	    return arr;
	  };

	  /**
	   * UA / engines detection namespace.
	   *
	   * @namespace
	   */

	  util.ua = {};

	  /**
	   * Whether the UA supports CORS for XHR.
	   *
	   * @api public
	   */

	  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {
	    try {
	      var a = new XMLHttpRequest();
	    } catch (e) {
	      return false;
	    }

	    return a.withCredentials != undefined;
	  })();

	  /**
	   * Detect webkit.
	   *
	   * @api public
	   */

	  util.ua.webkit = 'undefined' != typeof navigator
	    && /webkit/i.test(navigator.userAgent);

	   /**
	   * Detect iPad/iPhone/iPod.
	   *
	   * @api public
	   */

	  util.ua.iDevice = 'undefined' != typeof navigator
	      && /iPad|iPhone|iPod/i.test(navigator.userAgent);

	})('undefined' != typeof io ? io : module.exports, this);
	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io) {

	  /**
	   * Expose constructor.
	   */

	  exports.EventEmitter = EventEmitter;

	  /**
	   * Event emitter constructor.
	   *
	   * @api public.
	   */

	  function EventEmitter () {};

	  /**
	   * Adds a listener
	   *
	   * @api public
	   */

	  EventEmitter.prototype.on = function (name, fn) {
	    if (!this.$events) {
	      this.$events = {};
	    }

	    if (!this.$events[name]) {
	      this.$events[name] = fn;
	    } else if (io.util.isArray(this.$events[name])) {
	      this.$events[name].push(fn);
	    } else {
	      this.$events[name] = [this.$events[name], fn];
	    }

	    return this;
	  };

	  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	  /**
	   * Adds a volatile listener.
	   *
	   * @api public
	   */

	  EventEmitter.prototype.once = function (name, fn) {
	    var self = this;

	    function on () {
	      self.removeListener(name, on);
	      fn.apply(this, arguments);
	    };

	    on.listener = fn;
	    this.on(name, on);

	    return this;
	  };

	  /**
	   * Removes a listener.
	   *
	   * @api public
	   */

	  EventEmitter.prototype.removeListener = function (name, fn) {
	    if (this.$events && this.$events[name]) {
	      var list = this.$events[name];

	      if (io.util.isArray(list)) {
	        var pos = -1;

	        for (var i = 0, l = list.length; i < l; i++) {
	          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {
	            pos = i;
	            break;
	          }
	        }

	        if (pos < 0) {
	          return this;
	        }

	        list.splice(pos, 1);

	        if (!list.length) {
	          delete this.$events[name];
	        }
	      } else if (list === fn || (list.listener && list.listener === fn)) {
	        delete this.$events[name];
	      }
	    }

	    return this;
	  };

	  /**
	   * Removes all listeners for an event.
	   *
	   * @api public
	   */

	  EventEmitter.prototype.removeAllListeners = function (name) {
	    if (name === undefined) {
	      this.$events = {};
	      return this;
	    }

	    if (this.$events && this.$events[name]) {
	      this.$events[name] = null;
	    }

	    return this;
	  };

	  /**
	   * Gets all listeners for a certain event.
	   *
	   * @api publci
	   */

	  EventEmitter.prototype.listeners = function (name) {
	    if (!this.$events) {
	      this.$events = {};
	    }

	    if (!this.$events[name]) {
	      this.$events[name] = [];
	    }

	    if (!io.util.isArray(this.$events[name])) {
	      this.$events[name] = [this.$events[name]];
	    }

	    return this.$events[name];
	  };

	  /**
	   * Emits an event.
	   *
	   * @api public
	   */

	  EventEmitter.prototype.emit = function (name) {
	    if (!this.$events) {
	      return false;
	    }

	    var handler = this.$events[name];

	    if (!handler) {
	      return false;
	    }

	    var args = Array.prototype.slice.call(arguments, 1);

	    if ('function' == typeof handler) {
	      handler.apply(this, args);
	    } else if (io.util.isArray(handler)) {
	      var listeners = handler.slice();

	      for (var i = 0, l = listeners.length; i < l; i++) {
	        listeners[i].apply(this, args);
	      }
	    } else {
	      return false;
	    }

	    return true;
	  };

	})(
	    'undefined' != typeof io ? io : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	);

	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	/**
	 * Based on JSON2 (http://www.JSON.org/js.html).
	 */

	(function (exports, nativeJSON) {
	  "use strict";

	  // use native JSON if it's available
	  if (nativeJSON && nativeJSON.parse){
	    return exports.JSON = {
	      parse: nativeJSON.parse
	    , stringify: nativeJSON.stringify
	    };
	  }

	  var JSON = exports.JSON = {};

	  function f(n) {
	      // Format integers to have at least two digits.
	      return n < 10 ? '0' + n : n;
	  }

	  function date(d, key) {
	    return isFinite(d.valueOf()) ?
	        d.getUTCFullYear()     + '-' +
	        f(d.getUTCMonth() + 1) + '-' +
	        f(d.getUTCDate())      + 'T' +
	        f(d.getUTCHours())     + ':' +
	        f(d.getUTCMinutes())   + ':' +
	        f(d.getUTCSeconds())   + 'Z' : null;
	  };

	  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	      escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	      gap,
	      indent,
	      meta = {    // table of character substitutions
	          '\b': '\\b',
	          '\t': '\\t',
	          '\n': '\\n',
	          '\f': '\\f',
	          '\r': '\\r',
	          '"' : '\\"',
	          '\\': '\\\\'
	      },
	      rep;


	  function quote(string) {

	// If the string contains no control characters, no quote characters, and no
	// backslash characters, then we can safely slap some quotes around it.
	// Otherwise we must also replace the offending characters with safe escape
	// sequences.

	      escapable.lastIndex = 0;
	      return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	          var c = meta[a];
	          return typeof c === 'string' ? c :
	              '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	      }) + '"' : '"' + string + '"';
	  }


	  function str(key, holder) {

	// Produce a string from holder[key].

	      var i,          // The loop counter.
	          k,          // The member key.
	          v,          // The member value.
	          length,
	          mind = gap,
	          partial,
	          value = holder[key];

	// If the value has a toJSON method, call it to obtain a replacement value.

	      if (value instanceof Date) {
	          value = date(key);
	      }

	// If we were called with a replacer function, then call the replacer to
	// obtain a replacement value.

	      if (typeof rep === 'function') {
	          value = rep.call(holder, key, value);
	      }

	// What happens next depends on the value's type.

	      switch (typeof value) {
	      case 'string':
	          return quote(value);

	      case 'number':

	// JSON numbers must be finite. Encode non-finite numbers as null.

	          return isFinite(value) ? String(value) : 'null';

	      case 'boolean':
	      case 'null':

	// If the value is a boolean or null, convert it to a string. Note:
	// typeof null does not produce 'null'. The case is included here in
	// the remote chance that this gets fixed someday.

	          return String(value);

	// If the type is 'object', we might be dealing with an object or an array or
	// null.

	      case 'object':

	// Due to a specification blunder in ECMAScript, typeof null is 'object',
	// so watch out for that case.

	          if (!value) {
	              return 'null';
	          }

	// Make an array to hold the partial results of stringifying this object value.

	          gap += indent;
	          partial = [];

	// Is the value an array?

	          if (Object.prototype.toString.apply(value) === '[object Array]') {

	// The value is an array. Stringify every element. Use null as a placeholder
	// for non-JSON values.

	              length = value.length;
	              for (i = 0; i < length; i += 1) {
	                  partial[i] = str(i, value) || 'null';
	              }

	// Join all of the elements together, separated with commas, and wrap them in
	// brackets.

	              v = partial.length === 0 ? '[]' : gap ?
	                  '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
	                  '[' + partial.join(',') + ']';
	              gap = mind;
	              return v;
	          }

	// If the replacer is an array, use it to select the members to be stringified.

	          if (rep && typeof rep === 'object') {
	              length = rep.length;
	              for (i = 0; i < length; i += 1) {
	                  if (typeof rep[i] === 'string') {
	                      k = rep[i];
	                      v = str(k, value);
	                      if (v) {
	                          partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                      }
	                  }
	              }
	          } else {

	// Otherwise, iterate through all of the keys in the object.

	              for (k in value) {
	                  if (Object.prototype.hasOwnProperty.call(value, k)) {
	                      v = str(k, value);
	                      if (v) {
	                          partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                      }
	                  }
	              }
	          }

	// Join all of the member texts together, separated with commas,
	// and wrap them in braces.

	          v = partial.length === 0 ? '{}' : gap ?
	              '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
	              '{' + partial.join(',') + '}';
	          gap = mind;
	          return v;
	      }
	  }

	// If the JSON object does not yet have a stringify method, give it one.

	  JSON.stringify = function (value, replacer, space) {

	// The stringify method takes a value and an optional replacer, and an optional
	// space parameter, and returns a JSON text. The replacer can be a function
	// that can replace values, or an array of strings that will select the keys.
	// A default replacer method can be provided. Use of the space parameter can
	// produce text that is more easily readable.

	      var i;
	      gap = '';
	      indent = '';

	// If the space parameter is a number, make an indent string containing that
	// many spaces.

	      if (typeof space === 'number') {
	          for (i = 0; i < space; i += 1) {
	              indent += ' ';
	          }

	// If the space parameter is a string, it will be used as the indent string.

	      } else if (typeof space === 'string') {
	          indent = space;
	      }

	// If there is a replacer, it must be a function or an array.
	// Otherwise, throw an error.

	      rep = replacer;
	      if (replacer && typeof replacer !== 'function' &&
	              (typeof replacer !== 'object' ||
	              typeof replacer.length !== 'number')) {
	          throw new Error('JSON.stringify');
	      }

	// Make a fake root object containing our value under the key of ''.
	// Return the result of stringifying the value.

	      return str('', {'': value});
	  };

	// If the JSON object does not yet have a parse method, give it one.

	  JSON.parse = function (text, reviver) {
	  // The parse method takes a text and an optional reviver function, and returns
	  // a JavaScript value if the text is a valid JSON text.

	      var j;

	      function walk(holder, key) {

	  // The walk method is used to recursively walk the resulting structure so
	  // that modifications can be made.

	          var k, v, value = holder[key];
	          if (value && typeof value === 'object') {
	              for (k in value) {
	                  if (Object.prototype.hasOwnProperty.call(value, k)) {
	                      v = walk(value, k);
	                      if (v !== undefined) {
	                          value[k] = v;
	                      } else {
	                          delete value[k];
	                      }
	                  }
	              }
	          }
	          return reviver.call(holder, key, value);
	      }


	  // Parsing happens in four stages. In the first stage, we replace certain
	  // Unicode characters with escape sequences. JavaScript handles many characters
	  // incorrectly, either silently deleting them, or treating them as line endings.

	      text = String(text);
	      cx.lastIndex = 0;
	      if (cx.test(text)) {
	          text = text.replace(cx, function (a) {
	              return '\\u' +
	                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	          });
	      }

	  // In the second stage, we run the text against regular expressions that look
	  // for non-JSON patterns. We are especially concerned with '()' and 'new'
	  // because they can cause invocation, and '=' because it can cause mutation.
	  // But just to be safe, we want to reject all unexpected forms.

	  // We split the second stage into 4 regexp operations in order to work around
	  // crippling inefficiencies in IE's and Safari's regexp engines. First we
	  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
	  // replace all simple value tokens with ']' characters. Third, we delete all
	  // open brackets that follow a colon or comma or that begin the text. Finally,
	  // we look to see that the remaining characters are only whitespace or ']' or
	  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

	      if (/^[\],:{}\s]*$/
	              .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
	                  .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
	                  .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

	  // In the third stage we use the eval function to compile the text into a
	  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
	  // in JavaScript: it can begin a block or an object literal. We wrap the text
	  // in parens to eliminate the ambiguity.

	          j = eval('(' + text + ')');

	  // In the optional fourth stage, we recursively walk the new structure, passing
	  // each name/value pair to a reviver function for possible transformation.

	          return typeof reviver === 'function' ?
	              walk({'': j}, '') : j;
	      }

	  // If the text is not JSON parseable, then a SyntaxError is thrown.

	      throw new SyntaxError('JSON.parse');
	  };

	})(
	    'undefined' != typeof io ? io : module.exports
	  , typeof JSON !== 'undefined' ? JSON : undefined
	);

	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io) {

	  /**
	   * Parser namespace.
	   *
	   * @namespace
	   */

	  var parser = exports.parser = {};

	  /**
	   * Packet types.
	   */

	  var packets = parser.packets = [
	      'disconnect'
	    , 'connect'
	    , 'heartbeat'
	    , 'message'
	    , 'json'
	    , 'event'
	    , 'ack'
	    , 'error'
	    , 'noop'
	  ];

	  /**
	   * Errors reasons.
	   */

	  var reasons = parser.reasons = [
	      'transport not supported'
	    , 'client not handshaken'
	    , 'unauthorized'
	  ];

	  /**
	   * Errors advice.
	   */

	  var advice = parser.advice = [
	      'reconnect'
	  ];

	  /**
	   * Shortcuts.
	   */

	  var JSON = io.JSON
	    , indexOf = io.util.indexOf;

	  /**
	   * Encodes a packet.
	   *
	   * @api private
	   */

	  parser.encodePacket = function (packet) {
	    var type = indexOf(packets, packet.type)
	      , id = packet.id || ''
	      , endpoint = packet.endpoint || ''
	      , ack = packet.ack
	      , data = null;

	    switch (packet.type) {
	      case 'error':
	        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''
	          , adv = packet.advice ? indexOf(advice, packet.advice) : '';

	        if (reason !== '' || adv !== '')
	          data = reason + (adv !== '' ? ('+' + adv) : '');

	        break;

	      case 'message':
	        if (packet.data !== '')
	          data = packet.data;
	        break;

	      case 'event':
	        var ev = { name: packet.name };

	        if (packet.args && packet.args.length) {
	          ev.args = packet.args;
	        }

	        data = JSON.stringify(ev);
	        break;

	      case 'json':
	        data = JSON.stringify(packet.data);
	        break;

	      case 'connect':
	        if (packet.qs)
	          data = packet.qs;
	        break;

	      case 'ack':
	        data = packet.ackId
	          + (packet.args && packet.args.length
	              ? '+' + JSON.stringify(packet.args) : '');
	        break;
	    }

	    // construct packet with required fragments
	    var encoded = [
	        type
	      , id + (ack == 'data' ? '+' : '')
	      , endpoint
	    ];

	    // data fragment is optional
	    if (data !== null && data !== undefined)
	      encoded.push(data);

	    return encoded.join(':');
	  };

	  /**
	   * Encodes multiple messages (payload).
	   *
	   * @param {Array} messages
	   * @api private
	   */

	  parser.encodePayload = function (packets) {
	    var decoded = '';

	    if (packets.length == 1)
	      return packets[0];

	    for (var i = 0, l = packets.length; i < l; i++) {
	      var packet = packets[i];
	      decoded += '\ufffd' + packet.length + '\ufffd' + packets[i];
	    }

	    return decoded;
	  };

	  /**
	   * Decodes a packet
	   *
	   * @api private
	   */

	  var regexp = /([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/;

	  parser.decodePacket = function (data) {
	    var pieces = data.match(regexp);

	    if (!pieces) return {};

	    var id = pieces[2] || ''
	      , data = pieces[5] || ''
	      , packet = {
	            type: packets[pieces[1]]
	          , endpoint: pieces[4] || ''
	        };

	    // whether we need to acknowledge the packet
	    if (id) {
	      packet.id = id;
	      if (pieces[3])
	        packet.ack = 'data';
	      else
	        packet.ack = true;
	    }

	    // handle different packet types
	    switch (packet.type) {
	      case 'error':
	        var pieces = data.split('+');
	        packet.reason = reasons[pieces[0]] || '';
	        packet.advice = advice[pieces[1]] || '';
	        break;

	      case 'message':
	        packet.data = data || '';
	        break;

	      case 'event':
	        try {
	          var opts = JSON.parse(data);
	          packet.name = opts.name;
	          packet.args = opts.args;
	        } catch (e) { }

	        packet.args = packet.args || [];
	        break;

	      case 'json':
	        try {
	          packet.data = JSON.parse(data);
	        } catch (e) { }
	        break;

	      case 'connect':
	        packet.qs = data || '';
	        break;

	      case 'ack':
	        var pieces = data.match(/^([0-9]+)(\+)?(.*)/);
	        if (pieces) {
	          packet.ackId = pieces[1];
	          packet.args = [];

	          if (pieces[3]) {
	            try {
	              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];
	            } catch (e) { }
	          }
	        }
	        break;

	      case 'disconnect':
	      case 'heartbeat':
	        break;
	    };

	    return packet;
	  };

	  /**
	   * Decodes data payload. Detects multiple messages
	   *
	   * @return {Array} messages
	   * @api public
	   */

	  parser.decodePayload = function (data) {
	    // IE doesn't like data[i] for unicode chars, charAt works fine
	    if (data.charAt(0) == '\ufffd') {
	      var ret = [];

	      for (var i = 1, length = ''; i < data.length; i++) {
	        if (data.charAt(i) == '\ufffd') {
	          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));
	          i += Number(length) + 1;
	          length = '';
	        } else {
	          length += data.charAt(i);
	        }
	      }

	      return ret;
	    } else {
	      return [parser.decodePacket(data)];
	    }
	  };

	})(
	    'undefined' != typeof io ? io : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	);
	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io) {

	  /**
	   * Expose constructor.
	   */

	  exports.Transport = Transport;

	  /**
	   * This is the transport template for all supported transport methods.
	   *
	   * @constructor
	   * @api public
	   */

	  function Transport (socket, sessid) {
	    this.socket = socket;
	    this.sessid = sessid;
	  };

	  /**
	   * Apply EventEmitter mixin.
	   */

	  io.util.mixin(Transport, io.EventEmitter);


	  /**
	   * Indicates whether heartbeats is enabled for this transport
	   *
	   * @api private
	   */

	  Transport.prototype.heartbeats = function () {
	    return true;
	  };

	  /**
	   * Handles the response from the server. When a new response is received
	   * it will automatically update the timeout, decode the message and
	   * forwards the response to the onMessage function for further processing.
	   *
	   * @param {String} data Response from the server.
	   * @api private
	   */

	  Transport.prototype.onData = function (data) {
	    this.clearCloseTimeout();

	    // If the connection in currently open (or in a reopening state) reset the close
	    // timeout since we have just received data. This check is necessary so
	    // that we don't reset the timeout on an explicitly disconnected connection.
	    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {
	      this.setCloseTimeout();
	    }

	    if (data !== '') {
	      // todo: we should only do decodePayload for xhr transports
	      var msgs = io.parser.decodePayload(data);

	      if (msgs && msgs.length) {
	        for (var i = 0, l = msgs.length; i < l; i++) {
	          this.onPacket(msgs[i]);
	        }
	      }
	    }

	    return this;
	  };

	  /**
	   * Handles packets.
	   *
	   * @api private
	   */

	  Transport.prototype.onPacket = function (packet) {
	    this.socket.setHeartbeatTimeout();

	    if (packet.type == 'heartbeat') {
	      return this.onHeartbeat();
	    }

	    if (packet.type == 'connect' && packet.endpoint == '') {
	      this.onConnect();
	    }

	    if (packet.type == 'error' && packet.advice == 'reconnect') {
	      this.isOpen = false;
	    }

	    this.socket.onPacket(packet);

	    return this;
	  };

	  /**
	   * Sets close timeout
	   *
	   * @api private
	   */

	  Transport.prototype.setCloseTimeout = function () {
	    if (!this.closeTimeout) {
	      var self = this;

	      this.closeTimeout = setTimeout(function () {
	        self.onDisconnect();
	      }, this.socket.closeTimeout);
	    }
	  };

	  /**
	   * Called when transport disconnects.
	   *
	   * @api private
	   */

	  Transport.prototype.onDisconnect = function () {
	    if (this.isOpen) this.close();
	    this.clearTimeouts();
	    this.socket.onDisconnect();
	    return this;
	  };

	  /**
	   * Called when transport connects
	   *
	   * @api private
	   */

	  Transport.prototype.onConnect = function () {
	    this.socket.onConnect();
	    return this;
	  };

	  /**
	   * Clears close timeout
	   *
	   * @api private
	   */

	  Transport.prototype.clearCloseTimeout = function () {
	    if (this.closeTimeout) {
	      clearTimeout(this.closeTimeout);
	      this.closeTimeout = null;
	    }
	  };

	  /**
	   * Clear timeouts
	   *
	   * @api private
	   */

	  Transport.prototype.clearTimeouts = function () {
	    this.clearCloseTimeout();

	    if (this.reopenTimeout) {
	      clearTimeout(this.reopenTimeout);
	    }
	  };

	  /**
	   * Sends a packet
	   *
	   * @param {Object} packet object.
	   * @api private
	   */

	  Transport.prototype.packet = function (packet) {
	    this.send(io.parser.encodePacket(packet));
	  };

	  /**
	   * Send the received heartbeat message back to server. So the server
	   * knows we are still connected.
	   *
	   * @param {String} heartbeat Heartbeat response from the server.
	   * @api private
	   */

	  Transport.prototype.onHeartbeat = function (heartbeat) {
	    this.packet({ type: 'heartbeat' });
	  };

	  /**
	   * Called when the transport opens.
	   *
	   * @api private
	   */

	  Transport.prototype.onOpen = function () {
	    this.isOpen = true;
	    this.clearCloseTimeout();
	    this.socket.onOpen();
	  };

	  /**
	   * Notifies the base when the connection with the Socket.IO server
	   * has been disconnected.
	   *
	   * @api private
	   */

	  Transport.prototype.onClose = function () {
	    var self = this;

	    /* FIXME: reopen delay causing a infinit loop
	    this.reopenTimeout = setTimeout(function () {
	      self.open();
	    }, this.socket.options['reopen delay']);*/

	    this.isOpen = false;
	    this.socket.onClose();
	    this.onDisconnect();
	  };

	  /**
	   * Generates a connection url based on the Socket.IO URL Protocol.
	   * See <https://github.com/learnboost/socket.io-node/> for more details.
	   *
	   * @returns {String} Connection url
	   * @api private
	   */

	  Transport.prototype.prepareUrl = function () {
	    var options = this.socket.options;

	    return this.scheme() + '://'
	      + options.host + ':' + options.port + '/'
	      + options.resource + '/' + io.protocol
	      + '/' + this.name + '/' + this.sessid;
	  };

	  /**
	   * Checks if the transport is ready to start a connection.
	   *
	   * @param {Socket} socket The socket instance that needs a transport
	   * @param {Function} fn The callback
	   * @api private
	   */

	  Transport.prototype.ready = function (socket, fn) {
	    fn.call(this);
	  };
	})(
	    'undefined' != typeof io ? io : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	);
	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io, global) {

	  /**
	   * Expose constructor.
	   */

	  exports.Socket = Socket;

	  /**
	   * Create a new `Socket.IO client` which can establish a persistent
	   * connection with a Socket.IO enabled server.
	   *
	   * @api public
	   */

	  function Socket (options) {
	    this.options = {
	        port: 80
	      , secure: false
	      , document: 'document' in global ? document : false
	      , resource: 'socket.io'
	      , transports: io.transports
	      , 'connect timeout': 10000
	      , 'try multiple transports': true
	      , 'reconnect': true
	      , 'reconnection delay': 500
	      , 'reconnection limit': Infinity
	      , 'reopen delay': 3000
	      , 'max reconnection attempts': 10
	      , 'sync disconnect on unload': false
	      , 'auto connect': true
	      , 'flash policy port': 10843
	      , 'manualFlush': false
	    };

	    io.util.merge(this.options, options);

	    this.connected = false;
	    this.open = false;
	    this.connecting = false;
	    this.reconnecting = false;
	    this.namespaces = {};
	    this.buffer = [];
	    this.doBuffer = false;

	    if (this.options['sync disconnect on unload'] &&
	        (!this.isXDomain() || io.util.ua.hasCORS)) {
	      var self = this;
	      io.util.on(global, 'beforeunload', function () {
	        self.disconnectSync();
	      }, false);
	    }

	    if (this.options['auto connect']) {
	      this.connect();
	    }
	};

	  /**
	   * Apply EventEmitter mixin.
	   */

	  io.util.mixin(Socket, io.EventEmitter);

	  /**
	   * Returns a namespace listener/emitter for this socket
	   *
	   * @api public
	   */

	  Socket.prototype.of = function (name) {
	    if (!this.namespaces[name]) {
	      this.namespaces[name] = new io.SocketNamespace(this, name);

	      if (name !== '') {
	        this.namespaces[name].packet({ type: 'connect' });
	      }
	    }

	    return this.namespaces[name];
	  };

	  /**
	   * Emits the given event to the Socket and all namespaces
	   *
	   * @api private
	   */

	  Socket.prototype.publish = function () {
	    this.emit.apply(this, arguments);

	    var nsp;

	    for (var i in this.namespaces) {
	      if (this.namespaces.hasOwnProperty(i)) {
	        nsp = this.of(i);
	        nsp.$emit.apply(nsp, arguments);
	      }
	    }
	  };

	  /**
	   * Performs the handshake
	   *
	   * @api private
	   */

	  function empty () { };

	  Socket.prototype.handshake = function (fn) {
	    var self = this
	      , options = this.options;

	    function complete (data) {
	      if (data instanceof Error) {
	        self.connecting = false;
	        self.onError(data.message);
	      } else {
	        fn.apply(null, data.split(':'));
	      }
	    };

	    var url = [
	          'http' + (options.secure ? 's' : '') + ':/'
	        , options.host + ':' + options.port
	        , options.resource
	        , io.protocol
	        , io.util.query(this.options.query, 't=' + +new Date)
	      ].join('/');

	    if (this.isXDomain() && !io.util.ua.hasCORS) {
	      var insertAt = document.getElementsByTagName('script')[0]
	        , script = document.createElement('script');

	      script.src = url + '&jsonp=' + io.j.length;
	      insertAt.parentNode.insertBefore(script, insertAt);

	      io.j.push(function (data) {
	        complete(data);
	        script.parentNode.removeChild(script);
	      });
	    } else {
	      var xhr = io.util.request();

	      xhr.open('GET', url, true);
	      if (this.isXDomain()) {
	        xhr.withCredentials = true;
	      }
	      xhr.onreadystatechange = function () {
	        if (xhr.readyState == 4) {
	          xhr.onreadystatechange = empty;

	          if (xhr.status == 200) {
	            complete(xhr.responseText);
	          } else if (xhr.status == 403) {
	            self.onError(xhr.responseText);
	          } else {
	            self.connecting = false;            
	            !self.reconnecting && self.onError(xhr.responseText);
	          }
	        }
	      };
	      xhr.send(null);
	    }
	  };

	  /**
	   * Find an available transport based on the options supplied in the constructor.
	   *
	   * @api private
	   */

	  Socket.prototype.getTransport = function (override) {
	    var transports = override || this.transports, match;

	    for (var i = 0, transport; transport = transports[i]; i++) {
	      if (io.Transport[transport]
	        && io.Transport[transport].check(this)
	        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {
	        return new io.Transport[transport](this, this.sessionid);
	      }
	    }

	    return null;
	  };

	  /**
	   * Connects to the server.
	   *
	   * @param {Function} [fn] Callback.
	   * @returns {io.Socket}
	   * @api public
	   */

	  Socket.prototype.connect = function (fn) {
	    if (this.connecting) {
	      return this;
	    }

	    var self = this;
	    self.connecting = true;
	    
	    this.handshake(function (sid, heartbeat, close, transports) {
	      self.sessionid = sid;
	      self.closeTimeout = close * 1000;
	      self.heartbeatTimeout = heartbeat * 1000;
	      if(!self.transports)
	          self.transports = self.origTransports = (transports ? io.util.intersect(
	              transports.split(',')
	            , self.options.transports
	          ) : self.options.transports);

	      self.setHeartbeatTimeout();

	      function connect (transports){
	        if (self.transport) self.transport.clearTimeouts();

	        self.transport = self.getTransport(transports);
	        if (!self.transport) return self.publish('connect_failed');

	        // once the transport is ready
	        self.transport.ready(self, function () {
	          self.connecting = true;
	          self.publish('connecting', self.transport.name);
	          self.transport.open();

	          if (self.options['connect timeout']) {
	            self.connectTimeoutTimer = setTimeout(function () {
	              if (!self.connected) {
	                self.connecting = false;

	                if (self.options['try multiple transports']) {
	                  var remaining = self.transports;

	                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=
	                         self.transport.name) {}

	                    if (remaining.length){
	                      connect(remaining);
	                    } else {
	                      self.publish('connect_failed');
	                    }
	                }
	              }
	            }, self.options['connect timeout']);
	          }
	        });
	      }

	      connect(self.transports);

	      self.once('connect', function (){
	        clearTimeout(self.connectTimeoutTimer);

	        fn && typeof fn == 'function' && fn();
	      });
	    });

	    return this;
	  };

	  /**
	   * Clears and sets a new heartbeat timeout using the value given by the
	   * server during the handshake.
	   *
	   * @api private
	   */

	  Socket.prototype.setHeartbeatTimeout = function () {
	    clearTimeout(this.heartbeatTimeoutTimer);
	    if(this.transport && !this.transport.heartbeats()) return;

	    var self = this;
	    this.heartbeatTimeoutTimer = setTimeout(function () {
	      self.transport.onClose();
	    }, this.heartbeatTimeout);
	  };

	  /**
	   * Sends a message.
	   *
	   * @param {Object} data packet.
	   * @returns {io.Socket}
	   * @api public
	   */

	  Socket.prototype.packet = function (data) {
	    if (this.connected && !this.doBuffer) {
	      this.transport.packet(data);
	    } else {
	      this.buffer.push(data);
	    }

	    return this;
	  };

	  /**
	   * Sets buffer state
	   *
	   * @api private
	   */

	  Socket.prototype.setBuffer = function (v) {
	    this.doBuffer = v;

	    if (!v && this.connected && this.buffer.length) {
	      if (!this.options['manualFlush']) {
	        this.flushBuffer();
	      }
	    }
	  };

	  /**
	   * Flushes the buffer data over the wire.
	   * To be invoked manually when 'manualFlush' is set to true.
	   *
	   * @api public
	   */

	  Socket.prototype.flushBuffer = function() {
	    this.transport.payload(this.buffer);
	    this.buffer = [];
	  };
	  

	  /**
	   * Disconnect the established connect.
	   *
	   * @returns {io.Socket}
	   * @api public
	   */

	  Socket.prototype.disconnect = function () {
	    if (this.connected || this.connecting) {
	      if (this.open) {
	        this.of('').packet({ type: 'disconnect' });
	      }

	      // handle disconnection immediately
	      this.onDisconnect('booted');
	    }

	    return this;
	  };

	  /**
	   * Disconnects the socket with a sync XHR.
	   *
	   * @api private
	   */

	  Socket.prototype.disconnectSync = function () {
	    // ensure disconnection
	    var xhr = io.util.request();
	    var uri = [
	        'http' + (this.options.secure ? 's' : '') + ':/'
	      , this.options.host + ':' + this.options.port
	      , this.options.resource
	      , io.protocol
	      , ''
	      , this.sessionid
	    ].join('/') + '/?disconnect=1';

	    xhr.open('GET', uri, false);
	    xhr.send(null);

	    // handle disconnection immediately
	    this.onDisconnect('booted');
	  };

	  /**
	   * Check if we need to use cross domain enabled transports. Cross domain would
	   * be a different port or different domain name.
	   *
	   * @returns {Boolean}
	   * @api private
	   */

	  Socket.prototype.isXDomain = function () {

	    var port = global.location.port ||
	      ('https:' == global.location.protocol ? 443 : 80);

	    return this.options.host !== global.location.hostname 
	      || this.options.port != port;
	  };

	  /**
	   * Called upon handshake.
	   *
	   * @api private
	   */

	  Socket.prototype.onConnect = function () {
	    if (!this.connected) {
	      this.connected = true;
	      this.connecting = false;
	      if (!this.doBuffer) {
	        // make sure to flush the buffer
	        this.setBuffer(false);
	      }
	      this.emit('connect');
	    }
	  };

	  /**
	   * Called when the transport opens
	   *
	   * @api private
	   */

	  Socket.prototype.onOpen = function () {
	    this.open = true;
	  };

	  /**
	   * Called when the transport closes.
	   *
	   * @api private
	   */

	  Socket.prototype.onClose = function () {
	    this.open = false;
	    clearTimeout(this.heartbeatTimeoutTimer);
	  };

	  /**
	   * Called when the transport first opens a connection
	   *
	   * @param text
	   */

	  Socket.prototype.onPacket = function (packet) {
	    this.of(packet.endpoint).onPacket(packet);
	  };

	  /**
	   * Handles an error.
	   *
	   * @api private
	   */

	  Socket.prototype.onError = function (err) {
	    if (err && err.advice) {
	      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {
	        this.disconnect();
	        if (this.options.reconnect) {
	          this.reconnect();
	        }
	      }
	    }

	    this.publish('error', err && err.reason ? err.reason : err);
	  };

	  /**
	   * Called when the transport disconnects.
	   *
	   * @api private
	   */

	  Socket.prototype.onDisconnect = function (reason) {
	    var wasConnected = this.connected
	      , wasConnecting = this.connecting;

	    this.connected = false;
	    this.connecting = false;
	    this.open = false;

	    if (wasConnected || wasConnecting) {
	      this.transport.close();
	      this.transport.clearTimeouts();
	      if (wasConnected) {
	        this.publish('disconnect', reason);

	        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {
	          this.reconnect();
	        }
	      }
	    }
	  };

	  /**
	   * Called upon reconnection.
	   *
	   * @api private
	   */

	  Socket.prototype.reconnect = function () {
	    this.reconnecting = true;
	    this.reconnectionAttempts = 0;
	    this.reconnectionDelay = this.options['reconnection delay'];

	    var self = this
	      , maxAttempts = this.options['max reconnection attempts']
	      , tryMultiple = this.options['try multiple transports']
	      , limit = this.options['reconnection limit'];

	    function reset () {
	      if (self.connected) {
	        for (var i in self.namespaces) {
	          if (self.namespaces.hasOwnProperty(i) && '' !== i) {
	              self.namespaces[i].packet({ type: 'connect' });
	          }
	        }
	        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);
	      }

	      clearTimeout(self.reconnectionTimer);

	      self.removeListener('connect_failed', maybeReconnect);
	      self.removeListener('connect', maybeReconnect);

	      self.reconnecting = false;

	      delete self.reconnectionAttempts;
	      delete self.reconnectionDelay;
	      delete self.reconnectionTimer;
	      delete self.redoTransports;

	      self.options['try multiple transports'] = tryMultiple;
	    };

	    function maybeReconnect () {
	      if (!self.reconnecting) {
	        return;
	      }

	      if (self.connected) {
	        return reset();
	      };

	      if (self.connecting && self.reconnecting) {
	        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);
	      }

	      if (self.reconnectionAttempts++ >= maxAttempts) {
	        if (!self.redoTransports) {
	          self.on('connect_failed', maybeReconnect);
	          self.options['try multiple transports'] = true;
	          self.transports = self.origTransports;
	          self.transport = self.getTransport();
	          self.redoTransports = true;
	          self.connect();
	        } else {
	          self.publish('reconnect_failed');
	          reset();
	        }
	      } else {
	        if (self.reconnectionDelay < limit) {
	          self.reconnectionDelay *= 2; // exponential back off
	        }

	        self.connect();
	        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);
	        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);
	      }
	    };

	    this.options['try multiple transports'] = false;
	    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);

	    this.on('connect', maybeReconnect);
	  };

	})(
	    'undefined' != typeof io ? io : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	  , this
	);
	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io) {

	  /**
	   * Expose constructor.
	   */

	  exports.SocketNamespace = SocketNamespace;

	  /**
	   * Socket namespace constructor.
	   *
	   * @constructor
	   * @api public
	   */

	  function SocketNamespace (socket, name) {
	    this.socket = socket;
	    this.name = name || '';
	    this.flags = {};
	    this.json = new Flag(this, 'json');
	    this.ackPackets = 0;
	    this.acks = {};
	  };

	  /**
	   * Apply EventEmitter mixin.
	   */

	  io.util.mixin(SocketNamespace, io.EventEmitter);

	  /**
	   * Copies emit since we override it
	   *
	   * @api private
	   */

	  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;

	  /**
	   * Creates a new namespace, by proxying the request to the socket. This
	   * allows us to use the synax as we do on the server.
	   *
	   * @api public
	   */

	  SocketNamespace.prototype.of = function () {
	    return this.socket.of.apply(this.socket, arguments);
	  };

	  /**
	   * Sends a packet.
	   *
	   * @api private
	   */

	  SocketNamespace.prototype.packet = function (packet) {
	    packet.endpoint = this.name;
	    this.socket.packet(packet);
	    this.flags = {};
	    return this;
	  };

	  /**
	   * Sends a message
	   *
	   * @api public
	   */

	  SocketNamespace.prototype.send = function (data, fn) {
	    var packet = {
	        type: this.flags.json ? 'json' : 'message'
	      , data: data
	    };

	    if ('function' == typeof fn) {
	      packet.id = ++this.ackPackets;
	      packet.ack = true;
	      this.acks[packet.id] = fn;
	    }

	    return this.packet(packet);
	  };

	  /**
	   * Emits an event
	   *
	   * @api public
	   */
	  
	  SocketNamespace.prototype.emit = function (name) {
	    var args = Array.prototype.slice.call(arguments, 1)
	      , lastArg = args[args.length - 1]
	      , packet = {
	            type: 'event'
	          , name: name
	        };

	    if ('function' == typeof lastArg) {
	      packet.id = ++this.ackPackets;
	      packet.ack = 'data';
	      this.acks[packet.id] = lastArg;
	      args = args.slice(0, args.length - 1);
	    }

	    packet.args = args;

	    return this.packet(packet);
	  };

	  /**
	   * Disconnects the namespace
	   *
	   * @api private
	   */

	  SocketNamespace.prototype.disconnect = function () {
	    if (this.name === '') {
	      this.socket.disconnect();
	    } else {
	      this.packet({ type: 'disconnect' });
	      this.$emit('disconnect');
	    }

	    return this;
	  };

	  /**
	   * Handles a packet
	   *
	   * @api private
	   */

	  SocketNamespace.prototype.onPacket = function (packet) {
	    var self = this;

	    function ack () {
	      self.packet({
	          type: 'ack'
	        , args: io.util.toArray(arguments)
	        , ackId: packet.id
	      });
	    };

	    switch (packet.type) {
	      case 'connect':
	        this.$emit('connect');
	        break;

	      case 'disconnect':
	        if (this.name === '') {
	          this.socket.onDisconnect(packet.reason || 'booted');
	        } else {
	          this.$emit('disconnect', packet.reason);
	        }
	        break;

	      case 'message':
	      case 'json':
	        var params = ['message', packet.data];

	        if (packet.ack == 'data') {
	          params.push(ack);
	        } else if (packet.ack) {
	          this.packet({ type: 'ack', ackId: packet.id });
	        }

	        this.$emit.apply(this, params);
	        break;

	      case 'event':
	        var params = [packet.name].concat(packet.args);

	        if (packet.ack == 'data')
	          params.push(ack);

	        this.$emit.apply(this, params);
	        break;

	      case 'ack':
	        if (this.acks[packet.ackId]) {
	          this.acks[packet.ackId].apply(this, packet.args);
	          delete this.acks[packet.ackId];
	        }
	        break;

	      case 'error':
	        if (packet.advice){
	          this.socket.onError(packet);
	        } else {
	          if (packet.reason == 'unauthorized') {
	            this.$emit('connect_failed', packet.reason);
	          } else {
	            this.$emit('error', packet.reason);
	          }
	        }
	        break;
	    }
	  };

	  /**
	   * Flag interface.
	   *
	   * @api private
	   */

	  function Flag (nsp, name) {
	    this.namespace = nsp;
	    this.name = name;
	  };

	  /**
	   * Send a message
	   *
	   * @api public
	   */

	  Flag.prototype.send = function () {
	    this.namespace.flags[this.name] = true;
	    this.namespace.send.apply(this.namespace, arguments);
	  };

	  /**
	   * Emit an event
	   *
	   * @api public
	   */

	  Flag.prototype.emit = function () {
	    this.namespace.flags[this.name] = true;
	    this.namespace.emit.apply(this.namespace, arguments);
	  };

	})(
	    'undefined' != typeof io ? io : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	);

	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io, global) {

	  /**
	   * Expose constructor.
	   */

	  exports.websocket = WS;

	  /**
	   * The WebSocket transport uses the HTML5 WebSocket API to establish an
	   * persistent connection with the Socket.IO server. This transport will also
	   * be inherited by the FlashSocket fallback as it provides a API compatible
	   * polyfill for the WebSockets.
	   *
	   * @constructor
	   * @extends {io.Transport}
	   * @api public
	   */

	  function WS (socket) {
	    io.Transport.apply(this, arguments);
	  };

	  /**
	   * Inherits from Transport.
	   */

	  io.util.inherit(WS, io.Transport);

	  /**
	   * Transport name
	   *
	   * @api public
	   */

	  WS.prototype.name = 'websocket';

	  /**
	   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach
	   * all the appropriate listeners to handle the responses from the server.
	   *
	   * @returns {Transport}
	   * @api public
	   */

	  WS.prototype.open = function () {
	    var query = io.util.query(this.socket.options.query)
	      , self = this
	      , Socket


	    if (!Socket) {
	      Socket = global.MozWebSocket || global.WebSocket;
	    }

	    this.websocket = new Socket(this.prepareUrl() + query);

	    this.websocket.onopen = function () {
	      self.onOpen();
	      self.socket.setBuffer(false);
	    };
	    this.websocket.onmessage = function (ev) {
	      self.onData(ev.data);
	    };
	    this.websocket.onclose = function () {
	      self.onClose();
	      self.socket.setBuffer(true);
	    };
	    this.websocket.onerror = function (e) {
	      self.onError(e);
	    };

	    return this;
	  };

	  /**
	   * Send a message to the Socket.IO server. The message will automatically be
	   * encoded in the correct message format.
	   *
	   * @returns {Transport}
	   * @api public
	   */

	  // Do to a bug in the current IDevices browser, we need to wrap the send in a 
	  // setTimeout, when they resume from sleeping the browser will crash if 
	  // we don't allow the browser time to detect the socket has been closed
	  if (io.util.ua.iDevice) {
	    WS.prototype.send = function (data) {
	      var self = this;
	      setTimeout(function() {
	         self.websocket.send(data);
	      },0);
	      return this;
	    };
	  } else {
	    WS.prototype.send = function (data) {
	      this.websocket.send(data);
	      return this;
	    };
	  }

	  /**
	   * Payload
	   *
	   * @api private
	   */

	  WS.prototype.payload = function (arr) {
	    for (var i = 0, l = arr.length; i < l; i++) {
	      this.packet(arr[i]);
	    }
	    return this;
	  };

	  /**
	   * Disconnect the established `WebSocket` connection.
	   *
	   * @returns {Transport}
	   * @api public
	   */

	  WS.prototype.close = function () {
	    this.websocket.close();
	    return this;
	  };

	  /**
	   * Handle the errors that `WebSocket` might be giving when we
	   * are attempting to connect or send messages.
	   *
	   * @param {Error} e The error.
	   * @api private
	   */

	  WS.prototype.onError = function (e) {
	    this.socket.onError(e);
	  };

	  /**
	   * Returns the appropriate scheme for the URI generation.
	   *
	   * @api private
	   */
	  WS.prototype.scheme = function () {
	    return this.socket.options.secure ? 'wss' : 'ws';
	  };

	  /**
	   * Checks if the browser has support for native `WebSockets` and that
	   * it's not the polyfill created for the FlashSocket transport.
	   *
	   * @return {Boolean}
	   * @api public
	   */

	  WS.check = function () {
	    return ('WebSocket' in global && !('__addTask' in WebSocket))
	          || 'MozWebSocket' in global;
	  };

	  /**
	   * Check if the `WebSocket` transport support cross domain communications.
	   *
	   * @returns {Boolean}
	   * @api public
	   */

	  WS.xdomainCheck = function () {
	    return true;
	  };

	  /**
	   * Add the transport to your public io.transports array.
	   *
	   * @api private
	   */

	  io.transports.push('websocket');

	})(
	    'undefined' != typeof io ? io.Transport : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	  , this
	);

	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io) {

	  /**
	   * Expose constructor.
	   */

	  exports.flashsocket = Flashsocket;

	  /**
	   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket
	   * specification. It uses a .swf file to communicate with the server. If you want
	   * to serve the .swf file from a other server than where the Socket.IO script is
	   * coming from you need to use the insecure version of the .swf. More information
	   * about this can be found on the github page.
	   *
	   * @constructor
	   * @extends {io.Transport.websocket}
	   * @api public
	   */

	  function Flashsocket () {
	    io.Transport.websocket.apply(this, arguments);
	  };

	  /**
	   * Inherits from Transport.
	   */

	  io.util.inherit(Flashsocket, io.Transport.websocket);

	  /**
	   * Transport name
	   *
	   * @api public
	   */

	  Flashsocket.prototype.name = 'flashsocket';

	  /**
	   * Disconnect the established `FlashSocket` connection. This is done by adding a 
	   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` 
	   * transport.
	   *
	   * @returns {Transport}
	   * @api public
	   */

	  Flashsocket.prototype.open = function () {
	    var self = this
	      , args = arguments;

	    WebSocket.__addTask(function () {
	      io.Transport.websocket.prototype.open.apply(self, args);
	    });
	    return this;
	  };
	  
	  /**
	   * Sends a message to the Socket.IO server. This is done by adding a new
	   * task to the FlashSocket. The rest will be handled off by the `WebSocket` 
	   * transport.
	   *
	   * @returns {Transport}
	   * @api public
	   */

	  Flashsocket.prototype.send = function () {
	    var self = this, args = arguments;
	    WebSocket.__addTask(function () {
	      io.Transport.websocket.prototype.send.apply(self, args);
	    });
	    return this;
	  };

	  /**
	   * Disconnects the established `FlashSocket` connection.
	   *
	   * @returns {Transport}
	   * @api public
	   */

	  Flashsocket.prototype.close = function () {
	    WebSocket.__tasks.length = 0;
	    io.Transport.websocket.prototype.close.call(this);
	    return this;
	  };

	  /**
	   * The WebSocket fall back needs to append the flash container to the body
	   * element, so we need to make sure we have access to it. Or defer the call
	   * until we are sure there is a body element.
	   *
	   * @param {Socket} socket The socket instance that needs a transport
	   * @param {Function} fn The callback
	   * @api private
	   */

	  Flashsocket.prototype.ready = function (socket, fn) {
	    function init () {
	      var options = socket.options
	        , port = options['flash policy port']
	        , path = [
	              'http' + (options.secure ? 's' : '') + ':/'
	            , options.host + ':' + options.port
	            , options.resource
	            , 'static/flashsocket'
	            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'
	          ];

	      // Only start downloading the swf file when the checked that this browser
	      // actually supports it
	      if (!Flashsocket.loaded) {
	        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {
	          // Set the correct file based on the XDomain settings
	          WEB_SOCKET_SWF_LOCATION = path.join('/');
	        }

	        if (port !== 843) {
	          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);
	        }

	        WebSocket.__initialize();
	        Flashsocket.loaded = true;
	      }

	      fn.call(self);
	    }

	    var self = this;
	    if (document.body) return init();

	    io.util.load(init);
	  };

	  /**
	   * Check if the FlashSocket transport is supported as it requires that the Adobe
	   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if
	   * the polyfill is correctly loaded.
	   *
	   * @returns {Boolean}
	   * @api public
	   */

	  Flashsocket.check = function () {
	    if (
	        typeof WebSocket == 'undefined'
	      || !('__initialize' in WebSocket) || !swfobject
	    ) return false;

	    return swfobject.getFlashPlayerVersion().major >= 10;
	  };

	  /**
	   * Check if the FlashSocket transport can be used as cross domain / cross origin 
	   * transport. Because we can't see which type (secure or insecure) of .swf is used
	   * we will just return true.
	   *
	   * @returns {Boolean}
	   * @api public
	   */

	  Flashsocket.xdomainCheck = function () {
	    return true;
	  };

	  /**
	   * Disable AUTO_INITIALIZATION
	   */

	  if (typeof window != 'undefined') {
	    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;
	  }

	  /**
	   * Add the transport to your public io.transports array.
	   *
	   * @api private
	   */

	  io.transports.push('flashsocket');
	})(
	    'undefined' != typeof io ? io.Transport : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	);
	/*	SWFObject v2.2 <http://code.google.com/p/swfobject/> 
		is released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
	*/
	if ('undefined' != typeof window) {
	var swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable("$version");if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll("left")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false)}else{if(typeof O.attachEvent!=D){i(O,"onload",Y)}else{if(typeof O.onload=="function"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class")}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align")}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137"}j.title=j.title.slice(0,47)+" - Flash Player Installation";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae]}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"'}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"'}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />'}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute("type",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac])}else{if(ac.toLowerCase()!="classid"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C("param");aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName("head")[0];if(!aa){return}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;G=null}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+" {"+Y+"}"))}}}function w(Z,X){if(!m){return}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y}else{v("#"+Z,"visibility:"+Y)}}function L(Y){var Z=/[\\\"<>\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai]}else{am.flashvars=ai+"="+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1]}if(aa==null){return L(Z)}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)))}}}return""},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block"}}if(E){E(B)}}a=false}}}}();
	}
	// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>
	// License: New BSD License
	// Reference: http://dev.w3.org/html5/websockets/
	// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol

	(function() {
	  
	  if ('undefined' == typeof window || window.WebSocket) return;

	  var console = window.console;
	  if (!console || !console.log || !console.error) {
	    console = {log: function(){ }, error: function(){ }};
	  }
	  
	  if (!swfobject.hasFlashPlayerVersion("10.0.0")) {
	    console.error("Flash Player >= 10.0.0 is required.");
	    return;
	  }
	  if (location.protocol == "file:") {
	    console.error(
	      "WARNING: web-socket-js doesn't work in file:///... URL " +
	      "unless you set Flash Security Settings properly. " +
	      "Open the page via Web server i.e. http://...");
	  }

	  /**
	   * This class represents a faux web socket.
	   * @param {string} url
	   * @param {array or string} protocols
	   * @param {string} proxyHost
	   * @param {int} proxyPort
	   * @param {string} headers
	   */
	  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {
	    var self = this;
	    self.__id = WebSocket.__nextId++;
	    WebSocket.__instances[self.__id] = self;
	    self.readyState = WebSocket.CONNECTING;
	    self.bufferedAmount = 0;
	    self.__events = {};
	    if (!protocols) {
	      protocols = [];
	    } else if (typeof protocols == "string") {
	      protocols = [protocols];
	    }
	    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.
	    // Otherwise, when onopen fires immediately, onopen is called before it is set.
	    setTimeout(function() {
	      WebSocket.__addTask(function() {
	        WebSocket.__flash.create(
	            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);
	      });
	    }, 0);
	  };

	  /**
	   * Send data to the web socket.
	   * @param {string} data  The data to send to the socket.
	   * @return {boolean}  True for success, false for failure.
	   */
	  WebSocket.prototype.send = function(data) {
	    if (this.readyState == WebSocket.CONNECTING) {
	      throw "INVALID_STATE_ERR: Web Socket connection has not been established";
	    }
	    // We use encodeURIComponent() here, because FABridge doesn't work if
	    // the argument includes some characters. We don't use escape() here
	    // because of this:
	    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions
	    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't
	    // preserve all Unicode characters either e.g. "\uffff" in Firefox.
	    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require
	    // additional testing.
	    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));
	    if (result < 0) { // success
	      return true;
	    } else {
	      this.bufferedAmount += result;
	      return false;
	    }
	  };

	  /**
	   * Close this web socket gracefully.
	   */
	  WebSocket.prototype.close = function() {
	    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {
	      return;
	    }
	    this.readyState = WebSocket.CLOSING;
	    WebSocket.__flash.close(this.__id);
	  };

	  /**
	   * Implementation of {@link <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration">DOM 2 EventTarget Interface</a>}
	   *
	   * @param {string} type
	   * @param {function} listener
	   * @param {boolean} useCapture
	   * @return void
	   */
	  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {
	    if (!(type in this.__events)) {
	      this.__events[type] = [];
	    }
	    this.__events[type].push(listener);
	  };

	  /**
	   * Implementation of {@link <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration">DOM 2 EventTarget Interface</a>}
	   *
	   * @param {string} type
	   * @param {function} listener
	   * @param {boolean} useCapture
	   * @return void
	   */
	  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {
	    if (!(type in this.__events)) return;
	    var events = this.__events[type];
	    for (var i = events.length - 1; i >= 0; --i) {
	      if (events[i] === listener) {
	        events.splice(i, 1);
	        break;
	      }
	    }
	  };

	  /**
	   * Implementation of {@link <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration">DOM 2 EventTarget Interface</a>}
	   *
	   * @param {Event} event
	   * @return void
	   */
	  WebSocket.prototype.dispatchEvent = function(event) {
	    var events = this.__events[event.type] || [];
	    for (var i = 0; i < events.length; ++i) {
	      events[i](event);
	    }
	    var handler = this["on" + event.type];
	    if (handler) handler(event);
	  };

	  /**
	   * Handles an event from Flash.
	   * @param {Object} flashEvent
	   */
	  WebSocket.prototype.__handleEvent = function(flashEvent) {
	    if ("readyState" in flashEvent) {
	      this.readyState = flashEvent.readyState;
	    }
	    if ("protocol" in flashEvent) {
	      this.protocol = flashEvent.protocol;
	    }
	    
	    var jsEvent;
	    if (flashEvent.type == "open" || flashEvent.type == "error") {
	      jsEvent = this.__createSimpleEvent(flashEvent.type);
	    } else if (flashEvent.type == "close") {
	      // TODO implement jsEvent.wasClean
	      jsEvent = this.__createSimpleEvent("close");
	    } else if (flashEvent.type == "message") {
	      var data = decodeURIComponent(flashEvent.message);
	      jsEvent = this.__createMessageEvent("message", data);
	    } else {
	      throw "unknown event type: " + flashEvent.type;
	    }
	    
	    this.dispatchEvent(jsEvent);
	  };
	  
	  WebSocket.prototype.__createSimpleEvent = function(type) {
	    if (document.createEvent && window.Event) {
	      var event = document.createEvent("Event");
	      event.initEvent(type, false, false);
	      return event;
	    } else {
	      return {type: type, bubbles: false, cancelable: false};
	    }
	  };
	  
	  WebSocket.prototype.__createMessageEvent = function(type, data) {
	    if (document.createEvent && window.MessageEvent && !window.opera) {
	      var event = document.createEvent("MessageEvent");
	      event.initMessageEvent("message", false, false, data, null, null, window, null);
	      return event;
	    } else {
	      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.
	      return {type: type, data: data, bubbles: false, cancelable: false};
	    }
	  };
	  
	  /**
	   * Define the WebSocket readyState enumeration.
	   */
	  WebSocket.CONNECTING = 0;
	  WebSocket.OPEN = 1;
	  WebSocket.CLOSING = 2;
	  WebSocket.CLOSED = 3;

	  WebSocket.__flash = null;
	  WebSocket.__instances = {};
	  WebSocket.__tasks = [];
	  WebSocket.__nextId = 0;
	  
	  /**
	   * Load a new flash security policy file.
	   * @param {string} url
	   */
	  WebSocket.loadFlashPolicyFile = function(url){
	    WebSocket.__addTask(function() {
	      WebSocket.__flash.loadManualPolicyFile(url);
	    });
	  };

	  /**
	   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.
	   */
	  WebSocket.__initialize = function() {
	    if (WebSocket.__flash) return;
	    
	    if (WebSocket.__swfLocation) {
	      // For backword compatibility.
	      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;
	    }
	    if (!window.WEB_SOCKET_SWF_LOCATION) {
	      console.error("[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf");
	      return;
	    }
	    var container = document.createElement("div");
	    container.id = "webSocketContainer";
	    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents
	    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).
	    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash
	    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is
	    // the best we can do as far as we know now.
	    container.style.position = "absolute";
	    if (WebSocket.__isFlashLite()) {
	      container.style.left = "0px";
	      container.style.top = "0px";
	    } else {
	      container.style.left = "-100px";
	      container.style.top = "-100px";
	    }
	    var holder = document.createElement("div");
	    holder.id = "webSocketFlash";
	    container.appendChild(holder);
	    document.body.appendChild(container);
	    // See this article for hasPriority:
	    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html
	    swfobject.embedSWF(
	      WEB_SOCKET_SWF_LOCATION,
	      "webSocketFlash",
	      "1" /* width */,
	      "1" /* height */,
	      "10.0.0" /* SWF version */,
	      null,
	      null,
	      {hasPriority: true, swliveconnect : true, allowScriptAccess: "always"},
	      null,
	      function(e) {
	        if (!e.success) {
	          console.error("[WebSocket] swfobject.embedSWF failed");
	        }
	      });
	  };
	  
	  /**
	   * Called by Flash to notify JS that it's fully loaded and ready
	   * for communication.
	   */
	  WebSocket.__onFlashInitialized = function() {
	    // We need to set a timeout here to avoid round-trip calls
	    // to flash during the initialization process.
	    setTimeout(function() {
	      WebSocket.__flash = document.getElementById("webSocketFlash");
	      WebSocket.__flash.setCallerUrl(location.href);
	      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);
	      for (var i = 0; i < WebSocket.__tasks.length; ++i) {
	        WebSocket.__tasks[i]();
	      }
	      WebSocket.__tasks = [];
	    }, 0);
	  };
	  
	  /**
	   * Called by Flash to notify WebSockets events are fired.
	   */
	  WebSocket.__onFlashEvent = function() {
	    setTimeout(function() {
	      try {
	        // Gets events using receiveEvents() instead of getting it from event object
	        // of Flash event. This is to make sure to keep message order.
	        // It seems sometimes Flash events don't arrive in the same order as they are sent.
	        var events = WebSocket.__flash.receiveEvents();
	        for (var i = 0; i < events.length; ++i) {
	          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);
	        }
	      } catch (e) {
	        console.error(e);
	      }
	    }, 0);
	    return true;
	  };
	  
	  // Called by Flash.
	  WebSocket.__log = function(message) {
	    console.log(decodeURIComponent(message));
	  };
	  
	  // Called by Flash.
	  WebSocket.__error = function(message) {
	    console.error(decodeURIComponent(message));
	  };
	  
	  WebSocket.__addTask = function(task) {
	    if (WebSocket.__flash) {
	      task();
	    } else {
	      WebSocket.__tasks.push(task);
	    }
	  };
	  
	  /**
	   * Test if the browser is running flash lite.
	   * @return {boolean} True if flash lite is running, false otherwise.
	   */
	  WebSocket.__isFlashLite = function() {
	    if (!window.navigator || !window.navigator.mimeTypes) {
	      return false;
	    }
	    var mimeType = window.navigator.mimeTypes["application/x-shockwave-flash"];
	    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {
	      return false;
	    }
	    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;
	  };
	  
	  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {
	    if (window.addEventListener) {
	      window.addEventListener("load", function(){
	        WebSocket.__initialize();
	      }, false);
	    } else {
	      window.attachEvent("onload", function(){
	        WebSocket.__initialize();
	      });
	    }
	  }
	  
	})();

	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io, global) {

	  /**
	   * Expose constructor.
	   *
	   * @api public
	   */

	  exports.XHR = XHR;

	  /**
	   * XHR constructor
	   *
	   * @costructor
	   * @api public
	   */

	  function XHR (socket) {
	    if (!socket) return;

	    io.Transport.apply(this, arguments);
	    this.sendBuffer = [];
	  };

	  /**
	   * Inherits from Transport.
	   */

	  io.util.inherit(XHR, io.Transport);

	  /**
	   * Establish a connection
	   *
	   * @returns {Transport}
	   * @api public
	   */

	  XHR.prototype.open = function () {
	    this.socket.setBuffer(false);
	    this.onOpen();
	    this.get();

	    // we need to make sure the request succeeds since we have no indication
	    // whether the request opened or not until it succeeded.
	    this.setCloseTimeout();

	    return this;
	  };

	  /**
	   * Check if we need to send data to the Socket.IO server, if we have data in our
	   * buffer we encode it and forward it to the `post` method.
	   *
	   * @api private
	   */

	  XHR.prototype.payload = function (payload) {
	    var msgs = [];

	    for (var i = 0, l = payload.length; i < l; i++) {
	      msgs.push(io.parser.encodePacket(payload[i]));
	    }

	    this.send(io.parser.encodePayload(msgs));
	  };

	  /**
	   * Send data to the Socket.IO server.
	   *
	   * @param data The message
	   * @returns {Transport}
	   * @api public
	   */

	  XHR.prototype.send = function (data) {
	    this.post(data);
	    return this;
	  };

	  /**
	   * Posts a encoded message to the Socket.IO server.
	   *
	   * @param {String} data A encoded message.
	   * @api private
	   */

	  function empty () { };

	  XHR.prototype.post = function (data) {
	    var self = this;
	    this.socket.setBuffer(true);

	    function stateChange () {
	      if (this.readyState == 4) {
	        this.onreadystatechange = empty;
	        self.posting = false;

	        if (this.status == 200){
	          self.socket.setBuffer(false);
	        } else {
	          self.onClose();
	        }
	      }
	    }

	    function onload () {
	      this.onload = empty;
	      self.socket.setBuffer(false);
	    };

	    this.sendXHR = this.request('POST');

	    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {
	      this.sendXHR.onload = this.sendXHR.onerror = onload;
	    } else {
	      this.sendXHR.onreadystatechange = stateChange;
	    }

	    this.sendXHR.send(data);
	  };

	  /**
	   * Disconnects the established `XHR` connection.
	   *
	   * @returns {Transport}
	   * @api public
	   */

	  XHR.prototype.close = function () {
	    this.onClose();
	    return this;
	  };

	  /**
	   * Generates a configured XHR request
	   *
	   * @param {String} url The url that needs to be requested.
	   * @param {String} method The method the request should use.
	   * @returns {XMLHttpRequest}
	   * @api private
	   */

	  XHR.prototype.request = function (method) {
	    var req = io.util.request(this.socket.isXDomain())
	      , query = io.util.query(this.socket.options.query, 't=' + +new Date);

	    req.open(method || 'GET', this.prepareUrl() + query, true);

	    if (method == 'POST') {
	      try {
	        if (req.setRequestHeader) {
	          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        } else {
	          // XDomainRequest
	          req.contentType = 'text/plain';
	        }
	      } catch (e) {}
	    }

	    return req;
	  };

	  /**
	   * Returns the scheme to use for the transport URLs.
	   *
	   * @api private
	   */

	  XHR.prototype.scheme = function () {
	    return this.socket.options.secure ? 'https' : 'http';
	  };

	  /**
	   * Check if the XHR transports are supported
	   *
	   * @param {Boolean} xdomain Check if we support cross domain requests.
	   * @returns {Boolean}
	   * @api public
	   */

	  XHR.check = function (socket, xdomain) {
	    try {
	      var request = io.util.request(xdomain),
	          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),
	          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),
	          isXProtocol = (global.location && socketProtocol != global.location.protocol);
	      if (request && !(usesXDomReq && isXProtocol)) {
	        return true;
	      }
	    } catch(e) {}

	    return false;
	  };

	  /**
	   * Check if the XHR transport supports cross domain requests.
	   *
	   * @returns {Boolean}
	   * @api public
	   */

	  XHR.xdomainCheck = function (socket) {
	    return XHR.check(socket, true);
	  };

	})(
	    'undefined' != typeof io ? io.Transport : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	  , this
	);
	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io) {

	  /**
	   * Expose constructor.
	   */

	  exports.htmlfile = HTMLFile;

	  /**
	   * The HTMLFile transport creates a `forever iframe` based transport
	   * for Internet Explorer. Regular forever iframe implementations will 
	   * continuously trigger the browsers buzy indicators. If the forever iframe
	   * is created inside a `htmlfile` these indicators will not be trigged.
	   *
	   * @constructor
	   * @extends {io.Transport.XHR}
	   * @api public
	   */

	  function HTMLFile (socket) {
	    io.Transport.XHR.apply(this, arguments);
	  };

	  /**
	   * Inherits from XHR transport.
	   */

	  io.util.inherit(HTMLFile, io.Transport.XHR);

	  /**
	   * Transport name
	   *
	   * @api public
	   */

	  HTMLFile.prototype.name = 'htmlfile';

	  /**
	   * Creates a new Ac...eX `htmlfile` with a forever loading iframe
	   * that can be used to listen to messages. Inside the generated
	   * `htmlfile` a reference will be made to the HTMLFile transport.
	   *
	   * @api private
	   */

	  HTMLFile.prototype.get = function () {
	    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');
	    this.doc.open();
	    this.doc.write('<html></html>');
	    this.doc.close();
	    this.doc.parentWindow.s = this;

	    var iframeC = this.doc.createElement('div');
	    iframeC.className = 'socketio';

	    this.doc.body.appendChild(iframeC);
	    this.iframe = this.doc.createElement('iframe');

	    iframeC.appendChild(this.iframe);

	    var self = this
	      , query = io.util.query(this.socket.options.query, 't='+ +new Date);

	    this.iframe.src = this.prepareUrl() + query;

	    io.util.on(window, 'unload', function () {
	      self.destroy();
	    });
	  };

	  /**
	   * The Socket.IO server will write script tags inside the forever
	   * iframe, this function will be used as callback for the incoming
	   * information.
	   *
	   * @param {String} data The message
	   * @param {document} doc Reference to the context
	   * @api private
	   */

	  HTMLFile.prototype._ = function (data, doc) {
	    // unescape all forward slashes. see GH-1251
	    data = data.replace(/\\\//g, '/');
	    this.onData(data);
	    try {
	      var script = doc.getElementsByTagName('script')[0];
	      script.parentNode.removeChild(script);
	    } catch (e) { }
	  };

	  /**
	   * Destroy the established connection, iframe and `htmlfile`.
	   * And calls the `CollectGarbage` function of Internet Explorer
	   * to release the memory.
	   *
	   * @api private
	   */

	  HTMLFile.prototype.destroy = function () {
	    if (this.iframe){
	      try {
	        this.iframe.src = 'about:blank';
	      } catch(e){}

	      this.doc = null;
	      this.iframe.parentNode.removeChild(this.iframe);
	      this.iframe = null;

	      CollectGarbage();
	    }
	  };

	  /**
	   * Disconnects the established connection.
	   *
	   * @returns {Transport} Chaining.
	   * @api public
	   */

	  HTMLFile.prototype.close = function () {
	    this.destroy();
	    return io.Transport.XHR.prototype.close.call(this);
	  };

	  /**
	   * Checks if the browser supports this transport. The browser
	   * must have an `Ac...eXObject` implementation.
	   *
	   * @return {Boolean}
	   * @api public
	   */

	  HTMLFile.check = function (socket) {
	    if (typeof window != "undefined" && (['Active'].concat('Object').join('X')) in window){
	      try {
	        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');
	        return a && io.Transport.XHR.check(socket);
	      } catch(e){}
	    }
	    return false;
	  };

	  /**
	   * Check if cross domain requests are supported.
	   *
	   * @returns {Boolean}
	   * @api public
	   */

	  HTMLFile.xdomainCheck = function () {
	    // we can probably do handling for sub-domains, we should
	    // test that it's cross domain but a subdomain here
	    return false;
	  };

	  /**
	   * Add the transport to your public io.transports array.
	   *
	   * @api private
	   */

	  io.transports.push('htmlfile');

	})(
	    'undefined' != typeof io ? io.Transport : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	);

	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io, global) {

	  /**
	   * Expose constructor.
	   */

	  exports['xhr-polling'] = XHRPolling;

	  /**
	   * The XHR-polling transport uses long polling XHR requests to create a
	   * "persistent" connection with the server.
	   *
	   * @constructor
	   * @api public
	   */

	  function XHRPolling () {
	    io.Transport.XHR.apply(this, arguments);
	  };

	  /**
	   * Inherits from XHR transport.
	   */

	  io.util.inherit(XHRPolling, io.Transport.XHR);

	  /**
	   * Merge the properties from XHR transport
	   */

	  io.util.merge(XHRPolling, io.Transport.XHR);

	  /**
	   * Transport name
	   *
	   * @api public
	   */

	  XHRPolling.prototype.name = 'xhr-polling';

	  /**
	   * Indicates whether heartbeats is enabled for this transport
	   *
	   * @api private
	   */

	  XHRPolling.prototype.heartbeats = function () {
	    return false;
	  };

	  /** 
	   * Establish a connection, for iPhone and Android this will be done once the page
	   * is loaded.
	   *
	   * @returns {Transport} Chaining.
	   * @api public
	   */

	  XHRPolling.prototype.open = function () {
	    var self = this;

	    io.Transport.XHR.prototype.open.call(self);
	    return false;
	  };

	  /**
	   * Starts a XHR request to wait for incoming messages.
	   *
	   * @api private
	   */

	  function empty () {};

	  XHRPolling.prototype.get = function () {
	    if (!this.isOpen) return;

	    var self = this;

	    function stateChange () {
	      if (this.readyState == 4) {
	        this.onreadystatechange = empty;

	        if (this.status == 200) {
	          self.onData(this.responseText);
	          self.get();
	        } else {
	          self.onClose();
	        }
	      }
	    };

	    function onload () {
	      this.onload = empty;
	      this.onerror = empty;
	      self.retryCounter = 1;
	      self.onData(this.responseText);
	      self.get();
	    };

	    function onerror () {
	      self.retryCounter ++;
	      if(!self.retryCounter || self.retryCounter > 3) {
	        self.onClose();  
	      } else {
	        self.get();
	      }
	    };

	    this.xhr = this.request();

	    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {
	      this.xhr.onload = onload;
	      this.xhr.onerror = onerror;
	    } else {
	      this.xhr.onreadystatechange = stateChange;
	    }

	    this.xhr.send(null);
	  };

	  /**
	   * Handle the unclean close behavior.
	   *
	   * @api private
	   */

	  XHRPolling.prototype.onClose = function () {
	    io.Transport.XHR.prototype.onClose.call(this);

	    if (this.xhr) {
	      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;
	      try {
	        this.xhr.abort();
	      } catch(e){}
	      this.xhr = null;
	    }
	  };

	  /**
	   * Webkit based browsers show a infinit spinner when you start a XHR request
	   * before the browsers onload event is called so we need to defer opening of
	   * the transport until the onload event is called. Wrapping the cb in our
	   * defer method solve this.
	   *
	   * @param {Socket} socket The socket instance that needs a transport
	   * @param {Function} fn The callback
	   * @api private
	   */

	  XHRPolling.prototype.ready = function (socket, fn) {
	    var self = this;

	    io.util.defer(function () {
	      fn.call(self);
	    });
	  };

	  /**
	   * Add the transport to your public io.transports array.
	   *
	   * @api private
	   */

	  io.transports.push('xhr-polling');

	})(
	    'undefined' != typeof io ? io.Transport : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	  , this
	);

	/**
	 * socket.io
	 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
	 * MIT Licensed
	 */

	(function (exports, io, global) {
	  /**
	   * There is a way to hide the loading indicator in Firefox. If you create and
	   * remove a iframe it will stop showing the current loading indicator.
	   * Unfortunately we can't feature detect that and UA sniffing is evil.
	   *
	   * @api private
	   */

	  var indicator = global.document && "MozAppearance" in
	    global.document.documentElement.style;

	  /**
	   * Expose constructor.
	   */

	  exports['jsonp-polling'] = JSONPPolling;

	  /**
	   * The JSONP transport creates an persistent connection by dynamically
	   * inserting a script tag in the page. This script tag will receive the
	   * information of the Socket.IO server. When new information is received
	   * it creates a new script tag for the new data stream.
	   *
	   * @constructor
	   * @extends {io.Transport.xhr-polling}
	   * @api public
	   */

	  function JSONPPolling (socket) {
	    io.Transport['xhr-polling'].apply(this, arguments);

	    this.index = io.j.length;

	    var self = this;

	    io.j.push(function (msg) {
	      self._(msg);
	    });
	  };

	  /**
	   * Inherits from XHR polling transport.
	   */

	  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);

	  /**
	   * Transport name
	   *
	   * @api public
	   */

	  JSONPPolling.prototype.name = 'jsonp-polling';

	  /**
	   * Posts a encoded message to the Socket.IO server using an iframe.
	   * The iframe is used because script tags can create POST based requests.
	   * The iframe is positioned outside of the view so the user does not
	   * notice it's existence.
	   *
	   * @param {String} data A encoded message.
	   * @api private
	   */

	  JSONPPolling.prototype.post = function (data) {
	    var self = this
	      , query = io.util.query(
	             this.socket.options.query
	          , 't='+ (+new Date) + '&i=' + this.index
	        );

	    if (!this.form) {
	      var form = document.createElement('form')
	        , area = document.createElement('textarea')
	        , id = this.iframeId = 'socketio_iframe_' + this.index
	        , iframe;

	      form.className = 'socketio';
	      form.style.position = 'absolute';
	      form.style.top = '0px';
	      form.style.left = '0px';
	      form.style.display = 'none';
	      form.target = id;
	      form.method = 'POST';
	      form.setAttribute('accept-charset', 'utf-8');
	      area.name = 'd';
	      form.appendChild(area);
	      document.body.appendChild(form);

	      this.form = form;
	      this.area = area;
	    }

	    this.form.action = this.prepareUrl() + query;

	    function complete () {
	      initIframe();
	      self.socket.setBuffer(false);
	    };

	    function initIframe () {
	      if (self.iframe) {
	        self.form.removeChild(self.iframe);
	      }

	      try {
	        // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	        iframe = document.createElement('<iframe name="'+ self.iframeId +'">');
	      } catch (e) {
	        iframe = document.createElement('iframe');
	        iframe.name = self.iframeId;
	      }

	      iframe.id = self.iframeId;

	      self.form.appendChild(iframe);
	      self.iframe = iframe;
	    };

	    initIframe();

	    // we temporarily stringify until we figure out how to prevent
	    // browsers from turning `\n` into `\r\n` in form inputs
	    this.area.value = io.JSON.stringify(data);

	    try {
	      this.form.submit();
	    } catch(e) {}

	    if (this.iframe.attachEvent) {
	      iframe.onreadystatechange = function () {
	        if (self.iframe.readyState == 'complete') {
	          complete();
	        }
	      };
	    } else {
	      this.iframe.onload = complete;
	    }

	    this.socket.setBuffer(true);
	  };

	  /**
	   * Creates a new JSONP poll that can be used to listen
	   * for messages from the Socket.IO server.
	   *
	   * @api private
	   */

	  JSONPPolling.prototype.get = function () {
	    var self = this
	      , script = document.createElement('script')
	      , query = io.util.query(
	             this.socket.options.query
	          , 't='+ (+new Date) + '&i=' + this.index
	        );

	    if (this.script) {
	      this.script.parentNode.removeChild(this.script);
	      this.script = null;
	    }

	    script.async = true;
	    script.src = this.prepareUrl() + query;
	    script.onerror = function () {
	      self.onClose();
	    };

	    var insertAt = document.getElementsByTagName('script')[0];
	    insertAt.parentNode.insertBefore(script, insertAt);
	    this.script = script;

	    if (indicator) {
	      setTimeout(function () {
	        var iframe = document.createElement('iframe');
	        document.body.appendChild(iframe);
	        document.body.removeChild(iframe);
	      }, 100);
	    }
	  };

	  /**
	   * Callback function for the incoming message stream from the Socket.IO server.
	   *
	   * @param {String} data The message
	   * @api private
	   */

	  JSONPPolling.prototype._ = function (msg) {
	    this.onData(msg);
	    if (this.isOpen) {
	      this.get();
	    }
	    return this;
	  };

	  /**
	   * The indicator hack only works after onload
	   *
	   * @param {Socket} socket The socket instance that needs a transport
	   * @param {Function} fn The callback
	   * @api private
	   */

	  JSONPPolling.prototype.ready = function (socket, fn) {
	    var self = this;
	    if (!indicator) return fn.call(this);

	    io.util.load(function () {
	      fn.call(self);
	    });
	  };

	  /**
	   * Checks if browser supports this transport.
	   *
	   * @return {Boolean}
	   * @api public
	   */

	  JSONPPolling.check = function () {
	    return 'document' in global;
	  };

	  /**
	   * Check if cross domain requests are supported
	   *
	   * @returns {Boolean}
	   * @api public
	   */

	  JSONPPolling.xdomainCheck = function () {
	    return true;
	  };

	  /**
	   * Add the transport to your public io.transports array.
	   *
	   * @api private
	   */

	  io.transports.push('jsonp-polling');

	})(
	    'undefined' != typeof io ? io.Transport : module.exports
	  , 'undefined' != typeof io ? io : module.parent.exports
	  , this
	);

	if (true) {
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return io; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	})();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/buildin/module.js */ 284)(module)))

/***/ },
/* 537 */
/*!****************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/path-browserify/index.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 2)))

/***/ },
/* 538 */
/*!**************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/url/url.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(/*! punycode */ 539);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(/*! querystring */ 540);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 539 */
/*!************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/punycode/punycode.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/buildin/module.js */ 284)(module), (function() { return this; }())))

/***/ },
/* 540 */
/*!******************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/url/~/querystring/index.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(/*! ./decode */ 541);
	exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ 542);


/***/ },
/* 541 */
/*!*******************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/url/~/querystring/decode.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 542 */
/*!*******************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/url/~/querystring/encode.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 543 */
/*!***************************!*\
  !*** ./~/lodash/index.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.10.0';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);

	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;

	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);

	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;

	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);

	      view.set(new Uint8Array(buffer));
	      return result;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;

	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;

	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }

	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;

	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;

	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);

	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);

	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };

	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/buildin/module.js */ 284)(module), (function() { return this; }())))

/***/ },
/* 544 */
/*!************************!*\
  !*** ./external/sf.js ***!
  \************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	module.exports = function() {

	var shortDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
	var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	var shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

	function padLeft(str, char, totalWidth) {
	  while (str.length < totalWidth) {
	    str = char + str;
	  }
	  return str;
	}

	function padRight(str, char, totalWidth) {
	  while (str.length < totalWidth) {
	    str = str + char;
	  }
	  return str;
	}

	function formatNumber(num, format) {
	  format = format || "0";
	  
	  // JFogarty - 4/30/2015.
	  if (format === '0') {
	    return num.toString();
	  }

	  //console.log('+++ NUM=', num, ' format=', format);
	  var hex = format.match(/^([xX])([0-9]*)$/);
	  if (hex) {
	    var str = num.toString(16);
	    if (hex[1] == 'x') {
	      str = str.toLowerCase();
	    } else {
	      str = str.toUpperCase();
	    }
	    var width = parseInt(hex[2]);
	    str = padLeft(str, '0', width);
	    return str;
	  }

	  var negative = false;
	  if (num < 0) {
	    num = -num;
	    negative = true;
	  }

	  var addPositiveSign = false;
	  if (format.match(/^\+/)) {
	    format = format.substr(1);
	    addPositiveSign = true;
	  }

	  var formatParts = format.split('.');
	  var formatBeforeDecimal = formatParts[0];
	  var wholeNumber = Math.floor(num);
	  var decimalVal = num - wholeNumber;
	  var result = '';
	  var wholeNumberStr = wholeNumber.toString();
	  var formatIdx, numberIdx;

	  // format whole number part
	  for (formatIdx = formatBeforeDecimal.length - 1, numberIdx = wholeNumberStr.length - 1; numberIdx >= 0 || formatIdx >= 0; formatIdx--) {
	    if (formatIdx < 0 && numberIdx >= 0) {
	      result = wholeNumberStr[numberIdx--] + result;
	      continue;
	    }

	    if (formatBeforeDecimal[formatIdx] == '0' || formatBeforeDecimal[formatIdx] == '#') {
	      if (numberIdx >= 0) {
	        result = wholeNumberStr[numberIdx--] + result;
	      } else {
	        if (formatBeforeDecimal[formatIdx] == '#') {
	          break;
	        }
	        result = '0' + result;
	      }
	      continue;
	    }

	    result = formatBeforeDecimal[formatIdx] + result;
	  }
	  result = result.replace(/^[^0-9]+/, '');

	  // format decimal part
	  if (formatParts.length > 1) {
	    var formatAfterDecimal = formatParts[1];
	    var decimalValStr = decimalVal.toString().substr(2);

	    result += '.';
	    for (formatIdx = 0, numberIdx = 0; formatIdx < formatAfterDecimal.length; formatIdx++) {
	      if (formatAfterDecimal[formatIdx] == '0' || formatAfterDecimal[formatIdx] == '#') {
	        if (numberIdx < decimalValStr.length) {
	          result += decimalValStr[numberIdx++];
	        } else {
	          if (formatAfterDecimal[formatIdx] == '#') {
	            break;
	          }
	          result += '0';
	        }
	      } else {
	        result += formatAfterDecimal[formatIdx];
	      }
	    }
	  }

	  if (result[result.length - 1] == '.') {
	    result = result.substr(0, result.length - 1);
	  }

	  if (negative) {
	    result = '-' + result;
	  }
	  if (!negative && addPositiveSign) {
	    result = '+' + result;
	  }

	  return result;
	}

	function formatTimeSpanPart(timeSpan, format, width) {
	  var formatStr = "{0:";
	  for (var i = 0; i < width; i++) {
	    formatStr += '0';
	  }
	  formatStr += "}";

	  switch (format) {
	  case 'y':
	    return sf(formatStr, timeSpan.years);
	  case 'M':
	    return sf(formatStr, timeSpan.months);
	  case 'd':
	    return sf(formatStr, timeSpan.days);
	  case 'h':
	    return sf(formatStr, timeSpan.hours);
	  case 'm':
	    return sf(formatStr, timeSpan.minutes);
	  case 's':
	    return sf(formatStr, timeSpan.seconds);
	  case 'f':
	    return sf(formatStr, timeSpan.milliseconds);
	  case '^y':
	    return sf(formatStr, timeSpan.totalYears);
	  case '^M':
	    return sf(formatStr, timeSpan.totalMonths);
	  case '^d':
	    return sf(formatStr, timeSpan.totalDays);
	  case '^h':
	    return sf(formatStr, timeSpan.totalHours);
	  case '^m':
	    return sf(formatStr, timeSpan.totalMinutes);
	  case '^s':
	    return sf(formatStr, timeSpan.totalSeconds);
	  case '^f':
	    return sf(formatStr, timeSpan.totalMilliseconds);
	  default:
	    throw new Error("unhandled time span format '" + format + "'");
	  }
	}

	function formatTimeSpan(timespan, format) {
	  if (!format || format === '') {
	    return timespan.toString();
	  }

	  var formats = [
	    'y',
	    'M',
	    'd',
	    'h',
	    'm',
	    's',
	    'f'
	  ];
	  var result = '';
	  var i;
	  var totalCount;
	  while (format.length > 0) {
	    if (format[0] === "'") {
	      var nextTick = format.indexOf("'", 1);
	      result += format.substring(1, nextTick);
	      format = format.substring(nextTick + 1);
	      continue;
	    }

	    if (format.length > 1 && format[0] === '^') {
	      totalCount = true;
	      format = format.substring(1);
	    } else {
	      totalCount = false;
	    }

	    for (i = 0; i < formats.length; i++) {
	      if (format.indexOf(formats[i]) === 0) {
	        var width = 0;
	        while (format.indexOf(formats[i]) === 0) {
	          width++;
	          format = format.substring(formats[i].length);
	        }
	        result += formatTimeSpanPart(timespan, (totalCount ? '^' : '') + formats[i], width);
	        break;
	      }
	    }
	    if (i < formats.length) {
	      continue;
	    }

	    result += format[0];
	    format = format.substring(1);
	  }
	  return result;
	}

	function formatDatePart(date, format) {
	  switch (format) {
	  case 'sd': // Short date - 10/12/2002
	    return sf("{0:M}/{0:d}/{0:yyyy}", date);
	  case 'D': // Long date - December 10, 2002
	    return sf("{0:MMMM} {0:dd}, {0:yyyy}", date);
	  case 't': // Short time - 10:11 PM
	    return sf("{0:hh}:{0:mm} {0:tt}", date);
	  case 'T': // Long time - 10:11:29 PM
	    return sf("{0:hh}:{0:mm}:{0:ss} {0:tt}", date);
	  case 'fdt': // Full date & time - December 10, 2002 10:11 PM
	    return sf("{0:D} {0:t}", date);
	  case 'F': // Full date & time (long) - December 10, 2002 10:11:29 PM
	    return sf("{0:D} {0:T}", date);
	  case 'g': // Default date & time - 10/12/2002 10:11 PM
	    return sf("{0:sd} {0:t}", date);
	  case 'G': // Default date & time (long) - 10/12/2002 10:11:29 PM
	    return sf("{0:sd} {0:T}", date);
	  case 'md': // Month day pattern - December 10
	    return sf("{0:MMMM} {0:dd}", date);
	  case 'r': // RFC1123 date string - Tue, 10 Dec 2002 22:11:29 +0500
	    return sf("{0:ddd}, {0:dd} {0:MMM} {0:yyyy} {0:HH}:{0:mm}:{0:ss} {0:+zzzz}", date);
	  case 's': // Sortable date string - 2002-12-10T22:11:29
	    return sf("{0:yyyy}-{0:MM}-{0:dd}:{0:HH}:{0:mm}:{0:ss}", date);
	  case 'd':
	    return sf("{0:#0}", date.getDate());
	  case 'dd':
	    return sf("{0:00}", date.getDate());
	  case 'ddd':
	    return shortDays[date.getDay()];
	  case 'dddd':
	    return days[date.getDay()];
	  case 'f':
	    return sf("{0:0}", date.getMilliseconds() / 100.0);
	  case 'ff':
	    return sf("{0:00}", date.getMilliseconds() / 10.0);
	  case 'fff':
	    return sf("{0:000}", date.getMilliseconds() / 1.0);
	  case 'h':
	    var hours_h = date.getHours() % 12;
	    return sf("{0:#0}", hours_h == 0 ? 12 : hours_h);
	  case 'hh':
	    var hours_hh = date.getHours() % 12;
	    return sf("{0:00}", hours_hh == 0 ? 12 : hours_hh);
	  case 'H':
	    return sf("{0:#0}", date.getHours());
	  case 'HH':
	    return sf("{0:00}", date.getHours());
	  case 'mm':
	    return sf("{0:00}", date.getMinutes());
	  case 'M':
	    return sf("{0:#0}", date.getMonth() + 1);
	  case 'MM':
	    return sf("{0:00}", date.getMonth() + 1);
	  case 'MMM':
	    return shortMonths[date.getMonth()];
	  case 'MMMM':
	    return months[date.getMonth()];
	  case 'ss':
	    return sf("{0:00}", date.getSeconds());
	  case 'tt':
	    return date.getHours() >= 12 ? 'PM' : 'AM';
	  case 'yy':
	    return getYear(date).toString().substr(2);
	  case 'yyyy':
	    return getYear(date);
	  case 'zz':
	    return sf("{0:00}", Math.floor(date.getTimezoneOffset() / 60));
	  case '+zz':
	    return sf("{0:+00}", Math.floor(date.getTimezoneOffset() / 60));
	  case 'zzz':
	    var wholeTimezoneOffset = Math.floor(date.getTimezoneOffset() / 60);
	    return sf("{0:00}:{1:00}", wholeTimezoneOffset, date.getTimezoneOffset() - (wholeTimezoneOffset * 60));
	  case 'zzzz':
	    var wholeTimezoneOffset = Math.floor(date.getTimezoneOffset() / 60);
	    return sf("{0:00}{1:00}", wholeTimezoneOffset, date.getTimezoneOffset() - (wholeTimezoneOffset * 60));
	  case '+zzzz':
	    var wholeTimezoneOffset = Math.floor(date.getTimezoneOffset() / 60);
	    return sf("{0:+00}{1:00}", wholeTimezoneOffset, date.getTimezoneOffset() - (wholeTimezoneOffset * 60));
	  default:
	    throw new Error("unhandled date format '" + format + "'");
	  }
	}

	function getYear(date) {
	  return date.getYear() + 1900;
	}

	function formatDate(date, format) {
	  if (!format || format === '') {
	    return date;
	  }

	  var formats = [
	    'sd',
	    'fdt',
	    'md',
	    'dddd',
	    'ddd',
	    'dd',
	    'd',
	    'D',
	    'fff',
	    'ff',
	    'f',
	    'F',
	    'g',
	    'G',
	    'hh',
	    'h',
	    'HH',
	    'H',
	    'mm',
	    'MMMM',
	    'MMM',
	    'MM',
	    'M',
	    'r',
	    'ss',
	    's',
	    'tt',
	    't',
	    'T',
	    'yyyy',
	    'yy',
	    '+zzzz',
	    '+zz',
	    'zzzz',
	    'zzz',
	    'zz'
	  ];
	  var result = '';
	  var i;
	  while (format.length > 0) {
	    if (format[0] === "'") {
	      var nextTick = format.indexOf("'", 1);
	      result += format.substring(1, nextTick);
	      format = format.substring(nextTick + 1);
	      continue;
	    }
	    for (i = 0; i < formats.length; i++) {
	      if (format.indexOf(formats[i]) === 0) {
	        result += formatDatePart(date, formats[i]);
	        format = format.substring(formats[i].length);
	        break;
	      }
	    }
	    if (i < formats.length) {
	      continue;
	    }

	    result += format[0];
	    format = format.substring(1);
	  }
	  return result;
	}

	function formatObjectIndent(obj) {
	  if (!obj) {
	    return 'null';
	  }
	  if (typeof(obj) != 'object') {
	    return obj.toString();
	  }
	  var results = '';
	  var keys = Object.keys(obj).sort();
	  for (var i = 0; i < keys.length; i++) {
	    results += keys[i] + ":";
	    var val = obj[keys[i]];
	    if (!val) {
	      results += '\n';
	    }
	    else if (val instanceof Buffer) {
	      var bufferContent = '';
	      for (var bufferIdx = 0; bufferIdx < val.length; bufferIdx++) {
	        if (bufferIdx !== 0) {
	          bufferContent += ', ';
	        }
	        if (bufferIdx >= 10) {
	          bufferContent += '...';
	          break;
	        }
	        bufferContent += val[bufferIdx];
	      }
	      results += ' Buffer[' + bufferContent + '] (length: ' + val.length + ')\n';
	    }
	    else if (val instanceof Date || isTimezoneJsDate(val)) {
	      results += " " + formatDate(val, 'r') + "\n";
	    }
	    else if (typeof(val) === 'string' || typeof(val) === 'number' || typeof(val) === 'boolean') {
	      results += " " + val + "\n";
	    } else {
	      var str = formatObjectIndent(val);
	      results += "\n" + sf.indent(str, {}) + "\n";
	    }
	  }
	  results = results.replace(/\s+$/, '');
	  return results;
	}

	function formatObject(obj, format) {
	  if (!format || format === '') {
	    return obj;
	  }

	  if (format == 'inspect') {
	    return __webpack_require__(/*! util */ 524).inspect(obj);
	  }

	  if (format == 'json') {
	    return JSON.stringify(obj);
	  }

	  if (format == 'indent') {
	    return formatObjectIndent(obj);
	  }

	  throw new Error("unhandled format: " + format);
	}

	function formatError(err, format) {
	  if (!format || format === '') {
	    return err.stack;
	  }

	  if (format == 'message') {
	    return err.message;
	  }

	  return formatObject(err, format);
	}

	function align(str, val) {
	  str = str || '';
	  if (val < 0) {
	    return padRight(str, ' ', Math.abs(val));
	  } else if (val > 0) {
	    return padLeft(str, ' ', val);
	  }
	  return str;
	}

	function splitFieldName(fieldName) {
	  var results = [];
	  var part = '';
	  for (var i = 0; i < fieldName.length;) {
	    if (fieldName[i] == '.') {
	      results.push(part);
	      part = '';
	      i++;
	      continue;
	    }

	    if (fieldName[i] == '[') {
	      results.push(part);
	      part = '[';
	      i++;
	      continue;
	    }

	    part += fieldName[i++];
	  }
	  results.push(part);
	  return results;
	}

	function getValue(args, fieldName) {
	  var fieldIndex = parseInt(fieldName);
	  if (fieldIndex.toString() === fieldName) {
	    return args[fieldIndex + 1];
	  } else {
	    var parts = splitFieldName(fieldName);
	    var root = args[1];
	    for (var i = 0; i < parts.length; i++) {
	      var part = parts[i];

	      if (part.length >= 1 && part[0] == '?') {
	        if (typeof(root) == 'undefined') {
	          return undefined;
	        } else {
	          part = part.substr(1);
	        }
	      }

	      if (part.length >= 1 && part[0] == '[') {
	        part = part.substr(1, part.length - 2);
	        var strMatch = part.match(/^['"](.*)['"]$/);
	        if (strMatch) {
	          root = root[strMatch[1]];
	        }
	        else if (part < 0) {
	          part = -part;
	          root = root[root.length - part];
	        } else {
	          root = root[part];
	        }
	        continue;
	      }

	      root = root[part];
	    }
	    return root;
	  }
	}

	function sf(formatString) {
	  var result = '';
	  for (var i = 0; i < formatString.length;) {
	    if (formatString[i] == '}') {
	      i++;
	      if (formatString[i] == '}') {
	        result += '}';
	        i++;
	        continue;
	      }
	      throw new Error("Unescaped substitution");
	    }
	    if (formatString[i] == '{') {
	      var spec = '';
	      i++;
	      if (formatString[i] == '{') {
	        result += '{';
	        i++;
	        continue;
	      }
	      for (; i < formatString.length;) {
	        if (formatString[i] == '}') {
	          break;
	        }
	        spec += formatString[i++];
	      }
	      if (i == formatString.length) {
	        throw new Error("Unterminated substitution");
	      }
	      i++;
	      var alignTokenLoc = spec.indexOf(',');
	      var specTokenLoc;
	      var alignVal = 0;
	      if (alignTokenLoc > 0) {
	        specTokenLoc = spec.indexOf(':');
	        if (specTokenLoc > 0) {
	          if (alignTokenLoc < specTokenLoc) {
	            alignVal = spec.substr(alignTokenLoc + 1, specTokenLoc - alignTokenLoc - 1);
	            spec = spec.substr(0, alignTokenLoc) + spec.substr(specTokenLoc);
	          }
	        } else {
	          alignVal = spec.substr(alignTokenLoc + 1);
	          spec = spec.substr(0, alignTokenLoc);
	        }
	      }

	      specTokenLoc = spec.indexOf(':');
	      var fieldName, formatSpec;
	      if (specTokenLoc > 0) {
	        fieldName = spec.substr(0, specTokenLoc);
	        formatSpec = spec.substr(specTokenLoc + 1);
	      } else {
	        fieldName = spec;
	        formatSpec = null;
	      }
	      var val = getValue(arguments, fieldName);

	      if (val instanceof sf.TimeSpan) {
	        result += align(formatTimeSpan(val, formatSpec), alignVal);
	      } else if (typeof(val) === 'number') {
	        result += align(formatNumber(val, formatSpec), alignVal);
	      } else if (val instanceof Date || isTimezoneJsDate(val)) {
	        result += align(formatDate(val, formatSpec), alignVal);
	      } else if (val instanceof Error) {
	        result += align(formatError(val, formatSpec), alignVal);
	      } else {
	        result += align(formatObject(val, formatSpec), alignVal);
	      }
	    } else {
	      result += formatString[i++];
	    }
	  }
	  return result;
	}

	function isTimezoneJsDate(date) {
	  return date && date.hasOwnProperty('timezone');
	}

	function getStringLength(str, options) {
	  options.tabWidth = options.tabWidth || 4;

	  var tabStr = padLeft('', ' ', options.tabWidth);
	  str = str.replace(/\t/g, tabStr);
	  return str.length;
	}

	function isSpace(char) {
	  if (char.match(/\s/)) {
	    return true;
	  }
	  return false;
	}

	function isSplitable(char) {
	  if (isSpace(char)) {
	    return true;
	  }
	  if (char == '(' || char == ')' || char == '.' || char == ',' || char == '?' || char == '!') {
	    return false;
	  }
	  if (char >= 'a' && char <= 'z') {
	    return false;
	  }
	  if (char >= 'A' && char <= 'Z') {
	    return false;
	  }
	  if (char >= '0' && char <= '9') {
	    return false;
	  }

	  return true;
	}

	function findLastSplit(line, i) {
	  if (i >= line.length) {
	    i = line.length - 1;
	  }
	  while (i > 0 && !isSplitable(line[i])) {
	    i--;
	  }
	  return i;
	}

	function findNextSplit(line, i) {
	  while (i < line.length && !isSplitable(line[i])) {
	    i++;
	  }
	  return i;
	}

	function wordWrapLine(line, options) {
	  if (line.length === 0) {
	    return '';
	  }

	  options._prefixLength = options._prefixLength || getStringLength(options.prefix, options);

	  if (line.length + options._prefixLength < options.wordwrap) {
	    return options.prefix + line;
	  }

	  var i = options._prefixLength + options.wordwrap;
	  var lastSplit = findLastSplit(line, i);
	  var nextSplit = findNextSplit(line, i);
	  var rest;

	  if (lastSplit === 0 && (nextSplit + options._prefixLength > options.wordwrap)) {
	    rest = wordWrapLine(line.substr(options.wordwrap - options._prefixLength), options);
	    if (rest.length > 0) {
	      rest = '\n' + rest;
	    }
	    return options.prefix + line.substr(0, options.wordwrap - options._prefixLength) + rest;
	  }

	  rest = wordWrapLine(line.substr(lastSplit + 1), options);
	  if (rest.length > 0) {
	    rest = '\n' + rest;
	  }
	  if (!isSpace(line[lastSplit])) {
	    lastSplit++;
	  }
	  return options.prefix + line.substr(0, lastSplit) + rest;
	}

	sf.indent = function(str, options) {
	  options = options || {};
	  options.prefix = 'prefix' in options ? options.prefix : '  ';
	  options.tabWidth = options.tabWidth || 4;

	  options._prefixLength = getStringLength(options.prefix, options);

	  if (options.wordwrap) {
	    var results = '';
	    var lines = str.split('\n');

	    for (var i = 0; i < lines.length; i++) {
	      var line = lines[i];
	      if (line === '') {
	        results += options.prefix + line + '\n';
	      } else {
	        line = wordWrapLine(line, options) + '\n';
	      }
	      results += line;
	    }
	    if (results.length > 0) {
	      results = results.substr(0, results.length - 1);
	    }
	    return results;
	  }

	  str = str.replace(/\n/g, '\n' + options.prefix);
	  str = options.prefix + str;
	  return str;
	};

	/* JFogarty - Removed as inapplicable to mmeddle.
	sf.log = function() {
	  console.log(sf.apply(this, arguments));
	};

	sf.info = function() {
	  console.info(sf.apply(this, arguments));
	};

	sf.warn = function() {
	  console.warn(sf.apply(this, arguments));
	};

	sf.error = function() {
	  console.error(sf.apply(this, arguments));
	};
	*/

	sf.TimeSpan = function(milliseconds, seconds, minutes, hours, days) {
	  var MILLISECONDS = 1;
	  var SECOND = MILLISECONDS * 1000;
	  var MINUTE = SECOND * 60;
	  var HOUR = MINUTE * 60;
	  var DAY = HOUR * 24;
	  var MONTH = DAY * 30;
	  var YEAR = DAY * 365.25;

	  seconds = seconds || 0;
	  minutes = minutes || 0;
	  hours = hours || 0;
	  days = days || 0;
	  var _ms = milliseconds
	              + (SECOND * seconds)
	              + (MINUTE * minutes)
	              + (HOUR * hours)
	    + (DAY * days);

	  var remaining = _ms;

	  var _years = Math.floor(remaining / YEAR);
	  remaining %= YEAR;

	  var _months = Math.floor(remaining / MONTH);
	  remaining %= MONTH;

	  var _days = Math.floor(remaining / DAY);
	  remaining %= DAY;

	  var _hours = Math.floor(remaining / HOUR);
	  remaining %= HOUR;

	  var _minutes = Math.floor(remaining / MINUTE);
	  remaining %= MINUTE;

	  var _seconds = Math.floor(remaining / SECOND);
	  remaining %= SECOND;

	  var _milliseconds = Math.floor(remaining / MILLISECONDS);
	  remaining %= MILLISECONDS;

	  this.__defineGetter__("years", function() {
	    return _years;
	  });
	  this.__defineGetter__("months", function() {
	    return _months;
	  });
	  this.__defineGetter__("days", function() {
	    return _days;
	  });
	  this.__defineGetter__("hours", function() {
	    return _hours;
	  });
	  this.__defineGetter__("minutes", function() {
	    return _minutes;
	  });
	  this.__defineGetter__("seconds", function() {
	    return _seconds;
	  });
	  this.__defineGetter__("milliseconds", function() {
	    return _milliseconds;
	  });

	  this.__defineGetter__("totalYears", function() {
	    return _ms / YEAR;
	  });
	  this.__defineGetter__("totalMonths", function() {
	    return _ms / MONTH;
	  });
	  this.__defineGetter__("totalDays", function() {
	    return _ms / DAY;
	  });
	  this.__defineGetter__("totalHours", function() {
	    return _ms / HOUR;
	  });
	  this.__defineGetter__("totalMinutes", function() {
	    return _ms / MINUTE;
	  });
	  this.__defineGetter__("totalSeconds", function() {
	    return _ms / SECOND;
	  });
	  this.__defineGetter__("totalMilliseconds", function() {
	    return _ms;
	  });

	  this.toString = function() {
	    return _ms;
	  };

	  return this;
	};

	return sf;
	}();

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 545).Buffer))

/***/ },
/* 545 */
/*!*******************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/buffer/index.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = __webpack_require__(/*! base64-js */ 546)
	var ieee754 = __webpack_require__(/*! ieee754 */ 547)
	var isArray = __webpack_require__(/*! is-array */ 548)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  function Foo () {}
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    arr.constructor = Foo
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Foo && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
	    return fromTypedArray(that, object)
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }

	  return res + decodeUtf8Char(tmp)
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start

	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	  var i = 0

	  for (; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (leadSurrogate) {
	        // 2 leads in a row
	        if (codePoint < 0xDC00) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          leadSurrogate = codePoint
	          continue
	        } else {
	          // valid surrogate pair
	          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	          leadSurrogate = null
	        }
	      } else {
	        // no lead yet

	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else {
	          // valid lead
	          leadSurrogate = codePoint
	          continue
	        }
	      }
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	      leadSurrogate = null
	    }

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x200000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/buffer/index.js */ 545).Buffer))

/***/ },
/* 546 */
/*!*********************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/buffer/~/base64-js/lib/b64.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 547 */
/*!*****************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 548 */
/*!******************************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/buffer/~/is-array/index.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ }
/******/ ])
});
;